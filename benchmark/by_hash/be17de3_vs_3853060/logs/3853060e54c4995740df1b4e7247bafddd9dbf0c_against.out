cset: moving following pidspec: 25283
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.844511376 seconds)
loading group "shootout"... done (took 1.133904013 seconds)
loading group "string"... done (took 0.673161072 seconds)
loading group "linalg"... done (took 8.722198007 seconds)
loading group "parallel"... done (took 0.171454634 seconds)
loading group "find"... done (took 2.973279095 seconds)
loading group "tuple"... done (took 2.137250456 seconds)
loading group "union"... done (took 14.995325936 seconds)
loading group "dates"... done (took 1.46116681 seconds)
loading group "micro"... done (took 0.221569552 seconds)
loading group "simd"... done (took 4.838329687 seconds)
loading group "io"... done (took 1.097583123 seconds)
loading group "random"... done (took 9.623862168 seconds)
loading group "problem"... done (took 1.538446525 seconds)
loading group "array"... done (took 25.489769909 seconds)
loading group "misc"... done (took 1.912742365 seconds)
loading group "scalar"... done (took 43.972707395 seconds)
loading group "sort"... done (took 3.369864256 seconds)
loading group "sparse"... done (took 12.870478066 seconds)
loading group "collection"... done (took 18.806453958 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.423460353 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.125104579 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.129253152 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.116214521 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.189069817 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.121190796 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.132523464 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.085851991 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.890031152 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.134559929 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.115124834 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.431639694 seconds)
done (took 5.329483405 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.167089125 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.089165978 seconds)
    (2/2) benchmarking "String"...
    done (took 0.08166465 seconds)
  done (took 1.379064573 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.069626068 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.061477007 seconds)
    (3/3) benchmarking "different"...
    done (took 0.066593291 seconds)
  done (took 1.40565289 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.06496837 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.133488766 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.065388818 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.066686455 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.066526855 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.066112607 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.066520377 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.065956758 seconds)
  done (took 1.742896736 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.070393143 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.067707146 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.065417979 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.06738966 seconds)
  done (took 1.485557225 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.063721255 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.123156757 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.064639676 seconds)
    (4/4) benchmarking "different"...
    done (took 0.064611655 seconds)
  done (took 1.527845556 seconds)
done (took 9.003830246 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.140708285 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.819170163 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.775571756 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.12390302 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.250185594 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.370784152 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.124871206 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.185601363 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.090681645 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.07545696 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.123584983 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.078770699 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.391592576 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.40669358 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.072089131 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.176319061 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.643306097 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.085633243 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.133893358 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.466256656 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.0719175 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.087360468 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.084888487 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071699037 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.318473616 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.156236463 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.663599179 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.095057187 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.06865353 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.094956215 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.070947546 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078864359 seconds)
  done (took 10.64420886 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.090982085 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.09013135 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.068901012 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.124612745 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.094987706 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.070488659 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.075427 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.067487029 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.089371135 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.126092993 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.091629995 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.099477407 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066826265 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.068794656 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.074386234 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.198245852 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.081652454 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081999511 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.06768228 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081237501 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.107018686 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.079149938 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.078905335 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078523967 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.133739598 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.171301572 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.098292702 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.098926385 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066848889 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.079934195 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.115186536 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.12661978 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067670768 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.064939778 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.121176828 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.096045935 seconds)
  done (took 4.663217948 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.889714939 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.095657745 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083356213 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074288532 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.107541943 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.114247413 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.120690069 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.120909035 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.0981226 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068416878 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.159090424 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.678880035 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.16483809 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070484209 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.120806264 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.358936143 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.067212904 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.069060065 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067008734 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071698986 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070719927 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.114035036 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066023011 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.178135074 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.591787415 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.07109449 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070137192 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.096670502 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.065302953 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.140841828 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.093618891 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.070031634 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.544759789 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065322279 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.063619658 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.087841575 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.092774185 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.179294151 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.06672182 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.078768957 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.066682054 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109236566 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080555572 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.519129536 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068237702 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.594925337 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.229624644 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.073915872 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072136553 seconds)
    (49/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.11632628 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.101704219 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.063625221 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067445844 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.930915172 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.147952712 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.066597879 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.276738429 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.06657164 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068205289 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069083493 seconds)
    (60/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.064981577 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.100352078 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.070398871 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068469033 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.07303784 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.096275119 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.876644505 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.089378802 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096715566 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067301642 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.406598176 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.074577876 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069489669 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069653836 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.084630641 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.111927999 seconds)
    (76/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.063719436 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06671179 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065837721 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.113199175 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.095090379 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.0886678 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069946111 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067704295 seconds)
    (84/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.063802791 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.065731251 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.321313697 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.166736831 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065170128 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.067046515 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.475827392 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.06378597 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065762808 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.067625441 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.214357959 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.066181462 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.064326447 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.064832743 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099663558 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.071785053 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.690417902 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.065150723 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.488345958 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069162523 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.103578053 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.118021026 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067467321 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.103114819 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068310243 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065146352 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.073489351 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.06548202 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.064270954 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069537108 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.065357029 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066746858 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.06895854 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068555187 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06728756 seconds)
  done (took 23.282168495 seconds)
done (took 40.695782761 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.334638998 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.079609761 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.079479592 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.079836269 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.080173197 seconds)
  done (took 1.91949943 seconds)
done (took 3.279843122 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.133587279 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.074760647 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.063662248 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.101102 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.06797502 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.1027514 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.109689079 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.105011173 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.068222877 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.068461627 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.068419225 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.106113905 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.105788301 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.068656743 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.09877477 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.104492384 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.068866725 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.064119452 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.068193583 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.068104202 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.068710973 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064177157 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.068934757 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.068849717 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.10042676 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.068525452 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.064226437 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.09930476 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.068666766 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.099374245 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.068962386 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.068924293 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.068623661 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.102697306 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.068895141 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.10068925 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.064753425 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.069029897 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.068952549 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.069030192 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.068768107 seconds)
  done (took 4.61425555 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.069363176 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.080830526 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.083756238 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.06113182 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071570348 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.081786793 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061377528 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.081356989 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.0912428 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082406957 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.202695472 seconds)
  done (took 2.275844581 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.068439924 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082516054 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084202712 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.061362649 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073096946 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082963448 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061416008 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082722084 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.085943011 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084043032 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084001491 seconds)
  done (took 2.145353874 seconds)
done (took 10.3176543 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.095176497 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.064884413 seconds)
  done (took 1.436545418 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.22616741 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.502599589 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.960994244 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.091460728 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.070725404 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.084916682 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.198605787 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.065264911 seconds)
  done (took 7.667182093 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.102096364 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.068174419 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.067661695 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.069219822 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.066790544 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.068930871 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.067991435 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.069268199 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.069748115 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.06714218 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.067462524 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.068751457 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.067839725 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.068636214 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.068817522 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.067558788 seconds)
  done (took 2.521694993 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.10338273 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.068907423 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.099058605 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.061972329 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.071723568 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.062109354 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.070358941 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.072724818 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.069518 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.071498371 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.072025793 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.070451377 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.071113055 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.071003376 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.072537188 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.072590514 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.072463999 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.069999555 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.072653276 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.073695406 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.072930641 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.072940551 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073367707 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.071163929 seconds)
  done (took 3.171611525 seconds)
done (took 16.091193665 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.172305343 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.072934684 seconds)
  done (took 1.532723327 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.065735012 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.066527676 seconds)
  done (took 1.433472809 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.071043959 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.059590913 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.078208357 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.070333432 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.060984489 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.060896296 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.076975707 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.061236529 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.060806052 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.061255098 seconds)
  done (took 1.961335604 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.061068243 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.06786557 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.066358124 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.064399938 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.066912031 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.06245402 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065563164 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.062780673 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.069713018 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.061739357 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.065751582 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.083497079 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.065591381 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.08378804 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.065519367 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.06572582 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.067465149 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.064956643 seconds)
  done (took 2.515660727 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.059207707 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.060485117 seconds)
  done (took 1.429657355 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.062453344 seconds)
    (2/7) benchmarking "second"...
    done (took 0.06097814 seconds)
    (3/7) benchmarking "month"...
    done (took 0.063855517 seconds)
    (4/7) benchmarking "year"...
    done (took 0.063801545 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.061150607 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.060732571 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.061511773 seconds)
  done (took 1.737050898 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.425200339 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.124078767 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.34746177 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.068675928 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.076170309 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.257622334 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.062810598 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.068211951 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.068030525 seconds)
  done (took 2.845368183 seconds)
done (took 14.774586272 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.07980114 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.181268451 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.087054322 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.382015441 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.091890826 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.067255422 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.112470927 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.178699454 seconds)
done (took 2.508252791 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.277111116 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.225146618 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.407558165 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.125284443 seconds)
  done (took 3.071979642 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.329590464 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.077111666 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.076845331 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.06675652 seconds)
  done (took 1.875623151 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.063193224 seconds)
    (2/2) benchmarking "read"...
    done (took 0.069947767 seconds)
  done (took 1.452009342 seconds)
done (took 8.0034719 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.069833037 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.060655135 seconds)
    (3/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.096580466 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.063594645 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.063630564 seconds)
    (6/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.061418876 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.06350798 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.063204066 seconds)
    (9/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.061665618 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.063787351 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.061561213 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.063734879 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.063948078 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063965214 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063551876 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064501081 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064039893 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.063457777 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063445271 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.0637633 seconds)
    (21/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.062930938 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06415864 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.062965887 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.063620479 seconds)
  done (took 2.905838889 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.077249351 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.063595969 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.064524339 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.064800784 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.064957032 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.064730861 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.066323399 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.064997029 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.066854529 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.065079456 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066771463 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.066968039 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.065271538 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067022782 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064642974 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.066986925 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.066368634 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065105614 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064792901 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.066882902 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.066513998 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065579624 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.067320761 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.066620239 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.066852953 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067134276 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065308336 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.065462862 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.066634048 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.067280452 seconds)
  done (took 3.324174748 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.064336712 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.058184458 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.059459119 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.069509103 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.059704482 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.059829109 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.060083922 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.059730745 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.059837112 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.060805502 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.060532431 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.059247366 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.060423156 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.059691358 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.059640358 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.060268899 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.064138673 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.078889194 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.060174312 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.05956257 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.063988169 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.059640986 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.059754801 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.059774073 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.060011992 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.059642069 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.059552584 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.060313982 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.059757117 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.060208808 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.059608027 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.063746574 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.064702502 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.059452638 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.069594433 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.064491465 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.059483035 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.064101527 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.060659655 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.059835675 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.059620176 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.059976803 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.05953666 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060229404 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.069881406 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.059906048 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.060772925 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.060302444 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.060199407 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.059700513 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.059754281 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.061782392 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.068583004 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.061421808 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.059255695 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.060840604 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.059478409 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.060181219 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.059818397 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.059854126 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.059515139 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.06313038 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.061177014 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.060529827 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.079614439 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.061672579 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.069697657 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.059561113 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.060332625 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.063192131 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.060041863 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.07791633 seconds)
  done (took 5.790915802 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.069254909 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.070181487 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.07764968 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.069972542 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063927884 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061247851 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.064765666 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061170076 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070796657 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065294236 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060796543 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064615719 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070636538 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065094563 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062493003 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.070557489 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.064944929 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064011684 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.060600571 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065174387 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062359156 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.06439749 seconds)
  done (took 2.794065877 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.137540289 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064449268 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.105328895 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.069564784 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068151612 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.069748278 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.065570384 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06616772 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065893815 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066185618 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066292394 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066037453 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068213974 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066204188 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066459187 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066169661 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06588338 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066540384 seconds)
  done (took 2.642919606 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.074842944 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.065199901 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089285151 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.065408821 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.065451422 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065232864 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.0692548 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069892982 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.065313675 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.065577499 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.069917006 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.0653759 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.065157829 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065389955 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064908684 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.065236188 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.065035059 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.0652134 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069729982 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.068787084 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068893161 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06942645 seconds)
  done (took 2.835053922 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075528627 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063079666 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.079266857 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.064781687 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.05877291 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.059499087 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.065808776 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.064630073 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.065507256 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.064606219 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064677349 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061324084 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.06643505 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.06480269 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.066790975 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064881386 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064449962 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.064657651 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064332206 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060051713 seconds)
  done (took 2.642739914 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.070367795 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062450939 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.062649308 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.067695165 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.062858133 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.062850072 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.068608728 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.062787858 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.062760045 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.084459939 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.062778909 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.062743431 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.068031037 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.077059082 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.062763571 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.068101641 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.068306246 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.068041252 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.062664291 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062846455 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.084756261 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.063175054 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068249673 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.062683711 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.06279156 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.062552313 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062907097 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.066505048 seconds)
  done (took 3.204191533 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.061960845 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.062063084 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.062865311 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.062710237 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.062733001 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.062715315 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.062652308 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.063091731 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.062492131 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.063097297 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.062505503 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.062801034 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.065914105 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.062516602 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.062765476 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.06303234 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062782471 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.063264819 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06298444 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062881132 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.062542335 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062402091 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.062523883 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.063064772 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062715417 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.062638893 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062754004 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.063350787 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062282637 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.063408315 seconds)
  done (took 3.229941228 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.070754834 seconds)
    (2/2) benchmarking "in"...
    done (took 0.070690639 seconds)
  done (took 1.485097481 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.060061039 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.076303223 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060185196 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.071470839 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068035358 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063190471 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.068872784 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068636761 seconds)
  done (took 1.875606693 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.064894218 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.090054066 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.063421518 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.061756148 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.064710058 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.12764522 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.074299822 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.073796779 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075327269 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.064138242 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.06204465 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.074269728 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.060958873 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.07468869 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062896957 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.07034439 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068971536 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.079228405 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.074913494 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.059684113 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.074182395 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062383157 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.05976972 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.062405255 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.061286007 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.068064219 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.078101699 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.074561046 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070303725 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.058863448 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.080208157 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.060028008 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.061297778 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069905077 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.064407948 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.060189 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.097962368 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.060835113 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.065566005 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.059975843 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073345204 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.081223588 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.074524161 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.078794908 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.062029584 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.062312887 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.060028678 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.062282824 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.064168829 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.070015539 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.060219244 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068203776 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.059776227 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.062097485 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.07136023 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.060799949 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.066143645 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.070018922 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.074139387 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.070921969 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.069533563 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.076694641 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.070043318 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.068939733 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.061705491 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.080574047 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.062472434 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.073874227 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075563374 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.061879378 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074162658 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.060514704 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.059027943 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.06016253 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094674791 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.062776382 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.061717512 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.0609146 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.060749587 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062265618 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.07037529 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066443006 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068174421 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064632985 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077111705 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070324826 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.060662362 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.067666658 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.079220815 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.063958227 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.060680226 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.077720421 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.064075262 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.05975329 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.079689772 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.070399681 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.06231225 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.061749105 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.064381512 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074472254 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.061843144 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.059247015 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069697731 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.062296578 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.063451751 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.065104154 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06854214 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060263318 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.070965707 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.065315298 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.061982753 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.059146408 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.064640931 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.061001689 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.05930683 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069740162 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.060101285 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074926784 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.066748454 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.074682123 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.074893368 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.071674479 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.076016755 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.060044631 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.058733968 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.077847245 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.069307349 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.061495587 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.078120241 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.059397976 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.073363846 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.059645701 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.203075139 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.070664949 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.061296654 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063897343 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.061870442 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.067032609 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.062896831 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063229823 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.067185502 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.07001609 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.073247785 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.06207476 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.069595712 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.060920845 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.077042813 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.070992018 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.065173754 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063907427 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.060966256 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.072725989 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.067026711 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.070324099 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.05996174 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.060863219 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.060547353 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.071726346 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070266865 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.062266061 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.067793811 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.065085921 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.061473267 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.061261329 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.061653918 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.063965773 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064153963 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.061312263 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068561729 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.069372426 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.075224238 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.067840019 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.069469503 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.05935686 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.059733067 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.061750967 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.059810373 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.064694544 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.069708796 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075742529 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.072257643 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.081515938 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.060179535 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.07064256 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.062051708 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.077764445 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.07435864 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.061527141 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065607697 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.059270508 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06220222 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.070080856 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072260483 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.075328906 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076456242 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.065294163 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.065435069 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.060701313 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.075819942 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061545571 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069591244 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.070136586 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.065513179 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.060754749 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.061974915 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070247147 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.065129625 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.060458585 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.076852565 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.067297305 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.06044754 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075111174 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.060602382 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.071406274 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.060137825 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.064193831 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.065777672 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.062704595 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.070703663 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.075966165 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.059505158 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.061287394 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.076698857 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.062914027 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062272632 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.068673572 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.076563495 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.065334555 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.069160477 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071485164 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.070737784 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.065156671 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.070228836 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.061581084 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.070319891 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.063761349 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.072471612 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.060539948 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078995446 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.05952317 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.075944615 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.060909436 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.072177917 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.061425551 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070213706 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.061630877 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.077987146 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.061996855 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.061299539 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.072188849 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.058747849 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.069888788 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.059825537 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.065136979 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.06671877 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.069453246 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.061167389 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069339378 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.061581998 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.068610942 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.064212685 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.068013795 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.069173309 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.064256043 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.059286388 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.068294056 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070438486 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.067993775 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.060749222 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.061416371 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.205689085 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.069957027 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.063463553 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.063186821 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070035358 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.06637898 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.066845144 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062535439 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.062749378 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.062212831 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069413475 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069938417 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079099339 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069382202 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.068377622 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.07000188 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.060042563 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.076281469 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.060360537 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.071318493 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.059808418 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.066788981 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.070036148 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.060748639 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079842136 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.061658666 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.068320144 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073228438 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069068546 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.063868916 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.07930695 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.063853512 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.069474279 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.069876641 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.064834306 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.067214726 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.062408762 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.06933036 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.070025951 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.071218564 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.062057687 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.068492882 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070186917 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062117215 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.068167747 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.06197461 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.068941164 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.062342237 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.059105121 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.065019257 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.072015598 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.065041758 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.065809655 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.061168872 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.059333613 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.060962541 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.06763717 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.065343615 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.069235705 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076400834 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.059211384 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.061710625 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.0600041 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.064115334 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079151669 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.070570814 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.068692389 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.065493462 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.059786942 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.062186725 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.062301474 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.061390413 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.064299198 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.059868715 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.060357685 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071486669 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.062868439 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.064929992 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06092363 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.06197192 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.070568913 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.065718371 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.061388602 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.067343507 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.060544657 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.065400769 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.059793384 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.062239649 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.065019529 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.059988721 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.064251923 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.071044434 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.077406452 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.067066624 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.069610781 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.061854092 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.06868042 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076446137 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.068484531 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061889154 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.070266065 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.059870217 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079612691 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.070177297 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069607802 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070619904 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.061699573 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.07789983 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.064875409 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.071213554 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.076329094 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061805233 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.067653741 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.060311197 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076406843 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.06470248 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.060026194 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.068848927 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068293979 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.06628915 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.07221018 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.060899319 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.068374282 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065003599 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.063223792 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.061702011 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.061319705 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.06874375 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.07624629 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.060519373 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.063737376 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.067872269 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.068314943 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.064601689 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072242055 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.068118649 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060975507 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.061476159 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.21366835 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.061868222 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.074299994 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062270157 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.065850043 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.06599569 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.060542081 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.069104682 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077556833 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.070460087 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.07061761 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.060443158 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.059689277 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.078369631 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.064110899 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.064101945 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.068829496 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.070546015 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07322854 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.070015217 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.077808802 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.061280035 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.066383356 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073420099 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.061363193 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.060462231 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.064090148 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.062360589 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.069832374 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.070334849 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.06799739 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062407162 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.067300772 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.074442373 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.062067369 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.065123512 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.06565534 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.061173432 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.070874852 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.069123803 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.072643911 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.061948223 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.060025658 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.0636266 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.0697036 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.068228945 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.069683074 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061799593 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.066746746 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.074470391 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.067997253 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063526187 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.059780181 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063988982 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.069762496 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.065423894 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.059894796 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.065560397 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.064110063 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.067849014 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.070262138 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.064928533 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.060016867 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.077822199 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.068989321 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.069874675 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.062392126 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.062567241 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061051663 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.060245337 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072098454 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.059931052 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.062186554 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.065212976 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.062464012 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.078637463 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.069159146 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.076654651 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061849904 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.065231907 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.060228405 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070699579 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.06509132 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.061033508 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.07133095 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.05991108 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076779474 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.072815355 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.06674286 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.060087838 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.065590653 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.068662521 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.076056511 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070964669 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.070214478 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064471205 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070546627 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.062730637 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.072110598 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.060387646 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.05958262 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.071448478 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069275413 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.073523125 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.060304508 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.071072564 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.062887064 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.069173287 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.069413902 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.062496186 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062315276 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.062643349 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070335307 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.065074308 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.070545419 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.065445101 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.077877708 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.061675447 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.072182037 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.069915198 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.072419851 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.074586922 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073232157 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.068449091 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.060696018 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067610992 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.068429256 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.061236247 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.06497137 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.063333502 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081550277 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.061585799 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.061228834 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074064036 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.065972527 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.059708258 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.065858601 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.211952098 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.070595375 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.06311323 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072032843 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.066053184 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062102252 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.06553931 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.065445824 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.059416064 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.059830697 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.060215319 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.070792129 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.065192552 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.060774981 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079940135 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.061994759 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.069585026 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072906501 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.067273971 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.061914074 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.059335294 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.061426577 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.073836291 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076371587 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.063820192 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069276654 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.062072582 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.070499422 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.059102947 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.069471841 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.068895536 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069331988 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.059890272 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.06101169 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.07561652 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076235591 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.065272367 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.070275246 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.070373924 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.062194272 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082519227 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.069190125 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061596337 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.072011455 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062828835 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.059609756 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.059158222 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.062056992 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.072003151 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.059900435 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.06289315 seconds)
  done (took 41.860099839 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.096341292 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.060414654 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.060043533 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.059870072 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.068117119 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061467696 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.060202462 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.06117168 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.061392909 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063013604 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.060288275 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063458971 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.066847419 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073638217 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.068886599 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.06432912 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.060001862 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061276668 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.060198196 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061214711 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.066845383 seconds)
  done (took 2.815910274 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.062729446 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.064206754 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.064558857 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.064649938 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063809742 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.060451792 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.064635458 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060249437 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065712984 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060861585 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065172738 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060650283 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.060986167 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.060818813 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060702035 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062263383 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065297875 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064224112 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.06034735 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064262755 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062054145 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.064643477 seconds)
  done (took 2.820848384 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.06080426 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.060740919 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.069399961 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.059343373 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.059806194 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.062938508 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.059225124 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.064158746 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.064324738 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.064118355 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.069740056 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.062165867 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.059402335 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.065873698 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.059308113 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.061242953 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.10436401 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.061372042 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.061123227 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.059554957 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.062742671 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.06989005 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.059810209 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.060498282 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.06492777 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.063327218 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.059739758 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.062669779 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.060795414 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.064551986 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.061625008 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.059753271 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.069142303 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.069169999 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.064548674 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.064498409 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.061712813 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.060640993 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.06005205 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.059504838 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.06836365 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.061575568 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.060086259 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.061458569 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.069240615 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.060177373 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.059834755 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.069042151 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.059356538 seconds)
  done (took 4.558497377 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.06903651 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.113082971 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.065997786 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.093845771 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.073112931 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.066586642 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.066087927 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.094844984 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.061281255 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.062531633 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.074569425 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.074657322 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.062910908 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.064667151 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.06731614 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063352833 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064004098 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062220921 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.066303369 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.062729975 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.066078034 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.066908763 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.073091638 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.073688338 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063982245 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062183995 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.062975172 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.064496658 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.073272975 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.066648661 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.064954483 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065397406 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.073550806 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.066304301 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062986114 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.062743657 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.07460982 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.063246876 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.06310292 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.061210003 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.062733826 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.064812474 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.067270799 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.074696633 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063278035 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.068183042 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063404459 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.061178833 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.073926849 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.063449193 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.067400741 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.075799397 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.06435151 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.063881001 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064725069 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.074624723 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.063857713 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.062192489 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.063531898 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.073805545 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.061534188 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064283384 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.077407108 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.062683217 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.067590998 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.074941672 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.068138348 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064591475 seconds)
  done (took 6.223974378 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.06797655 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.09507582 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.076566379 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.076223618 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.070985127 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.070985482 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.071076966 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.070775659 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.071408738 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074479543 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.071182457 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.106822261 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.067564561 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.072520324 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071236841 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.071385836 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.071334554 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071011032 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.071238573 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071245704 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.070811277 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.07593085 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.070749227 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.076343161 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073359539 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.067055666 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.070885358 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.071097961 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.076680564 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.070823776 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.073490799 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.070922466 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.070993864 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.076649145 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.07388242 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.070919785 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.061319889 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.070913619 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.07129431 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.070815212 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.066957216 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.076754479 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.071041827 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.067122436 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.070992241 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071230709 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.076854819 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.073995928 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.072996524 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.074814734 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.071521957 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.076828323 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070993902 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.071930531 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.076646848 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.079176276 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.077037369 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.076819246 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071683379 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.076735314 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.07692509 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.07939921 seconds)
  done (took 6.03497278 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.071738351 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065070951 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.079322909 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.060271348 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.060195503 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.069914195 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.060394241 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.060171045 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.067582096 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.067203989 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069085105 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.069687159 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072323956 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069411111 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.069855288 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.071649279 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069538162 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.069901184 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067425049 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.06990934 seconds)
  done (took 2.834001538 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.073319067 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.079219334 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.066009925 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.069653084 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.065669 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.069668186 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.065249314 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065830051 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066652475 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066111442 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.071062426 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.071110274 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066203246 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.069864267 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071507607 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.071368354 seconds)
  done (took 2.563647697 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.06240042 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.067900664 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.067009642 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.061526322 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.063392955 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.060774002 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.061497225 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.060179673 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.063190994 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.074807775 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.061332576 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.064402281 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.061428853 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.060364779 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.060682927 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.063899599 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.06262138 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.06106292 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.061642949 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.065565821 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.070041074 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.062049381 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.064003092 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.06095197 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.064203522 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.069900701 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.062808233 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.063581305 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.060864959 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.064268796 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.063302738 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.068047765 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.063670789 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.062294025 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.060192515 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.061232747 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.06200115 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.064278569 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.064152827 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.06196879 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.060335834 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.066822149 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.061901732 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.062430597 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.063242916 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.064172674 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.063217284 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.067515143 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.061709432 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.063572541 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.061460224 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.063436058 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.06165581 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.068451438 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.063810956 seconds)
  done (took 4.949171647 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076375155 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065079661 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.059814794 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.059824168 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.065323984 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.066046956 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066614692 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.065997813 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065979517 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060116803 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066044626 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.065353567 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066210884 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065533919 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065794822 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065579276 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.059884634 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.065592802 seconds)
  done (took 2.642273606 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.065376908 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065836059 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.065120659 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.062121746 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.062129191 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066942953 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.060714029 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.061999339 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061662037 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.062146614 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062598196 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.062016964 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061877025 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.062688301 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.066501048 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062200365 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.061950975 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060352006 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.062154288 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.060420586 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067003692 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060454792 seconds)
  done (took 2.847332894 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.086176992 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.084277628 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.128659367 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.079780969 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.088517611 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.071644047 seconds)
  done (took 2.003270182 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.091908303 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.098152032 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.065241504 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.065377107 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070441963 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068382491 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068341674 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068714322 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072245055 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072554175 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068794242 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072244935 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072288089 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074228833 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070303177 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070510853 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068615895 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068824431 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.065829851 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076613901 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068762081 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072166252 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068652904 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068387164 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068830015 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074092504 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071889765 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072756879 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068636795 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07226308 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071010491 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068865813 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072675175 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072916661 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.065533275 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072739551 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069445483 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076789395 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070670014 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074337209 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.065843896 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070806105 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.0725669 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072158236 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072867434 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06902892 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072383503 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068968626 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069209408 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078366451 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070801754 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074650288 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071214902 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072639448 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072764376 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078369556 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073017736 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075006294 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070902431 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073030494 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074542084 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071253299 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07479287 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073305785 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071088233 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074488645 seconds)
  done (took 6.226879665 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101852381 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.065881359 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068614721 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072653058 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074080778 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068615118 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069225985 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069209011 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069244524 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066233002 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105586021 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069465321 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074749389 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077725045 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069215291 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068711375 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069174856 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074571311 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066574015 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077999201 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069179769 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074093833 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074162842 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074444512 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072988663 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071074577 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06892432 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068932835 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069043306 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068838887 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072251605 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069147872 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074347635 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.065801775 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074226858 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069140194 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069092192 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072089247 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068718757 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070695526 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074226074 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07712284 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068882329 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068721756 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072741928 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068887674 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069322078 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066045554 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068879197 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066037877 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072975291 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073162256 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072866268 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074826498 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068714408 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069270205 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069285903 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068944917 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069225166 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071313267 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074880905 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069080941 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078631521 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069008542 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06929268 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074815218 seconds)
  done (took 6.236035827 seconds)
done (took 128.670533064 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.215585786 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.18758867 seconds)
  done (took 1.857938098 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.072299328 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.165208166 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.072283112 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.072685519 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.106429418 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.105131528 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.074195762 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.070856036 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.074075982 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.071624312 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.138921522 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.074010246 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.070042855 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.071462916 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.071336519 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.071587117 seconds)
  done (took 2.856266235 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.105714781 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.185190585 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.102422487 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.069138043 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.15194898 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.07651434 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.071143613 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.076273678 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.076568873 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.069321112 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.107272117 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.083448289 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.07518819 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.076162167 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.071127731 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.074863717 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.076501557 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.075996969 seconds)
  done (took 3.103369644 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.101044537 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.09061253 seconds)
  done (took 1.674843133 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.152486598 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.103019641 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.142638724 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.34244971 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.134148916 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.136270899 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.139328743 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.1351555 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.112433165 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.132098895 seconds)
  done (took 3.004210786 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.103192989 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.10482127 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.310450246 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.103186764 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.081750861 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.076747789 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.074474075 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.079359579 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.074706683 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.075837197 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.122633429 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.074168807 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.071718105 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.124635113 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.09946008 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.106817589 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.070090626 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.07748493 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.079124952 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.070316773 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.075653299 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.079495207 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.17940287 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.077647405 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.10039809 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.07464601 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.076739009 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.073583582 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.073546113 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.077894162 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.078792888 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.100061611 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.077695656 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.081745498 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.076743761 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.097790735 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.071067691 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.099658402 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.073971593 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.071338388 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.074192067 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.078840755 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.071556026 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.077847763 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.074088446 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.076828351 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.079552417 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.070092276 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.074369494 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.073954669 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.071446089 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.076380732 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.075393646 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.076798315 seconds)
  done (took 6.245055096 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.104869702 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.106060424 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068486158 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.113046932 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.105486437 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069614766 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.104897968 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.100434255 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.108829972 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069179461 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068258373 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068468726 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076195284 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.081103968 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.119924736 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.10570648 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069474374 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069085888 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.107429951 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.107613719 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068301772 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.101807615 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.100088698 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.107833589 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.067510967 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068921995 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.067809072 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.068476694 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074082606 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.074888606 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.068156565 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.07588368 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.085100285 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075091449 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067243536 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067653972 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067908442 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.075743317 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077753343 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076361078 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.074869512 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067758203 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067925397 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.068290267 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068974184 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066980072 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.07433367 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.07601241 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.074701976 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068070527 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.068379391 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.068206511 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.068294126 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075125144 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074246198 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076794841 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075945426 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.067693776 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068132123 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069487495 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077227378 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076219448 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076171033 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069047467 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077100727 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.068357914 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078610071 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.08241925 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.068225439 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068859128 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067886197 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068538175 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068916026 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074693828 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.07487949 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069323141 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068210497 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06836764 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077427388 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074897461 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06832609 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.074122943 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068115727 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068261512 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069024915 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068727663 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.074426328 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.0758347 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069118456 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068134497 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.068299398 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068140692 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.067656096 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.074527607 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075623167 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.075477296 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.074901066 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068670386 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.074989904 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.075184057 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.06818007 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.074145044 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.067905999 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068214924 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06767321 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074315728 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.073078367 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.07530925 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067424394 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066860036 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.07379445 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076316168 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.067828501 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.073201514 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075799295 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.216236886 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.069153646 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.079375149 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069766975 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077036079 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06713648 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077564536 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069016152 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075367281 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068221163 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.067550795 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.068059319 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.074639427 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068772035 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068065703 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068543932 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067958204 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.074806414 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078651899 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069028542 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074554711 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.0747247 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.068773052 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.074192817 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068181514 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.075136135 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068103483 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068194078 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067258507 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077584326 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.06794656 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068096665 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.067729182 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.07614536 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066768879 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076835996 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.07423996 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.0675209 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.081752845 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077102388 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.074314517 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.076929295 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069053761 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.068182174 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067900057 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.070659268 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.073585004 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075337802 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068656379 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068284956 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.073883251 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077817932 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.067871587 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.074240804 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074070295 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.074536826 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.068623346 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.068208702 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078288667 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077318006 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.076503544 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.074455908 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075551618 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.068488225 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074340495 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074757345 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068058008 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.082819807 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068691488 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.079884175 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075536945 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074669131 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075087625 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.076941602 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.07749534 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.077497737 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.080229153 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.068224962 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067873772 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.075286293 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.068196705 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067935418 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.074518034 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.068530863 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068540737 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.08080246 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066657377 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.076935926 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.067735114 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.076173326 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067793274 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068414523 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080365321 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.0690584 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068627953 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074837886 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.068230424 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.074636305 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078212059 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.072323736 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066757194 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068637985 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075407217 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.075885007 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068586724 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068063428 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068557888 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.073578666 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.073143403 seconds)
  done (took 18.280435771 seconds)
done (took 38.518588279 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.169878278 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.113672006 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.213300501 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.202128795 seconds)
  done (took 2.286328544 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.097671439 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.063494248 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.079160758 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.089009135 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.064433877 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.075764464 seconds)
  done (took 2.000987598 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.198485549 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.173576965 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.244564197 seconds)
  done (took 2.140179643 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.362389395 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.149747103 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.217388613 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.504702254 seconds)
  done (took 2.85825187 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.107413417 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.098829616 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.075851156 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.112332058 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.085419831 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.06204276 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.1345172 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.069035973 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.100205874 seconds)
  done (took 2.433109078 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.139799847 seconds)
done (took 13.408892995 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.232555348 seconds)
    (2/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.267917755 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.215293064 seconds)
    (4/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.22180345 seconds)
    (5/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.159611359 seconds)
    (6/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.133216303 seconds)
    (7/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.452462511 seconds)
    (8/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.180596131 seconds)
    (9/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.125862746 seconds)
    (10/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.112189906 seconds)
    (11/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.095058216 seconds)
    (12/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.076658672 seconds)
    (13/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.189757484 seconds)
    (14/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.091728853 seconds)
    (15/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.13509752 seconds)
    (16/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.189621896 seconds)
    (17/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.07542861 seconds)
    (18/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.183833551 seconds)
    (19/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.188887337 seconds)
    (20/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.091669081 seconds)
    (21/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.076253311 seconds)
    (22/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.076914595 seconds)
    (23/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.199910696 seconds)
    (24/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.077460557 seconds)
    (25/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.256131323 seconds)
    (26/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.076480092 seconds)
    (27/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.100148155 seconds)
    (28/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.072887129 seconds)
    (29/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.072289815 seconds)
    (30/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.093898594 seconds)
    (31/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.141645938 seconds)
    (32/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.075738118 seconds)
    (33/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.208851233 seconds)
    (34/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.147299813 seconds)
    (35/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.075638546 seconds)
    (36/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.072708369 seconds)
    (37/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.073729081 seconds)
    (38/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.074291747 seconds)
    (39/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.07613582 seconds)
    (40/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.065185105 seconds)
    (41/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.079156871 seconds)
    (42/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.072778763 seconds)
    (43/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.201420454 seconds)
    (44/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.215784462 seconds)
    (45/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.176929307 seconds)
    (46/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.207268511 seconds)
    (47/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.078465149 seconds)
    (48/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.200186673 seconds)
    (49/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.06785987 seconds)
    (50/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.169848665 seconds)
    (51/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.065374375 seconds)
    (52/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.15687845 seconds)
    (53/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.193939108 seconds)
    (54/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.220315647 seconds)
    (55/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.171226074 seconds)
    (56/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.2013641 seconds)
    (57/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.076712453 seconds)
    (58/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.179523819 seconds)
    (59/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.070246508 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.074474482 seconds)
    (61/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.068359564 seconds)
    (62/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.07298966 seconds)
    (63/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.143372303 seconds)
    (64/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.196022525 seconds)
    (65/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.108179217 seconds)
    (66/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.088723666 seconds)
    (67/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.083676944 seconds)
    (68/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.091236332 seconds)
    (69/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.064203899 seconds)
    (70/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.152191925 seconds)
    (71/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.089359941 seconds)
    (72/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.087228131 seconds)
    (73/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.066471007 seconds)
    (74/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.067213749 seconds)
    (75/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.175756417 seconds)
    (76/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.237030534 seconds)
    (77/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.063020237 seconds)
    (78/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.322117507 seconds)
    (79/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.067002148 seconds)
    (80/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.094900353 seconds)
    (81/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.075655852 seconds)
    (82/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.086957724 seconds)
    (83/341) benchmarking ("sort", Float32, false)...
    done (took 0.141186951 seconds)
    (84/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.07457474 seconds)
    (85/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.074731083 seconds)
    (86/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.166263995 seconds)
    (87/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.227169179 seconds)
    (88/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.066531006 seconds)
    (89/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.067096665 seconds)
    (90/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.07403093 seconds)
    (91/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.148831137 seconds)
    (92/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.090948983 seconds)
    (93/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.143992538 seconds)
    (94/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.066937646 seconds)
    (95/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.072539671 seconds)
    (96/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.065164112 seconds)
    (97/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.07405186 seconds)
    (98/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.072539213 seconds)
    (99/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.185769494 seconds)
    (100/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.064855997 seconds)
    (101/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.071682651 seconds)
    (102/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.198653224 seconds)
    (103/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.134409159 seconds)
    (104/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.076551002 seconds)
    (105/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.087742113 seconds)
    (106/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.066080743 seconds)
    (107/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.065329969 seconds)
    (108/341) benchmarking ("sort", Int8, false)...
    done (took 0.149944111 seconds)
    (109/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.065706509 seconds)
    (110/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.065286562 seconds)
    (111/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.065994766 seconds)
    (112/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.072949634 seconds)
    (113/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.072692405 seconds)
    (114/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.139314587 seconds)
    (115/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.14384747 seconds)
    (116/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.083200845 seconds)
    (117/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.180930627 seconds)
    (118/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.201693801 seconds)
    (119/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.065259877 seconds)
    (120/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.066739455 seconds)
    (121/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.197623234 seconds)
    (122/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.139020349 seconds)
    (123/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.066081197 seconds)
    (124/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.220578159 seconds)
    (125/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.06523458 seconds)
    (126/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.065219842 seconds)
    (127/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.066670179 seconds)
    (128/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.07541315 seconds)
    (129/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.0687453 seconds)
    (130/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.06505875 seconds)
    (131/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.07323013 seconds)
    (132/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.094136511 seconds)
    (133/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.065763458 seconds)
    (134/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.076532125 seconds)
    (135/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.065313888 seconds)
    (136/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.065267831 seconds)
    (137/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.07342165 seconds)
    (138/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.071879831 seconds)
    (139/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.167689926 seconds)
    (140/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.074360205 seconds)
    (141/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.141430329 seconds)
    (142/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.146854329 seconds)
    (143/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.133341314 seconds)
    (144/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.065651374 seconds)
    (145/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.087418241 seconds)
    (146/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.073776219 seconds)
    (147/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.065020082 seconds)
    (148/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.072872044 seconds)
    (149/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.07487172 seconds)
    (150/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.081241259 seconds)
    (151/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.123144294 seconds)
    (152/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.12406938 seconds)
    (153/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.074670187 seconds)
    (154/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.065146351 seconds)
    (155/341) benchmarking ("sort", Bool, false)...
    done (took 0.148241882 seconds)
    (156/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.084183429 seconds)
    (157/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.069872218 seconds)
    (158/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.082311157 seconds)
    (159/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.065806885 seconds)
    (160/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.065241472 seconds)
    (161/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.064919492 seconds)
    (162/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.07248632 seconds)
    (163/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.06537168 seconds)
    (164/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.152595727 seconds)
    (165/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.072671778 seconds)
    (166/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.074633436 seconds)
    (167/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.229963291 seconds)
    (168/341) benchmarking ("sort", Int64, false)...
    done (took 0.066993298 seconds)
    (169/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.066989118 seconds)
    (170/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.152590139 seconds)
    (171/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.067422359 seconds)
    (172/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.065113729 seconds)
    (173/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.236025862 seconds)
    (174/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.065384747 seconds)
    (175/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.063129563 seconds)
    (176/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.065215597 seconds)
    (177/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.154996282 seconds)
    (178/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.151749336 seconds)
    (179/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.072892613 seconds)
    (180/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.141305769 seconds)
    (181/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.064437542 seconds)
    (182/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.081614692 seconds)
    (183/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.137780051 seconds)
    (184/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.064463752 seconds)
    (185/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.089039706 seconds)
    (186/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.073669731 seconds)
    (187/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.090257911 seconds)
    (188/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.079806495 seconds)
    (189/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.064386975 seconds)
    (190/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.062612877 seconds)
    (191/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.292406447 seconds)
    (192/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.070468184 seconds)
    (193/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.067701811 seconds)
    (194/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.06772967 seconds)
    (195/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.068939277 seconds)
    (196/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.066202198 seconds)
    (197/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.077503794 seconds)
    (198/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.181877406 seconds)
    (199/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.148365755 seconds)
    (200/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.068882396 seconds)
    (201/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.068480905 seconds)
    (202/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.06701425 seconds)
    (203/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.066851555 seconds)
    (204/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.142324348 seconds)
    (205/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.074183015 seconds)
    (206/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.065160562 seconds)
    (207/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.065100075 seconds)
    (208/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.088686266 seconds)
    (209/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.079039658 seconds)
    (210/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.064454628 seconds)
    (211/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.200251316 seconds)
    (212/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.066036719 seconds)
    (213/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.063195691 seconds)
    (214/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.071901448 seconds)
    (215/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.143848001 seconds)
    (216/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.065645736 seconds)
    (217/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.073491665 seconds)
    (218/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.072930784 seconds)
    (219/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.083310064 seconds)
    (220/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.065255719 seconds)
    (221/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.07231224 seconds)
    (222/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.08104546 seconds)
    (223/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.164529454 seconds)
    (224/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.072598761 seconds)
    (225/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.064914114 seconds)
    (226/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.064756752 seconds)
    (227/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.066169006 seconds)
    (228/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.067181756 seconds)
    (229/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.065514082 seconds)
    (230/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.082770765 seconds)
    (231/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.065793421 seconds)
    (232/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.086359153 seconds)
    (233/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.071927624 seconds)
    (234/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.07165353 seconds)
    (235/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.076108388 seconds)
    (236/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.065832281 seconds)
    (237/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.077078258 seconds)
    (238/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.075538145 seconds)
    (239/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.068276454 seconds)
    (240/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.066709091 seconds)
    (241/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.164674829 seconds)
    (242/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.065614575 seconds)
    (243/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.087905429 seconds)
    (244/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.073550845 seconds)
    (245/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.073254334 seconds)
    (246/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.065961583 seconds)
    (247/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.072305847 seconds)
    (248/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.065991799 seconds)
    (249/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.084307869 seconds)
    (250/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.072449412 seconds)
    (251/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.069158861 seconds)
    (252/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.069063704 seconds)
    (253/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.066145755 seconds)
    (254/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.06925624 seconds)
    (255/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.07055494 seconds)
    (256/341) benchmarking ("sort", Float64, false)...
    done (took 0.137228594 seconds)
    (257/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.065586507 seconds)
    (258/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.063183186 seconds)
    (259/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.064958952 seconds)
    (260/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.066326246 seconds)
    (261/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.06432696 seconds)
    (262/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.063821636 seconds)
    (263/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.066059897 seconds)
    (264/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.11125034 seconds)
    (265/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.084646827 seconds)
    (266/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.070360117 seconds)
    (267/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.081823847 seconds)
    (268/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.064824433 seconds)
    (269/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.092901413 seconds)
    (270/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.074612299 seconds)
    (271/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.063372687 seconds)
    (272/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.165784187 seconds)
    (273/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.130681657 seconds)
    (274/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.152934208 seconds)
    (275/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.066665604 seconds)
    (276/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.064600589 seconds)
    (277/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.069025528 seconds)
    (278/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.170921208 seconds)
    (279/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.116092328 seconds)
    (280/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.063715165 seconds)
    (281/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.06333738 seconds)
    (282/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.0696345 seconds)
    (283/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.06699643 seconds)
    (284/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.064486391 seconds)
    (285/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.151187102 seconds)
    (286/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.067955048 seconds)
    (287/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.152504162 seconds)
    (288/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.065698881 seconds)
    (289/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.150577415 seconds)
    (290/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.066010818 seconds)
    (291/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.1639962 seconds)
    (292/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.065883502 seconds)
    (293/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.086655107 seconds)
    (294/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.072887473 seconds)
    (295/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.173727927 seconds)
    (296/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.152158455 seconds)
    (297/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.067819115 seconds)
    (298/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.06358472 seconds)
    (299/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.065454888 seconds)
    (300/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.065093256 seconds)
    (301/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.065118338 seconds)
    (302/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.067543376 seconds)
    (303/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.067378389 seconds)
    (304/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.122588305 seconds)
    (305/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.227971593 seconds)
    (306/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.065248232 seconds)
    (307/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.065022966 seconds)
    (308/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.064624503 seconds)
    (309/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.092507535 seconds)
    (310/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.064917502 seconds)
    (311/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.065179542 seconds)
    (312/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.082040982 seconds)
    (313/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.076088747 seconds)
    (314/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.090552757 seconds)
    (315/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.075861151 seconds)
    (316/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.083160539 seconds)
    (317/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.064418575 seconds)
    (318/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.0651718 seconds)
    (319/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.087170911 seconds)
    (320/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.064783355 seconds)
    (321/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.07612133 seconds)
    (322/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.24437179 seconds)
    (323/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.068225496 seconds)
    (324/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.065271434 seconds)
    (325/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.148902175 seconds)
    (326/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.067349681 seconds)
    (327/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.078711634 seconds)
    (328/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.066731359 seconds)
    (329/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.092059421 seconds)
    (330/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.066937209 seconds)
    (331/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.070006866 seconds)
    (332/341) benchmarking ("sort", BigInt, false)...
    done (took 0.267358481 seconds)
    (333/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.065990968 seconds)
    (334/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.068247177 seconds)
    (335/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.064568613 seconds)
    (336/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.091210096 seconds)
    (337/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.074752655 seconds)
    (338/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.065221463 seconds)
    (339/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.073266946 seconds)
    (340/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.065612337 seconds)
    (341/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.065140059 seconds)
  done (took 36.935117824 seconds)
done (took 38.480433676 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.089065174 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.079137722 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.07753603 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.074293424 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.077252957 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.076070038 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.076989656 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.075037426 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.076493375 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.075825182 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.076307085 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.06431191 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.073093394 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.080577885 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.073657079 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.080594588 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.077508394 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.080475359 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.065168612 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.07943097 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.093608012 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.076822843 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.073566248 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.07880222 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.065342797 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.074585139 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089417543 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.086797723 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.072764037 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.074550268 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.072393966 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.084209904 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.072672309 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.071492142 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.075213373 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.071187814 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.074582239 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.072038477 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.089747031 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.071199848 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.065406481 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.07750971 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.07272494 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.073924157 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.073886811 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.077313583 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.070607303 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079435083 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.065089018 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.076698827 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089594767 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.07065157 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.071972644 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.073972077 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.070649445 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.074803365 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.071780873 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.077094979 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.069961516 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.076976929 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.076301664 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.07359536 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.064553712 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.073752588 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.072239605 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.072126497 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.063561396 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070142497 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.064599323 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.06452399 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.063924892 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.073762117 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.07183709 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.069840955 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.063994883 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.064559183 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.064079855 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.076983532 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.070646945 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.074500126 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.065201594 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.070109148 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.07019955 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.065414469 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.07028649 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.076494925 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.064175351 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.065165179 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.063890233 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.079290467 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.070756987 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.064653063 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.076370412 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069960666 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070068109 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.064357259 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.063670051 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069710742 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.072985323 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.065454106 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.063537651 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070198498 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.069753039 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.074330789 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.065124591 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.069934485 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.069815527 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.063433615 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.073713502 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.071942189 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.073999409 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.077951583 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.074056181 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.076993806 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.065122902 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.063864595 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.07457384 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.065694508 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070206776 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.07276507 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.070305565 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.073325733 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.065315338 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.064048959 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070351842 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.071568783 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.065714014 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.06541767 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.065617103 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.074394233 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.072035434 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.064054599 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.065132089 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.073925622 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.074121527 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.064170955 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.063943291 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.074016229 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.065230117 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.070137754 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.070023693 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.072760557 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.063317949 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.064281391 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.063242986 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.064489409 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.063196026 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.069622798 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.069600437 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.064711279 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.072939844 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.221918944 seconds)
done (took 12.72172193 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.066248313 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.109290625 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.080541431 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.082349818 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.078953479 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.066533201 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.070315012 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.085178273 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.069235716 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.090996132 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.093992807 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.087814642 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.097639691 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.063724544 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.065540572 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.066376399 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.063759144 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.07761034 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.083090682 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.089093494 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.102543111 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.065455924 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.082188876 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.086189331 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.080763199 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.084093542 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.06704681 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.066456291 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.068526108 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.084733818 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.091880637 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.065157481 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.066750392 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.084516267 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081397361 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.074065814 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.066451552 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.072060281 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.069330298 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.065438168 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.067519115 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.084355676 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.072807432 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.07310502 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.066732868 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.066679003 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.065721853 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.073070904 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.083841373 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.071584916 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.078133925 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.085619093 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.067719584 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.065999592 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.064689995 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.073360423 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.065859957 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.06627401 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.065894073 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.065676002 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.065932055 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.067776687 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.071555266 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.072002286 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.069604686 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.072190053 seconds)
  done (took 6.57053216 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.080510686 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.091619775 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.080788821 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.081109858 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.064801822 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.065812799 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.065989352 seconds)
  done (took 2.193330461 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.064911457 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.073533679 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.078569509 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.07849344 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.088057753 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.07592714 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.066323441 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.098762668 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.064706275 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.074715575 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.082640534 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.079678179 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.069756078 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.078854488 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.066471371 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.07876344 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.066652814 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.073316029 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.07424122 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.080286596 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07061372 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.096104728 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.079891068 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.066278835 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.080187146 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.073940177 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.06806204 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.066426287 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.06597636 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.065572564 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065558023 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.088462502 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.072504651 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.07866252 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066413504 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.064797574 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.07039784 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066208389 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.070272804 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.075062857 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.069554342 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.065961568 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.066004321 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.065470955 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.066736906 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.070508414 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.066654714 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.065626 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.065013617 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.073518273 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.065125629 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.072549008 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.067979784 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.070825861 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.070488962 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.070252218 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.073068003 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.066256171 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.073428531 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.072214495 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06560372 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.079031878 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.078082422 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.069741397 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.078433746 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.074406182 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.072710773 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.06989551 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.065159669 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.06540128 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.066285992 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.077977844 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.069569704 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.068051451 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.066923131 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.070863853 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.069943787 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.081860365 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.081456522 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.079573543 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.068524416 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.066342221 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.06988877 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.081592835 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071021417 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065513825 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.066896209 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.06522337 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.071004923 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.065985154 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.071168238 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.06593378 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.072935791 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.069204989 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.068528884 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074587869 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.06595729 seconds)
  done (took 8.619688023 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.067358089 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.066823822 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.06598905 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.066774682 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.067454201 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.066895755 seconds)
  done (took 2.09478455 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.087783505 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.066421839 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.078431382 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.066131402 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.08880666 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.073387066 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.073619283 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.068479593 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.083355959 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.077314636 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.073319717 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.07579364 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.076200701 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.068080518 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.072648119 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.067455556 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.072848765 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.06953369 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.076451504 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069209794 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.083608638 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.068139237 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.068612644 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.079203613 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.070089892 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.067395269 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.067474646 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.076663526 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.076477853 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.068591445 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.067714655 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.069674202 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.07530471 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.068537572 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.073278298 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.075339403 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066155881 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.072254778 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068979071 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.069568218 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.075421683 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.068825936 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.068784889 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.072273755 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.068421654 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.0752746 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.072093437 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070576964 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.072849095 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.072085931 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.071775456 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.067046941 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.069564217 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.072110603 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.075286692 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068085016 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.072285891 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.072914131 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.067988864 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.075459821 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.066256049 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.069427903 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.068079059 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.069315525 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.071338725 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.072163536 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.075416615 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.068204718 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.06846815 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.066114726 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.071719457 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.065961071 seconds)
  done (took 6.835326094 seconds)
done (took 27.956594221 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.539146031 seconds)
  done (took 2.173782226 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.603146118 seconds)
  done (took 2.278734991 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.675267897 seconds)
  done (took 10.358454302 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.350854504 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.408546576 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.735889922 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.130404799 seconds)
  done (took 3.352252233 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.754529548 seconds)
  done (took 2.442013831 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.227811706 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.223856613 seconds)
  done (took 2.150996402 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.332536314 seconds)
  done (took 2.011881746 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.149574574 seconds)
  done (took 2.827102067 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.230971605 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.164192548 seconds)
  done (took 2.083890209 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.538716977 seconds)
  done (took 2.221939213 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.285887777 seconds)
  done (took 5.974638311 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.230088268 seconds)
  done (took 1.955061034 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.226934774 seconds)
  done (took 1.915120357 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.027465909 seconds)
  done (took 3.709027534 seconds)
done (took 47.139504896 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.082061021 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.086576449 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.086778288 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082194141 seconds)
  done (took 1.99214788 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.073021495 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.069550455 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.073400235 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.073323807 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.071164132 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.072496662 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.072873114 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.069986544 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.071217534 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.0700391 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.068392751 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.069697665 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.072213848 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.069750366 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.072316831 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.073165645 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.069908701 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.069919164 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.072278042 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.071215019 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.072451014 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.070016987 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.068122299 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.069484322 seconds)
  done (took 3.390736575 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.077009473 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.071644303 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.07486878 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.070764992 seconds)
  done (took 1.984590285 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.074573995 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.075864312 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.085497254 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.090437057 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.075321472 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.076330127 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.083570529 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.084120213 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.064816963 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.087185729 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.067640864 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.06613884 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.065895632 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.085570691 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.08331039 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.061749366 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.063506572 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.076375423 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.075635821 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.078856897 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.068219584 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.065022508 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.075525929 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.07671575 seconds)
  done (took 3.498942766 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.080012997 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.064940509 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.081984732 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.091379509 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.092558805 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.064544672 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.07968298 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.092968267 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.129073519 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.064923216 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.07185355 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.065411304 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.105427418 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.065521065 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.081599384 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.108591336 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.111862594 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.069554708 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.098787883 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.065044971 seconds)
  done (took 3.383626608 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.073944527 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.068767404 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.069699175 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.065430938 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.076406461 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.073253108 seconds)
  done (took 2.132521027 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.067024373 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.06748456 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.069326899 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.071782641 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.067181326 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.067511577 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.066592914 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.065220046 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.065276348 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.066181592 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.066190881 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.067135626 seconds)
  done (took 2.502148755 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.15187784 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.0694126 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.070151582 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.066205962 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.070866337 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.06618655 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.081318555 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.068206379 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.085651838 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.066595125 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.066417272 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.068944029 seconds)
  done (took 2.627976287 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102600907 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.112097177 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146436196 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117415974 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117990396 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096974294 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.126614596 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.095845203 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.159464428 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.137982858 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118548262 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093836828 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086611333 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.068826573 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099771518 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119556945 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.139671575 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072200567 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113890771 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.166575659 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133174622 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.136406017 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.148886983 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117719163 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.090897934 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.149732785 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098221481 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103330125 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125735338 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.127545784 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119977126 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.098353533 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.071666299 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.070519396 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15058761 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.104360113 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121276884 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.093428325 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105987533 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088519645 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108757021 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.069018426 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.087423551 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.114401622 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085403318 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133389466 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.087709893 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116535532 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081998397 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.138399003 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123640693 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098427675 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.084830112 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104429376 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.294734283 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113538168 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.136853308 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109192556 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083260974 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.11961095 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.103049841 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101568355 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10834515 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080002962 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.178321663 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08939087 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.112158293 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11264667 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.094410204 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09507321 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107952662 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.136390892 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12551493 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.126272366 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138874423 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095872658 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123001462 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.10105548 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.130355733 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105730113 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.072933704 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.123000268 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129919647 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09979667 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10204015 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132031138 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092944817 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077460795 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.100355273 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.119345481 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08031467 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.113244111 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080902245 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.109576935 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136039143 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098050399 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113293653 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118792579 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078288395 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157724046 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109608068 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07229209 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.117105741 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113905514 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155512413 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095751746 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.07542814 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.261046642 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102467515 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.149048382 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109349699 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080886728 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111767353 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140549999 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095725717 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.171088483 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096627196 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141478041 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11341637 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.087584344 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075096206 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.090431321 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11317502 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108068185 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113134282 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090442741 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.084243132 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087066809 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113365428 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092508845 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080531803 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.113886043 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.10217535 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.075050512 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089311394 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.080201826 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144380036 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.078206675 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139911162 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127520842 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.078910719 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107187511 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098475749 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109182121 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.098633105 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118321032 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141200025 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.117253361 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.090496391 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.094378574 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109324472 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.14610212 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.128306594 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092894796 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.076594993 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101330163 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113035164 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098914819 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.127584813 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101033428 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109766094 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103745946 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141864732 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14444123 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099448739 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100352361 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105948022 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.284501809 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077807837 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157906938 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105172931 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11971885 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.084941454 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142093351 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.11597494 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090166195 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.087307942 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101418323 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.104903778 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107060461 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144024726 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.095774632 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.072329108 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09318285 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144895765 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076276296 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110744207 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.090678107 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.092888438 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119175576 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.093238022 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081438262 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.067751416 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129223407 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.158967238 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.069972906 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116628959 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.113317066 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104892401 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.122768912 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.069525468 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120403094 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.140217481 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120246972 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140558216 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144795846 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114932775 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116752422 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.115293642 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.106594271 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079543567 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.126465519 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.13616597 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097586003 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093541374 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137248713 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118046671 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.135468679 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.115453543 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113326468 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.103602485 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.27055577 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101653436 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.101962745 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.146685155 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12206429 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.125221046 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085927749 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106802813 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118705012 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134671253 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082091065 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142518853 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.083915611 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118539756 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.077063247 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123665214 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.079476645 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.11207031 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079760016 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100213779 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.068946331 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.073669053 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142115745 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.112315449 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105990977 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101067091 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.139503072 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.13801564 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.080822229 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109006934 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116342083 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102235935 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117320245 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.109934981 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.088926777 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096076558 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.110063006 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.085779132 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.082079779 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.116181882 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095811711 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128631393 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.084471961 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075091295 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143118968 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105894593 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096798126 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078124362 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109512983 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.121867277 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.093522968 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088016403 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116622252 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106078369 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142562718 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.090401248 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.097508509 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.12244704 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079682967 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.091491641 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.06827422 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.08455675 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.239772637 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.126212895 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.074958729 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117683617 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.068884536 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131351357 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086973443 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.093613315 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.102380154 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112281676 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127127716 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09478033 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140998195 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089898904 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119377864 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107994377 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094514194 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088514268 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104046612 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101314588 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.121482905 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.095583478 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123398415 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144786011 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105552747 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.143226695 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092748772 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123279606 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108162985 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.125681441 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113450328 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149096706 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139604704 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113243519 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113187817 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075371173 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095579777 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106246698 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.112779202 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.176507852 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127435871 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.07197636 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107981822 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.094797658 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10977314 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105979361 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083186438 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148589002 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103793595 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.088319448 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11285109 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.090074552 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.103395437 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07547352 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094343152 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.260768922 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093326259 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099796951 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116809815 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.128980874 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11407215 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.144229959 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.099179287 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.092733896 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.118665616 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111102259 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110995995 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085969646 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086611373 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138510633 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.119412729 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.12954386 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.100396319 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110199828 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.111494445 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099622327 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125269811 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108308005 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.127829615 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080380804 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.075817202 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.068159837 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.071726923 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.124308195 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109729051 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113203182 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099759058 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.072250264 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10444002 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107378582 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071732595 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089660036 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095152899 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100085106 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.092178562 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107367593 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.114460304 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.091146009 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105475039 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099000804 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147562634 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.100906567 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089347139 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145077427 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.151125075 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088545663 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094288296 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.071713898 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079433827 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115555488 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151041642 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.151296178 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.077198333 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086249282 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.084594903 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08461652 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.233021935 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.084807045 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.08916613 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104368355 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100345137 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113517804 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105240377 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075324803 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.103213901 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099750054 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09277442 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.104774666 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119317885 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.124937626 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.141662393 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111180046 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107846849 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075847612 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.080191477 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075308662 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079510032 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.101925167 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.078937746 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075869269 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.143876388 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.092082794 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105198551 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109578441 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.088774516 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075705608 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135183215 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.069472607 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13670716 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.071226925 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082601073 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.082657844 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079426824 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094541509 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141657518 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111552815 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114369277 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107806341 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105556635 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142787882 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156504915 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080636839 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.143853941 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075898083 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075886876 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07610834 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115338005 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091218716 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116288481 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143090153 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091835538 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105528359 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077709518 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143998845 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.096666946 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102475802 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085987788 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078136155 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.306129727 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078114334 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.078258839 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089389322 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112629944 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.072517531 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105117047 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085076756 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079780721 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143162438 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.630648948 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090843358 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.075403613 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.095837134 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.142851342 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128599466 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094976525 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108488096 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.118907095 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100385988 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.096252135 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107883932 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.184087675 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073389604 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094923723 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.103944415 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098304113 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102824862 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.09840899 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.085750246 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.093331261 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.0870887 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07981572 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108889848 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089891709 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098374699 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108594841 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083490301 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.088222947 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132339207 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.104547691 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.08246368 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08949898 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.107020675 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088849794 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101105572 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.068185534 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114366118 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091098134 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119185686 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.095574585 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108836233 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.128880622 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090551858 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139251862 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.107899411 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.124738566 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087920363 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.078106029 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126875154 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.08815515 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077068062 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.30978808 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.093525662 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.091544118 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101996352 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.094480047 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111429171 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115456133 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112086361 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097923832 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079214924 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100859471 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.101055879 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085088847 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078247589 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.074738266 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.075986205 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108004365 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085448461 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.083849544 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115243722 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089263373 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.103523543 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.100081625 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.121914658 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083198759 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102116439 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110419296 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093121443 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110805596 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101665291 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.129762423 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.177871069 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127229737 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130437762 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135795699 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.077006998 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.076451969 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.068338393 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116550418 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079547863 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.08974518 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081191847 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136746995 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.081980434 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112658908 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.231988211 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081054846 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094701607 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096157475 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.067670859 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081610096 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106311771 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086795765 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078857029 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117776486 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081602543 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.126399245 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109885244 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098333527 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095975354 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081401173 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11364157 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.104246831 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.127559895 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093708385 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.239496617 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112860345 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102436116 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139739266 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.073591428 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08126298 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130344068 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104799131 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133579037 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080096065 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150342477 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.143588267 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100507012 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134584612 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070781984 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083660277 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089253862 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.127054479 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084830094 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111740918 seconds)
  done (took 68.269052035 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.147300041 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.139475101 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.080118038 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.101736576 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.185037812 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.195570692 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.117617263 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.094195385 seconds)
  done (took 2.925281868 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.066237145 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.080400079 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.078602671 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.206229672 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.096570371 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.068536446 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.072846442 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.081384368 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.066846537 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.067072119 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.101268545 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.067230538 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.067402694 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.375315931 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.066099 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.071903245 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.066699 seconds)
  done (took 3.541580912 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.332894623 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.391194495 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.245814087 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.593477433 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.138706933 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.482584513 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.074418074 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.081662555 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.566714453 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.368451176 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.128812875 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.088208556 seconds)
  done (took 18.344903294 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.073941745 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.078465165 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.078403524 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.074974288 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.07407804 seconds)
  done (took 2.22601007 seconds)
done (took 118.527694824 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.081101657 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.173115818 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.067783699 seconds)
  done (took 2.121172337 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.080195222 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.079004374 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.079769685 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.07817411 seconds)
  done (took 2.174939386 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.072488503 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.075589702 seconds)
  done (took 1.997589957 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.223429987 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.178094652 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.09161259 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.079769041 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.078492658 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.079978092 seconds)
  done (took 2.096928564 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.069700806 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.070876786 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.071744764 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.071868797 seconds)
  done (took 2.129794352 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.066316151 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.0642484 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.06647538 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.069679147 seconds)
  done (took 2.112771889 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.082745281 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.086185007 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.114217287 seconds)
  done (took 2.128231456 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.081441506 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.080818108 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.076032467 seconds)
  done (took 2.087929792 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.107127541 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.094485371 seconds)
  done (took 2.045173367 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.077831104 seconds)
  done (took 1.927724398 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.087861959 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.095445756 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.137904847 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.104771517 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.138191479 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.123960225 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.074639848 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.075669519 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.071162969 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.070093897 seconds)
  done (took 2.824663517 seconds)
done (took 26.069111799 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.076791036 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.365949691 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.3598863 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.087797829 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.672539929 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.357550973 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.004641788 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092346855 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.102291636 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.06835373 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086202979 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.648817787 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.998100821 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.327864616 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.979646823 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.324550647 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.652490423 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068686521 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067537271 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068352887 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.989334587 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.067948887 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068745924 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068831353 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.650037204 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.375653997 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069189487 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.324033776 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.06804781 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072201951 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.357601656 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069398949 seconds)
  done (took 16.414581156 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.067930477 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.120504795 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.070528358 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.082458326 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.070612881 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.069768286 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.071249721 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.06882026 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.11288442 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068916448 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086230249 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.067746425 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.072472673 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.069889414 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088482268 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068150686 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.070739172 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.072060425 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067934052 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069089861 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087117839 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.067778848 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068569171 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068492909 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.068568063 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.081747934 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069534057 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069492704 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.0685957 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.07226068 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073108988 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069817986 seconds)
  done (took 4.268389176 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.118606626 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.124777862 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.072607589 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.109175653 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.118533601 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.069662133 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.151453017 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092681041 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.116632528 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068979005 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086579651 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.06866044 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.104770884 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.069933419 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088786436 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068580581 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.07147678 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068763808 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068354709 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067937588 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.084783792 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066270168 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068003608 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068824463 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.06886731 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083986891 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.06944852 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068516478 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068758335 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072753771 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073789005 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070079178 seconds)
  done (took 4.541163995 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.067459811 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.069185817 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.077809659 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.078721285 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.064393759 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.068078813 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.069317057 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.066450934 seconds)
  done (took 2.433267429 seconds)
done (took 29.520539821 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.076949175 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.067368377 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.070515341 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.087146889 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.07334904 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.070048108 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.064098607 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.073956854 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.070753747 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.071032179 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.07267699 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.066764072 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.069853572 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.064222794 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.07178717 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.065304542 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.072021827 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.069446141 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.070153143 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.071622027 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.067564085 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.071150339 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.074139382 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.070260884 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.070387815 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.070473764 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.07458537 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.071223807 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.065850441 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.068205552 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.068005675 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.081353885 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.071986565 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.072076305 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.065504812 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.065523785 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.069632354 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.067892906 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.072145588 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.074783546 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.067871403 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.074771943 seconds)
  done (took 4.809063389 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.086476713 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.092118065 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.084842833 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.081916567 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.108209833 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.08116835 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.091377586 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.078960372 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.076951909 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.091126581 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.073627083 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.078821525 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.080571329 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.075386833 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.078264103 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.074652158 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.079325604 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.073035127 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.077927365 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.077808014 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.091456138 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.071261179 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.078768579 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.079349292 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.073145398 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.078896651 seconds)
  done (took 3.992727531 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.070484952 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.088019253 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.092008496 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.141627452 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.109928452 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.08224112 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.082025949 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.096612632 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.100560279 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.067740971 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.071723714 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.094660226 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.09701237 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.074614058 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.106284097 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.085974245 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.080023853 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.069257606 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.074536974 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.102971447 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.090622858 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.086758613 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.100379582 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.087878026 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.067164659 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.076539576 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.074692875 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.083984352 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.075166979 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.080449415 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.071805706 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.070874504 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.068336342 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.080482558 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.075041202 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.065228367 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.08962297 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.080940896 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.083480367 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.10653111 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.077772543 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.069120374 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.0982507 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.133900836 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.06717497 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.070257343 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.071094185 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.080456268 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.069320595 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097694843 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.086639815 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.067140247 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.086662424 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.06898839 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.068508486 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.084462121 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.06905495 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.069078862 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.079448224 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.1156645 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.088335255 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.07291518 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.089117605 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.066843592 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.07903943 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.068211511 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.068768027 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.065980634 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.103313713 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.074537749 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.120448783 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.067950066 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.064898399 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.080018986 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.079423089 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.074170596 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.066636624 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.087820452 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079908143 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.071104091 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.079476038 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.06985106 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.070219092 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.103112783 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.06590242 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.065131387 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.064912963 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.069691379 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.070315338 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.067485762 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.080978113 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.066925377 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.07083341 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.082994115 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.067344683 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.067888003 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.070236616 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.068563714 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.066392326 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.078543598 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.071335783 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.069207664 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.079814679 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.068180374 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.070531023 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.083140204 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.077180849 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.066862166 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.068395433 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.0696744 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.069334232 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.071849945 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.070423083 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.069219496 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.074492611 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.07501109 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.07356653 seconds)
  done (took 11.155734879 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.160781058 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.154172789 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.068817771 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.148965216 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.076297817 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.072164362 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.150020759 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.08808457 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.067857294 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.068782279 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.067458051 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.096685771 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.091680132 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.105464665 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.072836518 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.068174389 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.093390093 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.101390523 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.152357522 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.146405129 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.091542462 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.076081021 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.070824509 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.069618029 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.069306334 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.076853865 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.08676361 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.076719192 seconds)
  done (took 4.586055636 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.073465617 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.081584585 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.070363545 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.09004361 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.084183529 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.06645861 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.069197598 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.069222452 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.084941352 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.074759928 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.06773287 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.072374389 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.071553124 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.068412737 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.06842588 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.07444301 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.074418562 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.066754886 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.071612681 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.072583415 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.078424163 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.093602039 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.07203256 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.068235693 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.070265112 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.067875981 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.075508306 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.077700937 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.067509052 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.09834195 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.065043197 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.072282582 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.082406213 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.069250803 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.067476208 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.068488405 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.067625115 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.067976291 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.068363362 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.066441681 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.065412224 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.073136457 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.066264572 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.074157105 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.081695378 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.076099795 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.068940121 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.073310977 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.070189583 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.064416294 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.071707512 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.07127105 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.070817377 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.075991403 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.071370338 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.070375842 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.068895492 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.099421449 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.073991187 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.069053739 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.067345859 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.066202536 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.069303325 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.076476582 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.084449679 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.069337788 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.066190211 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.067645137 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.072933554 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.081747908 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.067239697 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.073208556 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.064702237 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.067921836 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.070483746 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.070649354 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.069343286 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.066204009 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.067544638 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.068228082 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.068298811 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.067529513 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.067625683 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.070364583 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.065791167 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.06635054 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.068254444 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.069303523 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.074423241 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.066887313 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.071028288 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.06961948 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.066991779 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.070427083 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.073568444 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.070772462 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.08790996 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.076915807 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.068650427 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.066084138 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.082736925 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.06981558 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.066748524 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.073765986 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.07233909 seconds)
  done (took 9.480523591 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.089155097 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.067869357 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.086578181 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.094478839 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.078030944 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.072987019 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.081603557 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.068458245 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.083879181 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.067296682 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.076886721 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.066022403 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.081216152 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.07717987 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.069508898 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.078072142 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.070292544 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.088326737 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.082608935 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.066171052 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.076619385 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.080104945 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.08018695 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.086087266 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.08550728 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.086458506 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.080301331 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.070027948 seconds)
  done (took 4.114148242 seconds)
done (took 40.001333242 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.930713772 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.174973911 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.93938275 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.22803067 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.992951495 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.07236366 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.064552599 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.933091323 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.087121873 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.965092033 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.244344111 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.290614712 seconds)
done (took 68.86022495 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.998125869 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.079140684 seconds)
    (2/2) benchmarking "String"...
    done (took 2.147217368 seconds)
  done (took 6.096847344 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.536645866 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.934710654 seconds)
    (3/3) benchmarking "different"...
    done (took 1.982826909 seconds)
  done (took 8.323555588 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.016028717 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.563840619 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.195341355 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.934558015 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.940182623 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.326909829 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.77028263 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.442534761 seconds)
  done (took 33.046490469 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.26991748 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.197943789 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.699188864 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.73310236 seconds)
  done (took 16.824632268 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.538806488 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.196868111 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.197233124 seconds)
    (4/4) benchmarking "different"...
    done (took 2.193082669 seconds)
  done (took 11.05931059 seconds)
done (took 87.338772136 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.938467679 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.298993058 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.953394216 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.091235736 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.963985394 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.967255553 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.950581629 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.941771147 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.937706993 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.936961441 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.3558605 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.936451897 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.948041397 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.974620194 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.936684231 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.992733429 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.283428673 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.956697076 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.981465803 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.470027936 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.444211513 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.951433128 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.950924341 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.992223317 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.013117253 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.956723235 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.49081889 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.952055686 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.550130465 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.943941577 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.100465574 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.942714362 seconds)
  done (took 209.97799056 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.936344622 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.756553669 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.903692411 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.98084516 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.250166709 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.128371046 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.078994569 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.325159802 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.939806873 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.96608261 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.085081412 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.937736086 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.11451592 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.8723591 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.93354247 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.969340032 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.094558327 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.116100723 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.936849539 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.125372222 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.961059179 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.961950434 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.887007699 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.053972936 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.953263297 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.969635582 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.952941965 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.942022539 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.126333131 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.051152109 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.944360691 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.94444535 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.147804255 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.81479441 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.94872267 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.947348988 seconds)
  done (took 174.932557732 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.1231818 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.951534972 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.008292429 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.07811363 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.693679393 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.658775433 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.941564033 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.941432331 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.94247651 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.949519608 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.945351149 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.010905135 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.43290944 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.963074772 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.941430371 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.939652269 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.225820978 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.943589634 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.938612512 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.938775818 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.00331771 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.311187342 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.075174647 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.943752338 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.951000741 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.074417778 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.950782108 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.939041409 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.07326214 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.942770456 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.01665723 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.075059304 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.951872843 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.020596639 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.946480374 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.419192257 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.944426505 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.939967479 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.940633854 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.00245921 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.940893126 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.037077337 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.034122209 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.940494432 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.95179401 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.135204141 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.621087311 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.942298508 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.940319012 seconds)
    (49/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.939410422 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.939843353 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.939456669 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.941321753 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.440767626 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.945126455 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.965246592 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.542833653 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.946079988 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.943260491 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.941035236 seconds)
    (60/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.939937817 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.940143987 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.941332218 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.9472835 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.978871743 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.736339162 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.987810994 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.331220842 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.742405899 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.94625273 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.852589559 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.003453083 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.942600838 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.019739545 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.941072833 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.940833278 seconds)
    (76/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.940929929 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.940724614 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.940578098 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.034584308 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.026296184 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.942015202 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.076691457 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.947428133 seconds)
    (84/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.941135744 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.941181251 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.971171546 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.283393099 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.944174913 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.953349822 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.999092406 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.942175821 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.941640135 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.949159473 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.030117901 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.94341213 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.941501206 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.941844523 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.031984419 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.943057984 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.088689822 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.165532508 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.013878891 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.184999886 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.156802656 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.944685316 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.942492929 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.957109229 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.94374747 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.942536813 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.952751277 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.943027877 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.942099864 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.943707088 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.9430443 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.942532978 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.944503545 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.955812298 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.942637125 seconds)
  done (took 427.485836862 seconds)
done (took 816.445543053 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.657192542 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.717905704 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.566306145 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.602000941 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.571013005 seconds)
  done (took 14.994643045 seconds)
done (took 16.874299389 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.975717589 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.960060387 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.948586986 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.008979019 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.968726432 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.955991628 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.989785802 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.992068578 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.974041802 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.956134001 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.005762684 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.960892124 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.97657099 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.979610239 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.030839956 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.985580358 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.961418395 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.953026089 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.012878374 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.961033542 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.961839804 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.957495983 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.957633345 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.008188097 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.041302639 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.968681261 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.956793736 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.005529323 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.969461434 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.003783373 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.016615463 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.979379943 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.992002553 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.032749949 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.019370102 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.038779911 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.96799263 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.031616699 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.965802377 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.044151627 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.015984454 seconds)
  done (took 83.373246658 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.954092143 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.089446655 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.169062177 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.984229295 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.951762109 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.165100685 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.011086725 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.080866776 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.083100828 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.16608218 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.17646105 seconds)
  done (took 24.716576725 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.95114804 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.089505558 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.166276846 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.988022488 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.975317072 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.169778549 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.015821292 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.098439197 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.088907903 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.170987223 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.185437648 seconds)
  done (took 24.789736775 seconds)
done (took 134.759854792 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.323895119 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.170412683 seconds)
  done (took 6.374482792 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.946974259 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.963401328 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.101051861 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.946930778 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.945719129 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.946791857 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.946413317 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.946669727 seconds)
  done (took 17.623203225 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.943915182 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.943722404 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.943841636 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.943488752 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.944544426 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.943282565 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.942926854 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.942395684 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.942740454 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.94290381 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.942634961 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.943681367 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.942380455 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.943114173 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.942666214 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.937550802 seconds)
  done (took 32.967256497 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.938637422 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.93873878 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.939618142 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.938695454 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.937683937 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.939038014 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.940240801 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.938861848 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.939091238 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.937295634 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.938673287 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.937243632 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.938598099 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.938138115 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.938583172 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.937441116 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.938466679 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.938939399 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.939716272 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.93818661 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.938252913 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.937783785 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.94274778 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.938022139 seconds)
  done (took 48.401817364 seconds)
done (took 107.255828922 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.179883065 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.581386242 seconds)
  done (took 8.633200266 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.941410193 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.938697092 seconds)
  done (took 5.826337786 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.938499011 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.938656967 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.938493542 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.938761243 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.939123974 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.940127899 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.937568752 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.938090995 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.938036563 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.938013822 seconds)
  done (took 21.257386838 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.935653571 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.935910492 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.935838005 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.936712031 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.936141979 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.936288828 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.936005124 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.935450642 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.936365728 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.935871782 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.936085456 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.935942436 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.934936424 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.935301582 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.935395827 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.936429601 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.935460619 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.935628205 seconds)
  done (took 36.71903255 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.935148558 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.936122972 seconds)
  done (took 5.740190179 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.935209058 seconds)
    (2/7) benchmarking "second"...
    done (took 1.935356215 seconds)
    (3/7) benchmarking "month"...
    done (took 1.935883033 seconds)
    (4/7) benchmarking "year"...
    done (took 1.935733464 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.935406387 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.934879426 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.935581938 seconds)
  done (took 15.41707344 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.937199098 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.099585158 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.151462948 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.530646441 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.935873016 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.938169184 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.820114534 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.93884434 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.939538336 seconds)
  done (took 21.160891166 seconds)
done (took 116.628362241 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.785512969 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.934921451 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.237174375 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.016099814 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.008563698 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.230072544 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.954270734 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.480855656 seconds)
done (took 43.517470465 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.041982753 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.933177823 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.966518342 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.965913193 seconds)
  done (took 22.735283593 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.935206759 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.268164015 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.961357384 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.935290769 seconds)
  done (took 22.983254689 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.315628355 seconds)
    (2/2) benchmarking "read"...
    done (took 2.293107029 seconds)
  done (took 6.482117975 seconds)
done (took 61.114834466 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.934571239 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.934663134 seconds)
    (3/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.932152639 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 1.928486732 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.927344778 seconds)
    (6/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.928049532 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 1.927958528 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.929740652 seconds)
    (9/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.9266735 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.92687344 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.92637698 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 1.926516092 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 1.92813912 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.925682629 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.925194481 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.925722282 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.925946151 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.926948595 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.925367553 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.925467097 seconds)
    (21/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.925560857 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.924660914 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.92606538 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.923980727 seconds)
  done (took 48.126760872 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.924636751 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.925042505 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.924454908 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.925292295 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.924161724 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.924407581 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.924606231 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.923978947 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.926545393 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.922757333 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.923309341 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.923037075 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.922771755 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.924654725 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.922632563 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.9226719 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.923407552 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.922467102 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.924515811 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.922582879 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.922218416 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.923116124 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.923429514 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.923151987 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.923421535 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.922983584 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.923226902 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.923123743 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.923222422 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.923266169 seconds)
  done (took 59.56888015 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.923068285 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.92259984 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.922631181 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.922707086 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.922416446 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.922035284 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.922528611 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.922665493 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.922291015 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.922220611 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.922142765 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.922688053 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.923529121 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.923560115 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.923063234 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.922015076 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.922102858 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.922101066 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.922709716 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.921910752 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.922121935 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.922099459 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.922557104 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.922516087 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.922141223 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.92319613 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.922748193 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.922607504 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.922196047 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.924735922 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.922459425 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.921827994 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.922610057 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.921474341 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.923758898 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.921767497 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.921419661 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.920862598 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.921395537 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.923201299 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.921954062 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.921358731 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.921222951 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.921444376 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.921709256 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.922393895 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.921572218 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.921770059 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.92250981 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.92198971 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.92134512 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.921173812 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.920571275 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.921239157 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.921426891 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.921828977 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.920794427 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.921090039 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.921233002 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.921422456 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.921820898 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.920921963 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.921227984 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.921179697 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.921511626 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.921890396 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.919537117 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.921176964 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.920656435 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.923783771 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.920976917 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.921111654 seconds)
  done (took 140.24381876 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.920556534 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.920818595 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.919937498 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.921421961 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.920603558 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.920567376 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.920486638 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.92015828 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.921959848 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.920796442 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.920001355 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.920188964 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.920496631 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.921931727 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.920798312 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.92019657 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.920330033 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.920776873 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.921387713 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.920518974 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.919797604 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.920623233 seconds)
  done (took 44.10991992 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.920130983 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.921029632 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.920954184 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.920501152 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.920047746 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.921059731 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.920534428 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.920166633 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.920318887 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.921036319 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.919944211 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.921873998 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.920304349 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.919914293 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.919822393 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.9198188 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.920922104 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.920150825 seconds)
  done (took 36.423560809 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.920384967 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.920614818 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.920703855 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.920212014 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.919792705 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.92005111 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.919839968 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.919885128 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.921440983 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.919463406 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.919110058 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.919650573 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.92068055 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.920702095 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.919941105 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.920971312 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.920133889 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.919837936 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.920675442 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.919681924 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.920177173 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.919136912 seconds)
  done (took 44.0983028 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.920991336 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.919540051 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.920622412 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.919624615 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.920107589 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.91920472 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.920839953 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.919184586 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.919508973 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.920551123 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.91976267 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.921275448 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.919567032 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.920187543 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.919910848 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.920796055 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.921494899 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.920552064 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.919993486 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.920945031 seconds)
  done (took 40.259539858 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.92206654 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.921242366 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.921184835 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.921575297 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.921423047 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.922199977 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.922536703 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.920896657 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.921445621 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.921859536 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.922020159 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.922645999 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.921057709 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.921807383 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.921415133 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.922168268 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.923080519 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.922159673 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.922068034 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.921837357 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.922772437 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.923241956 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.922654544 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.922444331 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.922381126 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.922749032 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.924066504 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.922434422 seconds)
  done (took 55.674506533 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.921856992 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.921668171 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.922915397 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.921652983 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.921963127 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.922390373 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.923042481 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.921504518 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.923441009 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.922027599 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.921502263 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.922532389 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.922812306 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.922810429 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.922128124 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.922672857 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.922585709 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.922617662 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.923127467 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.922964429 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.923048289 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.923197295 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.92302059 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.924182104 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.92321701 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.923277953 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.923771863 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.924009568 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.924321217 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.922628138 seconds)
  done (took 59.54013065 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.941516543 seconds)
    (2/2) benchmarking "in"...
    done (took 1.940985856 seconds)
  done (took 5.739987259 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.923712204 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.923230073 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.923107627 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.923625073 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.924173073 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.925058135 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.923258074 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.923207102 seconds)
  done (took 17.247059755 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.924499553 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.928929115 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.92325689 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.924464167 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.925234749 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.931706693 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.925717025 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.925517239 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.925918214 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.92588382 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.927712828 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.927115489 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.932634768 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.929383229 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.925099887 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.9254985 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.925607751 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.92800082 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.926339937 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.925514129 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.928142704 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.925282722 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.92553986 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.925886765 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.924803551 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.927490771 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.934001029 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.927551137 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.926891909 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.925429673 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.931550919 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.924258882 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.926576272 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.926919833 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.925611404 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.926499667 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.932804846 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.927579856 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.927060517 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.92577912 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.928210555 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.928659903 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.92962634 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.934797532 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.927671033 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.926301881 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.926528415 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.925938665 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.927343102 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.929444755 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.931946219 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.926897924 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.926297699 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.928345062 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.929356334 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.926993525 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.927713665 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.928988422 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.933248743 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.933360962 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.930146599 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.944515842 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.934059955 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.929195672 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.928279348 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.93625802 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.946612134 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.929446392 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.928739219 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.928092729 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.935653454 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.927831186 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.927552403 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.928270422 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.94114562 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.934461672 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.928178961 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.92798067 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.927651863 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.929315073 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.929484304 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.927943252 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.929120501 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.928570863 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.93810947 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 1.948383903 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.928840515 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.929104212 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.931235479 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.930161892 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.93175365 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.931160508 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.928668546 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.928936129 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.931181481 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.931055344 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.92924264 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.92937598 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.928150605 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.937210084 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.929344157 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.928674543 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.932302513 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.935351268 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.929156383 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.930865209 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.930142429 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.929768255 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.93679218 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.929395519 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.930600419 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.929660207 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.929806784 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.933112443 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.929757774 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.934604746 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.936143963 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.936914807 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.931530754 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.933903667 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.935280967 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.931804481 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.938851439 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 1.94918542 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.929585108 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.933543258 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.934987336 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.939793347 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.934174163 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.930716529 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.932334492 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.931009342 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.929884354 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.931957826 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.930656281 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.930936867 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.931332972 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.930785535 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.930165203 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.93146664 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.93405597 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.933699072 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.933064605 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.931487636 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.933787768 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.930835695 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.934306897 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.937828315 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.931633156 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.931817983 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.931435266 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.935998475 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.932595556 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.93208217 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.931298492 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.931135303 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.931083297 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.933751189 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.933802103 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.931395024 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.930580207 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.932433682 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.936171857 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.931097452 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.932224208 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.932097483 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.932404216 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.933173417 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.932565441 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.932928351 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.934384831 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.932316654 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.936851994 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.931762056 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.931537651 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.932328706 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.931900899 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.932623439 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.934903445 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.94127781 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.935626849 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.938992492 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.933134892 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.939635085 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.932858092 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.93468083 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.933455243 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.93198187 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.933078068 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.932507463 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.932977958 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.936350642 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.950981177 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.941672314 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.935189367 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.934801851 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.937514625 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.935102765 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.938985124 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.933250142 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.933995289 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.935576382 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.934278492 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.934374545 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.932961994 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.936700534 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.933868581 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.933467087 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.938082029 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.934605776 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.933349811 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.934458394 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.933627624 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.938142872 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.933679175 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.933695761 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.93390736 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.936325944 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.941610511 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.937198223 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.934088813 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.934954001 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.937659748 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.934914234 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.935013328 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.935847779 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.938135752 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.933553759 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.935187713 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.942907192 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.935566769 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.934921378 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.935168698 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.934915554 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.936902184 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.934370724 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.937658243 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.941017713 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.937854756 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.936220059 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.940210805 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.935174164 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.936777948 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.935372612 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.938328383 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.935291733 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.937271447 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.935858956 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.935701167 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.942719135 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.936718111 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.936781632 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.936037132 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.938506229 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.936860093 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.939743837 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.935994332 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.938751468 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.942394867 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.941665085 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.937365268 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.940107573 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.938207725 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.937639741 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.93872543 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.938894944 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.948623344 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.944137136 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.936060546 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.934810872 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.936055017 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.93825045 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.935750634 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.937177463 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.943905409 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.938783612 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.937817461 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.940073157 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.937938625 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.936962111 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.946562104 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.941870014 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.939702973 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.939074029 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.937815558 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.937821994 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.938105249 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.939275012 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.938151505 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.939241031 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.940377833 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.938546474 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.938302875 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.93757116 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.944768736 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.936714318 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.938907562 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.945006374 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.939032898 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.938157379 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.939256809 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.9404392 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.939092915 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.939157737 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.938494221 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.940203479 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.939546699 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.941306633 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.946783734 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.942368026 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.944666664 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.941763973 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.948649648 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.939268677 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.938965933 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.939635567 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.942387632 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.946521992 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.939014156 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.93857046 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.946279352 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.940960011 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.941343988 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.942449057 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.939188459 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.94062445 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.940909577 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.941987013 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.943567372 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.94280904 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.938936518 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.940483849 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.941568546 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.939593347 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.942228774 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.94206805 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.940886644 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.941737994 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.939323178 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.940362972 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.939466539 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.940547686 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.941830616 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.940490525 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.940653949 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.94722355 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.940692221 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.940580237 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.944907571 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.94078854 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.949535156 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.940838605 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.941580748 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.942956457 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.941238003 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.942926889 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.939841883 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.941088759 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.941084646 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.940089702 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.942543673 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 1.951286802 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.947812184 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.944481778 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.942461133 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.94115459 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.941963858 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.950541613 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 1.960104582 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.942235037 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.943048093 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.943592559 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.947827259 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.94363891 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.946513463 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.944972912 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.947881112 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.943551398 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.942021962 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.945354921 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.952505792 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.941644111 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.942311665 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.941980173 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.946847385 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.944842664 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.942069385 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.94397953 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.945067908 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.945739785 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 1.952150677 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.943236574 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.944518777 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.943212436 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.944379779 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.94308744 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.94209756 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.943905708 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.944260135 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.944702195 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.942965971 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.944048554 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.947135977 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.94338258 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.946833497 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 1.951553559 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.942803465 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.942677605 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.945081742 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.944939172 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.94519839 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.943563924 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.943270894 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.944508953 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.944088766 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.944276734 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.946867716 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 1.949970483 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.945408982 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.943311779 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.944660696 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.947362863 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.943661634 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.944679746 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.945793068 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 1.953620241 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.947512835 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 1.953363878 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 1.952116876 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.944209126 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.946383912 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.950452405 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 1.950268696 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.945606379 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.944058226 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.946214016 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.94681738 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.947118503 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.945644755 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.944510615 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.94631613 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 1.948234333 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.944645319 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.944924033 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.945509439 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.947320181 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.946678614 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.946472762 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 1.949361299 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.945494749 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.946709871 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.944548384 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.946347198 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.946484165 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.948519678 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.946334984 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.945263452 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.947711245 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.948117591 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.948712423 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.94515504 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.946854737 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.947381728 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.946666155 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.945920301 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.947573335 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.947046165 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.946244777 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 1.950243169 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 1.953155082 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.946238735 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.948710386 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.948331569 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 1.951021273 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.946965013 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.94739282 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.948401509 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.946112143 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.954467355 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.9460339 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.946985859 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.949063469 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.947062968 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 1.952286662 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.948311882 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.951362177 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.949798945 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.947583045 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.946747747 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.949913589 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 1.954357839 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 1.950204315 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 1.950562467 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 1.95307539 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.952632289 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 1.949433551 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.948590627 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.947589498 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.948850529 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.948177838 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 1.951782703 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.949359049 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 1.951722297 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.947758232 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.949361751 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.948952933 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 1.950405171 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.947703097 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.947176503 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 1.951192259 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.955750523 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 1.956340193 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.948990481 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 1.950096795 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.949065023 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 1.952051446 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 1.957592961 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.950900044 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.949776551 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.948953686 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.949392571 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 1.949524619 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 1.956808563 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 1.955679578 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 1.952269131 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.94953553 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 1.953244311 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 1.964829282 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 1.951420964 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.957804364 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.975466344 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 1.950905972 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.951493616 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.948648629 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 1.950351404 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.950193058 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 1.951843684 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.949623576 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 1.956009076 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.950174865 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.949923706 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.957803606 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.949438056 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.949566479 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.950148173 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.950890447 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 1.95459065 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.95131009 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 1.957012014 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.950501051 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.94949329 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 1.950604241 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 1.952458945 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.950070522 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.950070369 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.95037911 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.952932951 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.94954089 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.950817984 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 1.958375645 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.951076118 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 1.951831243 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.962815314 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 1.960912935 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.951035178 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.951462517 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.951721854 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 1.955485204 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 1.954088909 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.950507815 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.953878057 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 1.957388058 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 1.953682799 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 1.956863336 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 1.952534411 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 1.95245061 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.951835008 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.950848628 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.951776507 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 1.962151496 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 1.960918531 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 1.952517093 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.95288436 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 1.957309534 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.951145875 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 1.958257664 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 1.957029983 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.953815932 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 1.953768045 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.951539774 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.952288734 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.951459023 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.951960011 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 1.954732652 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 1.957752147 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.952004958 seconds)
  done (took 1158.426998467 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.952201448 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.952189415 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.952079182 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.952512054 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.952721065 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.951976376 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.952143348 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.952136152 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.95234625 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.952426453 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.952400946 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.951983884 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.952628553 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.952791723 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.952685298 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.952252751 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.952994247 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.952943589 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.953092061 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.95309114 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.95300642 seconds)
  done (took 42.887518167 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.952311389 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.952144036 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.952771034 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.953022151 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.952099909 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.953379105 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.953488956 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.953600505 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.953889609 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.953450473 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.953552235 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.953073877 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.953885175 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.953653916 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.954411522 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.95343023 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.953654822 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.953939347 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.953962767 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.953732805 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.953536656 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.953968433 seconds)
  done (took 44.860902638 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.955711817 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.954992821 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 1.955760596 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.955021045 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.954328054 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.955603076 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.95411087 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 1.956446118 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 1.954920443 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.955527765 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 1.962080996 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 1.960809376 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.955069484 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 1.958493943 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.955551665 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.955864584 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.110913311 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.95635406 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.955641752 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.955395802 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.95622887 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 1.961999022 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.955613623 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.956070686 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.955266533 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.95517395 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.955320131 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.95609433 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.956363592 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.957250714 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 1.959336766 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.955844056 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 1.957734538 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 1.958839511 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 1.955737992 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.956348462 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 1.959920477 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.957276794 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.956807118 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.955308767 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 1.965821326 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 1.975194244 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.956843575 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.957150987 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 1.964013602 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.956918628 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.956216174 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 1.960659756 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 1.962465888 seconds)
  done (took 97.961226124 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.956631216 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.956239704 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.95627589 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.955958542 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.956773026 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.956588818 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.955856953 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.95592538 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.956438754 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.956718675 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.956382648 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.956724818 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.956041327 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.956811051 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.955606872 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.956691506 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.956632106 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.956276386 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.956803695 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.956279144 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.956975405 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.95574935 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.95713679 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.957832906 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.95686281 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.956850846 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.957056199 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.957719862 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.956721704 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.957864867 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.957903371 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.956997661 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.95729616 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.957239094 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.957902657 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.957770295 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.957401426 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.958126414 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.958275852 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.958000547 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.957490407 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.958376667 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.956724397 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.958172136 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.957429554 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.95801317 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.957432054 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.958415813 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.957848348 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.958259181 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.95783881 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.959262572 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.958682759 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.957521921 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.95849394 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.958566369 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.957865026 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.958347081 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.958304231 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.959104598 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.958338388 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.958396863 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.959151316 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.957677648 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.958526266 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.959154738 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.95886726 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.958861041 seconds)
  done (took 134.998025684 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.959726357 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.960151096 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.959038933 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.959608188 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.959430516 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.958886846 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.959190959 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.959355998 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.959631501 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.9603155 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.95996787 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.959339244 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.960024955 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.959996248 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.960891336 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.959946201 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.95992926 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.960411656 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.960151684 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.95937428 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.960750489 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.960985997 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.96105408 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.960795462 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.960540214 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.960485293 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.96124495 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.961196267 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.96066601 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.961049084 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.961058249 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.960905147 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.9611948 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.961584414 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.961121909 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.961094672 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.961832638 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.961166064 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.961765193 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.961826153 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.961448414 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.961260522 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.961780965 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.961149733 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.961351003 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.961323413 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.961915478 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.96239508 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.961858294 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.961694363 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.961969854 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.961722129 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.962003519 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.961824047 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.961633043 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.962050312 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.962052911 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.962217157 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.962127034 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.962970851 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.962646478 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.961508197 seconds)
  done (took 123.473141321 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.961679394 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.96173514 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.963052755 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.962012541 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.962233055 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.962271177 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.961953671 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.961941434 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.96305124 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.962782054 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.963137932 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.962545237 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.96391535 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.962721618 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.962264989 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.96374335 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.963104808 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.962958967 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.963807293 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.963252279 seconds)
  done (took 41.149060463 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.962086983 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.963646064 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.963357508 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.963320028 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.962820408 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.963024104 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.963676105 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.963571173 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.963209989 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.963021493 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.963858622 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.963181892 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.963461725 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.964331406 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.963875769 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.963697053 seconds)
  done (took 33.310460999 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.963375305 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.963817877 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.964511432 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.96502737 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.964178724 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.963700064 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.965182346 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.964034062 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.964703759 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.964158212 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.964464868 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.96498559 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.96390242 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.964862551 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.963992959 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.964464997 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.964573144 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.965377741 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.964107285 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.965032098 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.965121864 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.964625394 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.96499393 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.964689726 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.965303879 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.964254497 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.96508469 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.964878802 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.963876145 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.964998799 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.96554447 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.96498141 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.965475531 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.965636702 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.966042908 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.965608711 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.965050741 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.965663902 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.96562359 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.965635306 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.965707823 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.965959157 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.966539715 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.965890617 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.965989024 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.965888614 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.963729829 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.964869168 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.965281296 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.965479345 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.9654333 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.966137106 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.965813262 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.96692271 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.967385675 seconds)
  done (took 109.977087274 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.96708185 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.967216742 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.966548436 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.96612541 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.966781717 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.965605408 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.966069447 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.965983413 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.966131663 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.967136299 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.966592403 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.966904853 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.967486302 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.967174517 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.967504226 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.966915849 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.966602553 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.967081912 seconds)
  done (took 37.301194399 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.967604677 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.96643111 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.967396438 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.966674057 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.966887675 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.967336161 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.967306096 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.96630318 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.967380262 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.967179202 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.968304506 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.967863667 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.968063599 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.967505882 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.967396367 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.967350823 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.967598837 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.967698612 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.96757654 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.967989315 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.968267283 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.967971986 seconds)
  done (took 45.184770974 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 1.968154547 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 1.968558574 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 1.981516646 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 1.985637348 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 1.985997239 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 1.997351706 seconds)
  done (took 13.788711329 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.968707221 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.967733355 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.970326373 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.967004551 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.968182328 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.968398237 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.96802337 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.968047481 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.967630633 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.968001671 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.968470113 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.969114509 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.968265696 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.968598699 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.969260178 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.968797193 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.969246707 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.969069476 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.968511036 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.968921513 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.969896374 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.969190757 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.96892144 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.968838374 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.968546512 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.970423702 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.969371953 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.969402117 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.969928861 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.969486555 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.969693653 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.969563142 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.969942836 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.970440289 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.969164085 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.968804244 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.970136696 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.970105931 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.97043507 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.969402789 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.970410289 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.970051757 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.97035057 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.97019109 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.970146761 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.970854463 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.970061005 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.971007634 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.969956694 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.969599885 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.969520055 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.969964788 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.969702871 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.970537305 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.969100653 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.970079181 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.969823156 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.970324893 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.969272639 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.968965654 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.970611803 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.969628209 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.970165879 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.970414446 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.969890221 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.970598402 seconds)
  done (took 131.886444982 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.971183688 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.971685126 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.971254916 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.971588702 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.971649085 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.972019417 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.971463379 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.9711171 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.971732452 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.971708565 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.972281881 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.971919697 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.971579653 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.97260606 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.972687529 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.97223879 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.972023905 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.972875229 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.972305152 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.972660491 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.971925876 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.972673443 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.972459299 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.971943832 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.973208593 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.972509275 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.972767979 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.972358894 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.9726601 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.973385308 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.973023954 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.972837973 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.973136414 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.972614231 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.973134548 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.973001577 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.973390651 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.973545683 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.972851824 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.973958661 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.97352549 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.973504895 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.973924443 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.9730992 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.974017392 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.97320349 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.973263185 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.973674236 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.973558606 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.974359997 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.973896172 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.97433589 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.974395444 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.973899564 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.973645418 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.974168787 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.97455676 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.974292683 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.975017924 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.975047741 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.974355428 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.974762126 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.974003049 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.974220944 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.974636114 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.974733587 seconds)
  done (took 132.128003237 seconds)
done (took 2700.24242526 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.02179975 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.015771952 seconds)
  done (took 15.94497333 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.137177042 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.003956635 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.159223539 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.089487593 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.003447497 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.000269513 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 1.975689305 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 1.975483281 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.067340361 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 1.974774961 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.030386153 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 1.974605913 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 1.974817086 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 1.977315519 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 1.975437904 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 1.975303668 seconds)
  done (took 54.218903166 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.976613129 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 1.979044816 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 1.975808368 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 1.97451594 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 1.987310143 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.048460979 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 1.995649172 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.978669062 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.989453117 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.010067962 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.993724015 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 1.981693323 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 1.983065127 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 1.980662502 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.065117488 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.019220224 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.032009002 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.047098835 seconds)
  done (took 37.923492351 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.053430339 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 6.979613454 seconds)
  done (took 10.94368573 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.978792413 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.981626465 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.996574158 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.995984973 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.977007107 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.984390775 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.006695214 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.003400652 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.010956602 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.005219461 seconds)
  done (took 71.849822983 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.978489493 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.978801519 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.28168706 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 1.98407071 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 1.983208145 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.001356291 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.978909545 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.005806823 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.978079682 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.973697529 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 1.985963742 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.285821959 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 1.986587598 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.978800332 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.394679785 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 1.988474821 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 1.982729212 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.006785214 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.009637926 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.980914822 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 1.983435159 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 1.980493322 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.139150717 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.663505024 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.980730992 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.980742322 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 1.984644453 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.975402821 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.974854849 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.977639753 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 1.97904448 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.975379204 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.981084446 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.981813983 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.984363387 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.982051009 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.465428765 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.995992754 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 1.984756055 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.065051433 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.020753484 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 1.982596094 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.746379418 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 1.980108621 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.976235353 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.983061034 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.64864101 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.066955933 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.978182931 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.137704084 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.308012432 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.992510969 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.131550607 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.148281807 seconds)
  done (took 138.7895733 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.976255062 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.209692362 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.127652041 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.974713372 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.232485359 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.186282803 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.977754643 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.020959692 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.979833824 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.17741334 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.227922504 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.083385038 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.976601168 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.981619962 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.980182956 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.976336829 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.125200375 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.041747892 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.976478503 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.97827786 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.000606372 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.178241196 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.096503906 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.980040346 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.00402726 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.182118774 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.097128754 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.078294442 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.777791274 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.976042693 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.041796364 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.978468395 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.982060708 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.976607704 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.132425537 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.069382693 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.064043514 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.978516138 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.977226416 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.977238108 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.65070705 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.176236621 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.070057723 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.103893956 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.220440858 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.190981378 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.587267907 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.978413119 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.603807901 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.14223914 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.182661775 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.183446768 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.095035299 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.980182652 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.529663905 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.979696843 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.977628319 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.198810672 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.193182504 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.076154005 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.980311339 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.978756823 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.978522074 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.216810916 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.98158707 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.071232079 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.979706921 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.977646745 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.07094557 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.078109666 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.202174887 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.197660424 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.009009478 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.300556397 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.467547698 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.179742999 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.042267148 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.198372185 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.98068808 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.978456763 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.057566379 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.815536083 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.231556584 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.218057746 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.176326491 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.0082439 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.62965365 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.978393107 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.165200663 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.168936771 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.213393804 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.218223987 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.213103866 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.354891585 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.979877444 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.97936816 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.296008423 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.095642893 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.924701367 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.329513136 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.207789374 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.496655646 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.006228302 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.306906164 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.107030667 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.983778464 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.626599853 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.979536595 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.184129559 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.01943223 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.981753337 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.981990541 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.170542258 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.885793634 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.981416199 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.706015094 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.041522082 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.982557136 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.183927275 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.984216065 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.225492258 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.983107984 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.213876763 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.621275318 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.010581695 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.206642246 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.221446467 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.613809111 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.274307158 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.221865218 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.093606244 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.205996269 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.784642797 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.982102164 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.24283355 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.984240067 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.980854271 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.150403507 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.985332518 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.123601597 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.986814028 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.247569704 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.002762117 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.20976281 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.988240782 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.219419652 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.014120504 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.03065711 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.98612886 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.109633361 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.98414301 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.93227094 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.139781519 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.98397857 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.982204698 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.733936353 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.981924121 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.13652751 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.206773688 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.00306365 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.051461802 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.547088783 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.980444891 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.065793359 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.00456573 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.265078913 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 6.984385498 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.23233457 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.948718229 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.457537976 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.984020514 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.215867927 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.596651578 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.985635881 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.983976067 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.826087455 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 6.984019979 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.983538722 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.139486824 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.412139564 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.891521543 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.184005524 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.986727047 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.110790726 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.989343493 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.064192748 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.328351964 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.983065541 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.984385876 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.985411264 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.984568589 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.986415429 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.242901626 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.009496147 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.4249868 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.118765613 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.23787555 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.289907841 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.179872491 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.023076882 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.98530491 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.206822886 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.988450964 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.046443722 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.986947576 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.003889504 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.213374485 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.989336361 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.190029126 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.216603914 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.876574064 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.032198532 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.986846367 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.986772963 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.891282381 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.128916072 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.073606437 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.987075931 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.986163668 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.098797594 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.105016725 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.168825404 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.816348446 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.142147267 seconds)
  done (took 926.307306571 seconds)
done (took 1257.887782223 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.986522132 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.990099115 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.989970217 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 6.987190962 seconds)
  done (took 29.872663754 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.987337067 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.988332852 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.988802822 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.98893363 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 1.987423398 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.988873219 seconds)
  done (took 13.848806921 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.986750638 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.989531702 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.989310503 seconds)
  done (took 22.884329908 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.409634168 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.389330857 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.060068136 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.125472984 seconds)
  done (took 10.903429847 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.992484991 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.989332344 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.988635111 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.989172514 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.988088759 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.987717445 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.990288724 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.988798071 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.988906005 seconds)
  done (took 19.82884398 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.157160643 seconds)
done (took 103.415559621 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.209362234 seconds)
    (2/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 6.986639867 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 4.767220241 seconds)
    (4/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 6.993041655 seconds)
    (5/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.205643687 seconds)
    (6/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.196849997 seconds)
    (7/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 6.986602046 seconds)
    (8/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.090613042 seconds)
    (9/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.706232056 seconds)
    (10/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 1.997460227 seconds)
    (11/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.682575702 seconds)
    (12/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.285717217 seconds)
    (13/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.096170652 seconds)
    (14/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.315480175 seconds)
    (15/341) benchmarking ("sort", BigFloat, false)...
    done (took 6.99255757 seconds)
    (16/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.439009178 seconds)
    (17/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.007024813 seconds)
    (18/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.245752069 seconds)
    (19/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.188154165 seconds)
    (20/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.308121821 seconds)
    (21/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.122824829 seconds)
    (22/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.002626021 seconds)
    (23/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.366876669 seconds)
    (24/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.005686775 seconds)
    (25/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 6.988810885 seconds)
    (26/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.209704357 seconds)
    (27/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.004382963 seconds)
    (28/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 1.999563234 seconds)
    (29/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.378078781 seconds)
    (30/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 6.992812788 seconds)
    (31/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.087608979 seconds)
    (32/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.012084684 seconds)
    (33/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.722671924 seconds)
    (34/341) benchmarking ("map", abs, BigInt, false)...
    done (took 6.989643014 seconds)
    (35/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 10.288088846 seconds)
    (36/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.324034611 seconds)
    (37/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.13266215 seconds)
    (38/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.137296497 seconds)
    (39/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.175732397 seconds)
    (40/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.107450435 seconds)
    (41/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 6.995807258 seconds)
    (42/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.129532034 seconds)
    (43/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.404630227 seconds)
    (44/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.396172715 seconds)
    (45/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.195066971 seconds)
    (46/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.294959931 seconds)
    (47/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.414070496 seconds)
    (48/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.324973269 seconds)
    (49/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.334727484 seconds)
    (50/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.049398414 seconds)
    (51/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.391763248 seconds)
    (52/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 6.990760442 seconds)
    (53/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 6.991403123 seconds)
    (54/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.756445814 seconds)
    (55/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.261284758 seconds)
    (56/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.212104891 seconds)
    (57/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.124489347 seconds)
    (58/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.0890601 seconds)
    (59/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.088627312 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.239003354 seconds)
    (61/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.050250005 seconds)
    (62/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.001809815 seconds)
    (63/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.369456831 seconds)
    (64/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.346180748 seconds)
    (65/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.606443965 seconds)
    (66/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 6.996615382 seconds)
    (67/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 3.98220718 seconds)
    (68/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.760465521 seconds)
    (69/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.168369759 seconds)
    (70/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 6.99539837 seconds)
    (71/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.897681942 seconds)
    (72/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.3004042 seconds)
    (73/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.202537351 seconds)
    (74/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.788192492 seconds)
    (75/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 6.997335953 seconds)
    (76/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.406562802 seconds)
    (77/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.251651702 seconds)
    (78/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.757803445 seconds)
    (79/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.021226687 seconds)
    (80/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.34761619 seconds)
    (81/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.010550626 seconds)
    (82/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.177142072 seconds)
    (83/341) benchmarking ("sort", Float32, false)...
    done (took 5.654909154 seconds)
    (84/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.131961746 seconds)
    (85/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.002715773 seconds)
    (86/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.187635189 seconds)
    (87/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 6.997904747 seconds)
    (88/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.306397143 seconds)
    (89/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 6.994409813 seconds)
    (90/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 3.679862594 seconds)
    (91/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 6.992687823 seconds)
    (92/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.965464983 seconds)
    (93/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.126123513 seconds)
    (94/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 6.992016936 seconds)
    (95/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.025002242 seconds)
    (96/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.68386335 seconds)
    (97/341) benchmarking ("perf_sum", Int8, true)...
    done (took 1.996323046 seconds)
    (98/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.079886359 seconds)
    (99/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.103269571 seconds)
    (100/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.38436334 seconds)
    (101/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.072115486 seconds)
    (102/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.406042274 seconds)
    (103/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.093977876 seconds)
    (104/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 6.993703047 seconds)
    (105/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.051137734 seconds)
    (106/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.222490516 seconds)
    (107/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.229981094 seconds)
    (108/341) benchmarking ("sort", Int8, false)...
    done (took 4.94002787 seconds)
    (109/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.206528366 seconds)
    (110/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.088368027 seconds)
    (111/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.049332283 seconds)
    (112/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.01588496 seconds)
    (113/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.174292231 seconds)
    (114/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.147228455 seconds)
    (115/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.135017086 seconds)
    (116/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.193692764 seconds)
    (117/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.216216789 seconds)
    (118/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.306138769 seconds)
    (119/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 6.999288462 seconds)
    (120/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.030157767 seconds)
    (121/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 4.14671816 seconds)
    (122/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.076122402 seconds)
    (123/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.219211534 seconds)
    (124/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.312491662 seconds)
    (125/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.301397078 seconds)
    (126/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.161319761 seconds)
    (127/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.002236857 seconds)
    (128/341) benchmarking ("perf_countequals", "Float32")...
    done (took 3.79277615 seconds)
    (129/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.263402855 seconds)
    (130/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.255632987 seconds)
    (131/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.07349825 seconds)
    (132/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.032582343 seconds)
    (133/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.399417825 seconds)
    (134/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.752316804 seconds)
    (135/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.155646765 seconds)
    (136/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.204604103 seconds)
    (137/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.076433509 seconds)
    (138/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.013365419 seconds)
    (139/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.070434522 seconds)
    (140/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.016403845 seconds)
    (141/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.465230971 seconds)
    (142/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 6.998780157 seconds)
    (143/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.130609363 seconds)
    (144/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.181976858 seconds)
    (145/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.188286837 seconds)
    (146/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.008945922 seconds)
    (147/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.250482918 seconds)
    (148/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.092189883 seconds)
    (149/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.233376863 seconds)
    (150/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.457026847 seconds)
    (151/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.126013945 seconds)
    (152/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 6.995442409 seconds)
    (153/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.263932841 seconds)
    (154/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.157148981 seconds)
    (155/341) benchmarking ("sort", Bool, false)...
    done (took 2.219089819 seconds)
    (156/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.881373591 seconds)
    (157/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.160390767 seconds)
    (158/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.966025503 seconds)
    (159/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 6.999091594 seconds)
    (160/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.195760297 seconds)
    (161/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.114840177 seconds)
    (162/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.301315143 seconds)
    (163/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.520868813 seconds)
    (164/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 6.99681856 seconds)
    (165/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.016247 seconds)
    (166/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.010737549 seconds)
    (167/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.374304398 seconds)
    (168/341) benchmarking ("sort", Int64, false)...
    done (took 5.62184929 seconds)
    (169/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.246279304 seconds)
    (170/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.021801527 seconds)
    (171/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.88899913 seconds)
    (172/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.404840574 seconds)
    (173/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 6.998403567 seconds)
    (174/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 4.058386952 seconds)
    (175/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.126019721 seconds)
    (176/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.429572563 seconds)
    (177/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.876135839 seconds)
    (178/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 2.973083104 seconds)
    (179/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.113939841 seconds)
    (180/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.233058624 seconds)
    (181/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.207380015 seconds)
    (182/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.828840658 seconds)
    (183/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.138409737 seconds)
    (184/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.399869753 seconds)
    (185/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.915572158 seconds)
    (186/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.024161293 seconds)
    (187/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.85692022 seconds)
    (188/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.105390725 seconds)
    (189/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.300395947 seconds)
    (190/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.154537186 seconds)
    (191/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 6.999945639 seconds)
    (192/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.103486702 seconds)
    (193/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.193568874 seconds)
    (194/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.315774217 seconds)
    (195/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.088102908 seconds)
    (196/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.245657702 seconds)
    (197/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.000536786 seconds)
    (198/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.052558194 seconds)
    (199/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 6.998827305 seconds)
    (200/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.063715777 seconds)
    (201/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.891610999 seconds)
    (202/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.004966369 seconds)
    (203/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.045001583 seconds)
    (204/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.100740689 seconds)
    (205/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.013306989 seconds)
    (206/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.29997623 seconds)
    (207/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.090103756 seconds)
    (208/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.396528259 seconds)
    (209/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.600881701 seconds)
    (210/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.273759272 seconds)
    (211/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.285897703 seconds)
    (212/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.281439594 seconds)
    (213/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.015938578 seconds)
    (214/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.4676894 seconds)
    (215/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.087556178 seconds)
    (216/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.395509614 seconds)
    (217/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.010235892 seconds)
    (218/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.143654647 seconds)
    (219/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.883601547 seconds)
    (220/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.004394476 seconds)
    (221/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.056592737 seconds)
    (222/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.124986685 seconds)
    (223/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.122351251 seconds)
    (224/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.083753042 seconds)
    (225/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.28620568 seconds)
    (226/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.263658907 seconds)
    (227/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.231056007 seconds)
    (228/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.404550635 seconds)
    (229/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.289295959 seconds)
    (230/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.085788121 seconds)
    (231/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.078857524 seconds)
    (232/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.089860102 seconds)
    (233/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.008873286 seconds)
    (234/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.00267898 seconds)
    (235/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 9.217752729 seconds)
    (236/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.407600004 seconds)
    (237/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.669639588 seconds)
    (238/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.300955163 seconds)
    (239/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.059486198 seconds)
    (240/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.625785238 seconds)
    (241/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.249810712 seconds)
    (242/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.329045837 seconds)
    (243/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.005841738 seconds)
    (244/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.023246973 seconds)
    (245/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.010630208 seconds)
    (246/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.188045029 seconds)
    (247/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.025813375 seconds)
    (248/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.208343626 seconds)
    (249/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.335171962 seconds)
    (250/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.020800142 seconds)
    (251/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.076362871 seconds)
    (252/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.083300696 seconds)
    (253/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.771714246 seconds)
    (254/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.367384475 seconds)
    (255/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.129831157 seconds)
    (256/341) benchmarking ("sort", Float64, false)...
    done (took 5.704609609 seconds)
    (257/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.197244845 seconds)
    (258/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.090547955 seconds)
    (259/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.338008707 seconds)
    (260/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.003266166 seconds)
    (261/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.089876954 seconds)
    (262/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.003506985 seconds)
    (263/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.405759136 seconds)
    (264/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.125087124 seconds)
    (265/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.383284365 seconds)
    (266/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.08086783 seconds)
    (267/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.810817202 seconds)
    (268/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.359122505 seconds)
    (269/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.004551792 seconds)
    (270/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.068397051 seconds)
    (271/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.126584083 seconds)
    (272/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.300792675 seconds)
    (273/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.12845572 seconds)
    (274/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.094227113 seconds)
    (275/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.008166692 seconds)
    (276/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 3.576035915 seconds)
    (277/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.268032924 seconds)
    (278/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 5.916788751 seconds)
    (279/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.137676468 seconds)
    (280/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.078944287 seconds)
    (281/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.017225109 seconds)
    (282/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.129697814 seconds)
    (283/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.327768036 seconds)
    (284/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.144197088 seconds)
    (285/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.005395299 seconds)
    (286/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.437969498 seconds)
    (287/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.902564118 seconds)
    (288/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.782301515 seconds)
    (289/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.002869439 seconds)
    (290/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.123707957 seconds)
    (291/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.12335468 seconds)
    (292/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.222039033 seconds)
    (293/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.421574216 seconds)
    (294/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.014998822 seconds)
    (295/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.002066082 seconds)
    (296/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.030553545 seconds)
    (297/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.099365059 seconds)
    (298/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.095415814 seconds)
    (299/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.119200136 seconds)
    (300/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.223592227 seconds)
    (301/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.64294418 seconds)
    (302/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 2.976908662 seconds)
    (303/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.219865239 seconds)
    (304/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.396442496 seconds)
    (305/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.432195311 seconds)
    (306/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.409142546 seconds)
    (307/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.460413697 seconds)
    (308/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.190532528 seconds)
    (309/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.096397928 seconds)
    (310/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.461010087 seconds)
    (311/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.400397146 seconds)
    (312/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.106088303 seconds)
    (313/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.836295726 seconds)
    (314/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.413165704 seconds)
    (315/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.10393876 seconds)
    (316/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.034381824 seconds)
    (317/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.148165821 seconds)
    (318/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.080533804 seconds)
    (319/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.020439451 seconds)
    (320/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.369281297 seconds)
    (321/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.685071175 seconds)
    (322/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.319159004 seconds)
    (323/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.742134562 seconds)
    (324/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.010820822 seconds)
    (325/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.071200041 seconds)
    (326/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.082909677 seconds)
    (327/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.868116149 seconds)
    (328/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.29013491 seconds)
    (329/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.019228318 seconds)
    (330/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.131946612 seconds)
    (331/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.293725406 seconds)
    (332/341) benchmarking ("sort", BigInt, false)...
    done (took 7.00548972 seconds)
    (333/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.408397529 seconds)
    (334/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 7.005811618 seconds)
    (335/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 5.22406278 seconds)
    (336/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.718128727 seconds)
    (337/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.025117582 seconds)
    (338/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.144528837 seconds)
    (339/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.022705229 seconds)
    (340/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.325723511 seconds)
    (341/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.300428286 seconds)
  done (took 1143.973055417 seconds)
done (took 1145.994930509 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.025576324 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.006829948 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.484880262 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.016682127 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.006568857 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.009317629 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.493657641 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.036081513 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.023816856 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.493412421 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.015553004 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.007365652 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.022297457 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.041564566 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.017870486 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.02079151 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.013109425 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.032176585 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.042337485 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.012671923 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.058504991 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.013223355 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.008432971 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.058422787 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.007972159 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.021611284 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.026075801 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.057931539 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.058006178 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.010769413 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.01350388 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.353956739 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.049615264 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.012129385 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.01933842 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.023211181 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.014150533 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.023672025 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.025947121 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.023312017 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.008618406 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.019399662 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.011995135 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.011070492 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.008733306 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.008050387 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.010420372 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.13350206 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.02280454 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.338017221 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.060099077 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.026611505 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.059649042 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.012481038 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.011300495 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.011651945 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.058214839 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.014950521 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.014101484 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.337231878 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.098104121 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.02385887 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.337743766 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.06307781 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.018878212 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.017873345 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.008321889 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.027497187 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.35367523 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.527811588 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.039751117 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.029653675 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.010688744 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.01105236 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.023496671 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.494281593 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.023592898 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.56271668 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.032688135 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.023939357 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.016699209 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.012464908 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.011951044 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.028994618 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.027786599 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.00937871 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.015438217 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.016539435 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.022628352 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.354596563 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.045984366 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.486488468 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.017312114 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.029461059 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.029233131 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.561426737 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.033062099 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.026851811 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.014435432 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.353805877 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.044370214 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.029231068 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.013370313 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.022554498 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.125325218 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.02885202 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.030279784 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.010963712 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.032762641 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.018074167 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.012131358 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.024242719 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.032093449 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.046125019 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.028811952 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.011146064 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.020576305 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.018240002 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.028027826 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.020446249 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.018453103 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.021945636 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.012261559 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.063465117 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.030420002 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.026892809 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.126935104 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.018402164 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.137488332 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.026998623 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.019013523 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.012021177 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.341032433 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.049081805 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.035063436 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.019835619 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.035765469 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.035366424 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.029738545 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.014900307 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.028514317 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.015467337 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.064848603 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.013546299 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.037541102 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.064289836 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.02706218 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.019872346 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.028986322 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.048068295 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.033443387 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.017785586 seconds)
done (took 316.741010155 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.058291403 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.01161601 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.087683453 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.013546215 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.079751929 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.064736438 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.014280493 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.015258712 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.014062664 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.404887511 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.014291511 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.01921383 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.014518536 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.013960199 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.063025543 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.014353639 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.013978755 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.248428023 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.015047436 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.073185577 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.014367382 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.014827904 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.013980429 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.402082761 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.015993208 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.013492236 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.073451292 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.014369327 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.281594927 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.01303929 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.012154039 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.253584953 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.073541114 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.027851047 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.022679066 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.022687756 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.080863767 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.02396404 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.061268835 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.061834573 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.090184183 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.049538813 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.015050451 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.013263042 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.016673215 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.016972329 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.014585581 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.048712315 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.017726307 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.021198255 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.249531898 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.022676486 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.021415482 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.015520717 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.016668061 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.032140998 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.015976466 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.016577279 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.075729776 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.017153157 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.063181278 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.443812592 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.401061106 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.016225102 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.015047852 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.016488493 seconds)
  done (took 193.440216275 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.082443787 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.103193919 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.084399304 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.021529016 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.068500929 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.084731277 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.020839135 seconds)
  done (took 16.412927219 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.023531669 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.017393001 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.039405203 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.040696482 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.017058557 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.154993997 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.028562391 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.021934653 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.041979269 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.018877425 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.354411096 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.040546044 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.024849475 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.018052253 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.028689251 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.046316779 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.019345558 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.018802263 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.115533258 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.095360781 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.023586388 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.025398346 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.045591503 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.028700934 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.018192665 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.019034271 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.018490404 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.024756259 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.018055311 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.017409369 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.017844991 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.031411213 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.01826318 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.019133974 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.01824916 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.018362389 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.019127615 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.018259495 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.020398399 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.01806148 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.018074493 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.018702405 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.01807352 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.018995752 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.019235214 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.041637745 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.018309379 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.019049753 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.01893503 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.018937547 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.048134726 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.018453049 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.019191718 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.024635709 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.059934496 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.026571854 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.019364077 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.019357068 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.020029735 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.020096813 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.018908565 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.100397151 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.042248402 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.019385899 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.042648643 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.057239983 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.020293492 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.019370007 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.019460876 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.044485384 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.019020241 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.0425287 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.020735346 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.117539462 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.020872266 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.160900105 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.043329493 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.023854032 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.024355338 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.019858095 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.028787474 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.019559984 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.022050459 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.027093574 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.02594659 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.021350541 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.020447334 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.022266775 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.027744808 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.020590133 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.066317725 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.020761737 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.02216506 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.118443631 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.021147145 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.118336387 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.046780948 seconds)
  done (took 219.567147668 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.026212635 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.022278447 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.035099884 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.022279656 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.022072685 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.025919179 seconds)
  done (took 14.105236232 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.024038725 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.024716095 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.021460466 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.024054265 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.022211087 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.022265188 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.022263088 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.023216215 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.025572836 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.021627208 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.022866101 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.024348841 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.022633166 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.021979891 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.022810344 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.022325632 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.022434489 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.022528219 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.022892192 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.022784456 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.270935127 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.023466506 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.022701612 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.026198604 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.026298336 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.023124765 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.031134807 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.022304404 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.022653313 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.028840111 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.026748253 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.024049378 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.026301722 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.029288178 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.026255288 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.026914218 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.026379211 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.023678155 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.018939037 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.993785107 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.024325784 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.023613359 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.023317208 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.025059235 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.025014717 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.031475954 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.028858731 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.032634793 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.023838817 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.025130714 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.025086923 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.023461524 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.024371029 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.0264167 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.028325031 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.029379293 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.029271205 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.024198918 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.025091416 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.028137518 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.026583058 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.025491418 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.026528765 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.028796913 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.031584493 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.025480226 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.028483506 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.028392689 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.025284451 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.02431974 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.025323831 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.024583162 seconds)
  done (took 148.981525299 seconds)
done (took 594.452209044 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.107819566 seconds)
  done (took 9.062888902 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.04194855 seconds)
  done (took 9.09984098 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 9.999558868 seconds)
  done (took 11.956726808 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.056395474 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.044159728 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.029832091 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.030367833 seconds)
  done (took 30.12822219 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.331053014 seconds)
  done (took 9.28732816 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.034921466 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.02304455 seconds)
  done (took 16.086454501 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.123385087 seconds)
  done (took 9.078815315 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.478535814 seconds)
  done (took 9.455567203 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.043717032 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.050100742 seconds)
  done (took 16.068798297 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.027608339 seconds)
  done (took 8.982724512 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.778249297 seconds)
  done (took 9.820309502 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.040630673 seconds)
  done (took 9.015004244 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.078847644 seconds)
  done (took 9.035300877 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.735537073 seconds)
  done (took 9.690665508 seconds)
done (took 168.725061144 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.031487337 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.024676746 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.025789186 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.025312884 seconds)
  done (took 30.062332378 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.06108199 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.060987423 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.069419266 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.060848015 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.053753608 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.052018484 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.061894498 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.06139802 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.051999304 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.05879132 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.061711726 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.061136045 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.061309398 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.070743998 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.071375311 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.05934559 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.061510827 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.062541537 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.052468594 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.070147382 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.061907563 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.062310348 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.026924511 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.027489315 seconds)
  done (took 51.358854002 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.217633169 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.093971583 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.181295775 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.073537383 seconds)
  done (took 10.523572092 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.027389973 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.091721046 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.078477867 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.073789329 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.078390192 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.13032865 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.080307382 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.164022406 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.156225989 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.153615299 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.035224261 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.048781869 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.052934237 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.074786012 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.130778835 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.027790241 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.028237868 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.14207962 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.090161287 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.198640243 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.028290275 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.083185305 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.079345607 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.080599923 seconds)
  done (took 52.092551136 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.02892716 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.036224896 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.036344133 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.029699287 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.029528938 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.029978727 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.036567283 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.031771027 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.051836257 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.031905884 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.030107262 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.030530428 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.036683913 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.030201729 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.02960103 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.043002074 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.044311313 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.030287521 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.033547936 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.03696169 seconds)
  done (took 42.647051867 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.028860019 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.875764822 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.375682201 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.280899267 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.027751496 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.028658519 seconds)
  done (took 32.5774807 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.041583917 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.045232448 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.034268564 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.05584189 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.074093324 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.037393119 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.09044058 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.19994355 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.051568901 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.086565114 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.049854956 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.035217513 seconds)
  done (took 26.761698736 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.02954026 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.032647899 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.031782546 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.044141195 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.039795203 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.037128888 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.038398417 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.029814393 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.043738792 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.04682626 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.037904785 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.041179666 seconds)
  done (took 46.413219267 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.2441415 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.256331008 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.247149268 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.476153606 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.340375856 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.011467319 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.317569964 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.243191432 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.772338785 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.829999222 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.323658315 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.009196028 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.984153941 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.956299918 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.949685244 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.274041426 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.033405006 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.888188682 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.284002651 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.079392946 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.033191537 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.032004603 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.03228371 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.327272033 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.358128294 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.039066979 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.243745869 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.046362571 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.031632494 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.262549276 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.477975908 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.080593298 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.234733709 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.288730989 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.369698618 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.168575172 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.039623341 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.058775115 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.071173023 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.06663919 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.04206699 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.042637083 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.574494231 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.044490578 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.304248047 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.033285042 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.119912929 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.039768133 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.958006692 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.348974713 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.147256529 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.031072031 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.066693802 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.462084179 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.151135091 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.274867093 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.036440194 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.057488744 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.084702228 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.292857454 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.255699465 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.039773484 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.245937779 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.958598251 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.386614504 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.159249333 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.034545434 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.038518241 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.733161239 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.27591356 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.113729872 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.360173404 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.139222021 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.035302385 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.035523074 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.075654818 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.123177721 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.033715212 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.3279698 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.020789427 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.960269154 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.133150975 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.445893811 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.038566498 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.032944129 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.041176863 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.879860033 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.959605187 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.132007155 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.293533288 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.359217209 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.035821193 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.035559431 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.057523673 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.037154095 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.980284083 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.440809845 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.095843344 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.961016347 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.599769712 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.495598704 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.995894817 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.365535886 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.073102336 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.314925448 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.192947816 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.441541097 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.242556061 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.280509173 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.569101384 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.040343235 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.59543792 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.11671971 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.111935078 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.040363927 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.599620525 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.071037022 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.327389943 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.154303636 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.038803564 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.96411644 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.049182757 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.241729864 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.504068346 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.088777816 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.038416942 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.043989075 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.039468754 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.041495936 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.144960704 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.054701796 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.329513551 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.112150427 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.039674894 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.975149747 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.044128415 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.319184577 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.436366674 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.096522606 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.29559295 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.304043642 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.738459606 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.635049533 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.987480651 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.305351544 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.111315266 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.114187412 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.619451543 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.174368196 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.136089526 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.039558623 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.176770784 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.045338596 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.043275398 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.175599543 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.456874507 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.46528924 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.083171587 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.041197232 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.993704148 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.069583156 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.277076973 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.093251462 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.072882072 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.045277917 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.124059545 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.267757831 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.041548431 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.966036379 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.289690287 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.285753376 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.349535474 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.448360278 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.091119268 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.114381831 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.051544372 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.253108753 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.122688522 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.685412485 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.586858571 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.261049991 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.476036904 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.000608646 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.68859935 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.31204656 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.423652585 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.057356611 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.495120452 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.073673762 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.570410221 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.067869207 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.566213119 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 3.967297793 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.047080832 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.379312341 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 3.999589799 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.354282891 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.136047876 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.057931555 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.043666997 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.04397255 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.069795666 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.960291261 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.148292655 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.111221075 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.115174075 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.968568895 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.526831783 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.077258549 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.044559093 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.042646846 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.369980617 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.856383451 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.996032899 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.042566727 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.119675885 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.791404164 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.588296447 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.047290775 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.046154593 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.639268299 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.048875981 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.63330962 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.050513396 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.91180905 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.069214609 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.323592857 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.744201446 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.343648182 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.115818646 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.11985062 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.043587196 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.052229969 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.744948873 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.052675677 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.743918612 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.334964387 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.317847122 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.487104834 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.110311332 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.253030069 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.057842038 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.046067573 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.577888403 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.070223266 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.046794243 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.248295617 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.558755723 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.394913846 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.690072203 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.130800278 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.045317775 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.312837929 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.052636918 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.499211646 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.734688293 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.056147043 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.053230804 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.272768179 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.730797832 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.04646871 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.957106943 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.052706117 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.257962008 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.248938554 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.322861376 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.345032824 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.494171606 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.972616465 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.051591988 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.082513059 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.290297216 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.046532111 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.082891698 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.492605353 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.109746404 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.475222033 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.329011384 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.460234474 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.683893655 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.312938477 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.109854157 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.058012631 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.705183861 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.183385109 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.980053594 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.165737199 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 3.972851839 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.795580985 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.339508639 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.064827078 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.314604064 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.027311484 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.387836396 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.344955504 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.329792412 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.096216077 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.076662261 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.047827097 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.100565154 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.047381093 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.101806712 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.159744246 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.054179256 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.448826925 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.080582019 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.094735008 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.053836094 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.558364206 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.069943108 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.051558279 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.740982891 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.072132815 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.167128559 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.119398456 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.803272361 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.537127873 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.071539492 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.932601657 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.04859778 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.315961031 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.104517621 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.504868326 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.089022725 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.453310485 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.048993153 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.26239866 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.054239743 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.472537718 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.090674691 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.325385126 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.00708786 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.262157982 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.256352098 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.074102689 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.054634229 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.975461033 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.212849731 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.917509333 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.030278863 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.05250605 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.731597344 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.473790228 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.110359351 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.511658302 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.871713957 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.052316032 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.376695627 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.449077432 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.51923858 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.081324588 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.051869643 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.401946746 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.183411284 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.372386836 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.344425666 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.057667332 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.077111421 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.263371804 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.177104541 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.969192543 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.540858165 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.636619437 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.751336999 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.062012076 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.254536234 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.397937484 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.195126019 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.08357432 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.123591614 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.455519314 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.318052075 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.119524122 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.977688882 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.051966008 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.445755007 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.455329196 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.148213977 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.292636882 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.368032368 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.417826509 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.518421652 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.339991041 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.460828611 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.498661572 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.447924655 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.271000314 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.424538018 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.379207494 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.645078732 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.465018167 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.265320421 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.141318017 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.335319174 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.923250348 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.763914632 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.296693612 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.056932874 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.981789403 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.260652738 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.060611126 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.291708977 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.578871378 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.300141084 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.331514262 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.523659969 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.592022886 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.096921454 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.076733249 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.018950599 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.079036001 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.0725658 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.053294873 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.542076647 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.341561945 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.067742198 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.996027386 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.726376409 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.979136715 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.266668494 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.095662181 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.087352785 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.609427662 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.339357898 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.163047873 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.342381148 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.149918627 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.08837314 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.979961493 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.812908048 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.00109556 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.116787733 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.479914615 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.070608177 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.057545008 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.25845226 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.983150526 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.101165152 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.060448936 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.260125956 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.637018305 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.324839125 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.17979345 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.305496461 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.358744155 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.925498059 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.088344968 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.32803992 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.982211716 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.54431828 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.736489745 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.095799232 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.126667285 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.055120376 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.058982885 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.326726731 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.409405983 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.154680616 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.637379558 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.085812138 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.078947037 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.41817277 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.154416272 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.058106801 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.060831579 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.401911744 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.287539374 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.056138248 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.051422315 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.269403921 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.130404291 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.252430073 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.13213103 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.570373526 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.061265541 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.92464094 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.163404977 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.010894634 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.056459655 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.772826142 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.117964529 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.056799822 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.328296975 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.712292094 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.26048926 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.45160888 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.921965585 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.105886166 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.096602406 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.059265366 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.061828799 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.447642619 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.36051272 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.058037186 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.329329942 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.106494796 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.062794122 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.718326307 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.026478218 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.057440328 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.814595325 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.945361495 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.78827321 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.454837558 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.188764528 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.062814675 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.061901517 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 3.984586246 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.058278325 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.195177791 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.055684225 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.06226453 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.43924983 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.393066948 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.156432764 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.063235563 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.060094171 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.065632809 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.271497038 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.574093374 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.07493901 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.758872994 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.262593513 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.059672578 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.547744402 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.511768482 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.170735956 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.094530151 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.101986953 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.302905331 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.603333387 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.105766762 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.031663818 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.286731355 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.061828624 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.330969506 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.333494689 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.060524754 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.272507559 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.528619215 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.34138016 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.416587929 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.384275433 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.125828043 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.113885202 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.955395961 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.069131119 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.062982472 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.326936781 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.114995549 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.060564121 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.06938812 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.614114565 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.811798308 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.532633915 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.216993566 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.407970834 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.852481138 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.815366949 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.063214559 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 3.987296241 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.060565191 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.086391826 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.063579261 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.987091417 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.747540953 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.78486859 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.273733106 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.371886888 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.988405695 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.264529079 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.641482327 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 3.987547198 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.030519325 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.061966812 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.327288265 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.98872627 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.064667095 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.015710501 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.353655352 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.649598563 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.328855094 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.062439296 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.006319348 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.066551305 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.065214316 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.061428532 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.146023238 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.063528419 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.178739152 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.329397884 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.465404546 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.16964426 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.704562491 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.825034974 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.000923628 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.106015378 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.622376099 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.63271991 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.354688296 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.19327114 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.806929277 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.007925648 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.066146238 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.07950671 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.319833984 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.067912032 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.066997553 seconds)
  done (took 2182.666182941 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.103402096 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.182932958 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.164354315 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.117586837 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.221699044 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.201785014 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.100659451 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.089770122 seconds)
  done (took 59.175475262 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.063644238 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.037853259 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.073097381 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.06495681 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.074560853 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.06909353 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.249218566 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.087331283 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.06468002 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.068808739 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.064625126 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.06757138 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.065327338 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.066336557 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.069304464 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.349396959 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.082599776 seconds)
  done (took 79.684317553 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.117719236 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 9.817036977 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.070904115 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.71361512 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.08698416 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.410926378 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.063784147 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.065816702 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.171091169 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.363959935 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.078373378 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.078120625 seconds)
  done (took 92.031771303 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.066138096 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.06507498 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.065841691 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.066359895 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.06601333 seconds)
  done (took 12.323123973 seconds)
done (took 2720.335050557 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.417656142 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.156093061 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.134657489 seconds)
  done (took 6.284636708 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.209000194 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.258966165 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.373147757 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.377930607 seconds)
  done (took 11.217314599 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.352352647 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.460432285 seconds)
  done (took 6.806873564 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.421935176 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.069040165 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.449333982 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.066019508 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.07188772 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.069232579 seconds)
  done (took 23.207121918 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.066823829 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.067376461 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.067868212 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.06696905 seconds)
  done (took 10.263101429 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.065344406 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.846279688 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.067417667 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.075986034 seconds)
  done (took 22.049757166 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.291073348 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.08961056 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.835855458 seconds)
  done (took 10.21128056 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.691960509 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.565084032 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.679629484 seconds)
  done (took 9.932902701 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.206342835 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.909358913 seconds)
  done (took 8.111201198 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.212728261 seconds)
  done (took 4.208088726 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.905778322 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.379595141 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.53853539 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 3.043017138 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.722914338 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.480890768 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.567245088 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.363207531 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.489548709 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.506728826 seconds)
  done (took 27.992690841 seconds)
done (took 156.638123413 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.685577974 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.1126009 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.303596737 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.495250887 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.330868296 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.30476957 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.356827429 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.480646114 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.16482164 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.143119138 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.480737599 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.32305119 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.311927218 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.109322363 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.317792909 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.108865393 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.325004052 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.549188625 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.167566354 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.454103084 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.376084812 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.117177359 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.314212497 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.148337471 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.325216871 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.255623897 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.708892161 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.11200767 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.306013771 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.721065113 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.258780957 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.541689945 seconds)
  done (took 176.721505299 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.083688283 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.083203787 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.084382092 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.088713308 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.356676781 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.085254284 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.086059488 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.084902901 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.409583785 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.383198034 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.084249044 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.350004748 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.085407806 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.085333109 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.091814064 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.084891074 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.532037893 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.092847754 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.083325371 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.084709485 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.086819324 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.208863496 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.088193679 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.225100882 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.505825997 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.08574022 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.084829499 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.084230524 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.086071287 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.089835859 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.090554177 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.084874192 seconds)
  done (took 215.053459193 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.084285108 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.087214343 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.08619808 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.086239743 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.085233493 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.086582531 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.086855074 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.085777991 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.843574885 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.831882126 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.085385693 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.090495888 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.092155349 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.085473184 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.09732064 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.085209518 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.095673332 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.094404101 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.091213603 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.093505931 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.087096106 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.859611971 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.087352926 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.884542147 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.087435936 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.092404406 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.087420332 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.086226536 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.085982842 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.085997612 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.088536413 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.086735169 seconds)
  done (took 227.912053023 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.327076694 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.087221379 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.087859781 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.100435257 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.087815891 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.087451291 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.096965482 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.333482531 seconds)
  done (took 21.223097029 seconds)
done (took 642.932760276 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.510071628 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.86732704 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.222507097 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.112357139 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.372865623 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.159597074 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.106021186 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.174507789 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.766510745 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.18764676 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.526392807 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.115936137 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.82699977 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.136012431 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.226978931 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.169213387 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.477151751 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.759217182 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.245269206 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.781349611 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.324803493 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.034927342 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.190795515 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.791269403 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.541145515 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.050615215 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.123429055 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.485204601 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.112632537 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.343368278 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.763195006 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.376709919 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.12568395 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.109646796 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.16466603 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.151360308 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.31014925 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.121751791 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.219752112 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.822617285 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.765107332 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.650499818 seconds)
  done (took 109.338815206 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.096149426 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.094628435 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.094860527 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.094916184 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.102841285 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.094824949 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.095023155 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.094982078 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.094140847 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.094262818 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.094790548 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.102846717 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.094953148 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.10292825 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.095746936 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.096346782 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.094622232 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.102323059 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.095262208 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.095552509 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.09605291 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.095122802 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.093001061 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.096349691 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.095974106 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.095723512 seconds)
  done (took 56.532834073 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.091473685 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.244287902 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.385615533 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.126076978 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.09247988 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.094340766 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.120943156 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.099193029 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.094347719 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.095362502 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.186753964 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.096542889 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.103581542 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.381968478 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.12281062 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.092029602 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.092701339 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.093047009 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.251594209 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.108577223 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.123062355 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.100108716 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.122818396 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.107903736 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.094802751 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.093097137 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.097393816 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.50153042 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.105720361 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.189188635 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.162495562 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.128061734 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.443158468 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.393488352 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.161858787 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.100658718 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.093053798 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.23362956 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.106071758 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.093229471 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.122405206 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.101491697 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.384096018 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.600701152 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.110357713 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.093690664 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.497480182 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.244823268 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.144237979 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.109372717 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.393384824 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.12652582 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.094045543 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.095445198 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.130887521 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.106581326 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.0947065 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.337928301 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.110894966 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.123630846 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.101177028 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.095210704 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.257552526 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.104640562 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.248026795 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.104880561 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.100987804 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.095462732 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.387244277 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.125994404 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.595996031 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.111589177 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.094802868 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.190081391 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.25256451 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.525123798 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.110497622 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.260649744 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.462969066 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.133625558 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.107204469 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.486921833 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.137377159 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.105956758 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.095102325 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.095277477 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.094924336 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.139123886 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.122709653 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.518566601 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.602635192 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.358477842 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.137427977 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.109816002 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.097750037 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.338661487 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.107488486 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.096388411 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.380890845 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.624178683 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.113209662 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.102536 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.578354137 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.113973398 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.125804008 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.108424035 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.398063706 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.12756594 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.14110084 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.096456026 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.102758616 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.099664413 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.127328747 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.109105495 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.097099733 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.573173236 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.250535909 seconds)
  done (took 258.850624623 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.100888355 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.096804044 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.096434747 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.096626316 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.095983186 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.09751531 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.095767783 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.095780943 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.09826868 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.096301152 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.096087517 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.096413433 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.099114766 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.097226006 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.135842231 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.09953303 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.584591129 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.095388125 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.095984836 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.098337603 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.670871913 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.102917265 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.098111136 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.09883872 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.098289675 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.097111346 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.105433143 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.132956775 seconds)
  done (took 173.904458979 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.098761835 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.146212648 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.112303801 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.146120863 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.111922809 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.098757569 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.119237397 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.114223433 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.105202438 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.098853797 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.098942804 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.126775381 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.10716891 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.173745745 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.128490476 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.129969126 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.178050174 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.105288643 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.099026841 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.099423965 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.148244183 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.113333125 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.127483332 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.155175698 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.112643374 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.147323345 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.112945742 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.098039216 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.098002192 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.189631774 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.118402893 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.127186987 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.134334818 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.118059917 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.193815589 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.192860659 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.179985029 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.127531418 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.104558579 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.099327702 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.100432571 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.101413728 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.148508435 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.114187829 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.10233671 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.193249267 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.11919019 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.101118258 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.123070941 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.101110213 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.112280043 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.116246728 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.134387301 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.202215475 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.148359212 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.126889072 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.123064337 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.118568223 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.101520367 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.175473639 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.108979745 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.191881697 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.121822962 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.103080198 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.101805363 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.10499558 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.149215186 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.138411269 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.17808874 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.108763782 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.175524814 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.156757485 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.11629407 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.102048301 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.102714694 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.15018526 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.189732616 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.156383419 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.163732567 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.139197078 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.111842384 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.102019502 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.104163676 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.130574944 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.110313894 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.193287652 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.194892676 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.10925211 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.102944605 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.103109731 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.101836047 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.126619467 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.160064671 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.144532081 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.1872106 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.139223037 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.139387615 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.111055491 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.115866713 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.107412045 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.134307256 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.111642638 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.11562415 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.451648978 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.139173498 seconds)
  done (took 225.997844378 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.449111073 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.150804503 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.172995021 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.365247219 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.48558376 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.19538622 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.142573478 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.15570044 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.162551265 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.267727375 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.212089026 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.19481515 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.141399777 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.126227486 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.150919661 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.163355557 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.188266106 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.449536251 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.25585805 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.839482612 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.142600643 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.393568577 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.449590068 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.509217045 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.189986914 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.549375535 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.756243392 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.242860971 seconds)
  done (took 68.537468936 seconds)
done (took 895.17832847 seconds)
SAVING RESULT...
DONE!
