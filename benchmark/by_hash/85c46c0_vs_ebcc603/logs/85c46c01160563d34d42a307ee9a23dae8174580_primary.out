cset: moving following pidspec: 23119
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.847988479 seconds)
loading group "shootout"... done (took 1.242485591 seconds)
loading group "string"... done (took 0.685945576 seconds)
loading group "linalg"... done (took 8.788439986 seconds)
loading group "parallel"... done (took 0.172954521 seconds)
loading group "find"... done (took 3.071239765 seconds)
loading group "tuple"... done (took 2.1503662 seconds)
loading group "union"... done (took 15.155892234 seconds)
loading group "dates"... done (took 1.48971294 seconds)
loading group "micro"... done (took 0.225434581 seconds)
loading group "simd"... done (took 4.931902462 seconds)
loading group "io"... done (took 1.113181274 seconds)
loading group "random"... done (took 9.79168523 seconds)
loading group "problem"... done (took 1.446188248 seconds)
loading group "array"... done (took 26.163341201 seconds)
loading group "misc"... done (took 1.861825803 seconds)
loading group "scalar"... done (took 44.568631883 seconds)
loading group "sort"... done (took 3.387364357 seconds)
loading group "sparse"... done (took 13.113760308 seconds)
loading group "collection"... done (took 19.423406969 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.432302413 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.119229493 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.132899904 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.118560307 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.20277427 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.125675417 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.133636607 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.089283806 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.889531679 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.143782569 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.11988182 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.437607461 seconds)
done (took 5.438324971 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.167370375 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.091737611 seconds)
    (2/2) benchmarking "String"...
    done (took 0.086021376 seconds)
  done (took 1.404673782 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.072816765 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.064617597 seconds)
    (3/3) benchmarking "different"...
    done (took 0.07052212 seconds)
  done (took 1.43663265 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.067625845 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.137338095 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.069292367 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.069779663 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.069802881 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.068721452 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.06923455 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.068917602 seconds)
  done (took 1.785451107 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.073495546 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.068986941 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.068263039 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.070632036 seconds)
  done (took 1.51035028 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.066504295 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.123960294 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.0662392 seconds)
    (4/4) benchmarking "different"...
    done (took 0.067721292 seconds)
  done (took 1.550463384 seconds)
done (took 9.169505777 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.142640662 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.840994653 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.794803551 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.127484825 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.251980321 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.410955383 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.126119999 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.188070052 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.093915719 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.078545165 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.126922876 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.081719647 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.407172132 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.365333423 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.072877921 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.177766466 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.648656711 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.088996081 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.137043682 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.466698444 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.080815822 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.090945124 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.089794389 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.072883372 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.348466555 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.158040867 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.669935597 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.098350941 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.069719171 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.095784135 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.071797601 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.079363487 seconds)
  done (took 10.817489535 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.094957878 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.092218841 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.072214029 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.12708232 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.098604883 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.073923335 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.078830329 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.070998476 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.093733473 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.128867245 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.095042304 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.103723586 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.074836958 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.072454532 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.077737182 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.201617428 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.082176832 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.083856727 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.070345286 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.084870288 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.10919563 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.083025938 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.082414393 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.082216399 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.137067348 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.174034734 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.098720047 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.102108179 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.069412528 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.083162334 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.118680917 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.12765578 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.07028498 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.068278538 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.123749282 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.098995485 seconds)
  done (took 4.791993853 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.027985574 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.09825012 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.086817502 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.077500826 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.110613119 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.115861545 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.129779604 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.128150796 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.104730567 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072143148 seconds)
    (10/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.09812225 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.155755868 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.694236163 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.221636828 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.073329517 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.125084175 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.368674038 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.09380214 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071778728 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069870814 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.07491142 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.073336347 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.117555541 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.068465878 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.185832395 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.603020526 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.072032861 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071944167 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.099949409 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.067980031 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.146446036 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.097014463 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.072543839 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.554683185 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.067411164 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.179423613 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.093103732 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.098575932 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.070171774 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.071177765 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.082321727 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.069657967 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.112207366 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.084100451 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.558723175 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.073337287 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.616551944 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.232132972 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.077351961 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.075656973 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.105484509 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.067445365 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.070933362 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.917910277 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.152960074 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.07012379 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.284184091 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069085453 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.0696947 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.072311702 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.103551413 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.070528755 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.0743996 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.076551547 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099351609 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.885781772 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.092591735 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.099358466 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.070793228 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.414741779 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.078074136 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.072751583 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072964731 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.072505045 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.111323163 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069812986 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069425228 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.116625314 seconds)
    (78/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.087808364 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.097936043 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.090365357 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.071020759 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.068959193 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.067264259 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.324168913 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.186665655 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067580732 seconds)
    (87/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.065042515 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.068380688 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.612747886 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.067251484 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.070709489 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.0722356 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.096423542 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.07115588 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.067097679 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.068265033 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.102782103 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.072055379 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.340139135 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.070625652 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.529194788 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.072926111 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.107191593 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.123242701 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.070694476 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.108431429 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.071328187 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.068291956 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.07733929 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.068885998 seconds)
    (111/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.06806802 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.067559284 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.072694952 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.069298196 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.070187044 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.073077476 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.072094295 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.070791778 seconds)
  done (took 23.554560891 seconds)
done (took 41.422852733 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.389017523 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.080640509 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.081496798 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.08140075 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.082559544 seconds)
  done (took 1.996509344 seconds)
done (took 3.377045476 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.13567919 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.078727273 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.067154044 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.10538266 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.072211986 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.106687635 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.113800058 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.109565949 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.072372012 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.07197626 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.072017969 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.110439276 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.110417799 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.071934206 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.103073094 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.109033232 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.193107017 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.067352987 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.072194356 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.071913571 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.071797479 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.06703485 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.072328454 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.072110061 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.103932879 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.072339775 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.067426225 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.103007066 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.072556002 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.103107521 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.072056201 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.072065119 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.072251819 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.104526543 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.07183792 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.103249378 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.067394398 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.072274012 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.072526142 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.072849338 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.072209141 seconds)
  done (took 4.902423013 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.072335102 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.084212057 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.087088963 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.064869901 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.07466353 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.085658087 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.064842632 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.085038993 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.094965591 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.08580721 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.08616896 seconds)
  done (took 2.216793287 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071787947 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.08602817 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.088288928 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.065174789 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.076849163 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08676272 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.065174738 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.086416139 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.089333068 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.087193423 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.086730058 seconds)
  done (took 2.20088933 seconds)
done (took 10.622656908 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.098511987 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.067649328 seconds)
  done (took 1.460476057 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.228146976 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.507758934 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.983597629 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.09590312 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.074229342 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.08758755 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.202658664 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.068593278 seconds)
  done (took 7.735616854 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.105066458 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.071761609 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.071057488 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.070554309 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.071086785 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.071368525 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.072025246 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.071277244 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.072419531 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.072595986 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.070627262 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.073078215 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.072803526 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.07258589 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.070941024 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.071562881 seconds)
  done (took 2.595045085 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.105347496 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.071948226 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.103217408 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.06482829 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.075762461 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.065853745 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.074287577 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.076893633 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.073617885 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.074905612 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.075986092 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.075007766 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.074218583 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.074532222 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.076387889 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.076556602 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.076667979 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.073904418 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.076864933 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.077734158 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.0766794 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.07717291 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.07665954 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.075421985 seconds)
  done (took 3.282671418 seconds)
done (took 16.385367523 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.178281916 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.077036794 seconds)
  done (took 1.561721298 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.069762037 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.070132175 seconds)
  done (took 1.463108027 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.074984337 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.062447918 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.08274607 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.07447089 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.064792793 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.064272694 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.081373383 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.064599767 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.064592319 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.064382167 seconds)
  done (took 2.021942691 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.064310344 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.070341634 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.068727972 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.067957261 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.070879764 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.065488912 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.068331605 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.066098595 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.072962309 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.064753886 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.069341761 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.086705138 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.068424988 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.087218237 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.068184451 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.068918396 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.070873962 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.068815669 seconds)
  done (took 2.595276547 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.062250849 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.063061125 seconds)
  done (took 1.457455019 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.066555532 seconds)
    (2/7) benchmarking "second"...
    done (took 0.063438153 seconds)
    (3/7) benchmarking "month"...
    done (took 0.067234657 seconds)
    (4/7) benchmarking "year"...
    done (took 0.066909486 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.065011173 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.064111964 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.065044249 seconds)
  done (took 1.782796001 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.433282227 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.126776523 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.354339983 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.072181734 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.080802186 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.26268147 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.06670079 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.072216177 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.071546298 seconds)
  done (took 2.912390418 seconds)
done (took 15.133823417 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.083400107 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.183314849 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.089440973 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.428519328 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.095527464 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.070786135 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.115713076 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.185135672 seconds)
done (took 2.603468029 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.255690663 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.176173769 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.326575097 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.153559287 seconds)
  done (took 2.991532442 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.337651827 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.08209483 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.07966148 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.070197191 seconds)
  done (took 1.914106642 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.066015488 seconds)
    (2/2) benchmarking "read"...
    done (took 0.072665368 seconds)
  done (took 1.477690391 seconds)
done (took 7.98566284 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.073808965 seconds)
    (2/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.099068695 seconds)
    (3/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.064390573 seconds)
    (4/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.066209716 seconds)
    (5/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.064672667 seconds)
    (6/24) benchmarking ("one", "Float64")...
    done (took 0.067080707 seconds)
    (7/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.078517288 seconds)
    (8/24) benchmarking ("zero", "Float64")...
    done (took 0.068615992 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.066564165 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.067352828 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.064730073 seconds)
    (12/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.065017376 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 0.067328466 seconds)
    (14/24) benchmarking ("one", "Float32")...
    done (took 0.067189314 seconds)
    (15/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06722334 seconds)
    (16/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067258273 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067107417 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067239029 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.067328431 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067249517 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067157532 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067967698 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.066741084 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.067288773 seconds)
  done (took 3.019595186 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.080874415 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.066836696 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.069925778 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.069618406 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.069917783 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.070259368 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.069880204 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.068674603 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.070225849 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.068129613 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070354884 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.070376782 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.068337706 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.070706827 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068555448 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.070853193 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.070141215 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068827916 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068221819 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.070143535 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.06994629 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068695039 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.07045378 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.070334513 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.070769645 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.070776902 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.06816942 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.067569466 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.068397193 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.070466513 seconds)
  done (took 3.452659069 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.067154511 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.060871989 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.061673271 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.0708869 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.061120339 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.062355662 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.063367157 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.062328114 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.063052937 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.064241292 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.063472583 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.062432026 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.063431477 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.062502944 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.062557872 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.063163821 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.067841871 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.082504938 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.062869967 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.062704699 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.067003225 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.063065932 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.062625149 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.062371551 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.06335894 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.062989715 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.062384613 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.063153205 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.062682406 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.063708265 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.063283576 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.066618927 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.068066735 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.063261636 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.073407223 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.067810936 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.063011276 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.067108861 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.064052004 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.062720805 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.062349916 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.062451128 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.062584118 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.062713081 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.073962925 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.063218998 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.063893864 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.063749294 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.062744153 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.062268968 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.062514929 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.064589484 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.071428659 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.064304715 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.062721688 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.063949034 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.062604466 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.063341038 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.062910529 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.062371972 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.062312591 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.066831902 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.064501129 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.063722674 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.082742444 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.064219324 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.073228842 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.062797832 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.063650552 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.066485654 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.062997329 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.081227187 seconds)
  done (took 6.028536439 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.072928542 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.074937095 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.082822646 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.07394548 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067312904 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.06430111 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.06803228 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064135135 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.07443794 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.06897102 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064439601 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.068119095 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.074236508 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.068942577 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.065757569 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.074123859 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.068985897 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067723301 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.06425376 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.069466273 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065494801 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.068276564 seconds)
  done (took 2.89828729 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.141691519 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068594535 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.10857028 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.073897128 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.072096592 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.073799752 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.069430638 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.069109158 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069482715 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.069822963 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.0700089 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069677486 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.071998565 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070128479 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070288037 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070118396 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.069420875 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.069951735 seconds)
  done (took 2.73344265 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.078364043 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.068761634 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.093245322 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.068723984 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.06866583 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.068885243 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.072693069 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.073989957 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.068621906 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.069319453 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.073649301 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068496954 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.068575376 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069155073 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069010087 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.068739639 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.068674074 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069059311 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.073676045 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.073266013 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.073069412 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.073698288 seconds)
  done (took 2.937880131 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078491655 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.067824195 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.085223935 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.069877624 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.065027426 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062940714 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.069634373 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.068301266 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.069492709 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.067827964 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068356234 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.063655542 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.070357008 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.068269559 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.070840079 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068125474 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.067796185 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.068519396 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068109606 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.063646708 seconds)
  done (took 2.741918631 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.073639541 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064498326 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.065918116 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071745525 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065837172 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.066247775 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071927406 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.065963594 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.06584249 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.088336601 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.066205325 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.066142992 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072138685 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.069839922 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.066679408 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072262127 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072165702 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.07206316 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.066385908 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06638082 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.087980122 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.065258956 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.070695722 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.066591311 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.0662156 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.066337053 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.066306429 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.069726291 seconds)
  done (took 3.310111073 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065422289 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064436344 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.066083306 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.066725906 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.066211934 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.066485799 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.066413639 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.066795926 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.066429203 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066424924 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.066589461 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.066106322 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.069645259 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.0668828 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06653035 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.066536207 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066187689 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.066740478 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066942832 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066692657 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.065982284 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066305486 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.06632252 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.06634107 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066161073 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.066250195 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066170876 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066459737 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066091351 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066476259 seconds)
  done (took 3.359848546 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.074186704 seconds)
    (2/2) benchmarking "in"...
    done (took 0.07428512 seconds)
  done (took 1.513905415 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.06282072 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.079099297 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.062495691 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.075410929 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071911086 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.066619118 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.072573964 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.072189185 seconds)
  done (took 1.924579819 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.067693081 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.092378342 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.065308431 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.065523516 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.068390628 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.131745835 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.078001396 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.076637139 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078839996 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.067300657 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.065884343 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.077321732 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.064588355 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.078479837 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066638253 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.073997759 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.072305052 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.083147861 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.078105778 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.063367142 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07735077 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.065818273 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.064110839 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.065787065 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.06542933 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.072206339 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.080311488 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.077791107 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.074175763 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.062731812 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.084129182 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.064044879 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.065090621 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.073854306 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.068678685 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.064114575 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.102234256 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.064695723 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.069939535 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.06343917 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.076364933 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.083855928 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.076974017 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.082644945 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.065667861 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.066015308 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.063333939 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.066262091 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.067487766 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.073537739 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.064046785 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071808882 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.063064143 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.065580247 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.075049651 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.06440036 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.069511085 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.073625324 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.078009738 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.074926764 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.076666073 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.079872925 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.07337658 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.072540703 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.064864137 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.084482848 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.06603249 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.07715243 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.079481702 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.065191727 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.078100546 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.063530587 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.062825834 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.064009175 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.098465582 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.065844628 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.065574676 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.06409534 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.064034542 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.065674273 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.073645678 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.069983078 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071473763 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.067691237 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.080369053 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.074093281 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.06392948 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.071461893 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.082569758 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.067513819 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.064283439 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.081271697 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.067536045 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.06372867 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.082515866 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.073932774 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.065408912 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.064914445 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.067672274 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077544271 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.065156074 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.062625461 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.072657502 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.065940777 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.066207888 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.068464716 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071582842 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.063205755 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.07338051 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.067789858 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.064260069 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.061769863 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.067345862 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.063688759 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.061313416 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.072077721 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.062634668 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07752444 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.069462395 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.077500843 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.07804065 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.073680219 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.079131861 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.062814726 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.061844315 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.222340813 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.073618729 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.06542351 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.082274066 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.064542016 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.078669753 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.063877209 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.06597614 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.074618331 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.062967316 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066535323 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.063845555 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.069376649 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.065565182 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065966944 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.070081502 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.073173372 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.076664488 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.065407116 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.073166974 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.0644015 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.079779341 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.074055473 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.068927016 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.067743816 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.064857282 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.076420937 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.070363601 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.073495158 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.063466778 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.064667875 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.063556282 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.074606983 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073797535 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.066067404 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.071780192 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.068233706 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.064815717 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.064074721 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.065014323 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.067474369 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.067871518 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.064547919 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071519995 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.0729287 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.078231121 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.070741192 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.071383335 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.063195518 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.06378396 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.06581631 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.063938978 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.068264628 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.073538632 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.080209005 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.076156562 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.086499908 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.06483688 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.074062471 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.065861686 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.081365275 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.077902171 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.065341935 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.069162964 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.06305111 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.0662987 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.074257394 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076182042 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.078585076 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.079616989 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.068894558 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.068691111 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.063581792 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.079259319 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.064528983 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072342092 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.07254551 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.069162148 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.063529722 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.06559811 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.073272182 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.068482915 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.064141009 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.080342273 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.070572415 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.063622745 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.078873422 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.064139795 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.075340801 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.063687648 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.067639462 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.069403845 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.066240731 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.073906365 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.080289663 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.063181306 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.064655554 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.080086197 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.066223882 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065586484 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.07228505 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.079631195 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.06860402 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.072061257 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.075233187 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.074075637 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.068250066 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.074001727 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.065381677 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.0735253 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.066978862 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.076175548 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.063869315 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082044069 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.062935209 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.078609633 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.063679159 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.074136509 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.063990452 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072285319 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.064086751 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.080055338 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.064595668 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.063919089 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.075021564 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.062039438 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.072503657 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.062257585 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.068145856 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.069413769 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.072742501 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.211195874 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.073595051 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.067733737 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.074461475 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.069611235 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.073209556 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.073943535 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.068772057 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.063631124 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.072593278 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.07587891 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.072954236 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.065587638 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.065762147 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.064468605 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.074007193 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.066211727 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.065576506 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.073115968 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.068900774 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.06976346 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06578991 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.066587013 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.065920916 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072760994 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.073942288 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082961638 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.073515232 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.07213707 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.073758236 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.063901981 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.079200884 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.064491515 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.074604483 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.0626341 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.070611774 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.073853441 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.064541807 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.084202757 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.066170613 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.072429936 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076713364 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072614439 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.067437515 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.082436974 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.06749215 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.07254517 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.072347079 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.068819867 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.070930637 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.066292265 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.072739326 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.073980467 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.075606474 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.065392208 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.072088324 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.073358932 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066374601 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.072087575 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.065983876 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.073036338 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.066332171 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.063447939 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.069018704 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076544998 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.069441144 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.069619556 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.06492281 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.062932034 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.064841337 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.072111907 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.068493419 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.073248816 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.080126616 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.063262743 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.065441692 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.064122402 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.067771057 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082412879 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074262843 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.072385923 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.068909258 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.063437452 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.066204215 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.066291437 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.064467029 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.068227496 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.06330022 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.063609086 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.075241882 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.066171602 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.068918807 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06458128 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.065524996 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.074026707 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.069638322 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.065285515 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.070872113 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.063950877 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.069204168 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.06344534 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.065611756 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.068481097 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.063203545 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.067525801 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.07505614 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.081244548 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.070522126 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.073090943 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.064870475 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.072701348 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.079979286 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.071678417 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.065197001 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.073980637 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.062958219 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.082035688 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.073125869 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072445446 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.07327448 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.064456054 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.080415415 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.067837822 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.073300819 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.079164188 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064553178 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.070354647 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.062676272 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07933659 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.068056707 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.063023697 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.221833636 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.074349297 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.071585279 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.077376673 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.066095395 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.073156236 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.070549882 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.068175776 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.066403692 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.066173071 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.073641579 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.080908787 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.065153805 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.069346051 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.072559006 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.073053866 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.06863357 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076862569 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.073166479 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.065829785 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.066360095 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.06782204 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.065919776 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.076898922 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06489188 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.068843077 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.068432535 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.064047965 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.070872051 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.081425824 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.073998322 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.0746656 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.064101064 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.063088002 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.082477767 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.06764339 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.068084968 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.072671288 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.073913236 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.077519586 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.073957157 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.081584081 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.064939343 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.070017838 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076806928 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.065082278 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.06369777 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.067704865 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.064941389 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.072130466 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073811793 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.071464852 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.066502382 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.071091364 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.078158339 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.065691771 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.069118372 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.069822636 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.065243701 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.0740265 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.07110647 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.074729505 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.066006852 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.064037124 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.067327577 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.073439493 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.072075986 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.073547415 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.065302877 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.071874743 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.078786525 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.072222999 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.068119797 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.063730223 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.068124362 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.074040561 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.069579656 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.064094005 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.069093242 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.067748506 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.072142546 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.072999684 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.067498722 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.062354008 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.079876742 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.070723372 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.072535814 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.064698128 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.064745123 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063714833 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.063714727 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075969486 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.063845518 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.066005698 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.068981292 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.066375722 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.082624109 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.073115691 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.081029871 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065345233 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.068834925 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.064141562 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.07482791 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.069009939 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.064643229 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.075371017 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.063410151 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.08010881 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.076077991 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.069545415 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.084711751 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.069021128 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.072178027 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.079032539 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.074220101 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.073188538 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.067505588 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072457159 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.065348258 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.074836299 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.062969163 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.062066524 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.073679062 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071450448 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075262338 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.063064236 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.073644136 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.065424493 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.071999906 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.071319606 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.212228561 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065967593 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.06775801 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.075243254 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.069538711 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.074717825 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.069391234 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.082568324 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.066063939 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.076149606 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.073982277 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.07559915 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.078516762 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.077157805 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.072506071 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.065337186 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.072836239 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.073055044 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.065986713 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.069406044 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.068155497 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.086899909 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.066401772 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.065782372 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.078963365 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.071585713 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.064296146 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.071472126 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.069049104 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.075124503 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.065675744 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.074166556 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.066836977 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.063855066 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.068645797 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.069246682 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.063379275 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.064278612 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.06440684 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074433003 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.068610248 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.064588699 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.083409997 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.066116505 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.073068678 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076097347 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.07076878 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.065694065 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.062692422 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.065287783 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.077397823 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.080821549 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.067665837 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.073691136 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.065950213 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.07375887 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.062360772 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.071761546 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.072791985 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.073097143 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.062952501 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062962266 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.077853138 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07856322 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.068205029 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.073868287 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.073707486 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.065814036 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.086831684 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.073496842 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.065791191 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.075668368 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.067234089 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.063866216 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.063825856 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.066236752 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.076608532 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.063997374 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.067036247 seconds)
  done (took 44.030646072 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.100969357 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.06350561 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063866974 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.064295482 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072988808 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064982098 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.064505705 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.065214556 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.064886952 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.066682063 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.064225639 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06695883 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.071034705 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.078736903 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.07411578 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.068471137 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064052458 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.065450598 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.064126381 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065164209 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.071542121 seconds)
  done (took 2.943977872 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.066391528 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.06657188 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.06823643 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.068600542 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067923037 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.064279208 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.06869675 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064226904 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.069356148 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065090607 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.069167014 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064518369 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.064883434 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.064387888 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064901145 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.065890809 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.069205869 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.068294429 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.064227126 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.068462471 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.066112671 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.068885035 seconds)
  done (took 2.938732231 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.06369274 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.062941722 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.072745641 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.063297467 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.063335228 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.067199996 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.063894397 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.06807814 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.068007697 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.068195436 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.07304457 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.06469728 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.063230986 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.069786362 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.063479495 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.064672812 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.108964492 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.064982717 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.065125458 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.063360398 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.066927421 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.074057816 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.064038486 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.063808248 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.068075153 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.067704747 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.063626123 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.066487456 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.064525137 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.068305115 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.065407799 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.063258322 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.072885009 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.072260092 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.06856031 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.068296936 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.065924585 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.064783017 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.063503547 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.063791445 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.072640522 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.065622442 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.063773955 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.065261435 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.073219913 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.063603192 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.063309335 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.073098071 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.063334429 seconds)
  done (took 4.777041591 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.073493318 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.118032453 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.069779805 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.098476441 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.077444249 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.070565061 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.070340929 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.099242055 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.0651068 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.066002029 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.078596481 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.078912208 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.067089912 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.068463228 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.070248984 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.067135912 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.068205363 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.066333813 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.069847105 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.067030077 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.070287867 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.071180744 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.077408646 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.078001474 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.068002998 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.0658422 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.066698314 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.068655284 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.077759679 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.070681468 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.068721375 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.069247192 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.078608298 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.070093156 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.066617763 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.066960835 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.079029953 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.067376584 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.066399199 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.064326736 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.066697053 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.068772344 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.071764551 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.079244204 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.06780398 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.072303703 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.067579415 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.064878497 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.078024244 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.067725986 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.071434957 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.079386527 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.068397759 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.067695848 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.068591803 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.078321636 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.067241735 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.065799784 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.067317146 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.077678494 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.065408191 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.068334479 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.081967642 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.066475685 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.070657733 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.079299102 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.072249252 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.068256395 seconds)
  done (took 6.532729495 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.07169526 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.097471731 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.080721519 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.08096193 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.075280084 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.075106895 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.075599869 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.074954843 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074501917 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.078501958 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.075272034 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.110609036 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.071641754 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.077100373 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.076036515 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.075515657 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.075532921 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.075442156 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.075460025 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.07521111 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.075219164 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.081297433 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.075466704 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.080117194 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076315137 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.070269765 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.075491106 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074993874 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.081368599 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.0750666 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.078000565 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.074864126 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.075101381 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.080936547 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.077799321 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.075127213 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063993175 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072892013 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.07330271 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.075110679 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.071467785 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.081689396 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.075369639 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.071004519 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.075475364 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.074619529 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.081310208 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.077987894 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.077591875 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.078980233 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.075663076 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.081173432 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.075338781 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.075215901 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.081060214 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.083602449 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.081346707 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.08141756 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.07561946 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.081186145 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.0810103 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.083628342 seconds)
  done (took 6.321579837 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075822152 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.069991136 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.084027365 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.063881863 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.063503871 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.074712071 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.063838477 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.063639766 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.071697259 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.071376385 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.073222227 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.073947837 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.076257734 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.073515811 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.073922621 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.077087281 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.073851166 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.073756065 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.071450991 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.074089972 seconds)
  done (took 2.952054599 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.077561588 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.081706614 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.069629598 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.074187418 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.069632998 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.074264152 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.069128631 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069713921 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070391504 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069943852 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.075051951 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.075306358 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070345608 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.075027975 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.075348356 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.073868152 seconds)
  done (took 2.665756512 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.066188071 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.070667352 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.069642845 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.063975288 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.067748666 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.064520598 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.065498894 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.06374257 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.066769457 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.078816248 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.064816746 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.06779737 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.065565869 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.06399819 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.06442799 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.067877435 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.066933875 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.06611961 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.065137694 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.069861531 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.074285424 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.066252133 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.068036904 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.068075611 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.067866242 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.074524438 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.066909792 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.067885731 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.065293769 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.068107823 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.067714289 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.072416057 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.0678849 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.066172396 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.06404032 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.065429252 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.065260425 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.068336368 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.068265584 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.065636148 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.063737542 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.070442113 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.065347462 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.066055207 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.066803819 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.068305508 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.066313548 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.071052602 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.065517949 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.067681124 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.065938636 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.067053977 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.065738852 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.073162518 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.068160649 seconds)
  done (took 5.205439064 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079734452 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.06831543 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.063395869 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.06353487 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.069251337 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.069859281 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.069429296 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.069738453 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070333834 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.063711927 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.070012038 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.069525802 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069954886 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.06971828 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070161451 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.069729971 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.063947742 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.070288684 seconds)
  done (took 2.752442897 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.068624876 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06835673 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.069192652 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.066043395 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.065975938 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.071296898 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064328582 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.065650728 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066037642 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066336598 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066558954 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.066023318 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065382557 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.065492652 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.070638187 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066654792 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.065821321 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064186034 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.06593592 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.063875928 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.071377277 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064764686 seconds)
  done (took 2.970420647 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.089998225 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.085892117 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.132612149 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.083418636 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.092469297 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.07561043 seconds)
  done (took 2.064137755 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.095464413 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.100764694 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.068763612 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069176842 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074614422 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072425774 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072471176 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072667567 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076486214 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07683307 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073073199 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076787073 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076584109 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07897501 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07482851 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074858561 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07284194 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072830492 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069844774 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.081703655 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073384746 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076886104 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072998793 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072711726 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073363925 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.077985652 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076413314 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077260148 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072853116 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077169895 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075018347 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073016495 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077076703 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07708061 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069374401 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076471755 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072799833 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.081249698 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073649208 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076838261 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.068714489 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075028207 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077071242 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.076856491 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077481698 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073149658 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07704754 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071880322 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071545853 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.081163801 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07515741 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.078874282 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075039 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077292052 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076519931 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.082542444 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.077164636 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.078692551 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075088225 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.077352292 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.079152696 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075312065 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.078902395 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077248134 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075559517 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07898951 seconds)
  done (took 6.532189849 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.106067515 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.068330667 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071035924 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074764716 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076763421 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072474128 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071803954 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071420719 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072273733 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06975186 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.110324213 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074076292 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079544096 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.082575963 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073558926 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072916576 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073320574 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.079558085 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070318253 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.082757653 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073055937 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07928445 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07883635 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.078766279 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076025666 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073727378 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07325163 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07212152 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071159935 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071099526 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076626389 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073427627 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.078803717 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.070377573 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078913469 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073105725 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072656911 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.0756935 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071380008 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073424635 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07869544 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.081987707 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073271663 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073339957 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077549091 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07355798 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073023721 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070134062 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073345272 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069958146 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077615958 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.077441037 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.077639824 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.079125948 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073493924 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073782088 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073726555 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073079187 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073521197 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07504995 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079116125 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073193693 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.083078423 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073243432 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073485937 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.079102622 seconds)
  done (took 6.535940109 seconds)
done (took 134.479259312 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.233766563 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.199063616 seconds)
  done (took 1.922103287 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.076334185 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.167804857 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.076956877 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.076577918 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.112471998 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108938231 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.077566615 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.074212428 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.079139815 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.07592851 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.143527902 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.077732837 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.074900168 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.076005441 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.07549575 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.076036709 seconds)
  done (took 2.961638085 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.109458716 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.191565852 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.085854101 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.07319806 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.156852074 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.081039629 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.075901964 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.081199276 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.081118587 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.073622361 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.111896425 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.088052945 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.079955172 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.081135817 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.075501221 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.079720283 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.081000393 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.081107256 seconds)
  done (took 3.207489915 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.105272373 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.093384563 seconds)
  done (took 1.72336896 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.157698878 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.106988203 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.146296155 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.351596744 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.143190387 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.141256726 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.144492836 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.13946544 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.112249356 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.136858076 seconds)
  done (took 3.096181914 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.108076201 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.107821985 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.314766373 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.10766983 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.086346755 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.081861038 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.079208232 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.084349043 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.079436263 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.079968662 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.127333914 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.079100717 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.076707241 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.130491966 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.105431765 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.111471508 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.074801069 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.082751503 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.084032016 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.074589481 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.080530497 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.08295824 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.181073013 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.080116428 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.10547049 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.07935963 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.079798362 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.076347527 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.076452778 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.080468608 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.080664551 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.101508307 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.080251862 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.084902089 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.081655801 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.102954735 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.075487885 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.102714282 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.076273075 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.073909485 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.076923044 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.080922867 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.073714295 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.080376968 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.077106517 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.07953429 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.08170674 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.072118092 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.077134798 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.078643033 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.07653644 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.081074711 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.080679456 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.081295298 seconds)
  done (took 6.491179458 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.121762997 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.114172424 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.072433716 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.12080952 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.111271607 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.074060359 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.127158174 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.107533397 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.127789939 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.072718104 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.072183294 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.073089037 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.081398845 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.085111197 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.122461936 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.114345626 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.073395142 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.071588986 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.114164655 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.113975982 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071070958 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.111625198 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.115754953 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.112890317 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.070220453 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.071675401 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.071497586 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.07277354 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.082535923 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.080472617 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.072707617 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.084179212 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.087219539 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.077498014 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070240396 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.072688082 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071892114 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.080139104 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.080219578 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.08162624 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.077106596 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.0694388 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069976038 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070590612 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.072707819 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070737172 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.08007836 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.079073071 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.083046197 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.072706015 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.073257009 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.072081171 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.073270082 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.080286214 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.079567651 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.082065262 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.084389676 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.072507514 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.072751416 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.074859608 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.084912087 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.081814546 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.081383016 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.073794736 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.082859442 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.071678237 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.082200646 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.085064497 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.072987953 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.072869724 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.073190956 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.072877473 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.073284715 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.079722873 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.079762514 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.073532776 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.072932788 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.072396196 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.08073992 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.079176711 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.07205146 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.081684223 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071260111 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.073058293 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.072845242 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.072765818 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.081645985 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.079060867 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.071159404 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070138476 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.070341628 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070185666 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.069355093 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.079206947 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.078609427 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.079802391 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.080906146 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.072616609 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.081761626 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.078439547 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070534691 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.075869512 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069576927 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070775739 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.072069809 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.078162542 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.21995727 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.080423733 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.072002215 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.070790161 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.078093148 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080589392 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.070728924 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.077475054 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079262009 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.077609677 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.070125039 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.08003024 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.07048616 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.079836222 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071003427 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079727762 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.07073518 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.077174327 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.070450063 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.069989661 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.070477664 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.08037218 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.07147517 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070636606 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070809286 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070793401 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.077310521 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.08341112 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071376 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.077182047 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.077570632 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.071248954 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.079867446 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070511099 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.08205314 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071426456 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070892075 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06978513 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.082741284 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.070602775 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.070986972 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.070562425 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.079331228 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070836532 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079250058 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.076692446 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.071604543 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.083965651 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.081178277 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.079727979 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.081457886 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071175886 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.07067863 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.07231192 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.075983063 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.313393287 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.081121428 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.07177897 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.07275688 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.079222091 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.082736908 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.072547971 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.079468082 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.080091137 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.079535417 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.073168198 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.073132868 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.083013048 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.083476273 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.077508983 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.082433287 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.080594953 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.07232982 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.078723635 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.080446615 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.07254799 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.085663305 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.073427742 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.084743523 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.083691968 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.079172642 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.08337723 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.084632304 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.082512165 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.08257979 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.082256845 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.070718099 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.072384078 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.079393199 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.072792457 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.072512759 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.079153527 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.073009866 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.073172845 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.085392769 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.070159454 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.079466647 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.069282407 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.076588165 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068746304 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069862669 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080665228 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069699407 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072412937 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.078275147 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.072061619 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.078261778 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080225872 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.221831024 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.073074644 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.074137226 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.084308859 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.08279543 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.073223717 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.072735683 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.073194488 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.082852044 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.081984944 seconds)
  done (took 19.697484119 seconds)
done (took 40.633795704 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.173020565 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.119379918 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.230631823 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.210560538 seconds)
  done (took 2.36076399 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.102980276 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.067476831 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.085777798 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.09365927 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.068112996 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.081390107 seconds)
  done (took 2.075489822 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.203933628 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.178441504 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.255459943 seconds)
  done (took 2.204250721 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.376515653 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.158652188 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.224750111 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.518856944 seconds)
  done (took 2.952099373 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.112564097 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.105052672 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.082868389 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.117496107 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.090910026 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.066745729 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.140371032 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.073956131 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.106189063 seconds)
  done (took 2.529568021 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.146401603 seconds)
done (took 13.832846531 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.243294736 seconds)
    (2/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.109626806 seconds)
    (3/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.269444173 seconds)
    (4/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.126638003 seconds)
    (5/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.099005092 seconds)
    (6/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.097093392 seconds)
    (7/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.195566356 seconds)
    (8/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.085716596 seconds)
    (9/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.099977166 seconds)
    (10/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.266231373 seconds)
    (11/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.195490668 seconds)
    (12/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.197024522 seconds)
    (13/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.129971874 seconds)
    (14/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.078579485 seconds)
    (15/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.075864035 seconds)
    (16/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.080487999 seconds)
    (17/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.070470242 seconds)
    (18/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.069879024 seconds)
    (19/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.096572538 seconds)
    (20/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.082345812 seconds)
    (21/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.229555044 seconds)
    (22/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.082812765 seconds)
    (23/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.080469852 seconds)
    (24/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.076218182 seconds)
    (25/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.080759002 seconds)
    (26/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.078478566 seconds)
    (27/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.078766668 seconds)
    (28/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.078910589 seconds)
    (29/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.098233074 seconds)
    (30/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.227332658 seconds)
    (31/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.095868441 seconds)
    (32/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.160240633 seconds)
    (33/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.179417675 seconds)
    (34/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.183433605 seconds)
    (35/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.197847952 seconds)
    (36/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.073803359 seconds)
    (37/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.188562238 seconds)
    (38/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.171238499 seconds)
    (39/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.082615636 seconds)
    (40/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.078092957 seconds)
    (41/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.080337255 seconds)
    (42/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.08138628 seconds)
    (43/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.068777741 seconds)
    (44/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.100621052 seconds)
    (45/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.077365629 seconds)
    (46/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.083308513 seconds)
    (47/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.206072683 seconds)
    (48/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.081077999 seconds)
    (49/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.171816284 seconds)
    (50/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.079981549 seconds)
    (51/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.093873157 seconds)
    (52/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.079710515 seconds)
    (53/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.203721672 seconds)
    (54/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.192863616 seconds)
    (55/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.099766031 seconds)
    (56/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.207827909 seconds)
    (57/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.149671496 seconds)
    (58/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.192359558 seconds)
    (59/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.092987482 seconds)
    (60/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.255632547 seconds)
    (61/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.072075104 seconds)
    (62/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.215632355 seconds)
    (63/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.226425265 seconds)
    (64/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.070498587 seconds)
    (65/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.078422298 seconds)
    (66/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.211630559 seconds)
    (67/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.077382029 seconds)
    (68/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.087087662 seconds)
    (69/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.088547375 seconds)
    (70/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.146652589 seconds)
    (71/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.077023308 seconds)
    (72/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.073561152 seconds)
    (73/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.074083401 seconds)
    (74/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.077166068 seconds)
    (75/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.167826768 seconds)
    (76/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.070488499 seconds)
    (77/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.069790237 seconds)
    (78/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.179438373 seconds)
    (79/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.069380207 seconds)
    (80/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.160559985 seconds)
    (81/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.068906263 seconds)
    (82/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.170356227 seconds)
    (83/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.159148292 seconds)
    (84/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.076582911 seconds)
    (85/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.06773313 seconds)
    (86/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.073463977 seconds)
    (87/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.085068999 seconds)
    (88/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.077846859 seconds)
    (89/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.069940022 seconds)
    (90/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.089756589 seconds)
    (91/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.181561823 seconds)
    (92/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.067411472 seconds)
    (93/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.07512886 seconds)
    (94/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.196502047 seconds)
    (95/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.098075498 seconds)
    (96/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.067677414 seconds)
    (97/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.07803737 seconds)
    (98/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.227072633 seconds)
    (99/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.08754063 seconds)
    (100/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.201894671 seconds)
    (101/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.075866682 seconds)
    (102/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.095968468 seconds)
    (103/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.071317245 seconds)
    (104/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.074663203 seconds)
    (105/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.073850042 seconds)
    (106/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.088097526 seconds)
    (107/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.066803893 seconds)
    (108/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.066690768 seconds)
    (109/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.15520847 seconds)
    (110/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.066410333 seconds)
    (111/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.16402174 seconds)
    (112/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.139564872 seconds)
    (113/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.067615325 seconds)
    (114/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.084763923 seconds)
    (115/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.066879732 seconds)
    (116/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.067160188 seconds)
    (117/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.170488834 seconds)
    (118/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.229272521 seconds)
    (119/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.077655085 seconds)
    (120/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.074087702 seconds)
    (121/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.107571576 seconds)
    (122/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.074331968 seconds)
    (123/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.07768807 seconds)
    (124/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.071599633 seconds)
    (125/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.074873518 seconds)
    (126/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.067612159 seconds)
    (127/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.078778852 seconds)
    (128/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.121578085 seconds)
    (129/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.233868495 seconds)
    (130/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.070188555 seconds)
    (131/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.076431328 seconds)
    (132/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.071980306 seconds)
    (133/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.152353228 seconds)
    (134/341) benchmarking ("sort", Float32, false)...
    done (took 0.138060623 seconds)
    (135/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.146848879 seconds)
    (136/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.067748261 seconds)
    (137/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.1978496 seconds)
    (138/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.171502886 seconds)
    (139/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.075589669 seconds)
    (140/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.075297619 seconds)
    (141/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.07499998 seconds)
    (142/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.152731517 seconds)
    (143/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.067150368 seconds)
    (144/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.066430366 seconds)
    (145/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.168752473 seconds)
    (146/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.197070926 seconds)
    (147/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.118900272 seconds)
    (148/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.133705192 seconds)
    (149/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.076500526 seconds)
    (150/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.091539002 seconds)
    (151/341) benchmarking ("sort", Bool, false)...
    done (took 0.14085559 seconds)
    (152/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.06572785 seconds)
    (153/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.163542679 seconds)
    (154/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.133274768 seconds)
    (155/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.073556724 seconds)
    (156/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.065402241 seconds)
    (157/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.065978356 seconds)
    (158/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.065835505 seconds)
    (159/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.079703874 seconds)
    (160/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.066124726 seconds)
    (161/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.20457439 seconds)
    (162/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.068876099 seconds)
    (163/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.075306461 seconds)
    (164/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.076289943 seconds)
    (165/341) benchmarking ("sort", Int64, false)...
    done (took 0.066813125 seconds)
    (166/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.088634183 seconds)
    (167/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.081149472 seconds)
    (168/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.067295645 seconds)
    (169/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.065773308 seconds)
    (170/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.144258951 seconds)
    (171/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.06847456 seconds)
    (172/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.143031722 seconds)
    (173/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.067754308 seconds)
    (174/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.154667745 seconds)
    (175/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.157159979 seconds)
    (176/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.144245901 seconds)
    (177/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.067898668 seconds)
    (178/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.067510495 seconds)
    (179/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.084368599 seconds)
    (180/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.08193024 seconds)
    (181/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.066652455 seconds)
    (182/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.165331248 seconds)
    (183/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.065993523 seconds)
    (184/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.35461916 seconds)
    (185/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.190158991 seconds)
    (186/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.079373181 seconds)
    (187/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.072947671 seconds)
    (188/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.075285496 seconds)
    (189/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.071037266 seconds)
    (190/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.070217154 seconds)
    (191/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.073579738 seconds)
    (192/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.071884351 seconds)
    (193/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.068260235 seconds)
    (194/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.201893385 seconds)
    (195/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.096057183 seconds)
    (196/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.069913943 seconds)
    (197/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.079102639 seconds)
    (198/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.073066617 seconds)
    (199/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.122082612 seconds)
    (200/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.207903505 seconds)
    (201/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.07221592 seconds)
    (202/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.23084057 seconds)
    (203/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.069236703 seconds)
    (204/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.144871493 seconds)
    (205/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.079810035 seconds)
    (206/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.071016101 seconds)
    (207/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.150104026 seconds)
    (208/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.148185646 seconds)
    (209/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.069980229 seconds)
    (210/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.129186091 seconds)
    (211/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.071357623 seconds)
    (212/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.071013848 seconds)
    (213/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.067800684 seconds)
    (214/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.139587589 seconds)
    (215/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.069126528 seconds)
    (216/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.09076306 seconds)
    (217/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.068450099 seconds)
    (218/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.075582587 seconds)
    (219/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.069124533 seconds)
    (220/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.075225939 seconds)
    (221/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.067925647 seconds)
    (222/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.066373183 seconds)
    (223/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.069080187 seconds)
    (224/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.067687207 seconds)
    (225/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.158935409 seconds)
    (226/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.069616404 seconds)
    (227/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.086376871 seconds)
    (228/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.068523959 seconds)
    (229/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.069739766 seconds)
    (230/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.076434339 seconds)
    (231/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.084577438 seconds)
    (232/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.07762038 seconds)
    (233/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.077902976 seconds)
    (234/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.070004243 seconds)
    (235/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.088557657 seconds)
    (236/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.144895121 seconds)
    (237/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.079584126 seconds)
    (238/341) benchmarking ("sort", BigInt, false)...
    done (took 0.270045731 seconds)
    (239/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.082735278 seconds)
    (240/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.070609956 seconds)
    (241/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.072213137 seconds)
    (242/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.0689227 seconds)
    (243/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.199722369 seconds)
    (244/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.071292727 seconds)
    (245/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.081732624 seconds)
    (246/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.157863328 seconds)
    (247/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.069240583 seconds)
    (248/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.067350703 seconds)
    (249/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.070939792 seconds)
    (250/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.068134403 seconds)
    (251/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.067390021 seconds)
    (252/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.06819616 seconds)
    (253/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.080323202 seconds)
    (254/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.078725066 seconds)
    (255/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.06884549 seconds)
    (256/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.068757901 seconds)
    (257/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.129556009 seconds)
    (258/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.068165547 seconds)
    (259/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.070146056 seconds)
    (260/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.07145932 seconds)
    (261/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.067729623 seconds)
    (262/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.147104542 seconds)
    (263/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.075157162 seconds)
    (264/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.068620489 seconds)
    (265/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.067865572 seconds)
    (266/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.145547477 seconds)
    (267/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.075950247 seconds)
    (268/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.080737405 seconds)
    (269/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.07003605 seconds)
    (270/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.075530058 seconds)
    (271/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.071208448 seconds)
    (272/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.136607971 seconds)
    (273/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.067246448 seconds)
    (274/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.06886987 seconds)
    (275/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.071043601 seconds)
    (276/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.068358951 seconds)
    (277/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.067253755 seconds)
    (278/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.087932477 seconds)
    (279/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.087150864 seconds)
    (280/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.070621222 seconds)
    (281/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.087549909 seconds)
    (282/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.067041115 seconds)
    (283/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.068612359 seconds)
    (284/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.068433126 seconds)
    (285/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.068373309 seconds)
    (286/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.224167905 seconds)
    (287/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.097319329 seconds)
    (288/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.070939008 seconds)
    (289/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.157365807 seconds)
    (290/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.069815724 seconds)
    (291/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.070481578 seconds)
    (292/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.080633061 seconds)
    (293/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.068152747 seconds)
    (294/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.066249162 seconds)
    (295/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.068072127 seconds)
    (296/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.089516893 seconds)
    (297/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.070878106 seconds)
    (298/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.074665976 seconds)
    (299/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.068073741 seconds)
    (300/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.07130663 seconds)
    (301/341) benchmarking ("sort", Float64, false)...
    done (took 0.140260932 seconds)
    (302/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.069649983 seconds)
    (303/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.154538312 seconds)
    (304/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.096789302 seconds)
    (305/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.286775576 seconds)
    (306/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.074418287 seconds)
    (307/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.155479825 seconds)
    (308/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.073564702 seconds)
    (309/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.077622491 seconds)
    (310/341) benchmarking ("sort", Int8, false)...
    done (took 0.164106233 seconds)
    (311/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.073842816 seconds)
    (312/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.073816556 seconds)
    (313/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.074956097 seconds)
    (314/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.086761205 seconds)
    (315/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.098993816 seconds)
    (316/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.08235825 seconds)
    (317/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.141358793 seconds)
    (318/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.073574288 seconds)
    (319/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.072759479 seconds)
    (320/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.071541387 seconds)
    (321/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.074018418 seconds)
    (322/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.073069669 seconds)
    (323/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.072880841 seconds)
    (324/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.189365992 seconds)
    (325/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.071618219 seconds)
    (326/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.071791072 seconds)
    (327/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.082512243 seconds)
    (328/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.070979354 seconds)
    (329/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.121295121 seconds)
    (330/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.070950311 seconds)
    (331/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.178919372 seconds)
    (332/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.098860519 seconds)
    (333/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.090945348 seconds)
    (334/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.181642301 seconds)
    (335/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.07203954 seconds)
    (336/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.071337119 seconds)
    (337/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.074756214 seconds)
    (338/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.077314328 seconds)
    (339/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.071312579 seconds)
    (340/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.072708745 seconds)
    (341/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.069730129 seconds)
  done (took 38.024512781 seconds)
done (took 39.614929776 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.095122984 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.081847392 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.080403577 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.079080409 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.08342427 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.081829157 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.082899283 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.081346192 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.082388258 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.081731064 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.081624921 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.069553893 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.07830391 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.086158918 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.079184241 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.085267762 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.081127639 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.084956177 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.071269016 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.085202762 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.097793585 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.083820058 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.079639609 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.085428183 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.071074003 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.080163031 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.096613919 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.091191088 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.075477952 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.077955181 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.07625087 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.087597729 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.07789663 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.077159808 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.080845534 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.076771971 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.081124084 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.077653433 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.094405698 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.074398402 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.068635438 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.080808891 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.075664044 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.077037014 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.077560741 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.081136283 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.075098846 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.082429482 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.068540294 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.079888356 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.092504433 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.073640162 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.075254833 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.07921359 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.076273817 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.080512446 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.077742467 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.080339552 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.073839113 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.080164349 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.080559833 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.078357345 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.068531578 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.07755454 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.075725435 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.076017407 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.067405672 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073433435 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.070203993 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.07039542 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.069723402 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.079722319 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.077863643 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.075425542 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.069566355 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.070289234 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.069136926 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.081182994 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.074567117 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.077613557 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.068224189 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.073441711 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.073096111 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.067829219 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.072959328 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.079959975 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.067345278 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.068366056 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.06728315 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.083292327 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.074548868 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.068227427 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.080042028 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.073311585 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.073258973 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.068427445 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.068643956 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.075897046 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.078992832 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.070697958 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.069605169 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.076408925 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.076129135 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.080053821 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.071071538 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.075793422 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.076396081 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.069786996 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.079551704 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.077464024 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.077844793 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.081644216 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.079379762 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.082696376 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.06938045 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.067118922 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.079320214 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.07001568 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073825162 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.076434867 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.075279375 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.078744146 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.070731525 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.069593611 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.075019264 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.075603062 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.068815883 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.06828443 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.068089578 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.07806011 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.075445788 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.066981786 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.067828674 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.077212874 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.076980198 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.06753963 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.067287387 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.077827175 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.068679815 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.074131801 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.074063309 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.077059578 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.213789323 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.068707742 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.067552295 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.067678949 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.067452751 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.075471649 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.074129614 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.070939018 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.078049736 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.074834761 seconds)
done (took 13.521792729 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.069009856 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.111503963 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.083556514 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.085880657 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.084256775 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.071174843 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.073252594 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.089392191 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.072721571 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.093724124 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.095608148 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.091148301 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.100443692 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.06817256 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.069064958 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.07001281 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.067472515 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.080695033 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.08632805 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.092805452 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.106079308 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.068726828 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.085482538 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.08927362 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.084362339 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.087166818 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.070191137 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.07081335 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.11337005 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.087606229 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.094711127 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.068663896 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.069945931 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.090727856 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.088021688 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.080794579 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.072416945 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.078574199 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.075488927 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.071184516 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.072538391 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.087663804 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.075277113 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.075803414 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.070348108 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.071383439 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.071387816 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.07945681 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.089938929 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.077914411 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.084289031 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.091830058 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.073372153 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.071168643 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.068294173 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.076178301 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.068915735 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.069297905 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.069352057 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.068746271 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.069227965 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.073069045 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.076487353 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.076060539 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.072410384 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.075385044 seconds)
  done (took 6.977426466 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.084883839 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.095915004 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.086179055 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.08763868 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.071186041 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.0721686 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.071503161 seconds)
  done (took 2.339916557 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.069822104 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.077206628 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.083280711 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.084313595 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.094536289 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.081475021 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.071953984 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.104777497 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.070828347 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.080931008 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.089573338 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.082760095 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.073074661 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.081677894 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.06989118 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.081548978 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.070288474 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.078980997 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.079557119 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.086174955 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.075991946 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.1047232 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.085433304 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.072236645 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.086058659 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.079759967 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.074093872 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.072507302 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.07425727 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.070989514 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.070947681 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.093774703 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.07835512 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.078365128 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.072177451 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.070545281 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.076385176 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.072753717 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.075980417 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.081196923 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.075600044 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.073587534 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.073488433 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.070410199 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.070572636 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.073819145 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.070459023 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.068923722 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.068332521 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.076746341 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.067814116 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.075503282 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.071298478 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.074277012 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.07696855 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.078589443 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.078338748 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.071294599 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.077123062 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.079130057 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.07081828 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.081665372 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.080632833 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.073003238 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.080857226 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.077622764 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.076448471 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.074150159 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.068658539 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.06867629 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.069379981 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.08071172 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.073295913 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.074049007 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.07529038 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.076101239 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.072804259 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.084365163 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.0843908 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.082880742 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.071635423 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.069555007 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.07297074 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.084629317 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.074317205 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.068765328 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.07006174 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.068061152 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.073748321 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.071177148 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.073525248 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.06892198 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.079469921 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.071445121 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.07128456 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.076839356 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.069205271 seconds)
  done (took 9.168669594 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.071713914 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.071232506 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.070109585 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.07037269 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.070571026 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.070455712 seconds)
  done (took 2.229070378 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.09251277 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.069665805 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.081292128 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.071371478 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.09564061 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.0789534 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.079459713 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.073957468 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.089167114 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.08215376 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.078176096 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.079572159 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.078721429 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.071137023 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.076986524 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.070768866 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.078664791 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.074674754 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.081646943 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.073426746 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.088578372 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.074342625 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.074513426 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.084417025 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.074930939 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.073035557 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.072962223 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.08295579 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.082326555 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.073427658 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.074071974 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.075343546 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.079902106 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.071975096 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.07684157 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.079540962 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.071512332 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.076723852 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.07225935 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.072597551 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.078506375 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.071728552 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.071638003 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.075115301 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.070906286 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.07807561 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.07531455 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.073197274 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.07792099 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.077662211 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.077818277 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.072815111 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.076176132 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.078337935 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.08086145 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.074198741 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.077792345 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.078455229 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.073587332 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.080786708 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.071049651 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.073500705 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.076262233 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.07262504 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.074336651 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.075065596 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.078794274 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.071779045 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.071817427 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.069467734 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.075132829 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.069537744 seconds)
  done (took 7.27817778 seconds)
done (took 29.741753312 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.553825685 seconds)
  done (took 2.303871019 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.624429335 seconds)
  done (took 2.418752503 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.796982529 seconds)
  done (took 10.588343879 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.338399786 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.403629278 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.766578556 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.138394175 seconds)
  done (took 3.471041143 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.755083686 seconds)
  done (took 2.558700407 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.241568623 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.237523653 seconds)
  done (took 2.286551115 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.344024756 seconds)
  done (took 2.136443117 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.169139759 seconds)
  done (took 2.961563077 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.236629299 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.170612454 seconds)
  done (took 2.211256399 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.553398792 seconds)
  done (took 2.350687998 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.328217162 seconds)
  done (took 6.133221936 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.244095671 seconds)
  done (took 2.079026054 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.233403702 seconds)
  done (took 2.038447668 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.100258857 seconds)
  done (took 3.897440348 seconds)
done (took 49.236742213 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.086534998 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.08843364 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.088678165 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.083762374 seconds)
  done (took 2.119427489 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.076509236 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.072433473 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.075813933 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.076460184 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.073954493 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.074921015 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.075345787 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.072401979 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.074467878 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.072865033 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.071200553 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.072347101 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.074985143 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.072146416 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.07532073 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.076015672 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.072207701 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.072388592 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.075013264 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.072421914 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.075182521 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.072678577 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.070653839 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.07316375 seconds)
  done (took 3.568537479 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.080088873 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.074301659 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.077561402 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.073301875 seconds)
  done (took 2.11221166 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.078372915 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.07900723 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.088324865 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.094301533 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.079841916 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.079710949 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.08600313 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.086726558 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.068192295 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.089650373 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.070323368 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.068882564 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.069200432 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.088267252 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.085759819 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.064858198 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.066083417 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.079519109 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.078326069 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.08194144 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.071348137 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.067758077 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.078108484 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.079328203 seconds)
  done (took 3.685769287 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.084393375 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.067698472 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.083436325 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.093676766 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.095426043 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.068363965 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.081479698 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.095311501 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.130101818 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.06803556 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.074129175 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.067852194 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.107777729 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.068414361 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.085540715 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.11381834 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.117069472 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.072551948 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.101651513 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.068206862 seconds)
  done (took 3.562514518 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.077698165 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.071662583 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.072422228 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.06728098 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.078902075 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.075061339 seconds)
  done (took 2.262556114 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.07103624 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.070162034 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.072131386 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.074660244 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.070538442 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.070417294 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.07070501 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.068289433 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.068137876 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.069444752 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.069123407 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.069832442 seconds)
  done (took 2.655521927 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.157382882 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.071029308 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.072234013 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.068072953 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.07033749 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.069056836 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.083545115 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.071213227 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.086376043 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.068961069 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.068955379 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.071374405 seconds)
  done (took 2.771646054 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106926092 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.113789254 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148514453 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120435887 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120378999 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099606817 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.129065757 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.097151405 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.164126863 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.140686663 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121533322 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096605423 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088959008 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.072269357 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103096013 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123523286 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141867433 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076468805 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116633169 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.169626449 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136227076 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.14196233 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.155154091 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121873588 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.093492942 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.152370816 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100024586 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105928876 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.127561948 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130893926 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122470354 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.100284918 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.074073472 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.073513534 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152847823 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.106939162 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.127877401 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.099420997 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.111236798 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.092476504 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110767886 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.071762947 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.089503665 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.11662066 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087576945 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134432796 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.090263298 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119156038 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083934547 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.14190764 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127838762 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102501062 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088474818 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.263328608 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141904389 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115737445 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.137877663 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.110051109 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085533476 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.121902585 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.105383475 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103328796 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110546652 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082551846 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.182008299 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09361493 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.119161804 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119347876 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.101164942 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10064296 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.113408257 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.14069095 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12943908 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.131122731 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143044367 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097873497 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124767657 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.103812813 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.133026504 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108500682 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.075345334 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.124808891 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.133031862 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101795923 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104080378 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135342318 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094859044 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080233519 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.101933535 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.121530366 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082742593 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.11584909 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084453937 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.112301419 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137838793 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100264077 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115288823 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119631817 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080674121 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.159413737 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.112002707 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075228872 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.120935962 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117685143 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.319331485 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101118951 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.080206839 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.103181457 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106567431 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.152188713 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111544888 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082029967 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113021042 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143367551 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097408457 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.173046562 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099623443 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144039913 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115656478 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.091121331 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.077942987 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.09283873 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119303698 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114448108 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119278675 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093543915 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.087628651 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.0900201 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115493194 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098608116 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086896476 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120801788 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.108040796 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.081281844 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09325176 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.082176928 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145625116 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.080577333 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142578524 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128163616 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.081192472 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109767326 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.100649816 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112534517 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.100851159 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120290587 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144128432 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.119451229 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.09444289 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.10108809 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114904334 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.149916636 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130373448 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.095446733 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.079830611 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.103491644 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115220066 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.100988145 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.129906673 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099231732 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112884075 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106215066 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.146020179 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.312685085 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107193949 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106283355 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114180856 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.129509061 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080353855 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.159192327 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107939594 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121070806 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086627159 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146193239 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.116864876 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092624055 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.089928171 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102965657 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.109341122 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111429614 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148282394 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.102397214 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.078249493 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099787534 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.150734297 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079941947 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113433965 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.093361959 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.098379396 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125489476 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.09944224 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08554467 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.071151758 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132386521 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.163429689 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.075136467 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118668604 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.113980618 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106224859 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.125261655 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.071983075 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124242946 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.143449177 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120522542 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145893285 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15206747 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120218006 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.121531364 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.118119506 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.108645163 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081820024 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.128813684 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.139299616 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102476829 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098465421 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142185261 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.125026847 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.140973148 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.121926244 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119992202 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.11018332 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111435964 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106248773 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.108878431 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145835955 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123397571 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.126207099 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087978263 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107484008 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119239944 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136906893 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083534738 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142131662 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.084789231 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119076086 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.07867196 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.124066055 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.081216694 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.112992502 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080855193 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101003636 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.071314801 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.075539816 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142532733 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.115681766 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106831839 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10099278 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.138031811 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.136225758 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.08356358 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108602534 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115617616 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102061954 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115981654 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10933571 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.089512247 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095308055 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108743567 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.085183361 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.082542132 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.114429272 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095611647 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126094768 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.084713404 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076259425 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140286461 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104864331 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095594694 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079121961 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10764017 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.122431386 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.094905609 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09062474 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117588232 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.396979546 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.154255748 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.101612725 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.109202862 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.135458197 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088825884 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.102058257 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.077381357 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.093382377 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.084314307 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.13766705 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083436808 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126302762 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.076219547 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.141091188 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.094351417 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.099589975 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.110103691 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121193544 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137708049 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.103372767 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.151927387 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09782416 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.127828002 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115249275 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101043527 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094557814 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110526885 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.108512986 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.130132563 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.103373867 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129699984 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149655645 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109476263 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.150336994 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095894516 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12594559 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113272253 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.129045964 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118025031 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151949146 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.149734965 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120030461 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118815795 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.080409284 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101866322 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112653634 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.119620775 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.186226206 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135149705 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.077843993 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114325051 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.100540027 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.114676372 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111017851 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088694804 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.320422014 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10825061 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.093716843 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120647028 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.096740867 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.107368914 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078901296 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098287531 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.104315337 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097015856 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101992003 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119701662 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.135191912 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1201757 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.151462513 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.105460336 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.098788661 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.125490754 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117850821 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118140689 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092334169 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09259954 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146757008 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123435823 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.131581378 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.10362516 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114305214 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116001243 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107534202 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131324399 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112097465 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.132065241 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084904001 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.080895887 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.072195504 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.075434405 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129835807 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113969341 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11556034 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100968714 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.074484643 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.106105392 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10960946 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074587863 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091607508 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097263657 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097848433 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.09466625 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110798703 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.120023188 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.096686147 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107940509 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103979622 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.153299737 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.10551341 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092390267 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148372892 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.154674774 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091635778 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.257760356 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.074188745 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082000618 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116239865 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155740797 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.156323369 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.080482862 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089210312 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.088118214 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089449737 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.074211619 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.088484193 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.092036589 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107769277 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101944751 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.115358757 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107928049 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07844826 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.105778818 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102130789 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094895685 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.107775777 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122009432 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.128907157 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.146147289 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113799331 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111027677 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079040085 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.084130391 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078923265 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.082138398 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.105390883 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.082143589 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079084046 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.147256569 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.09496728 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107958778 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113950434 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.09334529 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078423589 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1384697 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.07184336 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139307006 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.074388538 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084572951 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.085262159 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082307038 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097298242 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143342428 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113384892 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116852218 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109918114 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109304489 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148673353 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.160784305 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083603795 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.147432384 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078802775 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078564664 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078218966 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117993191 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093163844 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.278989285 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148135514 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096733503 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108966166 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079663091 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146188963 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.098270887 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106712649 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089445774 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.082080194 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146920148 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.082536922 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.082941559 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093158176 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.114134673 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.078396858 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110534419 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.089497772 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084456574 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151968494 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.637517199 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095500936 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.081561251 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.102683499 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.148714405 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13218019 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09882591 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112795344 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.121955614 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.103401646 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098546622 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111756095 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.186815728 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.079146908 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099906329 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.111265756 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102959133 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10529125 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.101847688 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.09088766 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.09485952 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.089788108 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082256629 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111303299 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091832546 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.099494823 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.110191806 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.085826445 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.090148729 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.134785751 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.107345916 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.085347512 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091709373 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.109257339 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09139133 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104681503 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.072088245 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116911308 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.093467499 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121766221 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.097889336 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.27174419 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.132635325 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094716205 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143291019 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.113340951 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.126178505 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089992109 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.081077275 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128113115 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.091033369 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080054613 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.150291574 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.102265776 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.098489157 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10990615 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.102787441 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.121551114 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125719745 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118220361 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104505593 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084747791 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108432637 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.107934513 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.089143214 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082162051 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.077946821 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.080503892 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115755769 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.093138088 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.0882759 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119841918 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.093259883 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107050845 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.103836407 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.126097295 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085949584 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106920738 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114204226 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095367382 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112805886 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104437157 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.132468581 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.180289298 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129784573 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.132768574 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139407765 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.080518087 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.079115386 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.071456716 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118449605 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08226486 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.092353018 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084328766 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138785393 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.084928521 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116160927 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.232813038 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.085756721 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099323009 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099912144 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.072168633 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.246955558 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114255897 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.093897112 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086438918 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.125785629 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.088842116 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.135387849 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118156983 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105864248 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.101581936 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086669802 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.121358991 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.111739827 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.135986562 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.101376432 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.080149725 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119999408 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.108942909 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146251825 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.078580162 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086731095 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.138155804 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112113492 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139675935 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083253015 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154891496 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.149259921 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105914285 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139942154 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073566237 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086564641 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091978963 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.129468664 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.091181049 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116103363 seconds)
  done (took 70.661868174 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.153348684 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.171941904 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.105691662 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.120325153 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.200936069 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.2085392 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.13242582 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.111429755 seconds)
  done (took 3.219092451 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.07021007 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.085426246 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.083200205 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.211388098 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.111265915 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.069700392 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.075536484 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.084566097 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.069854288 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.069261372 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.104268251 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.071408378 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.072518863 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.477051948 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.071442384 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.077160496 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.072927393 seconds)
  done (took 3.87981081 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.338998733 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.435518422 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.324022828 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.813748987 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.14103427 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.48771279 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.07914824 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.0845233 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.614384942 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.372156876 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.133293033 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.090346656 seconds)
  done (took 18.924213694 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.078095784 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.080850318 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.081022348 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.07704164 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.077040443 seconds)
  done (took 2.424022938 seconds)
done (took 123.666111951 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.085915927 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.177140102 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.072931294 seconds)
  done (took 2.291121085 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.084267136 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.084280409 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.084737773 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.081154967 seconds)
  done (took 2.346955877 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.077010335 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.078742937 seconds)
  done (took 2.155421623 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.229786785 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.183449746 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.09627405 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.084742464 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.082186846 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.082546104 seconds)
  done (took 2.26394415 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.073712621 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.073586721 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.074325213 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.074365226 seconds)
  done (took 2.294556263 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.070237663 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.068552428 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.071022148 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.074049846 seconds)
  done (took 2.284840479 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.088375687 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.090152429 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.120344449 seconds)
  done (took 2.304560641 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.08574865 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.085806095 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.080550883 seconds)
  done (took 2.263942053 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.111853253 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.100278962 seconds)
  done (took 2.21829957 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.082704185 seconds)
  done (took 2.095001962 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.092433562 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.102947584 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.146208156 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.111103991 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.145553816 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.131567562 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.080408821 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.082981908 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.077205419 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.076246593 seconds)
  done (took 3.056055376 seconds)
done (took 28.173318693 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.08634267 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.377173748 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.363190732 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.090004871 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.674172171 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.358855298 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.008961797 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.094088723 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.10811528 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070646019 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087486087 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.65270028 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.002542156 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.331691615 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.990742971 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.33226466 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.655504063 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070940001 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070666883 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.07116263 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.993768907 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070226822 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070825897 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070866778 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.652634608 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.376833269 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071170563 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.326399388 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070637972 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.074146444 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.35982422 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071972469 seconds)
  done (took 16.686043284 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.078044196 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.135094834 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.078562733 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.090274646 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.076570781 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.075108212 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.077195253 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.074349303 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.115612773 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.071262772 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.088199524 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.071815581 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.077640172 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.074760347 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.09303113 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.074132564 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.076031127 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.075911591 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070525469 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071742964 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.089334887 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.071249942 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.071599035 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.07135016 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.071586294 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.086662196 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.072750572 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.072498327 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.072510329 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.074774357 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.07758406 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.075125834 seconds)
  done (took 4.580151016 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.129864684 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.139821321 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.078760632 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.115637743 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.126010827 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.07596051 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.160040138 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.098720469 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.122650195 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.0748708 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.092628363 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.073969443 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.11053032 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.075855889 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.093393512 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.071192953 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.073197691 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.072219668 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.072504688 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071516732 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.091580314 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.073103598 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.074910295 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.074477341 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.075292699 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.089012352 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.075719861 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.074068921 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.074529783 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.077834852 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.079564812 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.075915448 seconds)
  done (took 4.893861837 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.071798951 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.075601819 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.083492758 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.08629139 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.071919823 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.073860628 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.074892307 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.07180373 seconds)
  done (took 2.647171454 seconds)
done (took 30.833245649 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.081173101 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.070285374 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.074434135 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.092422951 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.078538745 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.076020547 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.070127325 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.079844247 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.077081135 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.076679978 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.078675971 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.072422675 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.075102533 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.070239547 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.077576734 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.07143785 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.078408917 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.075602227 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.07446982 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.074365267 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.071353071 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.075410042 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.078172627 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.073449814 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.073535795 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.073308271 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.077995367 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.074645787 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.070080311 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.071716617 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.071017413 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.083254514 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.074988593 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.075075774 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.069177416 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.06942252 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.073070803 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.070590182 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.076070753 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.077816994 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.070652553 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.077352812 seconds)
  done (took 5.14632087 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.090543054 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.096597504 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.089815319 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.084369668 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.112028999 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.087578804 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.096496222 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.082535932 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.080491397 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.093314429 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.076217257 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.081574265 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.083802423 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.078108777 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.080914806 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.078648772 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.083654511 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.076244185 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.081800021 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.083324048 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.095062897 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.074177786 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.081715116 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.082177081 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.076272232 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.081987172 seconds)
  done (took 4.253100365 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.075030927 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.091671403 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.0952754 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.150913018 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.112474676 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.085145663 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.084938774 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.096296716 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.103785534 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.070945186 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.07481853 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.10004061 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.100777706 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.080024152 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.112882855 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.091306104 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.085726082 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.075210941 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.08024872 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.108700231 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.096344059 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.091844984 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.105811995 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.093777223 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.072714446 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.082853884 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.081616039 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.090138614 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.080465951 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.086011511 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.077599374 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.07712489 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.0742201 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.08679373 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.081024348 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.071118038 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.095204499 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.084450193 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.084864127 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.109092195 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.080469683 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.072160651 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.098716699 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.137181391 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.07175303 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.072870169 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.074580253 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.085407239 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.073199844 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.1018586 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.0883946 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.070389441 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.089568368 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.072132206 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.071743265 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.087266673 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.07245352 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.073063883 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.084527296 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.078481832 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.093157804 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.076157872 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.092602129 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.070723227 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.081758866 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.072461876 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.073808917 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.069332687 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.105276221 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.078064315 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.12326775 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.073135017 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.0691451 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.082586793 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.081663551 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.077411743 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.070335518 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.090150179 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.08582847 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.076694394 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.084482873 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.074930302 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.07474797 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.10591468 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.069349671 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.068606804 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.068767296 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.072575188 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.073514693 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.071167818 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.083519459 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.069792404 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.074022392 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.085905384 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.069930354 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.070421003 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.072789601 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.072571814 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.069692813 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.081115153 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.075035198 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.073526014 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.085823436 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.074502922 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.075853551 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.088057474 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.082469813 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.071931775 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.072569377 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.072834998 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.071964647 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.074719689 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.073761505 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.072395261 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.077500193 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.077805563 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.076390164 seconds)
  done (took 11.754902305 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.167219982 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.158765422 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.073421556 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.151190352 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.078665813 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.075064427 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.153218111 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.091952329 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.071103004 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.072113721 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.07044852 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.099377245 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.094820635 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.10567155 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.074858301 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.072023241 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.096301048 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.104885176 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.156079072 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.150779325 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.096156809 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.079111114 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.073489267 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.07257684 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.07218438 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.080354462 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.091751131 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.081917832 seconds)
  done (took 4.852768625 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.078070108 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.08674194 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.075754393 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.094418599 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.089557288 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.071151922 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.07278472 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.071759225 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.087874804 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.07833639 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.071087841 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.075379975 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.074838649 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.072613012 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.072013366 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.079168782 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.07921921 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.071591137 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.076850898 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.078470466 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.084081506 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.100006111 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.076673104 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.07309654 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.074940273 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.071806334 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.077793236 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.080934138 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.070351551 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.101927023 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.068316359 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.075534415 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.085245374 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.07195768 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.070855001 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.071482323 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.071009366 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.070934555 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.071642009 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.068826066 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.0688884 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.075946689 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.069870697 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.077080363 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.084908373 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.078429153 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.072605057 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.076694296 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.073656818 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.067869933 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.074433908 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.074222733 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.073664242 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.079524084 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.074461529 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.073904871 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.072286617 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.101581388 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.078519624 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.070907131 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.069892698 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.069414105 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.072755975 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.078841693 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.087850488 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.072389652 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.069574266 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.071052459 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.075601802 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.085344811 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.070197774 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.076878231 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.068059746 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.071255872 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.073561602 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.074022833 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.07181901 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.069541178 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.070470697 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.0711641 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.070847621 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.070469016 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.070439703 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.07358524 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.06881358 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.069243902 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.07377399 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.074601892 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.078986381 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.069897025 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.073771143 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.072380001 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.070244892 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.07345106 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.076461677 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.073624258 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.090602555 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.079846573 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.071573688 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.069007602 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.085748879 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.072869977 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.070547074 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.078184776 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.076992899 seconds)
  done (took 10.0200625 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.093772977 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.072381591 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.090932967 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.097630882 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.080993724 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.076636311 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.085334209 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.071748648 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.087035449 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.070116404 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.079701722 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.069156788 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.084038963 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.08023377 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.072259516 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.08102519 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.073681424 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.091492815 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.085619583 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.069570261 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.079999245 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.083192057 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.085967073 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.089736012 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.089205857 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.08990773 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.083791222 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.073508279 seconds)
  done (took 4.383904908 seconds)
done (took 42.439509076 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.102428885 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.273465228 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.10172071 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.3374029 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.160174786 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.295885697 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.333708539 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.095364272 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.225953898 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.126930373 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.414385305 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.497054888 seconds)
done (took 71.053378927 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.174865401 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.23864698 seconds)
    (2/2) benchmarking "String"...
    done (took 2.318232552 seconds)
  done (took 6.581692396 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.696417451 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.095120665 seconds)
    (3/3) benchmarking "different"...
    done (took 2.147499686 seconds)
  done (took 8.957799383 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.224110776 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.728729168 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.336519215 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.093498246 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.100888224 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.485831858 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.900090308 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.558824333 seconds)
  done (took 34.225682261 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.339151268 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.302350236 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.873439624 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.913092238 seconds)
  done (took 17.504501212 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.699870865 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.359971129 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.359811731 seconds)
    (4/4) benchmarking "different"...
    done (took 2.350529165 seconds)
  done (took 11.854253907 seconds)
done (took 91.651441014 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.096129969 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.169073092 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.134166906 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.252062874 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.101685993 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.129713014 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.103548997 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.118817667 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.099206894 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.098094564 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.53519011 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.096792076 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.103469168 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.134949322 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.091738759 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.14590775 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.590236152 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.100189817 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.10472637 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.777395153 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.493998504 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.106532582 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.098179848 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.14871985 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.1912974 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.102234184 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.10824407 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.096491107 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.714995913 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.107367166 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.100534098 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.100332364 seconds)
  done (took 214.375625267 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.098843653 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.17136101 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.235138577 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.11927105 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.647353478 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.294114582 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.252867763 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.683080301 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.10722456 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.125367446 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.336740012 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.096764053 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.35087753 seconds)
    (14/36) benchmarking "dot"...
    done (took 3.110798406 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.086469309 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.095281329 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.248024279 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.350323454 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.092329543 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.27932589 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.11544313 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.224404312 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.192700085 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.307048868 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.123791316 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.145533431 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.105016625 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.113458418 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.275147105 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.243017643 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.115021109 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.10771862 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.224925703 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.95737563 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.111831346 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.104672096 seconds)
  done (took 182.273794353 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.494391463 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.106149279 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.154403699 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.289232127 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.859830453 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.842101604 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.094725923 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.09019625 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.091544835 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.09809147 seconds)
    (10/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.090823672 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.095191219 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.161166906 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.36738614 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.106399926 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.093128967 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.089921192 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.356334198 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.084288186 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.074928781 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.082338229 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.140488154 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.449749819 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.196811272 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.087008198 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.087810352 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.198567446 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.0857163 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.076084327 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.203436384 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.082243395 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.15686115 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.204765006 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.08618263 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.162638743 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.082662565 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.577747715 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.089801795 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.074941468 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.079508991 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.140458584 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.075106632 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.18015418 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.170534354 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.074313419 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.090023779 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.272653679 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.76514923 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.074989398 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.077967846 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.073512307 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.075333446 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.07664072 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.907132926 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.078693073 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.101441774 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.727600811 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.077561826 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.075728578 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.074895969 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.074151326 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.070334041 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.078954038 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.113644372 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.890973319 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.865292688 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.463957263 seconds)
    (67/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.890468672 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.079960816 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.935887094 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.133868747 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.07580432 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.156166306 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.073192284 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.076764172 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.074389753 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.076463301 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.22996658 seconds)
    (78/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.077646828 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.220587869 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.079685199 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.19614903 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.079630282 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.074042572 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.249274507 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.355190093 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.080905991 seconds)
    (87/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.078277911 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.086598914 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.129347857 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.074813182 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.074703956 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.080580722 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.200273245 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.067257723 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.066470637 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.071024034 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.174012159 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.063285017 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.314684585 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.291096574 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.130399885 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.306284115 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.305546322 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.059946933 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.062636247 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.079323468 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.06969248 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.058311176 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.070402674 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.061089672 seconds)
    (111/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.059449959 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.062529116 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.060191031 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.06068053 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.057383314 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.060315292 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.078497995 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.055614285 seconds)
  done (took 444.825946876 seconds)
done (took 846.042637119 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.678786186 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.818098937 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.64898598 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.699229234 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.660247651 seconds)
  done (took 15.486948425 seconds)
done (took 17.470839139 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.092762724 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.073714772 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.065877394 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.131410701 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.082799527 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.072822418 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.106372609 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.108822906 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.091386616 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.071457566 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.132983004 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.074337625 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.094419823 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.095187187 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.151148145 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.097126379 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.077083929 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.069823292 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.134171368 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.075878086 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.079266738 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.082254816 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.077206057 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.125197003 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.156681212 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.085027746 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.087549658 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.117582675 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.080931323 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.120205884 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.132474773 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.100074329 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.107967407 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.151765703 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.132243758 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.154180553 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.081046783 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.14320784 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.081910778 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.166761739 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.134157981 seconds)
  done (took 88.280183926 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.072859278 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.215779375 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.281654029 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.105616837 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.072523394 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.284745533 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.128902639 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.196942302 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.203595705 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.288361413 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.300460075 seconds)
  done (took 26.141395536 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.070303978 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.206590579 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.28674084 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.107467945 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.075165706 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.292407744 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.133139805 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.201266905 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.211687297 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.296490142 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.295883502 seconds)
  done (took 26.172515242 seconds)
done (took 142.578299348 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.439908627 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.09721243 seconds)
  done (took 6.525599007 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.066105885 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.085912015 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.214063485 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.067640985 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.068480456 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.069323172 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.070736661 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.067638901 seconds)
  done (took 18.698544654 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.066998088 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.067785328 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.066841591 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.067770224 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.066054157 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.066841796 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.066396067 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.066575354 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.068610543 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.067737278 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.065519385 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.065528189 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.067297601 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.067884817 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.0676848 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.069058874 seconds)
  done (took 35.064003835 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.066834759 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.067861261 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.066340931 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.068352029 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.06724521 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.073895206 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.069359891 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.066943433 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.067934915 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.067098061 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.075283204 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.066062139 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.065838104 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.067547698 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.066744373 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.070088225 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.066537891 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.066539294 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.069076258 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.06782173 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.071412843 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.066629158 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.072405367 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.066912375 seconds)
  done (took 51.631371629 seconds)
done (took 113.917254464 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.257864753 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.58428829 seconds)
  done (took 8.832397093 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.067063726 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.064218612 seconds)
  done (took 6.179312683 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.065917948 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.072079756 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.065990884 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.066422872 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.065135183 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.066767583 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.066163014 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.063132552 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.061793402 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.064720003 seconds)
  done (took 22.644876064 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.0699377 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.061882083 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.061325392 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.062504203 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.060818754 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.061212334 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.061288011 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.062259733 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.060613889 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.062545995 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.063944145 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.060311235 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.061147894 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.060698246 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.062179634 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.063834484 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.059908795 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.060554344 seconds)
  done (took 39.101649593 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.061484208 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.059885108 seconds)
  done (took 6.104520205 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.06128087 seconds)
    (2/7) benchmarking "second"...
    done (took 2.060305014 seconds)
    (3/7) benchmarking "month"...
    done (took 2.062578045 seconds)
    (4/7) benchmarking "year"...
    done (took 2.061542929 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.062490689 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.061808023 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.062525209 seconds)
  done (took 16.415930353 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.063601462 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.210753208 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.262959999 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.665888894 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.063165568 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.064441453 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.92930507 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.064625601 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.066251775 seconds)
  done (took 22.374751336 seconds)
done (took 123.641859651 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.905600976 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.059647644 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.372381445 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.203925571 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.079955383 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.358613587 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.087102873 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.611721006 seconds)
done (took 44.663130109 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.188615909 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.06017533 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.091517737 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.088363417 seconds)
  done (took 23.225123522 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.075156757 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.395712018 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.083142579 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.037130486 seconds)
  done (took 23.593081159 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.437685267 seconds)
    (2/2) benchmarking "read"...
    done (took 2.414693794 seconds)
  done (took 6.843338002 seconds)
done (took 62.838696219 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.063895707 seconds)
    (2/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.065820959 seconds)
    (3/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.065171385 seconds)
    (4/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.067512677 seconds)
    (5/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.065174586 seconds)
    (6/24) benchmarking ("one", "Float64")...
    done (took 2.062848031 seconds)
    (7/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.062994 seconds)
    (8/24) benchmarking ("zero", "Float64")...
    done (took 2.062113997 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.073527923 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.066649777 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.065470387 seconds)
    (12/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.06313396 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 2.065727225 seconds)
    (14/24) benchmarking ("one", "Float32")...
    done (took 2.067136045 seconds)
    (15/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.063182565 seconds)
    (16/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.065488288 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.06355225 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.065567209 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.069227484 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.06309241 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.063713394 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.063173152 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.063282326 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.064902857 seconds)
  done (took 51.544653421 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.058958747 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.056982748 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.063157462 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.05592353 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.058752881 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.05868616 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.058378896 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.058195612 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.056718637 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.058110562 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.058456775 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.058766302 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.065315516 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.059059293 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.058729987 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.059320465 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.060027849 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.064896281 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.058628165 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.058578424 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.057367608 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.057821828 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.061946244 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.056655146 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.057778424 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.058329951 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.056600394 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.068290448 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.058658479 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.059969791 seconds)
  done (took 63.762917657 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.055796526 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.062045524 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.05693186 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.057551993 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.058774534 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.066044743 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.056865598 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.058042034 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.059204296 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.056884885 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.059342761 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.056480346 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.057690058 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.057704171 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.057868606 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.0640448 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.057636983 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.057063584 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.058534303 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.057879684 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.057399841 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.058290534 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.057074871 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.056937408 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.05644141 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.058673202 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.059240377 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.058290851 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.059687487 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.059081118 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.058239726 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.057884833 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.057845394 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.059240355 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.059593635 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.05807871 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.058127754 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.059390966 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.057378582 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.061182081 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.06068281 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.057652088 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.059200443 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.061410094 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.06008329 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.059139602 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.060993462 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.061419143 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.06206745 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.058736749 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.058904347 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.060501931 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.060880098 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.060025545 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.056797725 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.059491453 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.061692319 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.059618846 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.05990301 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.058468156 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.06089006 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.06220379 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.060981458 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.061718722 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.063933556 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.059941356 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.061261528 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.061404319 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.061897528 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.061738551 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.063517511 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.063604973 seconds)
  done (took 150.264839965 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.061977577 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.062991918 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.064008155 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.061446957 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.062859889 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.060328972 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.063247906 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.062239514 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.062784201 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.061642459 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.061435613 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.061730948 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.063292683 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.064301886 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.061773731 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.062016562 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.062290099 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.059875754 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.063082609 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.061538067 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.061667718 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.063077717 seconds)
  done (took 47.35520373 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.064204256 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.062580978 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.062496657 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.062441819 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.062856862 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.064196614 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.066325906 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.062060862 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.062724492 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.062877666 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.061522804 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.061338787 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.065298453 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.063060665 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.064197199 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.063597629 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.062342376 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.062101151 seconds)
  done (took 39.124621867 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.063427518 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.06393584 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.063034883 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.063557446 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.063326602 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.063727861 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.064073548 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.064091658 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.064771045 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.065737637 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.065221398 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.062721025 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.063518886 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.063893688 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.067393569 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.065044022 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.06305384 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.064756429 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.063387015 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.064295115 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.064659165 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.067720106 seconds)
  done (took 47.401769223 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.064732669 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.06614584 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.064043267 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.065562401 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.065391831 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.066523156 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.065689902 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.066407041 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.064153078 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.065099561 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.06701498 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.065372332 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.064823857 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.065304085 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.066789197 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.064779536 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.064755583 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.065508646 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.065257589 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.065145787 seconds)
  done (took 43.297134492 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.066237895 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.064163402 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.067728178 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.066700579 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.066864132 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.067143604 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.06750946 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.067558319 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.067915475 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.068410559 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.065020323 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.06716711 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.066279188 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.066921709 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.066615188 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.069018323 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.067685315 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.067876272 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.06650724 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.068896653 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.067308554 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.068286571 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.069742757 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.06854736 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.066880724 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.067912325 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.06876211 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.066487931 seconds)
  done (took 59.874257163 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.066629568 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.066928437 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.068172317 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.068266168 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.065920995 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.06787621 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.067057671 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.068910836 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.066844283 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.068692068 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.068006607 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.066303287 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.068916975 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.067266892 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.067947569 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.068979356 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.070220891 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.068524616 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.07070035 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.067628738 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.067901974 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.069890855 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.067880053 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.067443428 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.068841325 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.068926551 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.070000236 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.071180615 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.067388765 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.068589547 seconds)
  done (took 64.040845521 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.089932338 seconds)
    (2/2) benchmarking "in"...
    done (took 2.086944812 seconds)
  done (took 6.169053846 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.071613402 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.068213278 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.070125125 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.070958703 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.06771417 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.068830891 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.070078899 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.070677068 seconds)
  done (took 18.54957379 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.069509378 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.073929915 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.07222518 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.069103679 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.071717287 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.079493356 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.072566735 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.073443057 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.075007714 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.072450076 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.077807618 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.074410225 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.076865714 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.076573345 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.0747495 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.072606769 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.072310406 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.077079016 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.074032375 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.072652405 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.0748429 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.072404657 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.073640823 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.073261848 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.070594782 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.074707486 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.080467358 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.071312797 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.074680589 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.072089528 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.078353268 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.077242621 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.072140474 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.074603053 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.074508959 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.073727007 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.080053104 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.074955891 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.06969816 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.072462644 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.075451456 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.075598691 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.075302325 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.08049003 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.076155115 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.072550797 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.071272528 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.073245971 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.071795605 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.076364252 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.079982179 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.072115218 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.076363804 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.072331282 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.075821605 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.074382944 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.074491459 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.074620472 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.079325051 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.081557189 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.079084659 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.092183537 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.085419166 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.076772754 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.074882793 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.084794239 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.095310034 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.073695072 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.07844341 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.076681338 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.083263378 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.075687861 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.075519219 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.075465437 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.087387001 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.089187448 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.075270896 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.074520296 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.078001998 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.073703424 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.078089961 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.078192289 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.074550394 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.076556251 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.087042319 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.09699012 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.078872649 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.075635152 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.078827819 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.077661511 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.07828526 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.080756976 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.07581376 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.076534637 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.076453095 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.082521451 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.075236908 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.076176677 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.074651963 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.085822572 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.079481952 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.07539529 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.079524635 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.086158854 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.07788606 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.077366145 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.07793079 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.08124903 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.08465336 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.076991285 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.078796124 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.076621436 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.078310553 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.084655883 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.077349663 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.080978987 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.084100736 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.084527858 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.082439062 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.08438298 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.082682844 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.080187092 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.088456204 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.099738678 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.07835579 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.082616616 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.082522624 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.087346792 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.081852156 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.079932708 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.081934791 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.077691546 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.079957953 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.080747051 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.080142371 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.080499591 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.077649729 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.079790789 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.078819072 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.080491733 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.08298418 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.08163537 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.08299655 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.082131446 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.083404357 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.07935332 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.081928742 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.087221292 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.079479362 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.079817239 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.078596343 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.081395376 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.081975492 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.080138479 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.081409645 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.077995602 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.079842959 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.078956075 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.084171041 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.08524857 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.081328689 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.080867431 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.082823054 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.080467478 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.081213963 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.081130611 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.081537454 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.080826351 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.082819513 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.083216987 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.083868185 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.083311685 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.087194989 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.083520514 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.081575404 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.081762225 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.082816207 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.079635784 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.085623555 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.090782093 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.084615093 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.089269765 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.080474208 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.087378904 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.081625498 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.08286494 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.081589061 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.083107875 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.079872146 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.082853775 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.081756676 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.086951808 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.105623243 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.094401588 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.088191411 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.086796805 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.088451378 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.086911612 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.089522211 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.083776025 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.086841245 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.087677373 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.083069575 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.083239373 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.082816095 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.089067777 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.084477534 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.08376747 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.087956121 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.08307442 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.084396083 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.085160667 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.083037845 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.08499821 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.084877985 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.082256802 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.084461889 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.084422255 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.091646907 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.086214246 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.082649078 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.082005831 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.084935626 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.083808899 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.084634073 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.084589483 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.088816913 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.08411489 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.088218917 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.095036104 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.087602494 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.086445943 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.085184566 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.085729498 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.088592877 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.084956358 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.088591891 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.091242117 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.087884841 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.082954047 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.091466635 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.084528689 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.085789987 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.084180332 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.085990851 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.085367326 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.088374391 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.086571909 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.084377031 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.091745747 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.087458189 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.086849629 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.087997172 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.08745255 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.088076762 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.090505434 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.087264177 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.090159111 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.091184072 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.091321683 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.08893579 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.088359845 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.087602875 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.08551842 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.088522211 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.086974554 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.099578626 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.097257402 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.086188343 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.08534614 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.088603903 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.087346867 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.088092428 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.087359558 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.094495351 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.088128723 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.087571756 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.091480321 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.087234662 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.087540239 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.092688345 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.091150503 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.092981676 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.088981873 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.088675084 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.087831376 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.087652534 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.090293664 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.088003861 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.088447998 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.090945547 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.088260843 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.089623566 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.088903762 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.094951177 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.091078575 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.088637901 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.093857151 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.092187758 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.088400298 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.090196608 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.085900099 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.0882037 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.089858672 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.089391384 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.089699602 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.089308373 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.092845184 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.097590726 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.091697779 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.096595062 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.090920731 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.099122866 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.089040396 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.088884454 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.089515365 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.092935913 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.093720248 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.088551586 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.088645501 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.098999211 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.091132752 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.090948676 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.095134774 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.089479388 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.091231536 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.089744754 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.091305716 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.096215509 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.095215997 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.090379904 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.091412842 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.090508318 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.090699459 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.094369023 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.090989158 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.09409824 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.090887511 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.090795814 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.090183842 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.092775777 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.090932857 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.09228842 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.091027472 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.092456913 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.098866478 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.094283805 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.091381188 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.096164381 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.090914704 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.10020787 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.092580982 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.09282634 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.092785345 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.093181197 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.094268774 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.093388081 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.091494866 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.092391414 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.09301128 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.094160689 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.1038804 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.101505209 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.098340451 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.100776642 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.096025424 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.093457925 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.102953011 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.114644358 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.094019493 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.096184827 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.096272955 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.099226985 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.098284808 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.098632771 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.097883002 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.100191829 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.094023974 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.093555563 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.097348678 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.104287253 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.094719503 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.093246955 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.09374938 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.099531485 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.097619626 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.094283056 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.093968158 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.099067324 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.097728323 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.104008366 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.095433905 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.097407053 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.093481962 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.093352596 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.093228123 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.094343704 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.09438874 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.096246704 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.095506969 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.096313042 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.099048215 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.10050423 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.096009673 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.098813065 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.104957275 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.097839591 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.095106896 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.096766845 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.100188193 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.099311091 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.100726446 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.093871147 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.093014777 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.095717064 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.096785424 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.101937976 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.107606542 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.098691168 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.095540727 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.09631344 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.100250232 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.098773762 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.099779168 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.097394933 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.10623522 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.102140777 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.105431631 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.107010985 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.099255808 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.096184528 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.104886779 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.103831429 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.096239976 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.095463214 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.096306648 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.099133776 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.099482555 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.097672737 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.097380195 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.097942663 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.102455788 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.099199861 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.096275535 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.099370227 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.097363389 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.100369047 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.100260238 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.10246666 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.098080498 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.097912651 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.097395564 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.098937225 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.101024278 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.100961934 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.097179314 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.098637208 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.100606155 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.101460306 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.100548803 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.097646011 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.09879771 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.100612962 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.098016733 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.097492706 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.097823736 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.097776468 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.098574009 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.102271292 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.104649759 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.097625812 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.099350383 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.100722452 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.103539308 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.099259127 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.099842154 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.099006376 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.098363708 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.107456552 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.100090267 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.100265081 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.099355105 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.099582309 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.105867482 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.102395941 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.105039317 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.102615155 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.099961973 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.100619654 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.104021408 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.10796844 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.104876117 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.102606007 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.1077569 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.105870588 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.104756494 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.102485062 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.100922265 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.100601516 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.101441942 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.104935721 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.103799579 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.103839262 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.100888591 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.102605613 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.101964405 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.10418588 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.10170366 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.103083397 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.103740989 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.109115008 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.110535603 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.103163108 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.102649719 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.102108236 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.103679297 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.113583827 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.103264743 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.104232443 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.102565723 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.103066251 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.102687119 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.111766464 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.111050905 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.108847913 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.102785336 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.107484574 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.120237273 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.106828007 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.113941199 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.132434086 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.106783803 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.103907815 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.108126689 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.104397167 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.104481135 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.105175718 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.10318004 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.10951974 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.105007777 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.104432478 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.109022427 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.105079929 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.105433952 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.103169585 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.105990354 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.110137067 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.105994357 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.110581672 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.10625389 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.103253985 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.10514558 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.106763352 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.105743081 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.105597577 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.104486122 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.106829254 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.105055022 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.103761644 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.112751599 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.107174122 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.104037896 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.119723586 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.118096199 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.105161787 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.103012572 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.104348285 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.108426851 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.109261831 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.103865102 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.107813805 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.111710224 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.108215768 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.111897929 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.104934195 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.107433207 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.10759163 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.105811422 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.106770578 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.116004772 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.117225217 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.109265794 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.107318613 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.112684143 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.106424761 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.113238785 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.11437481 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.109976278 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.107331996 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.109277126 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.107016796 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.106990906 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.106221411 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.109433501 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.111441895 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.10607829 seconds)
  done (took 1248.467174751 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.106238249 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.107206112 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.107088089 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.108495896 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.106055395 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.107017616 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.106148023 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.106885369 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.108654857 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.107323276 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.107588127 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.108481651 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.106030741 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.108274951 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.106676895 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.105690458 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.105845929 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.10784118 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.107942785 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.108155548 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.108709909 seconds)
  done (took 46.279898968 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.108831477 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.108193418 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.106421944 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.107583328 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.107126959 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.109139428 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.109220044 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.108056354 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.107119715 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.107887221 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.107863185 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.107871392 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.109495405 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.108111398 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.107619775 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.109261558 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.107990497 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.110700336 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.540314658 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.107806006 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.109712275 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.106141806 seconds)
  done (took 48.840147236 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.110862498 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.110058334 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.109334995 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.110633298 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.109774539 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.109724287 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.109062659 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.113050351 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.111357851 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.108202922 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.116978002 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.116179123 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.106946731 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.111767325 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.109926275 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.112308732 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.253490092 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.110705257 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.109703938 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.109515353 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.108491508 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.114597558 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.112083912 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.11156871 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.110442284 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.109652016 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.109163399 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.111071143 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.110966232 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.111247711 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.114276507 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.109698126 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.112134365 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.113585915 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.11090639 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.11309007 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.114953957 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.113364642 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.112215384 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.111469672 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.11974725 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.131113982 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.112449964 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.111220428 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.119345403 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.113663632 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.111297965 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.116419203 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.120049379 seconds)
  done (took 105.678716714 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.111855968 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.111355679 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.113524883 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.114920627 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.112260066 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.113039113 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.10994804 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.111829 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.113753284 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.112319092 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.112714467 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.111590009 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.113003867 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.112660541 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.112953012 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.112520864 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.111265227 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.112367174 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.113409632 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.111780652 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.113447019 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.112243992 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.112759664 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.111544108 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.112244706 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.111602234 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.113283101 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.112164314 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.111399973 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.11443401 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.113795724 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.113036396 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.114014811 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.114193099 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.113589744 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.114192502 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.113040675 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.114148158 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.111795675 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.112168508 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.11174105 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.113223489 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.114966086 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.112195429 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.112773319 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.113166657 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.112961484 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.115435729 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.114186596 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.113249691 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.116025311 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.114939751 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.114848791 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.113578094 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.114400852 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.116573237 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.114164872 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.114717234 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.114013631 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.114669199 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.114435501 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.114653357 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.114373977 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.11594509 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.114175288 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.115686159 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.1143579 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.115475091 seconds)
  done (took 145.743403852 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.116530134 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.115291231 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.115987877 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.114623894 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.115473982 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.115405773 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.116660954 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.116010438 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.115469697 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.115366414 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.117356065 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.114644811 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.115342682 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.11503488 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.117232431 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.115951143 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.115152782 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.116016308 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.117391903 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.117494394 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.115904687 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.114429554 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.117255891 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.117542866 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.115995099 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.115065669 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.116196765 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.118425518 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.118252638 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.116779826 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.116449622 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.116572166 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.117868539 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.116971776 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.116883839 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.119366367 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.117606351 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.115014118 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.115260085 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.115030607 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.117052504 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.117701771 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.118822864 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.117230899 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.118348046 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.117149888 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.117973703 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.117713874 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.119502573 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.117423808 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.116003228 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.118685855 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.119796303 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.119012233 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.119231566 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.121736617 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.116793628 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.116989501 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.120029302 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.120144002 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.119858356 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.121286704 seconds)
  done (took 133.297711444 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.120843491 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.119243598 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.120895123 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.1201244 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.119756799 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.120648151 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.118635336 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.121237894 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.120947417 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.119128051 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.114855114 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.120233561 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.121198168 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.119231287 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.119436687 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.122912878 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.118986797 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.119114746 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.12054786 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.119613914 seconds)
  done (took 44.436938832 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.120225035 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.121159761 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.120209592 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.120851927 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.120509451 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.121121858 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.118608153 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.119562049 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.1214033 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.121354376 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.119482789 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.121420942 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.118346644 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.119281008 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.122177039 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.121416544 seconds)
  done (took 35.968033635 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.121355429 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.121356449 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.121846252 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.120080479 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.120727321 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.12068918 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.122143019 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.119427676 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.120375689 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.120642849 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.121748023 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.121791218 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.12027215 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.121854129 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.122052126 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.122416196 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.121955503 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.120068528 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.122104537 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.121686709 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.122204042 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.121731304 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.123544531 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.120969739 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.122125517 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.123626326 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.123998918 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.122350242 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.121182487 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.122764545 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.123156527 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.121527035 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.123569312 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.123361944 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.125547708 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.123348286 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.121965304 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.121283732 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.122646722 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.123857057 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.123681116 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.122790329 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.124029849 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.124285512 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.12606551 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.122959873 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.122707013 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.123778059 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.121945732 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.120941267 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.12391753 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.124572843 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.124004032 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.122428018 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.122978076 seconds)
  done (took 118.773717657 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.124682011 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.123194626 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.123257383 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.123194907 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.124182127 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.125240765 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.125003083 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.124474122 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.123523071 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.123723044 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.123289785 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.126261617 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.12602493 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.123226984 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.126704047 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.127076524 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.12751557 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.123612905 seconds)
  done (took 40.288391823 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.124187107 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.125281745 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.125558723 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.125822031 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.124283164 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.125478124 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.127085189 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.123698691 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.128303014 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.125239603 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.125916661 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.124757218 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.125988346 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.125225592 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.12494067 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.127109977 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.127588661 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.127188819 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.124530487 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.12455915 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.127386897 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.125387457 seconds)
  done (took 48.812035003 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.126500553 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.125412353 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.139990664 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.147239795 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.145436655 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.159168313 seconds)
  done (took 14.890718299 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.127704714 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.126291332 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.129265231 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.125205901 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.127115604 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.126350291 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.126113598 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.127649911 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.128503547 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.126675776 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.126135928 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.124135179 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.126267676 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.127264688 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.125271009 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.129347507 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.127326063 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.127700962 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.126621029 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.126865026 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.126846544 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.131944188 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.126141392 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.126577484 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.126992948 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.127985171 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.12599772 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.127842979 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.128087897 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.128528746 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.126207757 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.126192689 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.127435457 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.128025296 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.126770744 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.12808631 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.128705648 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.128180371 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.127629041 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.129460932 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.127811896 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.129219611 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.127806074 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.128769324 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.129973581 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.12799354 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.128436924 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.128840972 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.127980498 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.130220008 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.129090893 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.129584928 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.127259751 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.13058358 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.130608568 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.128500218 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.129837233 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.131514358 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.130553719 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.130361249 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.129591881 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.128865275 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.129229387 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.128690701 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.131425918 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.129009057 seconds)
  done (took 142.501287161 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.130527865 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.128182655 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.130808351 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.129573273 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.129307887 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.129726709 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.128709091 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.128609797 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.130514214 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.129800649 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.130925365 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.131094499 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.129326271 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.130375155 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.130626999 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.130600144 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.130995142 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.131479805 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.129981821 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.13540549 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.129883342 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.130388554 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.132263878 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.132785542 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.131282368 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.130692827 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.130810088 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.132129842 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.131226492 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.13213216 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.131249177 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.13278869 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.130084365 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.131339918 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.132659605 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.131918276 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.130758506 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.132391748 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.13141533 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.132373436 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.130603831 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.133086794 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.13428892 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.133500568 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.134433584 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.130611811 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.131360889 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.133590645 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.135745037 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.131525757 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.132819278 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.134149659 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.133650978 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.133647904 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.134310741 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.13405493 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.132708442 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.133540271 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.133713027 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.134515637 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.133443823 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.133428789 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.132847984 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.13351842 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.133244241 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.133323724 seconds)
  done (took 142.75554439 seconds)
done (took 2910.112185785 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.206480458 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.204453162 seconds)
  done (took 16.464171455 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.297177086 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.157143197 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.325543743 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.256159615 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.172794512 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.168107783 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.142251894 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.142553414 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.234213377 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.141168065 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.158089196 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.140863713 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.142453757 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.143909661 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.145933942 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.143512004 seconds)
  done (took 56.977385284 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.146201454 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.146817231 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.144393496 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.14265207 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.155825186 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.216043165 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.166512176 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.147049401 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.156809918 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.178214594 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.160368512 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.148783855 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.151407326 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.14773047 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.235487433 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.189980989 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.199009421 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.218558529 seconds)
  done (took 41.113795026 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.222975694 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.154736909 seconds)
  done (took 11.446752462 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.151136208 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.156947596 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.16036239 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.16400492 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.159520624 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.169575494 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.148379726 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.177200195 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.156218506 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.137638099 seconds)
  done (took 73.690434755 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.144817824 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.148648992 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.410226645 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.153398376 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.151407409 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.166052094 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.141714171 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.175648791 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.148558367 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.143869854 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.154854143 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.411095029 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.155807656 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.146679694 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.572301698 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.156224725 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.153834744 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.177637694 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.176098387 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.14963493 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.154638019 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.152246549 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.306199089 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.832805487 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.144478458 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.147858178 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.150923548 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.145415156 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.143872431 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.147824397 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.149237821 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.14443695 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.150822937 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.146098218 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.150462205 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.150865731 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.647848273 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.168509417 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.154947912 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.232202669 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.190153667 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.154259608 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.972611872 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.149232331 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.145526888 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.152979184 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.83259829 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.232832536 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.149274229 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.32998545 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.481209516 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.161631418 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.311152731 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.289869937 seconds)
  done (took 148.080165496 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.145245169 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.476393932 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.300087786 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.149522374 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.460534345 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.35967368 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.803666157 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.190771656 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.150416386 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.363996782 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.282611542 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.25344593 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.147032113 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.144328574 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.147223114 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.144668897 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.301967454 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.214983041 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.144303076 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.145304707 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.166673592 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.306304719 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.253796849 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.148829917 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.16292059 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.361415387 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.197555118 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.25458191 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.64778884 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.146087789 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.2087753 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.616112817 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.147179985 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.145678223 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.188532008 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.248290889 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.236363013 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.148544619 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.146008339 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.1461642 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.833151289 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.347691554 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.251643861 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.279663685 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.294069876 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.361070312 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.620703882 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.147238307 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.669188131 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.315143192 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.355300433 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.375064309 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.246866375 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.149638835 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.458841053 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.144704228 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.79716353 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.374458557 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.290910783 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.25306606 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.15148622 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.147489158 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.147474182 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.393171439 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.15124471 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.244265128 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.148130599 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.146552185 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.246821375 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.254146996 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.288761167 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.373842885 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.17980945 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.87581009 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.367165797 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.320121706 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.213971042 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.374514704 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.150831183 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.147888325 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.236115731 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.749471185 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.278964002 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.393707701 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.389062151 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.172094229 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.738033747 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.148763816 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.289968122 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.325525214 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.434792865 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.29703217 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.203735623 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 3.039863451 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.148420503 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.150741155 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.176831507 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.275205311 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.342104643 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.503306226 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.388385076 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.728949101 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.168341076 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.526548348 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.260039501 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.152548161 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.807962948 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.151334524 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.356481396 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.194052023 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.153239275 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.151357876 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.316766445 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.164824861 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.15174266 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.892496619 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.210558858 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.153610527 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.327920991 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.154423867 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.39783587 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.074865157 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.385638117 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.094520974 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.181339923 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.325144875 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.294641737 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 5.448037371 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.485562784 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.398856966 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.239721639 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.378351467 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.926109789 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.152033506 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.423923972 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.154136026 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.150895724 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.322325072 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.072627511 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.300901903 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.153143776 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.469462558 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.17139172 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.20647715 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.154309085 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.402113755 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.183801987 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.200886515 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.153851057 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.282581677 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.156965731 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.076557362 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.309674035 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.15356127 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.151813406 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.734181502 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.153656563 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.298698211 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.381419159 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.166068998 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.223079371 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.646606555 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.74413633 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.240172854 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.175832124 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.525654037 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.864839378 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.287049213 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.157103182 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.648459524 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.153313636 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.393900381 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.342801323 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.15969448 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.153016733 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 3.008247488 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 6.783797324 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.154626681 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.311786238 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.628024886 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.531121787 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.361500597 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.157095925 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.205217801 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.159322541 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.891856156 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.496164965 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.156083694 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.153963682 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.155075158 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.161241637 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.156498139 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.36495215 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.184555605 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.702182257 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.292812579 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.412566718 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.460448123 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.376382188 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.192733536 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.15778152 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.437772623 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.159289649 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.219301086 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.157660191 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.164996474 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.433575694 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.157354487 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.37072014 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.368772158 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.131381759 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.202492392 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.15770345 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.156346491 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.155947416 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.292413976 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.248744633 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.157869901 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.157079132 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.194043315 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.258633675 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.339979214 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.444139665 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 3.156070524 seconds)
  done (took 947.895580613 seconds)
done (took 1297.724197251 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.157232497 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.155873978 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.159706829 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.158974772 seconds)
  done (took 30.709073463 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.158316562 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.159352486 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.161130276 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.158084293 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.159506143 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.160369825 seconds)
  done (took 15.034569506 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.157197289 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.158459948 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.162184598 seconds)
  done (took 23.555881664 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.586900545 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.56659992 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.23178004 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.306763724 seconds)
  done (took 11.770188895 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.166664021 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.159736221 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.160206699 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.160152832 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.162223852 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.16151183 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.161550071 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.159049277 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.160654792 seconds)
  done (took 21.540859096 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.275637281 seconds)
done (took 108.965788192 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.377379848 seconds)
    (2/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.320552949 seconds)
    (3/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.811484715 seconds)
    (4/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.128075321 seconds)
    (5/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.180259278 seconds)
    (6/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 4.173992512 seconds)
    (7/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.177447554 seconds)
    (8/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.175054183 seconds)
    (9/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.963437072 seconds)
    (10/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.173444588 seconds)
    (11/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.649334866 seconds)
    (12/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.321439501 seconds)
    (13/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.190986204 seconds)
    (14/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.25308166 seconds)
    (15/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.251828539 seconds)
    (16/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.188383152 seconds)
    (17/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.173804254 seconds)
    (18/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 4.673513371 seconds)
    (19/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.507328699 seconds)
    (20/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.192734273 seconds)
    (21/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.055715598 seconds)
    (22/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.290704535 seconds)
    (23/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.749123887 seconds)
    (24/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.512102753 seconds)
    (25/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.309317088 seconds)
    (26/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.261393829 seconds)
    (27/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.189910457 seconds)
    (28/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.185932892 seconds)
    (29/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.066489297 seconds)
    (30/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.461567578 seconds)
    (31/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.500888481 seconds)
    (32/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.183115957 seconds)
    (33/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.260518406 seconds)
    (34/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.280812861 seconds)
    (35/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.181435532 seconds)
    (36/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.234150063 seconds)
    (37/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.389192929 seconds)
    (38/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.313696925 seconds)
    (39/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.26292294 seconds)
    (40/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.402070094 seconds)
    (41/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.261900125 seconds)
    (42/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.18046237 seconds)
    (43/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.348251768 seconds)
    (44/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.176411702 seconds)
    (45/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.379966341 seconds)
    (46/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.594035457 seconds)
    (47/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.587456333 seconds)
    (48/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.179911378 seconds)
    (49/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.443831433 seconds)
    (50/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.195444243 seconds)
    (51/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.465006394 seconds)
    (52/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.423347162 seconds)
    (53/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.57910401 seconds)
    (54/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.276868084 seconds)
    (55/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.03451762 seconds)
    (56/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.496582271 seconds)
    (57/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.551013124 seconds)
    (58/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.262769465 seconds)
    (59/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.319210352 seconds)
    (60/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.474860525 seconds)
    (61/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.891266966 seconds)
    (62/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.49559298 seconds)
    (63/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.381650175 seconds)
    (64/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.398021769 seconds)
    (65/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.191324499 seconds)
    (66/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.39076356 seconds)
    (67/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.191189674 seconds)
    (68/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.277853677 seconds)
    (69/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.280343983 seconds)
    (70/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.435124308 seconds)
    (71/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.309015017 seconds)
    (72/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.674166317 seconds)
    (73/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.195335566 seconds)
    (74/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.188328898 seconds)
    (75/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.33868685 seconds)
    (76/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.513646666 seconds)
    (77/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.505576207 seconds)
    (78/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.192632217 seconds)
    (79/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.388952934 seconds)
    (80/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.190543402 seconds)
    (81/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.228926787 seconds)
    (82/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.346423558 seconds)
    (83/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.212645126 seconds)
    (84/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.194655622 seconds)
    (85/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.473748448 seconds)
    (86/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.264297695 seconds)
    (87/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.417217923 seconds)
    (88/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.181896865 seconds)
    (89/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.39426456 seconds)
    (90/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.420124162 seconds)
    (91/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.404178263 seconds)
    (92/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.291771737 seconds)
    (93/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.195230282 seconds)
    (94/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.47854732 seconds)
    (95/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.897048844 seconds)
    (96/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.488388483 seconds)
    (97/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.198046802 seconds)
    (98/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.176524299 seconds)
    (99/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.271358743 seconds)
    (100/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.60339565 seconds)
    (101/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.191077827 seconds)
    (102/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.885844601 seconds)
    (103/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.272213263 seconds)
    (104/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.189170595 seconds)
    (105/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.192124214 seconds)
    (106/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.189453139 seconds)
    (107/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.271132665 seconds)
    (108/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.475942809 seconds)
    (109/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.958125122 seconds)
    (110/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.606825916 seconds)
    (111/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.379400873 seconds)
    (112/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.266563337 seconds)
    (113/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.074862915 seconds)
    (114/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.795820426 seconds)
    (115/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.183805097 seconds)
    (116/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 8.705384841 seconds)
    (117/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 5.13597177 seconds)
    (118/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.582799105 seconds)
    (119/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.829744583 seconds)
    (120/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.418804632 seconds)
    (121/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.786742598 seconds)
    (122/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.419248905 seconds)
    (123/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.490467098 seconds)
    (124/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.45572437 seconds)
    (125/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.194620301 seconds)
    (126/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.414465327 seconds)
    (127/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.975122078 seconds)
    (128/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.187219969 seconds)
    (129/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.225782014 seconds)
    (130/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.228776641 seconds)
    (131/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.211300505 seconds)
    (132/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.26625385 seconds)
    (133/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.180941533 seconds)
    (134/341) benchmarking ("sort", Float32, false)...
    done (took 5.856287637 seconds)
    (135/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.183124018 seconds)
    (136/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.963803547 seconds)
    (137/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.51943323 seconds)
    (138/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.727968711 seconds)
    (139/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.274317966 seconds)
    (140/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.311308103 seconds)
    (141/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.429897531 seconds)
    (142/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.181761902 seconds)
    (143/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.419902262 seconds)
    (144/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.962644825 seconds)
    (145/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.116658312 seconds)
    (146/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.488870465 seconds)
    (147/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.313379316 seconds)
    (148/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.306995352 seconds)
    (149/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.42294057 seconds)
    (150/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.19625685 seconds)
    (151/341) benchmarking ("sort", Bool, false)...
    done (took 2.400620479 seconds)
    (152/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.539528712 seconds)
    (153/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.31086092 seconds)
    (154/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.185079976 seconds)
    (155/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.194425228 seconds)
    (156/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.498146436 seconds)
    (157/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.318782652 seconds)
    (158/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.628756867 seconds)
    (159/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 3.034051329 seconds)
    (160/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.297459101 seconds)
    (161/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.595927199 seconds)
    (162/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.421275219 seconds)
    (163/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.204818788 seconds)
    (164/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.196816884 seconds)
    (165/341) benchmarking ("sort", Int64, false)...
    done (took 5.836356543 seconds)
    (166/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.092149027 seconds)
    (167/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.0619768 seconds)
    (168/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.410993743 seconds)
    (169/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.196733664 seconds)
    (170/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.22114962 seconds)
    (171/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 8.917999303 seconds)
    (172/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.414924395 seconds)
    (173/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.300911321 seconds)
    (174/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.214632387 seconds)
    (175/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.069273501 seconds)
    (176/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.470292455 seconds)
    (177/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.393703368 seconds)
    (178/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.595034872 seconds)
    (179/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.391529989 seconds)
    (180/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.322145877 seconds)
    (181/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.954957198 seconds)
    (182/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.642208715 seconds)
    (183/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.470753508 seconds)
    (184/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.204844262 seconds)
    (185/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.186643703 seconds)
    (186/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.20129216 seconds)
    (187/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.531624923 seconds)
    (188/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.323373942 seconds)
    (189/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.041819406 seconds)
    (190/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.58453357 seconds)
    (191/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.246412388 seconds)
    (192/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.284789583 seconds)
    (193/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.3440499 seconds)
    (194/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.186321136 seconds)
    (195/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.288113983 seconds)
    (196/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.368308465 seconds)
    (197/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.027167731 seconds)
    (198/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.681776447 seconds)
    (199/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.315419253 seconds)
    (200/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.577914744 seconds)
    (201/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.303512588 seconds)
    (202/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.447836697 seconds)
    (203/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.375537012 seconds)
    (204/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.344306326 seconds)
    (205/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.95201308 seconds)
    (206/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.47225591 seconds)
    (207/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.187839856 seconds)
    (208/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.582080526 seconds)
    (209/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.375753982 seconds)
    (210/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.099780676 seconds)
    (211/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.57112293 seconds)
    (212/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.18955207 seconds)
    (213/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 3.960610524 seconds)
    (214/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.294625945 seconds)
    (215/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.188479059 seconds)
    (216/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.237710875 seconds)
    (217/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.498716451 seconds)
    (218/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.461744073 seconds)
    (219/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.277461643 seconds)
    (220/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.59217771 seconds)
    (221/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.50802642 seconds)
    (222/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.213288094 seconds)
    (223/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.28567432 seconds)
    (224/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.592428322 seconds)
    (225/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.3140959 seconds)
    (226/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.587423521 seconds)
    (227/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.267586986 seconds)
    (228/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.585036287 seconds)
    (229/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.21494519 seconds)
    (230/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.460591636 seconds)
    (231/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.652171386 seconds)
    (232/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.204755806 seconds)
    (233/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.20605714 seconds)
    (234/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.310212848 seconds)
    (235/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.453006046 seconds)
    (236/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.280955364 seconds)
    (237/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.272243571 seconds)
    (238/341) benchmarking ("sort", BigInt, false)...
    done (took 7.187643713 seconds)
    (239/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.197347864 seconds)
    (240/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.597688066 seconds)
    (241/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.49052386 seconds)
    (242/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.308874878 seconds)
    (243/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.187673958 seconds)
    (244/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 3.031175729 seconds)
    (245/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.958303566 seconds)
    (246/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.201623278 seconds)
    (247/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.244074303 seconds)
    (248/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.606103604 seconds)
    (249/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.290709147 seconds)
    (250/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.300483375 seconds)
    (251/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.307776993 seconds)
    (252/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.391023425 seconds)
    (253/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.820494484 seconds)
    (254/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.491440718 seconds)
    (255/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.189621102 seconds)
    (256/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.952192583 seconds)
    (257/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.169061267 seconds)
    (258/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.581666161 seconds)
    (259/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.144362772 seconds)
    (260/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.405679 seconds)
    (261/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.547805081 seconds)
    (262/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.329308998 seconds)
    (263/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.204664075 seconds)
    (264/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.403746183 seconds)
    (265/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.846894874 seconds)
    (266/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.318473157 seconds)
    (267/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.20134866 seconds)
    (268/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.87255885 seconds)
    (269/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.202394072 seconds)
    (270/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.215820522 seconds)
    (271/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.265810571 seconds)
    (272/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.29685278 seconds)
    (273/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.192571168 seconds)
    (274/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.294286949 seconds)
    (275/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.253823326 seconds)
    (276/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.588524785 seconds)
    (277/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.277052074 seconds)
    (278/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.114960112 seconds)
    (279/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.201235324 seconds)
    (280/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.915362036 seconds)
    (281/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.225104829 seconds)
    (282/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.288415994 seconds)
    (283/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.59064513 seconds)
    (284/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.359354055 seconds)
    (285/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.402046793 seconds)
    (286/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.653080751 seconds)
    (287/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.226439502 seconds)
    (288/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.298751269 seconds)
    (289/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.228624669 seconds)
    (290/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.313578178 seconds)
    (291/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.193449978 seconds)
    (292/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.883977089 seconds)
    (293/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.331993696 seconds)
    (294/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.207463684 seconds)
    (295/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.589372986 seconds)
    (296/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.639253645 seconds)
    (297/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.145132746 seconds)
    (298/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.206877556 seconds)
    (299/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.59140877 seconds)
    (300/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.255670214 seconds)
    (301/341) benchmarking ("sort", Float64, false)...
    done (took 5.886338195 seconds)
    (302/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.415777443 seconds)
    (303/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.197678259 seconds)
    (304/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.97107812 seconds)
    (305/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.316241259 seconds)
    (306/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.463095018 seconds)
    (307/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.218883918 seconds)
    (308/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.494349725 seconds)
    (309/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.484564195 seconds)
    (310/341) benchmarking ("sort", Int8, false)...
    done (took 5.141837549 seconds)
    (311/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.277764307 seconds)
    (312/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.522561144 seconds)
    (313/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.704540697 seconds)
    (314/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.311593679 seconds)
    (315/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.120950338 seconds)
    (316/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.220307168 seconds)
    (317/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.319602662 seconds)
    (318/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.615178779 seconds)
    (319/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.375680932 seconds)
    (320/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.417168737 seconds)
    (321/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.19712523 seconds)
    (322/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.4207069 seconds)
    (323/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.586503243 seconds)
    (324/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.192516725 seconds)
    (325/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.39649676 seconds)
    (326/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.359417838 seconds)
    (327/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.02123177 seconds)
    (328/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.323582884 seconds)
    (329/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.330810713 seconds)
    (330/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.323007214 seconds)
    (331/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.199370881 seconds)
    (332/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.237146773 seconds)
    (333/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.402448381 seconds)
    (334/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.195735784 seconds)
    (335/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.193505796 seconds)
    (336/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 3.953885169 seconds)
    (337/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.350726527 seconds)
    (338/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.197713316 seconds)
    (339/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.51730088 seconds)
    (340/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 7.198726559 seconds)
    (341/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 9.789265356 seconds)
  done (took 1203.42435808 seconds)
done (took 1205.871542081 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.217095963 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.198802604 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.708366274 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.20979662 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.198866574 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.202952537 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.71927002 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.228099839 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.217328756 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.717069573 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.210439522 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.198177715 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.213181703 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.233900223 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.209943006 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.213633298 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.205191525 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.225496718 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.233929586 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.211429721 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.249714819 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.206207269 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.199856531 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.253185222 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.20166482 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.212320288 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.222518321 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.252426727 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.254088287 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.204520026 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.20569813 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.566097305 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.254878989 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.205130047 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.21019401 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.221989127 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.211386675 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.215870039 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.219550449 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.216917782 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.203236688 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.214292379 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.206228646 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.201320502 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.199512416 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.199257121 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.202474331 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.325961919 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.216304379 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.548474942 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.261037033 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.22339918 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.253813794 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.205613972 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.204263834 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.204104412 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.250907857 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.207479751 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.206920733 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.551116021 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.294439548 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.215996774 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.552094788 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.264317788 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.213188906 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.211002186 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.202139293 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.221158378 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.566731957 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.760702066 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.234938656 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.224735548 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.203338084 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.204828057 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.216897871 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.719878032 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.218177963 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.792896462 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.231639141 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.222368318 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.209880666 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.20880484 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.20522151 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.225426344 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.223321902 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.202727524 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.210153012 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.211498187 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.22005501 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.567392974 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.247290628 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.714422838 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.211066286 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.222602359 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.223989872 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.791568669 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.2361165 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.223070869 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.209314731 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.567854894 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.245147671 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.222698347 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.208529561 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.217325368 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.319952665 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.224829517 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.225346533 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.206910854 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.225377912 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.212014969 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.207604235 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.222801884 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.225386032 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.246038103 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.223261945 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.2038908 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.212582529 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.212171368 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.227817572 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.216039161 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.210968634 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.220593719 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.207470534 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.258826208 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.225431327 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.221531093 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.320260451 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.215633175 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.33490053 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.221729629 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.213884436 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.206288862 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.55656184 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.250893815 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.232000738 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.221871186 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.231916483 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.232685691 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.225289414 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.208115503 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.222032913 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.209527024 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.258457768 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.211350879 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.243327727 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.258557905 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.223197767 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.217074187 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.226019179 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.244200046 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.229471659 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.211135778 seconds)
done (took 346.948529136 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.261316991 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.207147047 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.283965652 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.205116447 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.27731649 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.260690345 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.212812877 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.206354321 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.205543968 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.608605335 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.206465206 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.218418374 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.205638469 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.209935992 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.25738417 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.205534154 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.205657955 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.443823065 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.208599741 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.26978755 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.208202064 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.209584531 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.208916235 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.603713113 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.207946727 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.211707946 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.269419115 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.20687308 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.449585027 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.208492482 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.211251947 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.456837632 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.269240294 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.223606822 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.218718328 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.214169134 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.277108064 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.21470841 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.255855416 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.255529747 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.284289084 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.242686307 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.209591763 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.208078505 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.20923884 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.212477839 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.209149407 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.238999071 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.208034746 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.215124124 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.446437669 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.215159855 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.216184054 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.209397806 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.206272797 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.226003614 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.213726583 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.210235483 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.269325715 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.211744454 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.258329337 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.606855113 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.604984038 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.212730148 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.212353479 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.206509115 seconds)
  done (took 206.432174004 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.27811303 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.296807461 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.278571274 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.216039309 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.26291344 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.278957865 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.211616375 seconds)
  done (took 17.949172385 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.218869744 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.210300049 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.231953288 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.233227668 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.209574709 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.349900956 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.221595139 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.215486718 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.231433788 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.209730573 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.50325926 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.232583879 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.215907688 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.209117425 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.221074364 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.241932643 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.210745208 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.212262309 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.31199024 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.28719859 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.214602115 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.218828842 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.236968169 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.222104594 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.213574558 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.211300502 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.213537246 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.217171619 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.213123031 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.211720572 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.213166858 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.224956566 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.212560957 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.209991608 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.211401114 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.210327436 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.212300506 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.217465073 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.2097649 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.208966423 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.215076688 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.213048006 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.213347039 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.216028304 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.215005156 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.235072395 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.214284955 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.212089326 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.210762068 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.215688748 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.243486325 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.215270513 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.211170374 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.221526944 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.246146819 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.218538745 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.214493064 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.214171629 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.213038718 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.213353782 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.215306307 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.294779832 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.238441947 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.213432934 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.235903734 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.250302152 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.216888713 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.213812671 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.215517969 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.238058071 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.214591805 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.239256576 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.213790703 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.308144556 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.214757589 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.354832172 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.236887598 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.21652379 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.222175268 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.212222128 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.22122609 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.216079612 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.214658731 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.222937257 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.22035562 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.214485443 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.216285273 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.215683541 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.222175296 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.215873155 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.265639697 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.214249489 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.21713902 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.310850605 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.214234806 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.311442208 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.237619061 seconds)
  done (took 238.49869784 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.221424725 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.216777423 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.228134724 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.219094345 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.216559532 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.222678771 seconds)
  done (took 15.456274989 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.220522133 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.219629983 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.217045416 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.217688788 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.216755628 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.216490963 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.216223333 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.219890638 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.223184248 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.21761182 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.217348442 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.220383933 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.218817364 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.218350773 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.216736091 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.215771894 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.214617028 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.214066917 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.216795186 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.219329323 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.447887515 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.218666915 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.219522843 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.223167213 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.225377838 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.219233116 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.227500727 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.217377957 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.218555122 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.224072443 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.22484133 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.221902333 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.223883903 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.226354551 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.22464811 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.223729439 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.221085197 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.22127576 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.218342117 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.224088384 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.221700243 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.220481232 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.220801624 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.221538262 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.221340115 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.228440897 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.227997024 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.229194935 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.220204357 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.222506866 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.221196498 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.218831186 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.220110312 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.221936019 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.225751688 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.227611235 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.225859832 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.220556172 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.222619909 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.224099008 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.223480257 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.222084005 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.22315642 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.225172919 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.228158775 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.221841126 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.224649845 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.225927137 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.222418715 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.221883885 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.22068022 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.220602126 seconds)
  done (took 163.307136575 seconds)
done (took 643.768592235 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.289368232 seconds)
  done (took 9.426008703 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.418216338 seconds)
  done (took 9.656999051 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.898654121 seconds)
  done (took 13.040529514 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.236914686 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.288539132 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.222660328 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.222094302 seconds)
  done (took 31.119934969 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.457436475 seconds)
  done (took 9.597256395 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.236356964 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.216086212 seconds)
  done (took 16.653635998 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.293867069 seconds)
  done (took 9.432178388 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.713342522 seconds)
  done (took 9.871208939 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.236490253 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.241576001 seconds)
  done (took 16.637855349 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.225911483 seconds)
  done (took 9.364838467 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.02092971 seconds)
  done (took 10.24547861 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.238708677 seconds)
  done (took 9.391863709 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.2251031 seconds)
  done (took 9.36488629 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.320948874 seconds)
  done (took 10.458448787 seconds)
done (took 176.396891452 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.231596349 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.218657805 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.222037008 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.22052653 seconds)
  done (took 31.030337651 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.257335538 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.259814465 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.268120652 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.260713584 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.251664851 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.249588202 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.257270153 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.260801058 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.250322421 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.257815706 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.260023972 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.257905956 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.260853774 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.269594345 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.270254352 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.258113618 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.259807494 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.260545584 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.251680489 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.269855455 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.257184346 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.261497219 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.226398689 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.226893648 seconds)
  done (took 56.30425682 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.41683009 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.292652286 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.380544306 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.270696536 seconds)
  done (took 11.49982369 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.226911259 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.288449918 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.277702496 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.272077849 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.278403213 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.327751803 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.278356304 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.361042174 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.353979484 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.351763716 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.233967522 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.249574267 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.249019305 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.272805117 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.329258322 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.224292673 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.22440676 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.341821862 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.292808344 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.427041437 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.226393494 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.283468207 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.277446252 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.278934611 seconds)
  done (took 57.068154473 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.227147732 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.235053018 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.234223233 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.228500467 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.228174077 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.229903076 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.235158549 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.230071803 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.25007697 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.22971928 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.226238825 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.229194448 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.234544754 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.229014106 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.227789709 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.24093569 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.242645298 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.228319464 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.232545638 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.235326118 seconds)
  done (took 46.796628601 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.227790095 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.072796037 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.575123642 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.478077763 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.227342957 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.224707797 seconds)
  done (took 33.948573124 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.240952343 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.240723887 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.234768696 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.252843536 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.274452048 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.237255002 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.28827041 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.391493883 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.236595787 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.28647125 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.248693036 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.236029432 seconds)
  done (took 29.313027987 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.225487516 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.230734306 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.228478496 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.240222555 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.237325336 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.23526289 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.236936723 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.228148378 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.241577312 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.248630195 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.236607013 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.239893714 seconds)
  done (took 48.973447362 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.442027649 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.456441217 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.436057402 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.796362316 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.534231691 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.214050962 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.512745662 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.440232765 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.982229483 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.942683473 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.514395461 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.212008324 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.176821364 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.151763444 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.145774718 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.471039254 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.228194567 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.086061495 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.482042538 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.278771448 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.229613241 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.230599572 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.233635554 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.513815638 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.559469803 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.233527318 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.441147795 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.247511152 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.264726919 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.441596951 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.77926278 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.275688603 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.434583048 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.48873091 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.568730501 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.428513688 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.233147572 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.365090515 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.266680616 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.264974641 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.241955203 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.240544567 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.770776234 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.242590796 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.500867639 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.231742522 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.370553024 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.229973206 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.152501652 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.53441606 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.346641869 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.228978966 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.263601372 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.665303315 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.349875316 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.472136171 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.236438334 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.37507154 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.280697378 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.472450315 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.340117395 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.331201608 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.440854944 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.156217343 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.613800123 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.355261799 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.233078856 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.233384639 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.932540238 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.474658917 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.313785585 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.576234511 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.996638933 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.233954868 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.23719531 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.277264174 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.325028409 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.228468282 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.529163724 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.216411053 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.155264589 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.329020067 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.630452378 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.237033529 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.231593971 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.239331169 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.07983778 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.159526054 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.32894536 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.469477948 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.555989363 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.233237073 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.236054247 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.255018033 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.236521663 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.180397989 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.757844141 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.289732619 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.16078045 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.792424655 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.791882131 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.189656507 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.672941789 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.267852574 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.505635212 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.38410545 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.638674642 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.446088311 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.48293759 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.767658563 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.242148939 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.85139805 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.318396775 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.313621572 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.238273214 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.800760422 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.383763511 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.513669242 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.3528914 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.236489987 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.164705683 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.249276878 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.441936697 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.797220976 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.284494997 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.235709577 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.243865102 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.236807013 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.240154092 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.346009721 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.254474714 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.52645987 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.314770679 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.237723937 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.17520667 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.240453274 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.518556259 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.818595758 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.292131036 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.491436566 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.506710027 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.937322949 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.834206313 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.18385411 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.504149152 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.314694853 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.313070433 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.79530323 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.370134866 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.334670499 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.238331174 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.366050283 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.245629015 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.242322791 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.54777065 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.645253163 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.665749495 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.283627318 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.240386271 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.273030177 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.38797556 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.474324136 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.355142255 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.265424411 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.243775852 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.322487494 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.468978334 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.242794261 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.169196921 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.482117323 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.481998466 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.525473245 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.653135709 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.308649788 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.309895394 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.251597944 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.454584991 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.324157021 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.905229808 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.786033988 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.44847413 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.77596614 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.198871449 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.887381561 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.49440632 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.618446148 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.258109759 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.691703346 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.385303808 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.888432933 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.26814712 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.763799856 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.166233293 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.244995039 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.569964395 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.195865657 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.551702272 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.350925028 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.257343783 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.243846974 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.244024947 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.251040559 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.1747708 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.348334976 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.310974539 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.315755215 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.169319065 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.863714154 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.27649889 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.244516718 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.241440195 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.625628333 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.045680512 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.19437669 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.241546398 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.318854937 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.989757661 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.794340937 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.246473217 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.246889022 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.853972665 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.245475528 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.155857136 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.2468385 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.124129681 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.266692302 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.498507706 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.945312187 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.523803701 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.320254505 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.316793682 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.241457999 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.249288418 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.94442461 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.254282645 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.944917482 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.524895958 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.522792696 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.680758576 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.310075228 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.454280959 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.259170815 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.244334279 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.751708486 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.267762042 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.245375751 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.448912713 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.764373192 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.563787069 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.887092532 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.329100671 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.245642886 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.507810597 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.254410571 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.81095916 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.928213319 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.250417592 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.244667289 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.505174894 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.930732655 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.247381373 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.219671506 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.250879747 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.459212176 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.447582585 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.512203827 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.539243002 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.698425581 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.171279729 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.251776959 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.271014058 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.490349838 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.245752962 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.282402226 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.691008075 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.326652947 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.671794245 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.5277029 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.627954275 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.880178635 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.509558351 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.314675352 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.259023367 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.899780436 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.373556222 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.178493643 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.364348848 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.173757317 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.017383884 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.536369973 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.264864412 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.510418136 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.230585759 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.583359703 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.54996781 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.49740908 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.293316229 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.276670962 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.249520721 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.287479976 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.249335203 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.400217699 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.358246836 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.251369367 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.762027096 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.279557627 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.295395698 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.254827506 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.748939095 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.267206464 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.24817881 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.943065479 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.273396795 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.368452607 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.320672838 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.027553697 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.841614921 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.270828804 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.198792708 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.90196108 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.513832584 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.309543047 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.696495039 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.286090379 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.653809535 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.248176208 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.463311796 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.255220891 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.788701677 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.290254581 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.514323535 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.206351638 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.462309041 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.445226825 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.277934608 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.254576945 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.177070413 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.413230921 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.132523343 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.231786188 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.252115631 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.935215194 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.66483977 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.4212119 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.690589436 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.069140188 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.254875945 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.594068823 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.637270071 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.841439053 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.278795693 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.25324991 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.559512258 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.377158661 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.543355326 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.516649979 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.261014002 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.28007526 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.465848049 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.380464521 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.171487379 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.735845887 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.841342574 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.952870201 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.262919857 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.456536525 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.57743568 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.502052539 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.281896642 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.326883226 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.659155805 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.516743811 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.324601345 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.177954897 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.25422905 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.650878282 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.76213487 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.35067855 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.492722335 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.555477949 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.743910872 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.863369337 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.654708038 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.668816247 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.69284737 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.650053201 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.460842009 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.60904776 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.579320677 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.845777031 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.666397499 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.467255133 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.351766898 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.521971086 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.125347135 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.962840332 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.498780586 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.261303615 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.183513184 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.461951086 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.265559388 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.598813175 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.824198895 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.504415971 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.499198919 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.723561428 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.793322851 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.410764605 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.273223587 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.221329081 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.277538975 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.276595566 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.254224088 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.740674704 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.547297411 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.268583337 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.19592858 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.926013474 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.183037817 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.468207128 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.414399736 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.285415492 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.811591531 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.505471707 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.357605131 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.537818258 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.466074337 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.285082144 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.183549501 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.016031542 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.201139604 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.333862478 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.679392243 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.272799652 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.258828237 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.462068851 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.185219861 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.303738821 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.26225095 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.44912857 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.838220143 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.524018292 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.384035623 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.494311774 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.558513636 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.132326534 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.28028227 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.53048844 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.182880387 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.8513544 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.950249409 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.299989646 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.326916138 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.259766132 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.260173003 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.530311054 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.569753511 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.3563898 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.973916882 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.286942404 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.28240452 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.5777145 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.348753965 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.260419366 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.260819855 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.708973155 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.484872727 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.259919846 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.240792817 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.470645133 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.331818132 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.456362363 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.336740258 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.773454083 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.265501981 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.142078406 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.35791397 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.209079818 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.257242309 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.034283498 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.318093466 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.260507812 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.527535492 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.957382806 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.461449252 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.656833634 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.165552196 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.417006223 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.29597817 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.263671079 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.270671003 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.643493588 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.569694718 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.259231772 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.526127857 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.309014089 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.261777235 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.924069808 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.231517567 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.262178923 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.036259635 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.164456073 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.988990912 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.657991528 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.393527699 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.267836787 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.263915748 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.188673263 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.260854653 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.433466426 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.262537843 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.271185971 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.625171061 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.562081046 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.35173315 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.263196616 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.262388989 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.265131028 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.475547558 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.776010372 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.279057954 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.964690476 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.465083792 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.265279356 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.746167875 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.70530765 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.495250042 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.294632021 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.428571745 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.493950732 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.804485099 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.43079199 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.235882613 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.488830171 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.265365133 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.536405469 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.537172735 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.264572819 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.476399673 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.834043712 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.542542678 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.615416338 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.574319363 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.333949958 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.442202254 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.172205137 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.265119516 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.266007313 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.526072854 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.323386622 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.265509623 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.273446311 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.820596163 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.028015673 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.724145749 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.418494296 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.573475905 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.126926624 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 5.015471227 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.266526882 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.19233822 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.265685402 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.290516551 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.268060872 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.192862837 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.963934983 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.986901 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.479762769 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.574070588 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.190595061 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.468837056 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.851140715 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.189528544 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.23522166 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.266393071 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.513736504 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.193810398 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.26839706 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.221986933 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.532503462 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.968183251 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.531848329 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.263909769 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.209381006 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.269945593 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.268594638 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.267151538 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.350433973 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.269253596 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.382703874 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.530685711 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.640956571 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.373790969 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.90809893 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.042212013 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.203397613 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.309979731 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.882008141 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.833421994 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.544849798 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.398597433 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.040188696 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.211508117 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.273151849 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.285756673 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.513520685 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.270416823 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.273805702 seconds)
  done (took 2309.261611115 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.273672273 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.3063277 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.340680271 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.312677464 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.338160325 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.313974801 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.339721902 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.344222812 seconds)
  done (took 60.752287143 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.262478162 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.232823234 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.270623338 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.264866889 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.261889853 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.288514677 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.461944795 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.290145508 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.264749953 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.266322927 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.266990853 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.265304085 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.263958361 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.261328709 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.268297641 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.496785507 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.284426231 seconds)
  done (took 83.222879198 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.316680279 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 9.986365338 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.26411633 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.949055977 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.267755234 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.612884617 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.267390492 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.265261169 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.286015039 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.559646222 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.312194025 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.277659354 seconds)
  done (took 94.549707747 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.266107345 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.265882248 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.265886299 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.266371547 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.266187111 seconds)
  done (took 13.510346039 seconds)
done (took 2878.42152511 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.51409901 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.360796167 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.33619101 seconds)
  done (took 6.875944861 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.4095743 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.459170523 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.573827707 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.593000398 seconds)
  done (took 12.221322902 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.547847535 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.631704669 seconds)
  done (took 7.359181394 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.636936282 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.281096829 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.654019326 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.268961135 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.26672956 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.268291204 seconds)
  done (took 23.987719196 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.268453174 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.268311905 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.267870794 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.267266411 seconds)
  done (took 11.25335305 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.266632883 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.045254151 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.266058683 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.274660436 seconds)
  done (took 23.033923395 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.47716789 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.321748432 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 3.029384303 seconds)
  done (took 10.010779615 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.892450155 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.721152399 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.872768182 seconds)
  done (took 10.669471973 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.496775506 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.08644411 seconds)
  done (took 8.763656015 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.410512734 seconds)
  done (took 4.592120281 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.096431863 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.581590087 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.740208587 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 3.292744607 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.900518169 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.668700876 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.7557433 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.554852584 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.673057622 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.739412975 seconds)
  done (took 30.186635925 seconds)
done (took 166.220727102 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.906769215 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.302325044 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.50871129 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.663121972 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.518711381 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.489197156 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.564584882 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.665117301 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.373211042 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.372786661 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.670842547 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.512596339 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.506039436 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.302823415 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.516250466 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.301348645 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.507231139 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.751862209 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.336356802 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.578553061 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.567945923 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.294382923 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.489384094 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.318954444 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.511111677 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.436658766 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.916064457 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.303625744 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.483950624 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.936307995 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.436169441 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.717435488 seconds)
  done (took 182.947317828 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.275208556 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.272978326 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.27288523 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.271909551 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.611932328 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.273827482 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.273131398 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.272992909 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.594892974 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.564807545 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.274470044 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.5983177 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.275971226 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.276007669 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.279134551 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.277516831 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.736563462 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.276015531 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.275571329 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.27373084 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.275533333 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.477275292 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.278093349 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.48968737 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.698161728 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.277992146 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.275033066 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.276945283 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.278355914 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.273988404 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.279899375 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.277617958 seconds)
  done (took 221.575810335 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.277455146 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.278244769 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.276028359 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.274947582 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.274691433 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.277155729 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.278755254 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.274171149 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.164698031 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.147536591 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.275081719 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.274739508 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.277841779 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.274324941 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.276326671 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.275211036 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.274862128 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.276397336 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.27659456 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.27438785 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.275801597 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.019727696 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.277861534 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.041691044 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.277292396 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.278068002 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.27654604 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.277090557 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.274985438 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.276374721 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.277322653 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.275794178 seconds)
  done (took 234.299582431 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.515751342 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.279466587 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.278334206 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.289405799 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.280427215 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.277674719 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.283914498 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.523584271 seconds)
  done (took 22.920876647 seconds)
done (took 663.943798226 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.680056535 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 3.039272687 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.412470297 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.304504745 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.588617557 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.348679967 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.296366954 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.371611584 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.959763381 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.378869063 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.727136017 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.306530965 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 3.050600605 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.327531561 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.417166403 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.364700546 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.64787505 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.924755259 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.437851857 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.962547902 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.510380007 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.260142548 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.382669704 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.999008148 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.739170152 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.267860776 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.329369304 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.655364422 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.305260966 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.540561575 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.001439402 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.564433357 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.31456214 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.29907367 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.357442725 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.343587723 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.520461069 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.311908336 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.413353598 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 3.049567409 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.964899392 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.841571744 seconds)
  done (took 117.710389505 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.289841071 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.284681686 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.288053775 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.287630691 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.294064396 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.286328727 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.287216964 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.285940601 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.284888906 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.284554862 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.28490857 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.297046442 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.285671367 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.294688857 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.286411596 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.285358416 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.285537642 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.295596871 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.286407428 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.286361441 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.286120747 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.287097301 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.283851317 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.287783708 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.286855981 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.285711773 seconds)
  done (took 61.686013889 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.281823457 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.436280483 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.581088024 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.320706464 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.28528227 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.287168964 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.315149427 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.292083441 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.286711921 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.287463682 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.381530514 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.290790288 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.298515452 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.573129494 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.316528779 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.285015993 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.282990777 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.285540862 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.447048401 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.302011171 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.3146648 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.293579034 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.313893762 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.301772823 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.285641448 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.285366118 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.287273964 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.748091548 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.297978929 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.380384802 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.356921427 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.318387025 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.638864303 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.586565565 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.358711142 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.292881904 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.285950684 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.429235178 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.299974311 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.28693607 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.313730421 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.296114401 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.57752482 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.819357542 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.301492218 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.28554045 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.743336158 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.44132084 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.33626241 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.304060921 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.585559288 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.318483483 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.287475866 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.288660232 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.323043423 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.302875908 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.288416213 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.573335789 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.303800071 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.316506015 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.294727776 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.288658135 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.454764068 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.297686358 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.442478333 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.297643695 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.293736912 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.287709258 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.582106943 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.31876609 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.809281394 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.30132559 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.284785439 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.380714162 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.447000762 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.770871228 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.302930258 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.45288259 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.655287486 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.324720997 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.298655153 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.734150544 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.329178869 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.30004831 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.2899774 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.2886167 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.289428826 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.33019544 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.315201737 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.729239054 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.819543416 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.590785605 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.328798863 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.30171369 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.288594188 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.572951129 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.300743692 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.290613554 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.574947588 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.841216959 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.303899015 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.295644212 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.794909039 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.305074534 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.31925092 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.300860166 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.593348468 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.321372612 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.332435252 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.290122886 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.297456627 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.294409349 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.319965775 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.301852105 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.290357085 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.788790983 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.448226842 seconds)
  done (took 282.106844143 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.296122799 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.289538041 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.29015697 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.287170454 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.289670961 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.292220823 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.288526114 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.289573554 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.290965856 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.289666544 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.291054208 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.288676045 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.29086936 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.292868306 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.324572498 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.291584738 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.78145849 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.292278079 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.289561779 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.2924708 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.864991556 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.2992065 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.289444073 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.291116233 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.292044878 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.292357308 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.293317003 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.32330705 seconds)
  done (took 179.494423787 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.292782281 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.339941565 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.308004436 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.34063075 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.309194001 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.292997037 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.313817357 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.308975222 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.297983993 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.292464173 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.293145169 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.322458997 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.302868461 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.368502434 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.319265469 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.324254564 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.371546811 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.29843366 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.29335866 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.292396272 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.342513042 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.307985315 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.319891221 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.348057504 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.307413705 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.34152411 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.309174775 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.292921502 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.295104665 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.385436412 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.309891665 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.321794276 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.329096228 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.314927497 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.389549894 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.386839922 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.373630916 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.322375764 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.299043339 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.295323209 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.295707671 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.296198892 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.344173224 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.309522083 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.296632868 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.387237527 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.312762867 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.29510509 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.31822278 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.294363209 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.307297538 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.313013178 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.32687521 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.397820524 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.34114765 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.327282795 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.317123864 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.315576255 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.297931711 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.36890689 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.300798927 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.387062921 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.315572161 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.296173371 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.29766173 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.302323729 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.34522641 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.334051399 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.377603681 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.301952274 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.369685446 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.348037481 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.31240845 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.298305721 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.297871332 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.345909155 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.386066823 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.348080595 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.360867485 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.336424728 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.308373762 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.297614412 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.298061205 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.325520806 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.306605138 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.387861725 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.389034083 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.301393511 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.297666546 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.298275506 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.297612686 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.322956632 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.357054535 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.341364468 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.382159757 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.330077304 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.335045696 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.306051923 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.310747729 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.304164371 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.328526266 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.309280499 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.31014026 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.64723319 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.334377505 seconds)
  done (took 246.637410944 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.680852309 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.347255565 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.367483368 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.58122644 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.668960714 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.533823955 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.335141599 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.357944546 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.360846061 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.470334952 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.407011746 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.402092501 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.336996349 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.320593179 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.347679394 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.358465736 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.382614377 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.65816597 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.447583307 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.168683228 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.335594313 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.596215054 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.644419353 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.69262982 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.388298635 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.737788391 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.987000963 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.438395355 seconds)
  done (took 74.570014972 seconds)
done (took 964.396968016 seconds)
SAVING RESULT...
DONE!
