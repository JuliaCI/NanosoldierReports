cset: moving following pidspec: 1977276
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.30822585 seconds)
loading group "shootout"... done (took 0.863657482 seconds)
loading group "string"... done (took 0.223068035 seconds)
loading group "linalg"... done (took 3.255835707 seconds)
loading group "parallel"... done (took 0.022061352 seconds)
loading group "find"... done (took 1.209960437 seconds)
loading group "tuple"... done (took 0.724503591 seconds)
loading group "union"... done (took 3.330542023 seconds)
loading group "dates"... done (took 0.165323412 seconds)
loading group "micro"... done (took 0.06146923 seconds)
loading group "simd"... done (took 0.386334976 seconds)
loading group "io"... done (took 1.477232171 seconds)
loading group "random"... done (took 2.600297472 seconds)
loading group "problem"... done (took 1.199563106 seconds)
loading group "array"... done (took 4.700623413 seconds)
loading group "misc"... done (took 1.182787322 seconds)
loading group "scalar"... done (took 3.822391297 seconds)
loading group "sort"... done (took 0.337838968 seconds)
loading group "sparse"... done (took 3.726014351 seconds)
loading group "collection"... done (took 6.422939923 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.494506857 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.075205285 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.279238252 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.075854499 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.277725962 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.087101623 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.096574543 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.077189928 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.194442683 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.166525822 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.24874889 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.369741846 seconds)
done (took 5.225769341 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.318713858 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.033428969 seconds)
    (2/2) benchmarking "String"...
    done (took 0.126825874 seconds)
  done (took 0.781590362 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.136935685 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.016362035 seconds)
    (3/3) benchmarking "different"...
    done (took 0.023489541 seconds)
  done (took 0.804579507 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020778519 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.101841099 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.023795429 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.02431576 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.024568734 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.024004545 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.023209401 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.022612045 seconds)
  done (took 0.853304529 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.029389889 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.023404475 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.021308198 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.022801791 seconds)
  done (took 0.708655727 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.023196128 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.094190933 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.028223971 seconds)
    (4/4) benchmarking "different"...
    done (took 0.027959032 seconds)
  done (took 0.780138994 seconds)
done (took 4.886151718 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.202650268 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.792277985 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.904005888 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.18013207 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.34799186 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.324116935 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.077402803 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.230646537 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.148143344 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.035496254 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.18162526 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.037702539 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.521961808 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.56383946 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.028534955 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.151103758 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.584289005 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.038784272 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.070395155 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.217375691 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.035934663 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.041633317 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.046263896 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.028956844 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.127434495 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.141043514 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.617744084 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.067404335 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.027551961 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.052849884 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.029492784 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.03192284 seconds)
  done (took 9.543957664 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.166917653 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.149015533 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.026198023 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.062608559 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.056263079 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.027535354 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.033276059 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.025773297 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.046791984 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.093404848 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.047416311 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.157838674 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.023226914 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.025791651 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.142551374 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.12024631 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.03870573 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.0383175 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.024335632 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.039005136 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.05112021 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.036562512 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.035072534 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.034674754 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.072093013 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.093192868 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.044602316 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.072437522 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.0246494 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.037665627 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.058875196 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.067394565 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.025505624 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.024591613 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.070822783 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.047937409 seconds)
  done (took 2.860835728 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.878390961 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.120482488 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.144512056 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.188591638 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.072238051 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.056949955 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.182488532 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.078490145 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.056992966 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.025603515 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.198347431 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.678228371 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.171530423 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.417221318 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.029854749 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.293841345 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.982768601 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.999855269 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.025307285 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.024986583 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.136691108 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.029176208 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.179405766 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.143362821 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.157848291 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.720268061 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.029758239 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.02789156 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.056271304 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.149977084 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.024136361 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.103102468 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.052201297 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.029029602 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.592235119 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.023742879 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.021857681 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.044436792 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.056408859 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.024756963 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.025685008 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.034221432 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.023481576 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.075554478 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.035388327 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.521460728 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.028353378 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.71140445 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 4.98951452 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.032097339 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.028784399 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.063838715 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.021698827 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.025345616 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.542240737 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.093116576 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.024344043 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.300099553 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.026091934 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.02587892 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.049015254 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.058684643 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.025706244 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.026623926 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.028157831 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.042623464 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.09784499 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.033863825 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.043898298 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.023097249 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.024590017 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.023856 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.421163003 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.030387106 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.129922883 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.022382118 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.028595378 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.025041445 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.025655486 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.065333338 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.050974131 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.047314241 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.027594327 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.024486625 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.023345415 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.543779955 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.970155899 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.02507499 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.025508551 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.522166587 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.021382374 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.023556325 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.02546474 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.045520243 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.025048094 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.021001244 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.063266389 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.026639779 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.132254606 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.352776782 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.026838576 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.023071233 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.640344681 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.026061872 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.056640094 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.074763996 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.023635519 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.05716633 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.02352209 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.020898907 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.027230115 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.02096052 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.046119851 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.022278385 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.0227772 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.022471735 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.023388794 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.024987445 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.02354068 seconds)
  done (took 25.27505376 seconds)
done (took 40.171726929 seconds)
(4/20) benchmarking "parallel"...
done (took 0.802491454 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.212761989 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.052789401 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.021373833 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.160307596 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.046583513 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.136672307 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.171879806 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.127590072 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.046412406 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.045813906 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.046465504 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.177459672 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.185825115 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.0473188 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.117450315 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.184801226 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.046807418 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.0207701 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.045792845 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.046344269 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.046311056 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.02076798 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.046525794 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.0465858 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.117380729 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.045941604 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.020659055 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.116655614 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.046859275 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.117505253 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.046698203 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.046904216 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.047915385 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.117376553 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.048423975 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.118220131 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.021461742 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.049178042 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.048851136 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.05080017 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.051893267 seconds)
  done (took 3.972570642 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.051063493 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.045136469 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.062738073 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.020904142 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.032263739 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.04366016 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.020468445 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.04329432 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.062573976 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.044556831 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.043216217 seconds)
  done (took 1.262283869 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.043988096 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.044058256 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.053964629 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.020557552 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.033719187 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.044499859 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.020837166 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.043278623 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.062522519 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.044200978 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.042304827 seconds)
  done (took 1.205904033 seconds)
done (took 7.162186277 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.149800773 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.121932521 seconds)
  done (took 0.982785718 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.588119563 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.214943916 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.133102698 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.248953682 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.124858778 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.157293501 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.715397099 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.156932574 seconds)
  done (took 7.120019372 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.079387344 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.142796065 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.025938224 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.023546095 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.023353281 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.023444012 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.024654218 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.023492763 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.022863117 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.025425443 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.024958181 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.023192557 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.023773466 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.025231498 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.023199686 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.02377111 seconds)
  done (took 1.410563009 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.027947 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.025997787 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.027292831 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.017148179 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.027168604 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.026291456 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.027319841 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.028228393 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.026253592 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.027082225 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.024768626 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.027586117 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.026324773 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.025883576 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.028259056 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.017492751 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.027834461 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.027579648 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.029619667 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.02728785 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.026226543 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.024518293 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.027950703 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.026176957 seconds)
  done (took 1.351658944 seconds)
done (took 11.608403621 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.133546032 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.029497427 seconds)
  done (took 0.895211574 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.123382845 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.126014795 seconds)
  done (took 0.973642186 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.027612228 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.016389685 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.031484145 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.024531065 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.017158579 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.017186196 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.031559295 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.016852043 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.017275622 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.016932819 seconds)
  done (took 0.956538057 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.01931647 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.022732156 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.021089851 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.01950509 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.021056017 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.017332784 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.0195316 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.017392663 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.022992222 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.016660645 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.020263979 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.038108322 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.02023649 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.039649912 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.020287844 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.020866261 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.022266657 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.020239985 seconds)
  done (took 1.124572258 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.018024433 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.01746616 seconds)
  done (took 0.786756179 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.020463875 seconds)
    (2/7) benchmarking "second"...
    done (took 0.017788974 seconds)
    (3/7) benchmarking "month"...
    done (took 0.019576842 seconds)
    (4/7) benchmarking "year"...
    done (took 0.019591615 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.017988324 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.017096851 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.017359498 seconds)
  done (took 0.857854545 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.421031503 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.10097549 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.355455597 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.028083973 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.040300153 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.252721735 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.022441922 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.026897697 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.027460738 seconds)
  done (took 2.0108004 seconds)
done (took 8.324593944 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.048141379 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.153781064 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.152390112 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.472461481 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.037352173 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.025509311 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.061790814 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.232293711 seconds)
done (took 1.985958941 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.281160786 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.354561772 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.206149368 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.024472115 seconds)
  done (took 2.346278825 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.330978672 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.147758252 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.035550363 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.026348884 seconds)
  done (took 1.341129766 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.022853983 seconds)
    (2/2) benchmarking "read"...
    done (took 0.029730539 seconds)
  done (took 0.836342881 seconds)
done (took 5.582899064 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.031058295 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.018088612 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.027797821 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.0203933 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.02016155 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.020050933 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.019829055 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.020496216 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.01847258 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.020540521 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.019956674 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.019433206 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.019254975 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.019537225 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.019396803 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020598034 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.018645832 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.020270914 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.019488803 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.019382004 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.01766208 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.019715571 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.018705405 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.019794201 seconds)
  done (took 1.261214535 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.03987193 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.024615643 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.023810818 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.023429237 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.024661211 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.023856896 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.024017828 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.023538058 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.023795162 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.022613514 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.024581835 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.024263099 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.022170818 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.024470601 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.022465259 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.025423231 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.023708849 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.023058667 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021882866 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.024115408 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.02296652 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.023035736 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.024080342 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.023166321 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.024168417 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.024035287 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.0219939 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.023464887 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.023591174 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.024406467 seconds)
  done (took 1.511754124 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.023422408 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.015715273 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.015989375 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.026459873 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.016089379 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.016011773 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.016324712 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.015544052 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.016457006 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.017554835 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.016695376 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.016466411 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.017724457 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.016552596 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.016581267 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.017428338 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.023397168 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.039864108 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.017263611 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.016971526 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.022160608 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.016288721 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.015787381 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.015812664 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.016030201 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.015566291 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.015381076 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.015827538 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.015517729 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.01638578 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.016087834 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.020633882 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.022116589 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.016137773 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.026147898 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.020903128 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.01610453 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.020828172 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.017173726 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.015696664 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.015510796 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.015406639 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.015532601 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.015460168 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.026313363 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.015761633 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.016580456 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.015960652 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.015630529 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.015615816 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.015605186 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.016951938 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.021672119 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.01665816 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.015365754 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.016575702 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.015447469 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.01604606 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.016091936 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.016268596 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.016160789 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.021208347 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.017383112 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.01668254 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.03870844 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.017382759 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.027112255 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.016599927 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.016805831 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.020809673 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.016813039 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.036546684 seconds)
  done (took 2.105229194 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.029117255 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.026890016 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.036229474 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.0259957 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.020558929 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.017193077 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.020229429 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.017211364 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.027230452 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.020387254 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.017776719 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.020417506 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.027948015 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.021254244 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.018549442 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.027086115 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.021168476 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.020424498 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.018486798 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.021947341 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.019621978 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.020975427 seconds)
  done (took 1.258590016 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.109112511 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.023868038 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.073537076 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.023295879 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.021909495 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.022794347 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.0237945 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.024536001 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.024594096 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.026463349 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025484179 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.024971824 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.022685021 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.025889957 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.02548291 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.025107838 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.024477112 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.025250001 seconds)
  done (took 1.377286399 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.041432811 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.026171211 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.053458198 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.02589093 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.026228147 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.022007377 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.030298245 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.028960733 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.021911266 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.025668853 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.027991214 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.022467601 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.022281307 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.026946493 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.022580272 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.025713812 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.021651252 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.025317588 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.027428075 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.028970928 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.029164268 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.027877575 seconds)
  done (took 1.370439126 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.038634934 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.022829527 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.042221441 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.025170417 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.016739055 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.016686945 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.024662024 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.023283853 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.024006794 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.021891039 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.022903206 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.016413173 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.024967074 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.02389334 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.02583212 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.023542373 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.022238383 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.0238228 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.022416439 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.016709761 seconds)
  done (took 1.26562827 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.127363229 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.018900234 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.018361626 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.022568966 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.018551104 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.018193393 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.022530248 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.018183349 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.018648046 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.043917794 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.019122215 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.018878475 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.024027699 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.022351947 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.019096478 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.022945375 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.023376677 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.023297195 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.019254005 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.018993425 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.045455343 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.019727638 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.023546535 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.018634731 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.018431449 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.018380443 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.018560424 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.021169905 seconds)
  done (took 1.478046828 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.040058925 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.016075807 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.016399347 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.020695347 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.021050458 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.027245617 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.021096516 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.021129447 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.016785473 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.016836495 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.018882113 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.016626629 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.01620202 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.025824362 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.016110143 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.018649695 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.026268258 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.020717569 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.029108116 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.026823552 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.018944442 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.026309612 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.019112496 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.016828294 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.026871792 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.018488636 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.020389162 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.020948193 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018416601 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.016431289 seconds)
  done (took 1.410738494 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.029477265 seconds)
    (2/2) benchmarking "in"...
    done (took 0.026896661 seconds)
  done (took 0.810924861 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.021033093 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.036200379 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.016680013 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.032878127 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.029154888 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.020897962 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.027678481 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.029475951 seconds)
  done (took 0.987127084 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.126996809 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.154371905 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.018599429 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.018380078 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.126473882 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.090714856 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.140888395 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.032436722 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.034386759 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.022312326 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.018656662 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.139336912 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.018501144 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.03342625 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.019806108 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.028897188 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.026431454 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.039505197 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.031412179 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.016427432 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.030496229 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.017794715 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.016881139 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.017849185 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.017991854 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.024145406 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.033173202 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.03024712 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.026665131 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.016143205 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.036558088 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.016437258 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.016911384 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.025581549 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.125759511 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.016935444 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.055553308 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.017240948 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.021172003 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.016818163 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.028778996 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.03753596 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.030817213 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.033995233 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.017503957 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.017824139 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.016055122 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.017669823 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.020475065 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.025644071 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.016311132 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023818493 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.016028316 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.017561261 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.027001985 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.016490128 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.020532714 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.025618065 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.030417721 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.027057213 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.028961153 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.031922034 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.025350781 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.024321606 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.016882853 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.036459828 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.017798908 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.030105222 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.031713684 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.017498472 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.029011591 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.016647121 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.015932829 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.016632387 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.052136811 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.018320834 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.018154127 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.017343745 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.017661672 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.018723257 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.028333999 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021922867 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.025229501 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020202797 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.033836932 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.026962597 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.017156694 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.024226016 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.036660751 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.021872329 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.017508674 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.03544936 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.021673918 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.016952218 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.035941021 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.028234088 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.018613131 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.017578735 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.020759197 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.030211848 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.017790666 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.015634057 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.025234994 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.018245638 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.12654892 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.022210882 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.026292904 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.017153831 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.028094034 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.024152178 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.019585754 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.016790478 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.022431686 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.017824761 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.015962853 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.026841255 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.017364856 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.032321151 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.0242796 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.032846999 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.033512072 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.028928544 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.033958025 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.017147833 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.016247193 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.03637368 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.027017177 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.018393639 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.036276906 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.01767726 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.028418751 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.017576172 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.018939373 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.027374364 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.016867239 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.019114908 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.017681557 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.023575976 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.019080842 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.019351357 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.023698812 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.026996518 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.031447316 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.018852132 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.027313489 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.018187086 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.034478828 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.027236298 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.022355394 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020399499 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.017838706 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.029767136 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.024890372 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.026487778 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.016867111 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.017579811 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.01686359 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.028514701 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.027292262 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.019051849 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.026381911 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.022265863 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.018296414 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.017407259 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.018366447 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.022058438 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.021581566 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.01829218 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.025400948 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.026531085 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.031618624 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.024133318 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.02660502 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.016889961 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.01760258 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.019047824 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.016647006 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.022695641 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.027284671 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.03256864 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.028338485 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.039100465 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.017428529 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.027131807 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.018804215 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.034665884 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.031308019 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.017992613 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021357383 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.015867393 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.01805057 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.025736468 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.027789115 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.030647731 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.033839238 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.022884344 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.022641659 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.017084561 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.032938658 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.017274914 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.025418846 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.026771221 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.023814086 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.017930001 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.019904292 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.027265348 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.022423169 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.018356675 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.033806102 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.025360487 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.017353259 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.031990745 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.017351865 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.027993785 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.017396083 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.021621597 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.02312543 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.019247346 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.027938231 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.033797425 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.016532629 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.01757512 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.033875899 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.019960422 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.019071009 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.025739196 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.03305432 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.02231036 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.025362608 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.028176558 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.028253707 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.022213144 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.027915746 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.018343046 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.026820051 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.02115729 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.030560819 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.017683218 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.036724208 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.016631262 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.033341532 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.018210867 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.029191968 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.017617553 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.026858546 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.018235335 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.035198384 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.018854972 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.018062589 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.029256405 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.016213396 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.02648331 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.016929747 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.02250014 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.024185753 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.026503108 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.01896783 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.026757919 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.018754225 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.026262201 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.02249963 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.02662723 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.026892851 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.02222445 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.016984533 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.025735662 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.028446352 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.025478549 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.018658653 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.170746718 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.017126323 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.026737827 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.018884407 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.01807591 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.025679004 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.022258988 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.023102412 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.017749648 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.017777437 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.017720822 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.025070652 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.026023952 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.034692505 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.025650127 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.025465885 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.027323326 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.017055816 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.033359167 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.016689983 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.024266509 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.016027312 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.022273299 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.025873336 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.017045694 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.036556969 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.018437257 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.025391506 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.029863593 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.027168349 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.022365852 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.036728415 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.020197023 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.026716289 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.025748388 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.022152114 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.023998148 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.017997285 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.02551555 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.026346548 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.027236263 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.017230735 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.024027641 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.025876192 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.018255002 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.024737634 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.018266227 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.026582148 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.018787106 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.016310958 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.021835602 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.027706106 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.021738632 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.021870428 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.016425628 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.015267302 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.016209561 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.021946784 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.021353457 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.025979356 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.032490375 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.015837428 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.017010835 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.016064207 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.020527219 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.034242672 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.025836359 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.024414333 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.021411244 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.015443052 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.017036726 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.017303481 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.016888076 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.019456625 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.01603655 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.016334363 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.027170965 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.018062958 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.022036875 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.017077455 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.017499244 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.026956079 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.020356684 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.016924149 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.024049539 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.016554424 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.023262543 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.016881825 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.018766905 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.022120299 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.016525019 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.021556934 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.027857748 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.034795172 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.025878399 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.027400153 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.018436537 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.025826271 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.034202121 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.024757868 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.018018648 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.027148751 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.01724926 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.037890012 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.027579552 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.027128098 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.028297954 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.018497323 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.035966703 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.023376833 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.028735846 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.034216779 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.018499754 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.024752051 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.017133021 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.03363275 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.022320239 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.017686326 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.027467806 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.026472269 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.024282782 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.029903848 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.017982539 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.025638389 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.021403049 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.021552734 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.018880155 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.018409065 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.025709304 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.033032979 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.017363369 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.021383641 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.024837271 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.026177282 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.022318005 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.029120044 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.024892664 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.017411339 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.018401803 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.02083801 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.017515078 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.029369344 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.017309517 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.021884786 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.021830583 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.016646229 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.023978255 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.033758948 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.026287711 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.026773341 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.017454986 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.016875443 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.036061427 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.021667724 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.020503898 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.025498828 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.027609541 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.030217168 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.027035615 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.035101591 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.017642582 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.0263385 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.031103336 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.018481202 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.017566512 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.022336028 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.019264535 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.027303741 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.027892712 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.025603691 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019703794 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.025654329 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.032091975 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.018935004 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.023078134 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.02387024 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.018578342 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.028633916 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.025773528 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.026543747 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.019051263 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.017204908 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.021261529 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.026800567 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.025386719 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.026928892 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.018481349 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.025976331 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.157045198 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.026023078 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.02122177 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.01761043 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020961516 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.026901236 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.024045092 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.017230369 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.022396 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.021727999 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.025782552 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.027076359 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.022671782 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.01720253 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.035044375 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.026396705 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.026502331 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.01871494 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.019021803 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.017506407 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.0168398 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.02885424 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.017458554 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.019268243 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.02349521 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.020188068 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.037209596 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.026291044 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.034781436 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.01886846 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.022607244 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.017294177 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.027423921 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.022699535 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.017629126 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.028708723 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.01723053 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.034266476 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.030187663 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.024717879 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.017529747 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.023810331 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.027047155 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.034709591 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.02855702 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.028041339 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.021636401 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.028198502 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.019166846 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.028842778 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.017512112 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.016411789 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.02808757 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.026775022 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.030865943 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.017866633 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.028233155 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.019750971 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.026350552 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.02667414 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.019565067 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.019574975 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.01937006 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.02772564 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.022943965 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.027852506 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.022699301 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.035426466 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.018521244 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.029242948 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.026935915 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.028632519 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.030936414 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.030163909 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.025832062 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.017529669 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.025312333 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.026203345 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.018552779 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.022399702 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.02041695 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.039661542 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.018262084 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.018232011 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.031766934 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.025372642 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.016871422 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.024253049 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.021710975 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.026525506 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.017412115 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.027190697 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.02236711 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.01791455 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.022553444 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.022719652 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.016359211 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.017546842 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.017890769 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.027661273 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.022974847 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.017687498 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.03824519 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.018743484 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.025956767 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.028469223 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.025674007 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.019205288 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.01664258 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.018314552 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.030878148 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.032771056 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.021534764 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.02553063 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.018599287 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.025979929 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.016036348 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.026311341 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.025843931 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.183746584 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.016743468 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.016630604 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.03249601 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.033617414 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.022399719 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.035834322 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.028163876 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.018658978 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.041456472 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.028621507 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.019135637 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.030257849 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019644586 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.017321064 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.01693475 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.018142218 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.028218869 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.016404608 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.018581676 seconds)
  done (took 16.1901271 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.063091283 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.018009814 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.017176143 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.017513305 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.024511351 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.018626754 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.017143207 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.018107587 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.018430387 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.01921199 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.017481349 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.017261981 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.022199258 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.031825065 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.024612399 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.020249761 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.017056863 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.017942238 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.016838412 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.017860031 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.022664042 seconds)
  done (took 1.285559276 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.020079206 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.020260253 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.019847458 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.020031491 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.019621257 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.016905718 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.020036933 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016549992 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.020300584 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.017491873 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.021124095 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.017556853 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.017744581 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.017795178 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017965768 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.019016495 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.021244171 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.019875269 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.016755574 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.02025043 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.018752729 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.020457612 seconds)
  done (took 1.234631951 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.018627245 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.017115987 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.02555594 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.016532889 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.016666756 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.019446038 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.016792896 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.02231846 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.02256264 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.022539254 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.026547844 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.01743893 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.016673816 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.023420642 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.016784404 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.017098275 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.070813875 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.017135499 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.017081606 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.016310836 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.018571676 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.026187466 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.016583939 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.016496719 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.021687342 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.019536875 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.016366933 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.018372244 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.01648629 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.021220721 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.017296381 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.016226432 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.025631616 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.024871433 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.02175477 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.021939422 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.01782413 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.017928185 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.016725193 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.016227179 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.024940258 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.017794087 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.016859172 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.01778162 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.026242526 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.016906017 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.016214318 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.025981347 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.016413429 seconds)
  done (took 1.815832653 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.027529898 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.072981435 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.024845678 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.05386451 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.029909797 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.021424749 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.024316313 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.05589001 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.017237947 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.017702199 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.029499452 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.029925122 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.018129338 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.019254268 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.022972544 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.0181261 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.018635198 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.017569377 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.020267668 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.017771468 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.020400439 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.023933464 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.028846636 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.030084775 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.019009067 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.017498592 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.017965518 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.019374559 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.029556868 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.021199283 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.020590474 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.020934657 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.029830725 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.025253249 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.018096569 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.018144621 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.030109482 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.01877902 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.018137674 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.016750972 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.017879499 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.01921175 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.023908803 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.02973399 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.018414273 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.025008599 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.018086989 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.016356586 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.029339932 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.017941281 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.021173964 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.030273933 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.019487628 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.018662754 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.019726837 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.029580595 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.018529292 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.017210397 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.018306283 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.029463934 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.016755372 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.018869056 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.030420234 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.017902003 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.020945477 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.030141687 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.02499069 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.019106351 seconds)
  done (took 2.551291633 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.026649851 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.023157101 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.027536022 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.02731615 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.023074299 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.022937428 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.022722889 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.02308482 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.022813058 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.025583738 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.022751804 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.135606759 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.021311676 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.024222629 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.023742242 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.023499282 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.023824105 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.023469781 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.023094943 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.023290723 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.023638005 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.027778142 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.023452325 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.027806279 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.057141021 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.020903352 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.023517347 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.0236814 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.028984491 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.0247714 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.0313312 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.024241482 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.024378097 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.028879941 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.031010344 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.024966098 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.017764285 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.02432234 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.024875069 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.025175745 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.021459852 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.028481996 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.024603816 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.021479289 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.024491853 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.024353877 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.029117034 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.032042164 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.025288795 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.02704949 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.023503219 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.028259061 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.02303945 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.023879758 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.030114124 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.067777011 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.030675363 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.030500936 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.025380187 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.030594342 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.030482758 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.039771306 seconds)
  done (took 2.599139519 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.029869613 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.021654629 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.026634266 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.016089289 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.016008917 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.022029667 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.016291582 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.016419649 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.021734052 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.021329835 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.022492892 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.021235295 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.023318848 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.022769829 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.022298819 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.023911777 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.022123369 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.022462163 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.022753262 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.022879947 seconds)
  done (took 1.274025401 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.019150991 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.021458927 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.016783977 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.020481211 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.016802278 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.020202622 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.01697807 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016755792 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.016907499 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.017005383 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.021296744 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.021104283 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.016763924 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.023500982 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.020991992 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.020841633 seconds)
  done (took 1.144111685 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.019982246 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.025351942 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.124229288 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.017978056 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.019405218 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.016629617 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.017485649 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.015878814 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.018294063 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.032188616 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.016855648 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.019108005 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.017804162 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.016246227 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.016522168 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.019315035 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.019029264 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.017295485 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.017676967 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.127396641 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.030607338 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.018377058 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.019428627 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.018245537 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.019027437 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.029173616 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.018362274 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.019077728 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.016324241 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.019328981 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.019214382 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.027677348 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.019691308 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.017712925 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.01620768 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.017125186 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.017551813 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.01923394 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.019119755 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.017181851 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.015745009 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.018829566 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.017247591 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.017451741 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.018272429 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.019064838 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.01817701 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.026012495 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.016910908 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.018719606 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.017097562 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.018225145 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.017173862 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.023925658 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.018970848 seconds)
  done (took 2.086494533 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.036552887 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.023029405 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.01598492 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.015470654 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.022047636 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.023589691 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.022778663 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.023527922 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.023780318 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.015641568 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.023777716 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.022344344 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.024164801 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.022650109 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.023438221 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.022413863 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.015630021 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.023527374 seconds)
  done (took 1.207501967 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.023926087 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.020694696 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.021268879 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.018232097 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.017958493 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.021543026 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.01614493 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.017298362 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.017095905 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.017419287 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.017520854 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.017017915 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016855327 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.016650828 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.020498789 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017616775 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.017143518 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016303311 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.017789679 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.0162676 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.022509104 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.017055762 seconds)
  done (took 1.201753831 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.183006716 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.148212776 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.04180392 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.035736723 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.027041979 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.053333369 seconds)
  done (took 1.28103834 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.05542042 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025796562 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.022929985 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.05123159 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022603577 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.021604679 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.021266076 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.021269995 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023993511 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.029554961 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.021440191 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023707136 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024088459 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.025610421 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.022942362 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022456153 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.021531735 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.021823535 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02392565 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.03504146 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022197004 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024303028 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022297715 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022072496 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.021962366 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026407836 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024970197 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.030801716 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.021726795 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024322833 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023366169 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022498171 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024974291 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.030884693 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024062517 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024920579 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022249121 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.035117613 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023058598 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026648506 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.02364822 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023440525 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024612519 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024442616 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024890994 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022988658 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.025602607 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022925692 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023024794 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.038530518 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024282692 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027643168 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024592001 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025456561 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025766258 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.038164289 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.031587355 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027335525 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024843758 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.033488499 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028916422 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024820322 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029734327 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.033072145 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02497023 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028165218 seconds)
  done (took 2.577089776 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.030476468 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.053877665 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.021839442 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.03117918 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026564734 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022171098 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022041164 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023027751 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02304514 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024674728 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065362003 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022590104 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026341564 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026559733 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022059847 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.021802006 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02214559 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026749181 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.025480591 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.03752275 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022491117 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026635538 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026691186 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02673273 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.031372327 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02310847 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.021870918 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.021915166 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02186918 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022103888 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024937046 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022631213 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026526022 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.02474805 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026564849 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022392238 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022074248 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024910924 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022238131 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022318184 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02497852 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.034250672 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022003927 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02184862 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.031125765 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022071625 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022162673 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024517521 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.021932984 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024239377 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.030357504 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.030373581 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.030290789 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026422884 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.021715276 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.021629089 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.021460068 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02139734 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.021628464 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023212883 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027437781 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022427756 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.038869859 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.022666373 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.022757652 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02780943 seconds)
  done (took 2.585395034 seconds)
done (took 54.635500576 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.211093176 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.17157772 seconds)
  done (took 1.208015646 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.136069585 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.137152919 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.169944868 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.026602499 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.087572828 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.182599749 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.127504458 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.026801801 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.025559693 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.027495767 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.02634183 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.026666898 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.026706572 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.025422581 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.090311739 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.026585841 seconds)
  done (took 2.037895629 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.075453092 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.289256785 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.071345334 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.024987097 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.109569917 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.030725204 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.025468627 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.029998288 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.030138842 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.024603725 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.073071306 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.04648558 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.028536663 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.029597497 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.025276304 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.028420584 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.029427365 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.029823682 seconds)
  done (took 1.834589813 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.091472231 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.034427135 seconds)
  done (took 0.940936408 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.145814206 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.064873552 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.110773994 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.354659703 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.0973966 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.303510219 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.103305724 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.099358907 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.069479022 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.096401283 seconds)
  done (took 2.292106418 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.062712566 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.059267094 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.302041354 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.059687432 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.037077074 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.031646596 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.032741224 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.03111402 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.032084338 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.031295571 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.076345988 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.031232465 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.026666482 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.071683801 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.04931504 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.062740853 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.025365729 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.030870377 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.036068817 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.026229953 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.030578636 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.031620362 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.137801238 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.031634684 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.05054783 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.029073192 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.030862093 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.031773094 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.031844379 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.032696465 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.032760326 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.053630595 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.031020985 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.039153129 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.030210766 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.049505338 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.026271725 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.049257321 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.029543187 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.025398543 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.027720664 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.031422488 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.025788805 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.030862072 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.03145321 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.030281065 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.030772371 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.024986588 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.032442429 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.028920404 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.026673873 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.029634158 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.030522252 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.031198178 seconds)
  done (took 3.180899713 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.077648182 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.069649319 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.025981033 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.076415575 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067850329 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.025401669 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.082028035 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.063035843 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.079767143 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.025674546 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.024966254 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.024648526 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.031876422 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.036966777 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.078045938 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.071072665 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.026573173 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.025057965 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.070225016 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.071162324 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.025309577 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.08338709 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.071879523 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.06923372 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.023837843 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.024942425 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.023632405 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.024264024 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.030819601 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.031279125 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.024294082 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.033374561 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.035377367 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.031139398 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.023901037 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.023988009 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.023591565 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.031709097 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.03244239 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.032183419 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.030362988 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023960163 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.024331707 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.024711741 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.025305914 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.023750207 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.033116443 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.032318762 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.03258504 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.024334442 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.024648642 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.02411493 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.025153222 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.031343925 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.029439033 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.030960247 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.034338814 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.025622008 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.025475703 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.025975328 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.034756598 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.032531605 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.032246649 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.025525027 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.032278839 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.024252238 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.032686705 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.036991332 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.024159151 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.024403426 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.024294788 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.0243473 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.024351412 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.03030882 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.030232201 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024630158 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.024050847 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.0234976 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.031083794 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.029826822 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.023426572 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.030847837 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023105622 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023847954 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.024167265 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.024341725 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.032013646 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.032064957 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.024521902 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.02420525 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.024441088 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.024256128 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.023318595 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.031961944 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.032277139 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.03242714 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.033155307 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.024636392 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.033869675 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.032445275 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.02486885 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.0314226 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.024350702 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024591219 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024641356 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.031398278 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.03102558 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.032846299 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.024320751 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.023964502 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.032462735 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.035127621 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.02384378 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.030632331 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.03255888 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.030767563 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.023526302 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.036147626 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.025056425 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.03401078 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.024527545 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.034148701 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.025545233 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.032820402 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.025918713 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.024496137 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.024875048 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.034543209 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.025394454 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024918107 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.025795762 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.025087068 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.032870449 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.036455231 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.026165524 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.033464707 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.033030452 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.025231799 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.033584602 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024775551 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.033702373 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.025142891 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.025219097 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024569865 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.036552625 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.025667562 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.02578581 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.025126344 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.034020999 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024372738 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.033673644 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.030952017 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023817936 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.033697283 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.033714382 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.031775711 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.035559832 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.026417094 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.025190669 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.024663284 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.024562336 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.03289575 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.034655149 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.025068984 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.024405457 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.030935153 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.033358158 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.023831171 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.031185878 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.031119397 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.031480773 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.024582041 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.024435366 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.035003295 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.035683981 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.03186405 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.034479659 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.033636456 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.02531997 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.032442982 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.034800239 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.024649954 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.040009891 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.025064261 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.035484162 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.034279998 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.03101067 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.034097382 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.035731575 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.03457491 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.034186272 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.036316755 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.024129955 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.024378753 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.031951885 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.0243155 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024573345 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.031821205 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.025640721 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.025664064 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.038660065 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.024912566 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.034392478 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.024654013 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.033389145 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.024740197 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02555613 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.03775187 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.025342665 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.026709614 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.033528548 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.025302898 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.032336858 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.035114156 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.032278663 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.024780453 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.025477847 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.03538981 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.03507254 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.025359624 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.025040718 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.025728422 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.035275006 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.034823553 seconds)
  done (took 7.944958658 seconds)
done (took 20.28072049 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.144011856 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.077494069 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.138692632 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.083060821 seconds)
  done (took 1.257209312 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.058702215 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.021759857 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.146419288 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.157624891 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.022238965 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.141870257 seconds)
  done (took 1.411843054 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.25911071 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.156751815 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.157293635 seconds)
  done (took 1.46672701 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.160431006 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.302366097 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.596444314 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.155546161 seconds)
  done (took 2.125794393 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.178710882 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.167690924 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.033374751 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.18414925 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.040633494 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.01862054 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.103891209 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.019262324 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.053838107 seconds)
  done (took 1.772989533 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.098743374 seconds)
done (took 9.068201313 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.210983708 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.141123803 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.038580626 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.032143766 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.130701819 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.133256479 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.15510196 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.035282484 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.144095136 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.319661811 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.195372426 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.055312612 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.161274553 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.045698847 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.275015456 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.034438758 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.032463771 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.027424179 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.155474073 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.140493378 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.250258963 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.030491705 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.102411073 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.032710584 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.108623025 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.085878237 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.194352258 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.32443558 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.283625726 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.033783097 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.125906152 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.044499471 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.12317474 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.126895994 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.133992889 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.051728854 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.022293907 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.248319605 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.106304894 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.329672212 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.171202538 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.030119353 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.147900284 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.028080683 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.021732172 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.149202375 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.035735343 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.028862273 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.045794097 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.029194985 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.041210047 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.030132306 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.13687559 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.026674964 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.100215401 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.138551962 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.191333337 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.109714267 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.028415381 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.040083492 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.032157418 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.163408643 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.039678234 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.02708863 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.034113136 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.022511556 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.135872323 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.041467391 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.021299543 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.032319247 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.031161836 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.100852026 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.151503526 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.06699539 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.033226231 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.10977393 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.100222294 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.048168183 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.050372771 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.03178152 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.021098162 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.193355768 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.027817016 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.041213346 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.029515831 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.05620795 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.021496974 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.036778272 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.172307935 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.149447885 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.088240159 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.021784329 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.240213612 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.023451825 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.047841655 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.022803127 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.022034152 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.193193683 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.022200699 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.022689295 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.033274112 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.032054838 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.024505221 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.171046767 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.105628211 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.030495032 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.028930168 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.021817726 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.027809564 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.022494059 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.022269448 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.021428443 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.099402715 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.039035906 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.020836893 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.105843983 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.124473276 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.032883256 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.03929366 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.255827529 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.025822061 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.032334261 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.029456078 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.146860967 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.03025876 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.144202554 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.024148346 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.044616068 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.120793611 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.101696162 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.106511986 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.021486843 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.143463096 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.031436813 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.02025166 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.028272797 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.048708421 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.032022063 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.0382558 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.029609168 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.142720458 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.031302019 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.027241976 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.119489281 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.020166923 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.10998589 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.101774325 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.132845751 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.025470439 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.029976965 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.096586964 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.044802745 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.050881981 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.042020267 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.025571102 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.020944278 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.020357245 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.033819718 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.019565225 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.020445884 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.03457558 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.027702183 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.036990306 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.241105395 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.031584306 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.025440489 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.254114976 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.035235385 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.096078274 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.041119021 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.020789486 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.102856159 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.022791403 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.042215702 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.085994873 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.020945863 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.102125462 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.022403229 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.021914965 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.028710823 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.02399683 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.032853699 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.036525018 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.022261992 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.035540915 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.03024889 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.021484326 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.105405357 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.023756991 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.190538917 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.102146793 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.097369928 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.022145615 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.04125341 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.020905116 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.134686666 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.021147793 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.070236519 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.113891414 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.035984073 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.042108348 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.022332073 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.101718485 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.035907436 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.026221226 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.10227157 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.133534905 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.095282544 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.028155136 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.244906614 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.031607943 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.022341927 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.028089673 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.031218885 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.02242218 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.103219616 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.027212952 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.021005273 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.021051261 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.023855018 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.02109727 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.047143052 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.020998086 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.029897568 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.026998259 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.024630358 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.023308903 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.020345716 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.031008033 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.106111356 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.122599204 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.027495528 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.041282092 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.034195015 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.031693119 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.069644073 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.029148243 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.161495932 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.019947589 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.030685578 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.04111601 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.020182009 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.025560844 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.026176428 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.037817041 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.024049818 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.021750284 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.029900289 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.020939238 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.021557663 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.020950842 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.021347522 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.030723418 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.02247896 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.02085192 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.02102457 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.037597548 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.026935524 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.027215066 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.032398865 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.04190436 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.482080373 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.0226048 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.02353204 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.034088349 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.026651044 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.021089322 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.022429609 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.02082778 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.023264005 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.020903006 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.020239009 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.048931386 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.026408832 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.02128198 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.041672076 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.027569845 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.031609128 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.120568071 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.038144749 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.026212603 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.020084978 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.259190097 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.097149539 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.043455706 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.041491854 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.021797002 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.032743589 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.021459252 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.021783247 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.020566559 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.048281152 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.02673612 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.021766842 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.02075224 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.0210425 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.071019746 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.030428946 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.020973204 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.029922736 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.021024262 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.020934601 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.048027044 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.022434945 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.021786914 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.040100354 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.03471374 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.11068482 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.03400858 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.024487986 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.072691932 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.020593868 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.021181023 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.021349721 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.109260316 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.033372949 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.022064627 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.020705889 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.028210321 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.029936948 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.075116086 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.028537983 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.02584756 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.031134828 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.021230549 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.022094535 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.049270629 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.050986682 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.022600477 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.025051646 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.021329922 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.021484706 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.099190469 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.029112959 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.026272194 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.111104264 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.023923813 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.030324375 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.020956555 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.493431827 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.028416512 seconds)
  done (took 23.097710892 seconds)
done (took 24.01613537 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.161438013 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.034479569 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.041554112 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.029457771 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.03227009 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.031745468 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.043313567 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.030381385 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.033424025 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.040862046 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.146872681 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.021009836 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.027907818 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.034720197 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.029073999 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.032816495 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.031987103 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.033408012 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.021558263 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.0334959 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.031616333 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.031742055 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.029220276 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.032951677 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.02144723 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.029647058 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.148449826 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.036279079 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.031017961 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.03008818 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.028482612 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.043608932 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.028717166 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.027623449 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.029667082 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.026261075 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.030400453 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.02690272 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.146050967 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.027686472 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.021638918 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.033048142 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.028174662 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.029086568 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.029555269 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.031690882 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.025941638 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.03277893 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.028388561 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.03979355 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.144791609 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.029487159 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.030576896 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.028445152 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.025399156 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.028957834 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.031009385 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.031957761 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.026636722 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.040298152 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.029655276 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.029318831 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.021833678 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.03041125 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.029439635 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.030276372 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.021950547 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.032329357 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.021909621 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.026768197 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.030529587 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.031597938 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.029904205 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.028888862 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.03124911 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.021379431 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.029555446 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.04159634 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.028830611 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.030406526 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.021918327 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.027894944 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.027491906 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.022469791 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.031813271 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.034325183 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.032176719 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.023025105 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.031144648 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.042911526 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.029927866 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.021992728 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.033575311 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.030415735 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.031590022 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.021809069 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.031304539 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.031597458 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.030554287 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.021156149 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.020021198 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.030826758 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.026931367 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.029932848 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.021241648 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.030087867 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.030956936 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.020501557 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.030376063 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.029306252 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.030413852 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.031833842 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.029360872 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.03334981 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.02148664 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.019657725 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.030638796 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.021541064 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.029839147 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.028389552 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.025540871 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.029071014 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.021298528 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.029278362 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.029700147 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.027035453 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.021024331 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.021100229 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.021709962 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.030736969 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.028693244 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.020562524 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.021169916 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.031147092 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.030377979 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.029942456 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.030742165 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.031530675 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.022402249 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.029174325 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.028981285 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.03232313 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.031995297 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.023551725 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.033232982 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.033024674 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.034073012 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.029940292 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.033527521 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.02403595 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.032183768 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.030079462 seconds)
done (took 6.114856665 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.076597179 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.067832498 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.181311638 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.147583788 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.036710596 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.036407713 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.026674712 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.04202107 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.02855371 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.050080514 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.051056964 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.048969901 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.170676288 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.04673365 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.022706632 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.036389617 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.023118522 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.050741185 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.149495436 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.049321481 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.067033451 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.021054696 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.038281153 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.041669565 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.034507217 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.041505777 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.049119419 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.023678253 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.040432437 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.039714755 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.053191999 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.025196589 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.022855891 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.042340758 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.040355949 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.031619348 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.021267224 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.027755781 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.032825904 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.021849848 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.065714668 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.040233516 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.028074046 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.029304924 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.022912639 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.036958051 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.021792968 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.029155253 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.03657927 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.029343018 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.034676635 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.039222191 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.025159483 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.0418343 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.021549239 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.030766603 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.030951301 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.021902883 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.022637769 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.021819599 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.021340604 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.026147606 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.035766813 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.040784485 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.026290022 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.03053797 seconds)
  done (took 3.817269422 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.046557773 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.067526778 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.035077602 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.035178159 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.02018728 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.020684899 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.020392465 seconds)
  done (took 1.185567351 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.094070521 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.13769047 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.142903116 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.144671207 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.156034818 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.138668857 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.034347136 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.052761138 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.058021074 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.161474788 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.150639456 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.146974583 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.026810137 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.036170413 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.056529794 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.153582566 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.037316349 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.031813829 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.14599619 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.151073446 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.027629381 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.054452101 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.035583062 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.024239039 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.149534167 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.141283473 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.025357476 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.063275276 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.023873556 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.021463346 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021204705 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.044508488 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.139118376 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.037184061 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.022610505 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.020358593 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.139348889 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.022932686 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.14149128 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.028677885 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.138482207 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.024813049 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.024979982 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.022816307 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.023806952 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.141448933 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.023744522 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.021474111 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.020819402 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.141351109 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.034361197 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.143371043 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.023755705 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.026783708 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.029887515 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.029571095 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.029411363 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.022441552 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.146020211 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.033549611 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.025393909 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.152916205 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.148401766 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.144889085 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.150478567 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.032067159 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.143476232 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.137759054 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.021508836 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.029288424 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.022130741 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.145971776 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.025729021 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.024324998 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.020127158 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.02895144 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.151542959 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.156741691 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.157004112 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.037216301 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.024656401 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.022989656 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.154707138 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.154958923 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.02814318 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.023347766 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.023265658 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.038749164 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.048173905 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.025574114 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.028218277 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.023212991 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.033773887 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.025346677 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.024494174 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.148426618 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.021841885 seconds)
  done (took 7.869434402 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.03912685 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.022270371 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.021985037 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.022603228 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.022674434 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.022659101 seconds)
  done (took 1.173797791 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.061904773 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.022868952 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.023764905 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.022820837 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.046211884 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.130154346 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.13289325 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.023866411 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.038500258 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.034159855 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.129912474 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.132997965 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.134460778 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.023050885 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.13035947 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.034120936 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.130665123 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.027299972 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.033647316 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.024354213 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.034493984 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.024245191 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.024248707 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.154547623 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.018429738 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.034971756 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.032285081 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.03389891 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.034478891 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.023683377 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.02344165 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.017740426 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.034737949 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.025189152 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.136653816 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.033939777 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.023087558 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.018389198 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.027147678 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.017732648 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.136621849 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.024206753 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.02664126 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.017754589 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.022819641 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.032798646 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.017995532 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.032635441 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.134041677 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.018361519 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.017783579 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.022384297 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.01693269 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.01776159 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.032106305 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022836089 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.017620899 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.1340981 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.024480977 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.033437217 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.022901498 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.01751076 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.023497864 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.017463151 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.027524864 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.018263226 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.033503267 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.024302749 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.024000837 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.022571829 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.018359078 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.022262367 seconds)
  done (took 4.122120422 seconds)
done (took 19.165651897 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.453583152 seconds)
  done (took 1.390313658 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.969161394 seconds)
  done (took 1.914979504 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.0513496 seconds)
  done (took 1.04460645 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.297716323 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.465545166 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.746398054 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.090892693 seconds)
  done (took 2.575793836 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.852216485 seconds)
  done (took 1.826410108 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.209071647 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.17465108 seconds)
  done (took 1.378536671 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.499534057 seconds)
  done (took 1.438482893 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.31786985 seconds)
  done (took 2.302397596 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.192612101 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.137717403 seconds)
  done (took 1.287171111 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.598759448 seconds)
  done (took 1.546573223 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 6.443471744 seconds)
  done (took 7.409780203 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.19463759 seconds)
  done (took 1.218469254 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.237931248 seconds)
  done (took 1.218152987 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.697216833 seconds)
  done (took 1.667826438 seconds)
done (took 29.187536846 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.044508624 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.038156615 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.037601665 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.035309671 seconds)
  done (took 1.083867822 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.030336901 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.025080228 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.027152909 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.027439628 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.025008869 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.027402492 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.028316354 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.024699169 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.025693842 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.024979705 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.023105608 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.024175628 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.026778961 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.025388809 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.029087352 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.02959268 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.025789955 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.02629354 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.026649846 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.024434312 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.02700573 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.02426321 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.024541213 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.025613858 seconds)
  done (took 1.598291229 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.039650597 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.034593823 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.033366049 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.033027523 seconds)
  done (took 1.130266855 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.03249594 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.030191551 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.038348214 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.03801815 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.030347018 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.031827308 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.038283913 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.038953119 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.044775119 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.039676868 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.021893452 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.021676311 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.020730888 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.033816441 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.036022231 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.015608066 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.016808775 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.030649002 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.029604314 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.03229817 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.024117462 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.019675205 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.030250552 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.030375995 seconds)
  done (took 1.707194627 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.036972013 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.019853102 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.0358489 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.044000974 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.043820548 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.019352392 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.032954204 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.045346894 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.187795581 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.019932214 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.025712856 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.019487164 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.05635977 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.019282735 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.033644572 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.165022573 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.168738597 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.024090952 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.050385628 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.02023368 seconds)
  done (took 2.051126456 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.029179442 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.028288321 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.025772068 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.019722423 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.031332494 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.034691788 seconds)
  done (took 1.119925889 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.024211195 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.022113739 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.022418306 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.027261534 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.023650144 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.024236275 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.024533639 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.023355603 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.023269659 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.024007319 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.023545238 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.022778808 seconds)
  done (took 1.251529584 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.160066695 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.02702108 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.025078357 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.020386085 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.022182552 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.021320832 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.034961066 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.023082636 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.037023486 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.02067473 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.021145059 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.023501929 seconds)
  done (took 1.420936733 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.059840341 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.065030298 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.096181448 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071924003 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078098518 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0510419 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.194279601 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.034349932 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.113199916 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088567192 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076039478 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.046233131 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04171428 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.025094082 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.05548593 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072957226 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09131198 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027243944 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.072381215 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.229256123 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082995671 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.083243392 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100789862 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079549816 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.047391685 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100621413 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.051280418 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.056113776 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.074497637 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.079016674 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073844094 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.056131788 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.02526052 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.024618101 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112685141 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.057345996 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.072813629 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.047391092 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.059253109 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.043688828 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.078824926 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.024430103 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.037906208 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.065512753 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.042362347 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089400955 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.050186575 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071719803 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036063925 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094873517 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085540878 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.18195305 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.041769389 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060003157 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097519122 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.068820945 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087515513 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.063575699 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.036666498 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.078153789 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.067807374 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060452822 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066478199 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035771429 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.132367673 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.045092784 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.238921373 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069026877 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.045608774 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.050887074 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.064446001 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.090364086 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079209781 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.072336185 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.083520283 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.045398243 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.079795151 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.052680229 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.076203725 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055123498 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.026438859 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.072296111 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079533495 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.050197328 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.052852801 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079353747 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.056032201 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029487507 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.041791716 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.071127415 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033710226 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.060819023 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.040051084 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.083572915 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088755485 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053193159 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071044818 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.075335851 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.033903182 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116883323 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.062564547 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.027831313 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.071530639 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065707507 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104372216 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050235566 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.029369669 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.053615968 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056553441 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.114211808 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05735723 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.035144001 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07084622 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.095104934 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048889267 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.27123348 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.050602185 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098234474 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072385377 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.042210836 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.030729509 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.050718852 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070018347 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068283193 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083044296 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05344058 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.039124687 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.042898468 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.076720252 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.062247699 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035314641 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.074826583 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.059493829 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.029620093 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046486419 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.033120832 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110972944 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.042451399 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097702837 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.249667394 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.030210399 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059785396 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.049934125 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059194023 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.056801263 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.072113111 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091623393 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.146285407 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.043751419 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.036831605 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060917943 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.09471074 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077708418 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.044844644 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.038275354 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.052652119 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063188544 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.053503198 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.074174498 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.048009323 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063343772 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.058115479 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094366423 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095511625 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054326187 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.058645285 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059859838 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.068634849 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.031099898 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112769974 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058625585 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07656299 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.042439213 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095070372 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.071174469 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060896623 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041895209 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.05958794 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.058183735 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061937317 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.098378906 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.048901179 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.027702509 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048789534 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101023321 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.031345465 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07392332 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.045063626 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.046569337 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.070551821 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.047773462 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.038019014 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.022945664 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077732191 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111679266 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.025860209 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.073727143 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.072842731 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.060682663 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.080637793 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.024952065 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084608999 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09613308 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083424408 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104562049 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153641722 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078340972 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.073468638 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.081117647 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.070632929 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.034913131 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.240021206 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.085493444 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.045655536 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044434121 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.086344845 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098674012 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.08572938 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.064459679 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072872652 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.056358079 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058429363 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.055464553 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.053132265 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096026646 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.076568217 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.079932953 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.038805345 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064568078 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.071361949 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.088748968 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.036506813 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092639292 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.039349938 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097006063 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.034038615 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.081930845 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.032412353 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.126986515 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034189393 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.05360342 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.024258927 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.026508342 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095821986 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.075969357 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.309680838 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052509689 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.087392749 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089846519 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.031933562 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.065451176 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.067432204 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.057355247 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068232679 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.06345729 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.045232039 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051626951 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.063608024 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.041146891 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.036111735 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080964326 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050546524 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091655597 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.03800065 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029340464 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093312887 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066244139 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048508697 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030818595 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062878465 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.08208949 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.047526783 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.040889478 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075443559 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061418004 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099929653 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.04693329 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.057547987 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081410119 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.0369023 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.052655165 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.025295772 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.046484127 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.032546045 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087939349 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.031303501 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.076478825 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.023550968 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087165124 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.200842005 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.055587688 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.059297383 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064068907 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.089337992 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.050767125 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095608513 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04531372 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.072199468 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06370583 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.068291495 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042414392 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058906946 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.061082906 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.076440624 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.050118095 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.076538738 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.096821059 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058687477 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.099928507 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046520717 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.079112834 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062211918 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.076532228 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.066389141 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149272267 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097067729 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06817536 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065499231 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029432397 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.049249691 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064786014 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.064096127 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126943343 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077460759 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.026193039 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.056985877 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.047290297 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.0595878 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060917847 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033441036 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.095845787 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056193818 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.044015664 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.062793087 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.043003467 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.058071568 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031325449 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059256517 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.051989104 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.051051179 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.053778843 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.071322302 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084058486 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063289926 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.099717931 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.05789951 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.045988498 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.073277896 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074037689 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072558245 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.04045639 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.041074344 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101644279 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.077573031 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.083793197 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.054108948 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067456068 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.070309711 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058314026 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093405376 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06642589 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.235535766 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033340382 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.030213463 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.022619938 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.025908405 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.07663629 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064751557 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061270557 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.056980371 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.026432444 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.057824771 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059650968 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026158648 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.039209635 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.047548641 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.05321141 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.03763368 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059690702 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.069846473 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.048809239 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.054247731 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057515407 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092195106 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.05098238 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041869495 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093901199 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.097834683 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041362029 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045994171 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.025664639 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033326826 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074871092 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.096325589 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099838545 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.032560842 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.040393269 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.037937327 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040614926 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.025509296 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.042639766 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.042933151 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057927704 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.050965709 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.068478853 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058900286 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030122466 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.062629113 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.055622706 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.062206973 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.062508963 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07293322 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.080585576 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.091839928 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067586655 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068899567 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029914487 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.032924222 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.030324569 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034535355 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.061071893 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.033811196 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030989187 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100930148 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.047263537 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067542618 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069191119 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.045246297 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032849654 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093098587 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.02642568 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092826493 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.026962692 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035783893 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.03717409 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03408058 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051387703 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101063078 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065774617 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.067531326 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064667523 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068653145 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149123396 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11695042 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.197904468 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092372289 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028844066 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.029665691 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.029662698 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059328174 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041554644 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.068578425 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.094192323 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04089089 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052402063 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.031026426 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092307247 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.052699893 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.05678964 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.041503931 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.035295894 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096465201 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.03456978 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.039089517 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.043486717 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.065308369 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.027022185 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.055319417 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.038376004 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034864718 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142874257 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.660786286 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051738468 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.02964665 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.049384617 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093021307 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08640796 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050134409 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063412688 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.071297854 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.057107786 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.046741684 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066443578 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.154122098 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027761303 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049126712 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.050618435 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.056009539 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061763126 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.049610548 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.041290214 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.048748222 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.039830847 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.033222775 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.068779085 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041091043 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.051676671 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.061939239 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.03991894 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.045789413 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.087787749 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.056818069 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.038587847 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043661335 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.067713341 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043288123 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064685744 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.025682977 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.066879888 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.046026145 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076950811 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.056608677 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.068101623 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082239095 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050498692 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094609738 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.065015393 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079948844 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.043327747 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.032739316 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081931863 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.045668246 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031918083 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102496215 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.052699313 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.058819003 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.216040472 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.050875901 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06337089 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.06579337 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064356627 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.052785784 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03146374 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04999035 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.057149803 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038107028 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.032052057 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.026108844 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.029203485 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060034375 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.03702161 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.039334971 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.067286158 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.041101937 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.054477259 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.049815117 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07378908 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042668982 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.055671523 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.06144323 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044323938 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.084093201 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.05445263 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.080850664 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127544151 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.085519441 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085374754 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087977661 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.033142019 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.03399695 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.023757033 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.069415393 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.034566049 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.041452034 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.03294746 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08596342 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.038158758 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064256143 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.212438505 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.03443932 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.046749066 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.049570753 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.023802719 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.037074112 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062873222 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.040186656 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033533911 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065276558 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.036890865 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083372859 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063595886 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053178521 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.049475739 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034517515 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061665636 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.05899042 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.083144066 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.052199328 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.028562921 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.077532282 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.059413277 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094110249 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.029379977 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0346133 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083081333 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059355159 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.089211309 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.035961142 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115925955 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099414192 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.060402118 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09244275 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.028653297 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.04588934 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.046189608 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.079374474 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041459594 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06438798 seconds)
  done (took 40.857978639 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.103285679 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.256814001 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.132193137 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.112518298 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.078628137 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.079658936 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.247814984 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.090960178 seconds)
  done (took 2.26863013 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.024826157 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.054579455 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.035794475 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.308824281 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.055782541 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.021619735 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.02829855 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.036661216 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.022802326 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.021610946 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.05656382 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.021817694 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.022579574 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.448382601 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.021410061 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.026331256 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.022767107 seconds)
  done (took 2.336938328 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.309983297 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.669815233 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.246297961 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.482890749 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.106930683 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.565587831 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.030702241 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.037111945 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.703117843 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.361618709 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.1006475 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.184576986 seconds)
  done (took 17.896167962 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.031746618 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.152466206 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.154458421 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.030526983 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.029302362 seconds)
  done (took 1.614071486 seconds)
done (took 77.369689786 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.042728068 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.124201181 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.021331169 seconds)
  done (took 1.307986508 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.159333318 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.159041042 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.158831719 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.161068735 seconds)
  done (took 1.788413229 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.032968496 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.034058313 seconds)
  done (took 1.274290529 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.181721522 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.30822397 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.057087581 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.040665352 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.035722364 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.036530678 seconds)
  done (took 1.26819973 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.028876784 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.027258185 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.026933991 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.027060478 seconds)
  done (took 1.244178324 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.132864084 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.020791864 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.023151025 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.024613255 seconds)
  done (took 1.319632759 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.040818275 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.041318853 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.072973802 seconds)
  done (took 1.274650282 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.04042397 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.040846713 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.035421016 seconds)
  done (took 1.251365796 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.055982097 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.048217994 seconds)
  done (took 1.232543611 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.037083176 seconds)
  done (took 1.146375464 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.044633708 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.051388904 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.21325726 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.183402296 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.219160125 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.199525075 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.03381337 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.031587706 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.034122897 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.036110585 seconds)
  done (took 2.151724963 seconds)
done (took 16.971074515 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.037455807 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.144310796 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.273395835 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.044863397 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.613084733 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.270253379 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.690907495 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.047253985 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.056563377 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.024995445 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.040508053 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.58796791 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.691913086 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.105309365 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.674651337 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.095781175 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.764517262 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.025453397 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.023039657 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.023003505 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.665718298 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.024762862 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.023524301 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.023659657 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.76050752 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.291014161 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.026110602 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.093976152 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.024583058 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.026515186 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.269201582 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.0260642 seconds)
  done (took 12.612403059 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.026604086 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.078586981 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.027859211 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.038151167 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.024711671 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.024288608 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.040207944 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.022695759 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.067953386 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.023169185 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.039709578 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.022414844 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.027113385 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.023992225 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.043954442 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.023633129 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.026121744 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.024224024 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.023659079 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.024161783 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.040621743 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.022228304 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.023425571 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.025111281 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.024453987 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.037763149 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.024090436 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.022672568 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.023780946 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.028609723 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.030597025 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.026617971 seconds)
  done (took 2.119665723 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.083010753 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.08506589 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.031481992 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.067567958 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.078037902 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.02660707 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.11079957 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.048075856 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.073700349 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.024754198 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.042796798 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.024779202 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.066448873 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.026012443 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.04452014 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.023283477 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.025129124 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.023513338 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.022480734 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.023149792 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.041156225 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.022839442 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.023217434 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.024167723 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.024115757 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.041025582 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.025082836 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.023874931 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.023407787 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.02710822 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.028674635 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.024782427 seconds)
  done (took 2.453187094 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.025802991 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.026320175 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.032574134 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.035595831 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.021505942 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.023497934 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.025085549 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.021525219 seconds)
  done (took 1.31834377 seconds)
done (took 19.635042072 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.036413511 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.023082125 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.026540478 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.048443762 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.030632587 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.14051417 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.026905915 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.029046045 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.027144463 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.026855915 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.028930066 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.020512046 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.025308127 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.025288129 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.027127428 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.021318878 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.141517587 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.025655323 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.140488058 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.142559933 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.024773706 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.028545488 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.031251904 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.146653331 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.147033578 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.148325267 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.031683821 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.028435834 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.028291534 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.026083952 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.143436228 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.148418291 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.025581801 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.143195415 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.024401689 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.024160426 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.028503614 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.025008446 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.152017009 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.032659815 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.025182478 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.033578582 seconds)
  done (took 3.572840745 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.144836704 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.152525968 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.147066735 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.03423201 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.030602935 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.033120688 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.149845319 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.03149583 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.030300745 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.149876998 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.024755964 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.028498892 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.030240192 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.02108877 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.028327679 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.025007032 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.030144465 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.022920882 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.027839371 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.028398526 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.14734669 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.022271819 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.029533928 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.029461279 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.02441945 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.030619927 seconds)
  done (took 2.603559768 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.031559007 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.044174291 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.046264303 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.113592268 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.064268223 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.045356429 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.038471435 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.048913374 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.05524932 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.022207162 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.045253984 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.050864846 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.052518475 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.029910952 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.062722669 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.04212231 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.037096771 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.024610311 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.028730947 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.058425275 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.047070521 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.041569326 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.05524728 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.043405826 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.021952429 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.03235395 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.026340783 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.038810501 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.033500344 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.034040315 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.026498467 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.026380043 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.024693507 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.035354674 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.026565209 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.021351388 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.048880341 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.037194944 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.040020027 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.065149086 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.034592394 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.025444548 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.053807213 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.087664534 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.022044316 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.026236121 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.028499608 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.038078238 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.025577401 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.070079649 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.040224071 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.023240395 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.044028079 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.025544413 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.025455422 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.046142221 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.024444079 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.025630583 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.044812483 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.030456549 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.046633457 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.02897813 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.044852562 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.02168696 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.034835915 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.024548489 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.025293116 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.021929962 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.061835418 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.032091869 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.075779214 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.024875259 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.021929423 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.036100717 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.035470698 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.030823775 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.021575137 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.042663154 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.036365809 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.027073236 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.04388505 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.026694255 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.02671949 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.070495443 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.023039105 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.021916698 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.022009487 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.026426999 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.026988696 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.024224196 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.037402192 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.023446188 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.027794065 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.054499385 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.023375842 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.023893448 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.025686109 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.024323813 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.022915708 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.033951015 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.026399451 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.025386818 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.037034167 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.023812387 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.027050066 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.040244144 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.033827008 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.022196897 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.024567349 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.026748604 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.025967805 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.02624103 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.028369513 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.02602502 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.030677527 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.032554124 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.030379843 seconds)
  done (took 5.343278595 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.241622076 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.23747542 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.024251842 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.22594337 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.031959353 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.155522859 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.231205916 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.234766687 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.023562291 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.024021708 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.022380586 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.172609538 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.169826583 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.181584334 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.163204015 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.026540667 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.058168335 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.180903004 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.240671575 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.236850209 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.061491933 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.030735649 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.026087801 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.025890931 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.02437894 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.033155775 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.042244945 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.033835382 seconds)
  done (took 4.345470873 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.031005745 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.070518182 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.028061991 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.05060088 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.042046043 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.025219468 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.026774273 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.025451293 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.043454146 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.029973061 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.024037732 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.027690105 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.02705973 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.025726428 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.023930731 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.030896821 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.031831009 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.023238046 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.028096651 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.028930065 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.03608405 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.047267296 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.027669674 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.023767324 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.027152707 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.023481836 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.029993111 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.032022936 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.02324724 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.023039106 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.020424184 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.032212391 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.038997574 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.024188137 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.022566923 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.023379443 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.022999219 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.023599865 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.023867722 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.022620447 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.022347529 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.028933752 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.022123595 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.027368632 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.038756307 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.026442358 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.025036553 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.026033119 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.025873862 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.020295284 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.026284731 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.026396957 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.02552113 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.031551864 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.02591425 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.026944594 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.024931781 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.038949331 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.030208511 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.023002678 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.022546214 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.021789898 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.026038757 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.030836468 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.041588896 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.026923897 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.022484678 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.024768958 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.026124501 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.038644904 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.023607707 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.030683714 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.020985649 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.024017034 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.02663985 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.027503806 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.025342585 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.022403214 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.023625089 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.023527104 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.023419074 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.024140667 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.023430035 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.026580463 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.022052504 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.022844768 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.024652244 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.025807555 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.029675999 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.022567034 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.027697248 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.025389404 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.022776358 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.027154994 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.029249838 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.026509628 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.04215379 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.032078153 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.024783813 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.021391535 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.041757144 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.026611599 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.023447407 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.025529699 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.032575772 seconds)
  done (took 4.20134483 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.054483974 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.0263283 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.044746498 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.063088513 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.036161612 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.03098967 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.038540357 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.024874656 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.047773203 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.02306106 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.035168203 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.021989002 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.039286017 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.034553254 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.026486832 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.035050983 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.027224008 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.045393908 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.03980146 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.022845145 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.032152684 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.035931003 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.036353322 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.040118453 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.039605555 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.040489813 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.034525775 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.025163807 seconds)
  done (took 2.155601534 seconds)
done (took 23.34296108 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.165017951 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.376364289 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.146788008 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.846097231 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.280467138 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.22872291 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.410183888 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.198447786 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.385222121 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.31064754 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.869183956 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.435593953 seconds)
done (took 60.861907238 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.275107579 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.374649571 seconds)
    (2/2) benchmarking "String"...
    done (took 1.477614989 seconds)
  done (took 4.042583516 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.659001031 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.211371372 seconds)
    (3/3) benchmarking "different"...
    done (took 1.237966485 seconds)
  done (took 5.329338013 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.621634074 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.176049808 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.547835352 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.207702061 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.186864987 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.917415722 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.375272273 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.897548248 seconds)
  done (took 28.503658488 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.276078429 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.48819588 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.668002465 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.761298109 seconds)
  done (took 18.491398513 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.679072359 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.582385189 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.573521702 seconds)
    (4/4) benchmarking "different"...
    done (took 1.829628383 seconds)
  done (took 7.967073063 seconds)
done (took 74.505158011 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.197341593 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.62634905 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.173331861 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.422178203 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.26595397 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.329734178 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.26794883 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.279863362 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.251537189 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.250297853 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.257875404 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.234908079 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.257566123 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.329562333 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.256116705 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.272560593 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.759214758 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.254791153 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.241793747 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.289216553 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.451726705 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.258113141 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.245214883 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.310889996 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.73577575 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.22967883 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.31716579 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.26540437 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.859753261 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.237615316 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.244854371 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.25157962 seconds)
  done (took 186.844192783 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.249631272 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.151372345 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.157669469 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.214753393 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.518021112 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.536546404 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.064348667 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.578085511 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.122814002 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.216885303 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.181053251 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.123380456 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.211843355 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.685661904 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.170414959 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.242618578 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.073812347 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.038999755 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.271256008 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.167315699 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.215707421 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.821668454 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.756348422 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.093370935 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.217482446 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.212845502 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.190417865 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.241681312 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.687243398 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.013316856 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.166462051 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.204754773 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.40379972 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.424053865 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.184569736 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.15358161 seconds)
  done (took 156.211112371 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.402995453 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.254690068 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.269997401 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.330338675 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.159570532 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.031676365 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.143960708 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.149358241 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.147029628 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.136003158 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.133799083 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.205956427 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.13817104 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.439092022 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.198441388 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.17700788 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.168373778 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.460376953 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.155427143 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.151055585 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.131321964 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.263786668 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.592243105 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.323778306 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.177471207 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.180036659 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.302623089 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.228869115 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.201067822 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.191077942 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.275294511 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.189125771 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.268645756 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.257367686 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.135676713 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.216672325 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.149624141 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.408190773 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.187735727 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.166923283 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.15790532 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.211113463 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.169030207 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.326191857 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.229758 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.147248597 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.141477429 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.724131556 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.773074528 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.16340107 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.197284683 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.179330513 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.167915796 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.149301106 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.210756511 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.189027067 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.221748996 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.921513248 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.128741916 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.112117408 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.177110658 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.168910724 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.147346313 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.133257129 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.168535455 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.802832667 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.774363917 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.489679824 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.886316751 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.122242347 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.133417022 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.118210284 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.43537593 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.191571225 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.120160256 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.114962913 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.301379388 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.115689178 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.120035061 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.02725049 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.068871082 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.230452943 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.330304134 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.20550461 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.204067547 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.4268204 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.529718302 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.126373527 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.153103693 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.197352682 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.123831374 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.157152815 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.147901725 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.026149341 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.138841933 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.133522579 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.520762983 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.193824899 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.218789783 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.301897207 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.543078896 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.162313333 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.266106595 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.543624273 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.136040553 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.162119553 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.150228847 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.161262334 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.141018979 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.160708201 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.176328265 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.184672202 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.164291664 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.184646094 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.168004545 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.17909962 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.17539657 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.198392886 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.16103873 seconds)
  done (took 334.472334053 seconds)
done (took 680.243865333 seconds)
(4/20) benchmarking "parallel"...
done (took 1.187625497 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.442375438 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.201251914 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.418854474 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.428475963 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.374527597 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.353705125 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.341991471 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.429922299 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.436216448 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.348009935 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.374117363 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.332205397 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.436886257 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.410335992 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.416644891 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.448285358 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.331981113 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.901216339 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.363413609 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.301108915 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.377259722 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.350419923 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.317044443 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.371436181 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.441539768 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.339164865 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.577002969 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.393763591 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.332200396 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.398477212 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.433816292 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.456865947 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.356455113 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.373631869 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.414400904 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.418987481 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.353556945 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.409298953 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.322768838 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.345789533 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.351334005 seconds)
  done (took 65.409659443 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.554812066 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.339749052 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.441194421 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.461897062 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.122805813 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.443993366 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.524604689 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.331647601 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.3452177 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.47651537 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.472482879 seconds)
  done (took 18.701984523 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.444207876 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.350791532 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.492369316 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.45671672 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.536126785 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.458702644 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.501517134 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.358706008 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.329233672 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.475709781 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.50187296 seconds)
  done (took 18.057359064 seconds)
done (took 103.348730142 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.744313831 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.200386055 seconds)
  done (took 4.060343301 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.147706351 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.145085383 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.147134052 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.154972451 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.138382056 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.12364878 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.185320259 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.145535513 seconds)
  done (took 10.294250477 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.167425985 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.170771941 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.175378978 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.18213491 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.169516601 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.157121918 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.181116124 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.163407977 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.157543976 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.128358187 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.150768599 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.146997823 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.150522486 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.191064349 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.17281516 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.15470041 seconds)
  done (took 19.754397909 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.143931118 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.142229181 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.149461098 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.199276914 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.167640435 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.15337541 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.16736968 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.17445829 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.153197645 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.178853985 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.150281381 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.162355828 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.181088845 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.168891949 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.15163326 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.153240467 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.209810027 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.216736905 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.213794628 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.165502337 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.153986869 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.171003065 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.192453267 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.183512588 seconds)
  done (took 29.222346201 seconds)
done (took 64.501856151 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.759287067 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.948089396 seconds)
  done (took 6.838437644 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.142516577 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.135825133 seconds)
  done (took 3.488727009 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.147990265 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.147183001 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.158535529 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.128537163 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.147331961 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.137047522 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.149611389 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.124059703 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.126788636 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.132365245 seconds)
  done (took 12.554676698 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.209422256 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.268558871 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.24401095 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.245454748 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.24545285 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.259460939 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.23792537 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.253753149 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.24588266 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.226937476 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.213733308 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.432058175 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.228143465 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.446767608 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.231916711 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.226963708 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.225240557 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.225767201 seconds)
  done (took 23.85096587 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.230098 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.211462683 seconds)
  done (took 3.660718035 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.184912345 seconds)
    (2/7) benchmarking "second"...
    done (took 1.201666325 seconds)
    (3/7) benchmarking "month"...
    done (took 1.205460133 seconds)
    (4/7) benchmarking "year"...
    done (took 1.184558841 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.2022766 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.19230831 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.178454879 seconds)
  done (took 9.515360144 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.636602368 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.428876738 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.503856629 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.727009932 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.898654563 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.189177077 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.897002792 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.153234769 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.958027708 seconds)
  done (took 17.578537506 seconds)
done (took 78.65737209 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.94088402 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.140803643 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.700920768 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.279622675 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.256391813 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.5518531 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.226744624 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.762689702 seconds)
done (took 38.047227944 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.340844602 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.234858587 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.285110056 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.312679804 seconds)
  done (took 20.068166494 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.251071725 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.828608074 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.305104937 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.360757372 seconds)
  done (took 20.067909351 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.666586814 seconds)
    (2/2) benchmarking "read"...
    done (took 1.755182583 seconds)
  done (took 4.67057005 seconds)
done (took 52.393136031 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.297377617 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.274339974 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.288355074 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.284517375 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.295144063 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.273133051 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.253341178 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.268507372 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.259883289 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.265316948 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.284913915 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.270514175 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.261645034 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.266036099 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.282081548 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.278361192 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.291838831 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.243106233 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.245219834 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.244068308 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.24644703 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.230010976 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.213263557 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.204611883 seconds)
  done (took 31.574171108 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.316894032 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.2616805 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.27602538 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.331495752 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.278099104 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.300802821 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.295286019 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.235852847 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.282047979 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.324379799 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.192726251 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.243597729 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.291383463 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.263941323 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.322634429 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.311810649 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.303801939 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.225827007 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.309858242 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.282030586 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.288891835 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.221425713 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.263097016 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.230526265 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.25703533 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.203105109 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.328786873 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.282017284 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.239563453 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.253934925 seconds)
  done (took 39.409396172 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.169544419 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.155239607 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.161479653 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.248194987 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.157218855 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.154207772 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.156263901 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.15599466 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.20412792 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.197443339 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.156547801 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.211984181 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.198588416 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.168899521 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.173193045 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.174176598 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.238562424 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.364676263 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.187479128 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.247664401 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.33551712 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.291145406 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.241688666 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.203917616 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.222940313 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.242595314 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.262838784 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.248691754 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.243941907 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.236161131 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.248874496 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.319496063 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.286202466 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.215254478 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.356634976 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.262614794 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.218741324 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.253717009 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.208347947 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.181480737 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.22640395 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.204378428 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.225617483 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.229109424 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.27953322 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.201865892 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.19348446 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.231941672 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.203534414 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.247866453 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.246701154 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.226833949 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.222277146 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.191769962 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.175942477 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.219686404 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.20216392 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.21776456 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.198874956 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.194820442 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.19770895 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.259280768 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.229978088 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.238993042 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.604120961 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.214300941 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.291088097 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.210232348 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.236161303 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.478299006 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.188181862 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.388306757 seconds)
  done (took 89.968283744 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.233267527 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.233149408 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.316658076 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.321689405 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.22712202 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.224222179 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.224817524 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.217934361 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.892179172 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.229271317 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.268297783 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.260137102 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.902743063 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.241351244 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.222643957 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.304306857 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.228510741 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.221596083 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.237500326 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.207986681 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.225615336 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.176044983 seconds)
  done (took 29.819852262 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.211555055 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.185246178 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.253479775 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.2034536 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.220305274 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.238864131 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.280438786 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.243228911 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.242926523 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.237100513 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.213266581 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.213420269 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.20021312 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.25158443 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.247959267 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.230965172 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.230637037 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.243750822 seconds)
  done (took 23.304145619 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.402665679 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.427397516 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.381123965 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.288527783 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.467475695 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.463049018 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.323421012 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.43048896 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.289033777 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.347884474 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.419196971 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.292115033 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.454745335 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.24209054 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.317150877 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.494619003 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.334232827 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.242629974 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.369201942 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.279072706 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.361912737 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.33027597 seconds)
  done (took 31.14087603 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.279721701 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.298664005 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.28072767 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.271336451 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.194387943 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.185634939 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.256171611 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.222330089 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.19755409 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.298623659 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.252921803 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.187143811 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.193395684 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.254405028 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.291247346 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.233346385 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.268217896 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.223889092 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.266003727 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.184145481 seconds)
  done (took 26.033627147 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.197664938 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.178842432 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.173295455 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.185284006 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.205908134 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.170400416 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.197288375 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.196972227 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.209164534 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.471332091 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.198679844 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.162197365 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.185229569 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.17366726 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.172173637 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.163005489 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.194384284 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.158468874 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.167788054 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.178330387 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.406670511 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.163596137 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.186548344 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.175059173 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.190164161 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.160079827 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.180748297 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.217466568 seconds)
  done (took 34.778472348 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.232654564 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.194401426 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.168879769 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.17538866 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.179327398 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.255068827 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.196330125 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.180141743 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.162287009 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.18578698 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.188069345 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.178634509 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.172011328 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.222501209 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.181546139 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.184251562 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.291636712 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.212461703 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.259297814 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.176950161 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.172782428 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.277621604 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.191093618 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.18954484 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.174017852 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.204769082 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.168681923 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.169020886 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.210531832 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.209990769 seconds)
  done (took 55.144108096 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.22120915 seconds)
    (2/2) benchmarking "in"...
    done (took 1.18132302 seconds)
  done (took 3.591043626 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.178366761 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.33593641 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.174125795 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.371203507 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.363559414 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.360596574 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.40578861 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.272025528 seconds)
  done (took 11.60929954 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.161104735 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.292340753 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.297877105 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.164792186 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.147390759 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.45995962 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.20102952 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.959124409 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.832621409 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.176199842 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.245850917 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.734583791 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.206800106 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.527165028 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.296126707 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 3.001985693 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.318583244 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.556486683 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.096822925 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.238011732 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.768103954 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.224647715 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.140180289 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.133171119 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.130274516 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.080473315 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.922455927 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.784578822 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.223775018 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.310727118 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.832559938 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.216045041 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.183851573 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.39631566 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.282592915 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.177550184 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.257314784 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.262246583 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.161104856 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.197819528 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.740767478 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.882712286 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.382965691 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.352800406 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.23255819 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.165903759 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.205588579 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.154397103 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.386665051 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.812555733 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.190106403 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.169026679 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.299726901 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.171844264 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.57859937 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.272030573 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.158277469 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.08956427 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.625996199 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.261956277 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.579521786 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.321811686 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.182362116 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.337739223 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.244273357 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.457968594 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 3.00009365 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.92564575 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.802982722 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.272982067 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.534651925 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.320372312 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.179436882 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.197090392 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.096882748 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.497192873 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.206114935 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.188160377 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.215146595 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.201362893 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.382450978 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.245436244 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.973965736 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.336283726 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.389374955 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.580445319 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.366005481 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.254293013 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.805663369 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.126756722 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.308034561 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.62913665 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.481171272 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.284674776 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.071529512 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.407042035 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.186605953 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.161683572 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.984133065 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.610209807 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.281992077 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.159698727 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.548075491 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.183551436 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.191818493 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.171812307 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.778011708 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.265658954 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.271546742 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.193094594 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.189476292 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.170965745 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.799101449 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.30209781 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.228822797 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.717959034 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.165204069 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.521940028 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.494029592 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.291957684 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.43494251 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.051997376 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.404321726 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.992595004 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.159462234 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.427375459 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.163474852 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.771706442 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.376742412 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.360521571 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 5.141928237 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.228171287 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.193218224 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.235644884 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.255681678 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.184666432 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.19554309 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.201274512 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.184722294 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.171936284 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.271885808 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.488182173 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.745195589 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.282680587 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.390062079 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.29132438 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.804853499 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.441386996 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.791614867 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.329421266 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.233411819 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.699706187 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.388942799 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 3.033634437 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.276099342 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.181947953 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.208203636 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.022321936 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.16590851 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.246790756 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.222772527 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.796545632 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.261585125 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.146744279 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.136416482 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.63948765 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.260832346 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.1437916 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.161804002 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.811183892 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 4.717395074 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.29529417 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.418093565 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.255108548 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.132897039 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.132460802 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.158728845 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.885412251 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.824787897 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.150453888 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.73836217 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.872158514 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.233823643 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.242996192 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.202115128 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.339491278 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.340828509 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.288195144 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.22866523 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.191909935 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.133163517 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.712979655 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.963356826 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 4.935688894 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.104524578 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.205972237 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.180692359 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.315470955 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.814491019 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.312623951 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.836311499 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.033422432 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.223026132 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.135517644 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.182603606 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.346822625 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.301657512 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.330539921 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.511862333 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.303713906 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.150098888 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.741759166 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.302747415 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.764930963 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.221267278 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.947860091 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.18603354 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.308898792 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.27396008 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.659064825 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.217621945 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.233018684 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.758722926 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.234927347 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.194586407 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.166260508 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.5983057 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.061328727 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.854007183 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.602271461 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.224251597 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.728816371 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.423520323 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.294935201 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 4.023372081 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.273430058 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.507404446 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.244543756 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.488620006 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.319080621 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.770978145 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.346700007 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.664995111 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.296882654 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.156521146 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.307592995 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.635952026 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.353899269 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.204544559 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.34264763 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.277561158 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.826558015 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.318544005 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.339707256 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.546268165 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.114930528 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.294259259 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.511196308 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.250733178 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.139209572 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.195171052 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.515932333 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.047277765 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.143899766 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.276894549 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.909518808 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.292563754 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.437660396 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.283232711 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.157760491 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.230106422 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.382013172 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.288842424 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.188658904 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.448013679 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.110085063 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.266039085 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.27453727 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.202467519 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.168563955 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.326724235 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.225508717 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.324716912 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.532160848 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.748280388 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.927442806 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.258434278 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.743582644 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.238275937 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.913731407 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.262017027 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.201305573 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.816814851 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.245506712 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.348569319 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.315636886 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.237042482 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.612550061 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.385137299 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.418033472 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.277445229 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.330978484 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.934895131 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.718104216 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.397023239 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.382892359 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.402731505 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.79005321 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.24684956 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.728429135 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.190358697 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.899472948 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.192588588 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.21975324 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.166598572 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.201225823 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.783043751 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.118863342 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.172948345 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.909852082 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.670026387 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.212674598 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.923678726 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.25859775 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.173129035 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.167531659 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.192453009 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.169910334 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.23532129 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.339659483 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.284812573 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.142440817 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.125878136 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.089123093 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.393536072 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.786034665 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.915428963 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.047409433 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.256918161 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.113193017 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.138069615 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.11841724 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.127708625 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.142947831 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.144331342 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.414894237 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.276387403 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.770744212 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.231674337 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.128919062 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.285465408 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.181835282 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.121624428 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.25657621 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.145007542 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.255034248 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.198104985 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.119207843 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.561839969 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.302139194 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.142168192 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.43241129 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.359761123 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.326697517 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.457457939 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.323229458 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.623108942 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.523454075 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.912912482 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.131464361 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.07001276 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.246675882 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.870830547 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.086342768 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.655372965 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.813765931 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.181517997 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.371335293 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.966287866 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.538786767 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.257790769 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.183239977 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.201342946 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.156662583 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.118569022 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.327038781 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.174045891 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.373548319 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.251698362 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.113660701 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.406075986 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.229528414 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.180950956 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.321162221 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.177383257 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.148717258 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.149152879 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.525584935 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.90674452 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.201855458 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.145331754 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.07194501 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.991479722 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.047783512 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.912226343 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.124376902 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.259225048 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.123687557 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.38869795 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.180614196 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 4.713791785 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.252862758 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.854280274 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.458361237 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.16654354 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.246938486 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.501732859 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.770589965 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.49356566 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.238759675 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.138144446 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.403486303 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.067585502 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.289651055 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.032640403 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.455956235 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.758465696 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.621607304 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.318487618 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.239199983 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.097570942 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.736832382 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.134821851 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.188338287 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.939940685 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.276976672 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.376493331 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.998441113 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.324460151 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.273039695 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.796936114 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.787345546 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.250514306 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.686147376 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.258188591 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.158906405 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.659465747 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.135088816 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.231860687 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.219907641 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.137606113 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.14580237 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.742506821 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.731268343 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.46103075 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.231568162 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.208343286 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.760160795 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.972928845 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.250842409 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.145637271 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.125623715 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.375740464 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.300177227 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.165349912 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.594474061 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.866060513 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.320310461 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.712705708 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.268403441 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.318913152 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.382276725 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.464938475 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.295245948 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.231506137 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.153593377 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.166738378 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.176589608 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.496818609 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.296456036 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.170797368 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.721082175 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.309831341 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.749883662 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.244602607 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.354829272 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.172098114 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.576219328 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.310831804 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.735846123 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 4.073621034 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.309870324 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.500277564 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.194990255 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.20156851 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.778695919 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.205440413 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.14843712 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.02030433 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.400547332 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.424439323 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.427928135 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.329935565 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.208347889 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.790004142 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.219713539 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.686206672 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.236048591 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.147065574 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.639213667 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.188758787 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.442062157 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.292265027 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.530504031 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.217679021 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.497296829 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.333479609 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.222273807 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.131263262 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.126557848 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.129619811 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.1491324 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.72440877 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 5.065228763 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.513736555 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.244652126 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 3.038912297 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.650538917 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 4.691958183 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.433662133 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.281350399 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.338604372 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.29154755 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.068382269 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.416699277 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.139942551 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.281280636 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.219815847 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.852311708 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.135255036 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.14686131 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.467990901 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.258381858 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.138774684 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.163867858 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.069977 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.842389217 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.21417933 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.440055069 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.301979119 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.22853956 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.861121766 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.475896407 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.30796448 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.247082896 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.235226625 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.054969348 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.29888016 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.237452943 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.539633542 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.292730894 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.487267432 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.947823932 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.646085132 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.241443532 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.168781453 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.194523098 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.760861876 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.686073616 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.269661391 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.572534441 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.191213035 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.713408843 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.176274099 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.577245188 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.737064766 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.143806207 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.306050896 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.201236338 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.210393894 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 4.879678484 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.174554001 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.974571667 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.64097679 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.241842231 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.988453209 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.081307967 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.214463345 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.278112782 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.16206923 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.161990047 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.2141267 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.188342759 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.698602397 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.201123968 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.25532192 seconds)
  done (took 1452.905117251 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.494315233 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.221793313 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.196545318 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.205877079 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.284453068 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.270906068 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.216467629 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.219908648 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.281437846 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.263113297 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.264799311 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.27080069 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.271249595 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.55002285 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.260279321 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.241984198 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.257229167 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.24843553 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.244344066 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.245850692 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.230633782 seconds)
  done (took 27.930945069 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.279819491 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.267501043 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.243564522 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.235749229 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.217784775 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.224483691 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.238913967 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.207648676 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.216262158 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.212446628 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.229501082 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.229401468 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.226352605 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.229019478 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.255116132 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.260006834 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.231323627 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.205089539 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.213991776 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.239041863 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.23874471 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.240096978 seconds)
  done (took 28.388358162 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.231000396 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.233071845 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.928629801 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.332472355 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.234870811 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.252607364 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.236971986 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.465260105 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.228025343 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.236669008 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.758041178 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.336577648 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.28991563 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.427423672 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.344736563 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.250904839 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.37262305 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.246960279 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.246869689 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.260674937 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.230991201 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.379662439 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.289550353 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.163638229 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.935323175 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.311054191 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.185787033 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.15531992 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.17007585 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.152414612 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.274767694 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.193946229 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.949384639 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.822068872 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.402604487 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.090967694 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.312329348 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.241990871 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.171638159 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.185950365 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.480282996 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.956620055 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.182802153 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.199174714 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.407011563 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.283941141 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.201424174 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.561378691 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.280966144 seconds)
  done (took 93.287219203 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.26766841 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.398631241 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.335459571 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.261728002 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.433097433 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.270255485 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.414864326 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.255804228 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.254141219 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.261330808 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.461282752 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.434814613 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.254776989 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.255084193 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.420508732 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.252625635 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.226873277 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.223967625 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.226621803 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.186822465 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.183121702 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.311619482 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.387614086 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.419686944 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.241731661 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.251120931 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.246231487 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.264382444 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.434605875 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.240636857 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.207585297 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.241091258 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.387927268 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.355580434 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.230724652 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.269649378 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.393267183 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.21320229 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.239175463 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.273961357 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.259449877 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.2220735 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.316104113 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.433874297 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.216158986 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.350771189 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.185201545 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.20312495 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.325509818 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.200887459 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.203183096 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.401206181 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.204569394 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.172818891 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.131284548 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.337142575 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.166295231 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.170246747 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.141397627 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.325778944 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.186867457 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.173529563 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.362320145 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.177545473 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.158105888 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.389269894 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.328062023 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.176192726 seconds)
  done (took 88.041732457 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.16594641 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.154820575 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.150143303 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.143802396 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.157356281 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.170368915 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.198197116 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.227476779 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.195558267 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.188652434 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.197869363 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.221416745 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.223303538 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.167811574 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.230303355 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.229378774 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.165286151 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.177752319 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.174037081 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.208976345 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.186258802 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.196509199 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.188921288 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.166824572 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.541872293 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.154514589 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.176552122 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.181085806 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.18250889 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.182515926 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.54847478 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.175177209 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.166603965 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.179566424 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.547859289 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.164985119 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.185214712 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.186883507 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.171028218 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.198794744 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.152150658 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.145134646 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.148385543 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.163025454 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.201093725 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.200284517 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.166863193 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.53503653 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.178191454 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.167614676 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.181494133 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.172685111 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.165612697 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.139086602 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.143623246 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.331181991 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.224909829 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.248794827 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.233539806 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.211163619 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.242679601 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.415718568 seconds)
  done (took 76.360067007 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.186270048 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.204418986 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.175972096 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.166140069 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.202819135 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.22956283 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.228771406 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.17826612 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.178805444 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.200032729 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.207667493 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.179237515 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.173554793 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.181465521 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.221692782 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.207475008 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.170008263 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.17196713 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.180162244 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.171209307 seconds)
  done (took 25.000181623 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.188334133 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.173822693 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.204550026 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.207146348 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.174828924 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.179712022 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.16820407 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.163216329 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.194284929 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.157003458 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.17300908 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.177929397 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.199827512 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.202967907 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.187621302 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.187001115 seconds)
  done (took 20.096153689 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.191369098 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.197309107 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.189686374 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.153256551 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.144723615 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.207869909 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.270067236 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.234807886 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.209241035 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.793468 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.208330627 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.170253983 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.157065387 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.207009764 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.187177207 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.154538221 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.178692571 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.185664572 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.203070724 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.206907033 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.785043724 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.16284909 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.174994534 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.19009785 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.181779055 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.782499501 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.192752785 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.170161113 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.165259209 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.161654637 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.170927436 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.645949454 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.161595469 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.151999489 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.167949021 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.171423808 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.18525716 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.179780586 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.168715266 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.183488358 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.17832886 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.155239779 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.160971375 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.169277472 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.155593726 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.152334787 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.14726446 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.615159722 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.175817106 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.188151456 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.162619256 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.148050535 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.135639883 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.722161485 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.23901507 seconds)
  done (took 69.278104742 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.237881471 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.30491882 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.209780901 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.18054506 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.22885083 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.244782569 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.280879551 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.182100784 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.204773542 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.149220152 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.262426762 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.170849231 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.221070204 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.248137736 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.236096503 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.23499918 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.151927853 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.254274836 seconds)
  done (took 23.146574603 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.135896292 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.151396728 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.156846543 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.161545366 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.159094608 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.131116881 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.134855518 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.203385126 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.229921626 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.22065618 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.163562681 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.148168919 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.160901849 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.149271832 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.148071299 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.180398293 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.158700108 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.165654103 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.147408777 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.143356347 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.136461486 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.134770868 seconds)
  done (took 26.67649279 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.203051943 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.198965376 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.169719828 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.180988834 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.189239733 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.201258786 seconds)
  done (took 8.287705599 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.280515293 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.194327292 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.209411468 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.232913566 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.185921954 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.162022686 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.168694549 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.171580392 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.154474087 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.451043941 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.204890599 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.206822424 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.167435096 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.207781649 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.208089739 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.223390639 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.183386819 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.201094106 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.227886956 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.332957994 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.174952187 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.183480917 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.177444792 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.171576801 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.170868808 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.148007709 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.182724747 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.476413463 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.185606972 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.149968697 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.153480886 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.148852381 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.137925273 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.483901858 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.246843369 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.195243905 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.205955828 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.321835493 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.174895523 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.187065852 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.226759757 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.185128352 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.168243925 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.175912102 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.156098825 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.172944724 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.151646806 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.151159968 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.140844494 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.556513336 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.130373522 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.151529515 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.139409675 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.172822557 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.139938316 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.473713451 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.475151017 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.127573551 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.141293462 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.465963166 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.165920264 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.132220428 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.15149156 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.459056635 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.147212848 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.140302288 seconds)
  done (took 81.542975575 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.138316088 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.164708046 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.13908545 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.445417458 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.145762838 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.150644507 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.174278736 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.142746198 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.136501046 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.19225861 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.294218824 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.182701484 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.121538401 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.133278292 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.118221122 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.122247175 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.134937257 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.153928829 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.23840723 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.552331923 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.149560837 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.160609626 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.15021691 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.178957368 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.472604848 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.15956263 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.182015886 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.192598106 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.195150859 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.201670985 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.187819171 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.198799548 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.226910893 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.220387926 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.181401696 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.200299766 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.244628845 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.244351457 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.226564105 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.174308815 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.15953998 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.347898498 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.227242565 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.212143179 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.463384483 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.167851091 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.1560507 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.271019619 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.182426161 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.250413227 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.474322449 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.470862372 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.478094242 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.188515844 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.156954557 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.172805103 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.198115672 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.189276245 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.18493929 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.188796486 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.168113262 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.15370524 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.50771222 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.163751656 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.160777291 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.190504014 seconds)
  done (took 81.637799886 seconds)
done (took 2480.213957056 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.198192052 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.197339949 seconds)
  done (took 13.565181737 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.175815495 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.180886738 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.371768502 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.167975316 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.153662855 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.233970393 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.198627981 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.131801491 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.122873513 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.230015319 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.142886276 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.260719117 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.242464292 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.198411443 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.233009029 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.145210738 seconds)
  done (took 40.407592092 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.135180304 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.334891556 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 3.147074502 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.934995511 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.314737011 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.053912627 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.461462014 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.446232128 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.475291257 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.574055552 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.38496765 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 4.663337941 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 5.885222126 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.24452738 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.759112806 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.798391675 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.861164517 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.94782075 seconds)
  done (took 60.559593169 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.125480434 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.279732473 seconds)
  done (took 8.561206722 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.133548017 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.129868571 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.254270661 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.188995248 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.121714679 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.155628314 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.169427833 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.2023815 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.172851595 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.208040723 seconds)
  done (took 62.858682755 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 6.207029591 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.856359937 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.555657993 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.867087768 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.801892963 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.642831863 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.406050001 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.607922551 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.339883904 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.230103087 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 5.0935521 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.597376363 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.934238041 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.203939471 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.749230614 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.506178121 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.798931933 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.657641384 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.470776397 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.567490685 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.397699737 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 4.886892648 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.587543814 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.000979974 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.158503725 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.309890246 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.272849916 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.30237295 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.265650394 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.087003381 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 5.002564498 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.245823731 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.141391657 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.190577986 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.239321503 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.789440526 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.879148909 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.402560554 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.51475753 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.467990372 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.568852279 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.459170772 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.340230994 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.504487846 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.437510291 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.44738654 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.15922741 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.478688751 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.304361942 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.301007229 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.777519226 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.398833897 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.322687878 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.315529616 seconds)
  done (took 155.248473517 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.222043241 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.610181336 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.432276306 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.197801013 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.618282483 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.431226931 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 4.958407584 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.717226187 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.230283412 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.400715234 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.411461659 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.358787921 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.219825605 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.220333504 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.205419893 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.226063353 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.377416288 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.606597895 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.191298324 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.20919286 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.433655803 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.45607636 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.321579958 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.223035967 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.355834669 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.450621649 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.620074803 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.350059959 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.605471861 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.220741862 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.616706262 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.180366935 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.209419176 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.062019095 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.574850882 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.546625387 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.633236758 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.201828899 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.987650265 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.207538319 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.855646747 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.432997825 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.558658222 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.350082207 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.359377153 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.418579859 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.793755406 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.237625555 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.983385875 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.35922636 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.397352674 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.406674256 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.455638751 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.208586686 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.73940161 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.170651377 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.158556835 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.487933392 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.36174268 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.307119566 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.170174256 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.178283212 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.179953962 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.432534609 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.170123685 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.291350447 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.168860305 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.186377105 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.313315102 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.356213388 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.346417559 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.420735654 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.443278398 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.129676193 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 3.547780251 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.401820704 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.558023251 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.408872979 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.149255194 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.178111863 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.585570529 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.626463569 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.353453614 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.407995848 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.496227666 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.547697163 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.776182596 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.184873982 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.388314753 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.35544652 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.527110405 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.319218625 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.531722666 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.105633497 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.165591165 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.150016503 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.52540066 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.327300422 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.190824218 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.721871162 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.478942632 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.811213238 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.383517828 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.665799358 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.309513381 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.195342587 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.804154862 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.192931924 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.451829761 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.472019056 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.249776906 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.20958731 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.344087577 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.150640806 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.193277456 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.345915742 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.580618469 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.18664784 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.334731739 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.160318061 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.454695234 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.021417961 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.413578878 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.154833094 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.445498786 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.355607085 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.347683775 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.177244039 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.538958033 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.439485195 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.600388087 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.416940828 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.176074384 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.254210326 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.505116631 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.208789976 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.161167984 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.342244965 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.072744704 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.349056344 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.191745082 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.635665073 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.40374358 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.564742794 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.227728541 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.438534444 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.451406422 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.605617564 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.19988754 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.291770869 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.164738314 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.151857072 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.326703875 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.170613925 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.171179154 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.040175702 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.16609429 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.318853638 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.397620402 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.810137932 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.669885005 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.518762221 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.183704248 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.620862224 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.370475621 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.64255649 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.678456447 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.341954616 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.197723611 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.16758225 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.158023601 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.408925996 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.365723403 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.224940347 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.193567512 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.89024601 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.278406438 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.163506364 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.401116784 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.913603965 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.581577284 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.380963278 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.18311805 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.506993502 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.199253408 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.352810688 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.704065531 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.485948287 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.175002672 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.179625317 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.199665395 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.151704787 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.378301971 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.432777769 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.742211238 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.348814507 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.489710442 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.382734234 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.499300651 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.661498595 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.203881396 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.451482583 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.192537662 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.603154819 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.187836394 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.306761153 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.504644898 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.165352672 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.502274308 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.549357696 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.254414796 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.663152821 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.22110279 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.200786625 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.216426199 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.383222316 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.73082451 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.241354077 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.423316337 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.588824608 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.324820432 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.367432753 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.464681029 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.201151002 seconds)
  done (took 747.787460851 seconds)
done (took 1090.166024888 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.159263355 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.188930086 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.180210078 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.196065441 seconds)
  done (took 25.90087653 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.070718195 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.057208343 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.343246226 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.228322405 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.365569608 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.416032129 seconds)
  done (took 11.720454658 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 4.709379304 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.203558469 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.182200906 seconds)
  done (took 18.253925595 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.508867376 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.664965427 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.380805532 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.286743257 seconds)
  done (took 7.000732829 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.173347068 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.157735197 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.218215383 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.192725185 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.214898366 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.245501879 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.217373062 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.202821139 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.177346877 seconds)
  done (took 11.974605926 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.601653867 seconds)
done (took 80.646092675 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.629779456 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.492979634 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.188060398 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.44235897 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.408075859 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.580862493 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.358344831 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.272831093 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.544173152 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.640159643 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.73388131 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.447337109 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.726539822 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.728849565 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.441854825 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.290390389 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.267720049 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.295272671 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.93960256 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.415335973 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.96163601 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.321358632 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 6.178246717 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.212180476 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.163258748 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.262002734 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.42478633 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 6.179763357 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 3.550071177 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.225405697 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.2808678 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.740879376 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.338077018 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.47821328 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.265528854 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 2.078386732 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.653603319 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.238151244 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.439486103 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.718630936 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.532484326 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.368252207 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.211956778 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.506411672 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.563083694 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.218860496 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.17453267 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.369446731 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.838988973 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.41746913 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.581258102 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.185946211 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.775053741 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.276666848 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.267344316 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.213615244 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.283001338 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.657502594 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.419998452 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.504952297 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.207382869 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.192239959 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.192299518 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.236365403 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 6.224721786 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 3.055310042 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.607660238 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.286430876 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.693474882 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.212436837 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.21324342 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.215871319 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.939350739 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.275748427 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.219489783 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.164715614 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.459553249 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.219168622 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.15372312 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 6.258894482 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 3.476990389 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.174504778 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.412858152 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.478423788 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.331716641 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.584437681 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.644366124 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.547355413 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.663294125 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 6.149512126 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.311068725 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 7.815138358 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 7.535128229 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.16756669 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 6.243462732 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 7.438904151 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 2.441822548 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.678972886 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.323032498 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.870623701 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.228014017 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.237162719 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.661524526 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.563352818 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 2.016406914 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.217528997 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.319825518 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.174496522 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.349737079 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 6.176429694 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 7.76659397 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.730529237 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.199778772 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.235105096 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.680346952 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.195724569 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.487441956 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.648640919 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.288659592 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.193616594 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.425682583 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.210336084 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.321410626 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.748592033 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.628165495 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.414198969 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.227511153 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 2.454030031 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.186328114 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.448729838 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.224756731 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.780428404 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.708904054 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.209932392 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.416934019 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.302183981 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.181361145 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.3684159 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.22210883 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.284287356 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.460429683 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.430916867 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.288326532 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.140338264 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.547171094 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 5.352679346 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.420433647 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.476974571 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.3385616 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.455922921 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.269715391 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.241285478 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.228630425 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.704621773 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.77821225 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.86878021 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.447809251 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.380011093 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.821093303 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.577118128 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 2.035995083 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.328135531 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.270664457 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.201287941 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.246453219 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.299249786 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.237403871 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.187352736 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.427424825 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.543488705 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.861556512 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 2.02812606 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 5.926288124 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.444416754 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.328742138 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.208988035 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.866621823 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.193618998 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.60698158 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.634016156 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.299963581 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.217087965 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.151748173 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.271956975 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 2.011987309 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.184545574 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.494423038 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.821461485 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.626334784 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.644988395 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.4331145 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.237686483 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.626030118 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.406189685 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.44228286 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.402102092 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.67598283 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.225331292 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.469409583 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.234200049 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.437985919 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.140876043 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 2.162778677 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.400740828 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.740816416 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.555755971 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.407006416 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.394871184 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.55261655 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.188029663 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 6.145382983 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 7.769824892 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.430281644 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.217695922 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 6.193220779 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 7.673711578 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 1.507418813 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.208674402 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.330522702 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.602662562 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.320072123 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.329529058 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.781240812 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.232524091 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.551431054 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.42440059 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.382553146 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.41318728 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.216002698 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.347640732 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.378650933 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.326692738 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.448944808 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.394449517 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.543596819 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 6.163670195 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 2.776852366 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.187179455 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 1.595596042 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.216306436 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.20928022 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.529163985 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.3783872 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.482419187 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.362020987 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.31211976 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.150396159 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.248083383 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.700486386 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 2.092522059 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.728193923 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.334056106 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.195009011 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.173214052 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.650969435 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.604575342 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.21353243 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.287003975 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.777350281 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.175814501 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.330367286 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.160188729 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.153599253 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 3.034074805 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.290022678 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.388141844 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.764298768 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.149161557 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 2.332597904 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.297392951 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.698498554 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.702076845 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.224923067 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.285838881 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 6.150215475 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.46582052 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.593640493 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.179301206 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.305358818 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.526149339 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.275403221 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.284508949 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.170028186 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.194778325 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.749567766 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.539836189 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.737362074 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.201021058 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.612151794 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 6.183825122 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 2.654762706 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.169025518 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.256422494 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.549387003 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.282204787 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.608835291 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.270780452 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.246730638 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.440011631 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.253963945 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.183175563 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.358788139 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 6.174195346 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.622893474 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 3.047812218 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.421241992 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.185688867 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.448171463 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.42634244 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 2.122709767 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.305376622 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.288246241 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.777195348 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.697068871 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.18242774 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.450438446 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.199858847 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.632337721 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.203603615 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.196993751 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.287965458 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.308311393 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.16500455 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 2.297707598 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.403780595 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.803839472 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.393333546 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 2.151786892 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 6.212943607 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 2.541473555 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.30118095 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.525159535 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 5.853973761 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.188179334 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.333207505 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.845892744 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.342089069 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.216368071 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.427259713 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.178250635 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.807643858 seconds)
  done (took 892.505656625 seconds)
done (took 893.878025525 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.235991382 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.605001727 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.371681558 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.156658328 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.956525054 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.801037253 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.40021692 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.421951548 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.240084762 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.432214779 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.085798799 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.00357017 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.300077249 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.287199699 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.230650618 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.27305703 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.363184763 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.416063912 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.261320523 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.252330442 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.506157528 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.274504597 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.58833998 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.470403789 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.578998919 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.30134563 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.199418659 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.488901032 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.518173163 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.201707414 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.415729204 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.461581303 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.022559426 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.476035074 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.266817225 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.280829395 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.070361539 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.299718727 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.194609408 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.289730034 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.544827299 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.292524118 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.906016543 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.158632622 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.981511976 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.638795668 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.107452897 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.272322906 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.301931288 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.332598745 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.199774762 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.199311409 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.537745161 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.19377557 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.036176041 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.141292653 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.516870359 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.031979113 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.916275651 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.381229321 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.550216229 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.285033178 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.344498853 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.42190347 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.299711498 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.434910037 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.59453047 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.182468341 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.362184847 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.419719661 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.458416226 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.428314905 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.284699247 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.364782086 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.400264451 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.491344297 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.937649013 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.457714126 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.034989046 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.357468272 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.179247483 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.121254808 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.180851134 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.25759395 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.241702678 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.989328653 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.27718418 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.138995253 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.297325717 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.376360955 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.094452303 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.411981137 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.641425691 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.255239839 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.215333435 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.399986459 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.268420582 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.206596127 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.176388694 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.40186833 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.972715542 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.248127376 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.192122812 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.284319701 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.292754163 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.216639363 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.239282842 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.623281018 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.442888041 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.357630657 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.652787669 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.407983091 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.491628556 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.382107445 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.332843197 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.038233654 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.537264915 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.112703812 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.266583296 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.916929188 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.485145324 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.337782531 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.617978466 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.502149159 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.21265607 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.275014021 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.301244608 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.13585874 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.304130912 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.264723444 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.343314821 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.595702416 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.344232275 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.119339951 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.375188013 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.937283177 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.376766447 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.368522222 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.236868926 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.010136474 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.239191674 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.094771155 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.435801724 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.525466577 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.382667206 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.425696546 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.266925439 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.446242677 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.15557776 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.262520107 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.354039274 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.268798547 seconds)
done (took 254.112894655 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.505876923 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 3.500971221 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.435644082 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.374192886 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.558801126 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.430245928 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.229761511 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.60380023 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.196628905 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.556134592 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.340862219 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.274524263 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 3.495085863 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.397302383 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.556008794 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.384849111 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.191733883 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.379019948 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.598052218 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.543519427 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.150433322 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.362653688 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.337671931 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.521129546 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.127223344 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.159229613 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.44948156 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.257622989 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.392830976 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.158816023 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.142603518 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.419650164 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.445503064 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 3.278021881 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.543450607 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.155058831 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.484955618 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.198302585 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.423069231 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.516137333 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.34190023 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 3.91561101 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.17187709 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.20711421 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.261000525 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.425510319 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.22669898 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 3.397657551 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.132222235 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.149337397 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.408079587 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.190669747 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.290717862 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.431395589 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.344443523 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 3.232289172 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.522746706 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.533957586 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.511904173 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.439249237 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.460934937 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.564515881 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.517648062 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.26410339 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.152577169 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.453481821 seconds)
  done (took 127.750115594 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.571273635 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.428438071 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.545188419 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.413554138 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.681258099 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.528642793 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.538602428 seconds)
  done (took 13.861591568 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.215103018 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.188018916 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.396666284 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.456912129 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.192749727 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.361607129 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.295178509 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.180578944 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.437387307 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.241125195 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.594755938 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.414261859 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.12419604 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.187499351 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.275773028 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.473424567 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.213216323 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.28874041 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.310855236 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.510471586 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.233939365 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.263639051 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.442235875 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.246306753 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.300342848 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.326533743 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.266131733 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.277729303 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.29813399 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.289701193 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.303622196 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.400745041 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.287029013 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.23322379 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.257530534 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.597384767 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.21583716 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.231527949 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.370745276 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.145637513 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.216519328 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.244223053 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.356718498 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.224167201 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.18201812 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.395664612 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.183220121 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.210970442 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.159889308 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.177912869 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.391604888 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.18560176 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.147896393 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.083183936 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.395156479 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.136840162 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.239125833 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.193673144 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.189320764 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.269884482 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.176880457 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.458991452 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.445575224 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.155989632 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.403557414 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.452802656 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.180643669 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.173420951 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.172687591 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.399425319 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.203826159 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.472793544 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.222807492 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.237737339 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.184627639 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.335936148 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.397595792 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.98779711 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.961429083 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.098356767 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 1.555491675 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.181652016 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.481378065 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.1723766 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.115061174 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.225323738 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.215415639 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.895597171 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.130001746 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.23029047 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.524610773 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.161750682 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.228692655 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.232226341 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.174839352 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.252858643 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.367033893 seconds)
  done (took 149.450298056 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.353905493 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.42187604 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.529675307 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.15145804 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.169444858 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.41006138 seconds)
  done (took 15.156002953 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.634769385 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.99062882 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.203895498 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.185388628 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.236744989 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.150740583 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.140523069 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.329256314 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.320892933 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.216486547 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.151335071 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.168870351 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.169726129 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.344123583 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.179466999 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.215877898 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.183070527 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.254451783 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.228735868 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.286306977 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.341254146 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.255102383 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.317749984 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.895251085 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.205149297 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.178384446 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.929658965 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.201781753 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.179267766 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.568013489 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.338095085 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.120248845 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.84717618 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.283418572 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.891000503 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 1.851626288 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.313215786 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.141219009 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.174716239 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.143925808 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.15153764 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.265170727 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.243147475 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.159633417 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.528626701 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.777264704 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.185507822 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.430827131 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.141877649 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.129900147 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.148149444 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.233941931 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.150240486 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.128005692 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.479335378 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.703345478 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.10931872 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.157675699 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.297691727 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.854388056 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.28609194 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.141006268 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.571979446 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.104217483 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.170557248 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.180051467 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.861777341 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.333644942 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.248974731 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.207061071 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.157403898 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.216399647 seconds)
  done (took 115.746745401 seconds)
done (took 423.107136026 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.362826274 seconds)
  done (took 7.499678175 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.292112774 seconds)
  done (took 7.515887632 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.121645456 seconds)
  done (took 7.249451043 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.132956368 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.221195703 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.19379252 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.170715799 seconds)
  done (took 25.884252905 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.828575705 seconds)
  done (took 7.964418035 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.122121852 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.132443609 seconds)
  done (took 13.381499962 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.304295548 seconds)
  done (took 7.419558042 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.402294657 seconds)
  done (took 7.548622881 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.142989568 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.144003942 seconds)
  done (took 13.435400625 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.207454218 seconds)
  done (took 7.371875079 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 6.546715773 seconds)
  done (took 7.833678996 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.246365554 seconds)
  done (took 7.633338909 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.273891589 seconds)
  done (took 7.516676675 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.314014077 seconds)
  done (took 7.539111625 seconds)
done (took 136.937921777 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.213321735 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.158887763 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.214203067 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.174407533 seconds)
  done (took 25.965439649 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.553337732 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.541534968 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.506733225 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.567464856 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.501438017 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.487791996 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.562614606 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.574537321 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.500144139 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.589189866 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.519376793 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.570734579 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.694787593 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.539358937 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.538035183 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.698433338 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.578392285 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.534035793 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.500455291 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.539374165 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.658896313 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.660288964 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.921605606 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.933101119 seconds)
  done (took 39.485248114 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.360825624 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.31398497 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.29523351 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.31401787 seconds)
  done (took 6.441732548 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.209656947 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.514212166 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.584307713 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.698148824 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.605950386 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.449193148 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.635352083 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.491779182 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.427868935 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.436950748 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.906422676 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.40514966 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.451196706 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.679972714 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.421015015 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.234195013 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.249308801 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.388725899 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.597004814 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.447425631 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.520663309 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.591234173 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.555941979 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.577697555 seconds)
  done (took 37.272175749 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.988185181 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.128996594 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.585784709 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.157281248 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.941146679 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.058663638 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.546644436 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.73984376 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.483952766 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.481710727 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.983298341 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 1.954020403 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.352007835 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.146355657 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.044739561 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.439686925 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.455301061 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.094554039 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.629365773 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.554460196 seconds)
  done (took 40.979836365 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.273280882 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 1.450154314 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.459760153 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.420946331 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.24273064 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 4.704175885 seconds)
  done (took 22.779289125 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.54473929 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.392538164 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.520271555 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.512001374 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.373074351 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.350141336 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.766370676 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.445685074 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.972001955 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.858590934 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.688224323 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.659579268 seconds)
  done (took 23.324921654 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.245193336 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.281149747 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.224633982 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.388643881 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.109181061 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.103119623 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.575365916 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.235540949 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.347898384 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.453996727 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.119493029 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.421538012 seconds)
  done (took 41.770969839 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.490537848 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.421665747 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.594580732 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.304981737 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.653145678 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.3042551 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.627599786 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.228646563 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.904315973 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.077049672 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.82862582 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.248955253 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.767636879 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.172180469 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.211896572 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.494572038 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.025005784 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.219771937 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.502682459 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.253769958 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.196688722 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.341799894 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.23873115 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.69503897 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.504358939 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.24551588 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.444342392 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.49279723 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.228224085 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.397255556 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.162406946 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.80767955 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.425705823 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.505294666 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.638617184 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.253759063 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.356622321 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.821275183 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.722276019 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.466938892 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.312306827 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.33105071 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.147886703 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.235058339 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.448821551 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.961388042 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.248419907 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.925034997 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.155512801 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.475078441 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.960895226 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.657791844 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.622666531 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.842791165 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.291126272 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.43582847 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.312314812 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.145899475 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.481153104 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.376829677 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.198040954 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.445864659 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.435897072 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.181125905 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.610609982 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.423723276 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.392561598 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.398359382 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.514261727 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.493451533 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.572131363 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.4959383 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.895843626 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.247531093 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.766081155 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.089085613 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.524345152 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.182909194 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.920705059 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.704327151 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.20819825 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.306014095 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.874077091 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.171079479 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.199018203 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.368386133 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.197990693 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.166999739 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.173683911 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.421624144 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.427913348 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.219368538 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.252058168 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.397505308 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.860341291 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.15556683 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.168297386 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.416498162 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.132961638 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.732366371 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.149275029 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.196851045 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.131640505 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.777585669 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.557149176 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.176067749 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.028006701 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.886218 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.540496815 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.847115808 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.395459708 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.229751911 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.49864806 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.485820496 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.147286717 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.76600368 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.150861643 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.438640306 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.413747555 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.143930622 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.11178775 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.560168325 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.391739374 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.145325254 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.446633181 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.151309959 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.345752815 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.186700365 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.811830542 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.180524646 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.426702225 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.65875201 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.272570781 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.300083504 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.138674973 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.305329908 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.620361316 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.242111244 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.52204025 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.485393556 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.344869475 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.970098661 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.1761289 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.025753654 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.53021556 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.399931377 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.516356245 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.864622787 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.327643686 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.194458715 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.220396416 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.314898871 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.171663071 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.739421448 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.189568119 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.866949364 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.154007278 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.447306775 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.175684179 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.355520664 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.153276285 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.432499186 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.599407985 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.333223628 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.352195592 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.432227548 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.31833264 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.150440188 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.118648334 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.435173871 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.360685862 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.615792114 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.375775721 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.608350318 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.605178114 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.626333669 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.351475778 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.545340626 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.953809049 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.426971701 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.41400511 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.210874437 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.148845234 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.200878815 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.404347024 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.440214356 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.380000846 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.96125954 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 6.045689662 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.172983999 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.258169298 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.706743206 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.182439568 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.416358389 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.61210676 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.192592291 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.716715543 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.280897551 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.591387187 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.699320757 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.235053512 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.495890745 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.800154306 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.716408908 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.524474104 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.538243209 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.199444202 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.06485956 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.751759652 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.386758513 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.178574106 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.627622207 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.787689778 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.357854654 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.149118402 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.494351653 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.05060084 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.982905231 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.685024527 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.734600422 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.175258365 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.354584849 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.561105584 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.172075365 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.979358827 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.426698342 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.408627149 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.920109666 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.642239599 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.410384679 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.510522015 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.178792759 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.17477109 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.471034173 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.507209075 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.475228059 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.638469612 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.427600718 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.882083844 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.331393247 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.785275981 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.325059893 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.224187509 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.691927401 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.367583733 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.97900441 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.447019206 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.002064878 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.490478414 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 4.736032803 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.448196053 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.192334502 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.549337232 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.831929421 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.252661797 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.144688943 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.336992143 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.194477678 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.430255522 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.117168173 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.244582436 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.784218509 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.925287941 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.473990653 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.447343573 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.60308662 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.619140858 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.554125378 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.202152987 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.397378765 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.294646683 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.476697114 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.185680261 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.524767607 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.956060143 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.655953309 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.170575056 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.68310828 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.588459712 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.804669458 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.56549867 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.374697908 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.468913353 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.168664687 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.748389043 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.170204528 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.306607831 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.134726098 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.806354718 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.58794038 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.515957758 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.540194581 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.176070653 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.570351713 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.496136284 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.42438359 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.227690107 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.413069391 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.153342029 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.447711106 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.154019316 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.152019264 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.577677227 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.139803577 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 6.042613612 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.380758917 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.483500427 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.324226422 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.532523727 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.310388507 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.302806907 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.622861825 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.372951768 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.327217855 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.570759592 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.883536114 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.344425686 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.155019151 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.113680805 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.764468228 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.507361388 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.70668717 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.666070179 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.456077606 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.944382036 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.158633785 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.324790528 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.308679816 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.135182616 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.353880224 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.51509192 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.15386134 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.433380559 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.499451415 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.403816633 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.74606451 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.109259902 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.815930315 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.528639033 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.671121511 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.679033469 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.905959714 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.415284555 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.303144095 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.437903056 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.220469103 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.298671557 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.354924206 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.843013611 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.189490373 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.037055989 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.965517174 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.221463208 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.708231718 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.152851811 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.971549402 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.294505998 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.354841726 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.316483295 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.277150403 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.117291669 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.851232613 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.904896063 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.397223379 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.278252705 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.350750512 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.224847131 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.373198315 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.635699023 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.469996344 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.915873527 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.500859121 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.330361973 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.097320501 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.157118399 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.41978987 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.511240234 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.15687744 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.421311158 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.480351964 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.151312362 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.198191312 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.13854549 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.353582891 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.038704154 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.85673882 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.36824654 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.535897451 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.682578335 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.159098175 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.930443226 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.333977277 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.542524565 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.570741642 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.977564264 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.551208059 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.464081952 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.3169771 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.110349946 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.36049136 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.131369282 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.300525555 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.910935426 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.4839949 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.149855302 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.0949215 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.769024763 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.134128384 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.14579933 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.127085346 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.351059192 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.34080362 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.138845243 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.865842294 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.507547767 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.281396898 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.119902115 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.872220233 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.097369037 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.323211155 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.146967794 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.31634813 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.973381924 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.173595698 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.887617277 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.565459125 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.158729704 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.33579053 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.213712845 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.829906215 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.34845169 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.605190969 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.067139374 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.392112103 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.657753677 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.350336927 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.124588301 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.464240907 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.25791299 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.425111926 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.422677684 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.49535106 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.502456758 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.389265566 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.402321463 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.80276639 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.425897536 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.350041426 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.110339725 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.140064482 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.143242713 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.490974554 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.472283436 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.141929898 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.68965606 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.400738322 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.261999066 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.401617714 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.33841896 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.813438291 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.357946339 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.238060424 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.383276504 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.20855848 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.527960938 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.17032919 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.414715671 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.201207724 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.179537576 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.334429697 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.42308801 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.559816896 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.507223658 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.102901869 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.370990547 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.625005206 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.018641767 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.74867861 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.164206636 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.850931933 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.659017179 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.171497174 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.576221788 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.769350442 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.428328896 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.475479556 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.607797097 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.228689267 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.370653965 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.649723101 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.196583977 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.896877292 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.613436263 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.208382081 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.608111265 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.211037172 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.345550713 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.971191091 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.680098659 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.157848107 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.736448712 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.605483775 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.701096857 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.442715769 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.132123997 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.326667655 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.851195827 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.137735555 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.163547618 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.293350088 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.74863826 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.210903198 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.775666804 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.317743628 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.47815657 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.217219654 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.273384608 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.22090142 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.421842147 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.429540794 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.491734027 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.505095351 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.421445891 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.219711951 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.97485389 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.92359865 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.34377523 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.481017441 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.203192167 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.604633916 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.897577185 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.205237725 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.861227784 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.381934579 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.249128715 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.609893417 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.500501541 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.268182256 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.476405527 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.243260503 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.60025724 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.40561756 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.713190329 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.46078791 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.215801613 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.319025053 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.21708147 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.780440752 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.572905077 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.067082453 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.203270443 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.537915455 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.204171028 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.797009564 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.870372722 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.33277099 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.26387861 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.050208059 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.901659237 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.9885522 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.421325321 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.12652143 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.325700836 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.654978241 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.105374289 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.748079233 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.162869972 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.293914968 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.467765117 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.099780745 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.384238248 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.142054619 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.095330324 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.639114828 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.127213892 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.461395571 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.134701027 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.741289597 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.188004829 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.230577815 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.386517262 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.5147013 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.146203432 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.859021623 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.307632487 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.126032983 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.154189584 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.522993077 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.324809428 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.375834191 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.489169988 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.270880971 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.56628403 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.046980538 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.746888833 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.293691147 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.489974404 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.00582174 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.699317784 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.172102207 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.830692871 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.799570511 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.333000547 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.687686174 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.429680777 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.911903296 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.201672669 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.653967295 seconds)
  done (took 2000.985120239 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.175640518 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.344519672 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.27481367 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.201054856 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.230119727 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.207844044 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.342352473 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.249363984 seconds)
  done (took 51.181457153 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.181852387 seconds)
    (2/17) benchmarking "4467"...
    done (took 6.25643601 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.788671567 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.470166211 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.216243339 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.275602918 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.382357886 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.768942593 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.158978522 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.100390621 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.325184236 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.376174553 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.156266568 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.245270565 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 5.971593008 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.309270382 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.148151573 seconds)
  done (took 94.333094492 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.245897648 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.181521668 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.218670509 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.860160838 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.231819624 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.606796169 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.14225706 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.124063022 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.596284668 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.833442852 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.258026454 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.337491055 seconds)
  done (took 81.871553766 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.268080174 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.248323801 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.23332515 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.205424591 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.188738487 seconds)
  done (took 7.364132253 seconds)
done (took 2475.060363724 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.427143497 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.76637722 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.752551124 seconds)
  done (took 4.70784906 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.243360463 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.322167121 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.409257182 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.344180982 seconds)
  done (took 6.514318343 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.452604663 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.689614822 seconds)
  done (took 4.291103903 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.567939389 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.262147649 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.743452136 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.199258364 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.15569306 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.169682771 seconds)
  done (took 19.762211645 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.164851727 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.194527854 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.2133897 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.207214157 seconds)
  done (took 5.949876129 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.187825242 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.245999859 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.229485996 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.226014515 seconds)
  done (took 19.037145163 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.441926675 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.238241944 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.886138752 seconds)
  done (took 5.715397376 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.974346717 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.276179659 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.941497098 seconds)
  done (took 6.371159262 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.422347067 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.208312572 seconds)
  done (took 6.806112714 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.297553549 seconds)
  done (took 2.445705329 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.622535797 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.617695094 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.825218264 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 1.857496467 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.053166693 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.41414249 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.56421094 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.401043369 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.747641837 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.766407458 seconds)
  done (took 18.003703282 seconds)
done (took 111.814888855 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.23288155 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.582717981 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.352599534 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.919110012 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.237055402 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.32277988 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.188679178 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.779903308 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.568439657 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.539699754 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 2.956652593 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.227949161 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.216708211 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.563146059 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.241732083 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.556286154 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.310193941 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.174167097 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.545978942 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.001435209 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.163174973 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.830357491 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.712372785 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.869198007 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.319998582 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.304753261 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.145893691 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.591666208 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 3.814311758 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.144293929 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.370816652 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.284453057 seconds)
  done (took 153.234906531 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.196611087 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.210511395 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.251288298 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.227942161 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.302899824 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.196600766 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.232314226 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.254983628 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.038417165 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.008222986 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.197433776 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.324443042 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.19438916 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.209925419 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.232141149 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.2051562 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.248173766 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.225700607 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.241387992 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.256167883 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.227648424 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.143074873 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.214079385 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.175595871 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.20050694 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.236483264 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.201163082 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.234829859 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.225449357 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.213626817 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.207844996 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.18197848 seconds)
  done (took 191.927773691 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.214656881 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.18841276 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.194238548 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.171608193 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.225597559 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.18459011 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.195752015 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.177871756 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.181447231 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.177633397 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.197634697 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.190968596 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.223457523 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.183236093 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.152893484 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.160777696 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.174970922 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.187214234 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.207952104 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.224670858 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.197279087 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.154624222 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.204808535 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.213564914 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.242632507 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.221999556 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.163811773 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.185221175 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.17615098 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.170410033 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.15802825 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.138366044 seconds)
  done (took 199.252098353 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.460648967 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.194242841 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.118558544 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 1.938485189 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.086315716 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.210742965 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 1.937511451 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.466684437 seconds)
  done (took 14.582622298 seconds)
done (took 560.195170422 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.897290757 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.108214774 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.383758281 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.505286149 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.781484398 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.516819046 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.435153441 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.616273997 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.908094905 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.59819375 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.660795876 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.437082936 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.088151155 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.469353764 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.374808484 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.681507255 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.602383983 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.94440473 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.393455651 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.005291011 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.447422921 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.127235742 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.646172293 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.958219508 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.66827508 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.126852419 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.366945878 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.622594527 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.419869335 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.396078342 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.299864081 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.674527596 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.450381272 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.453307036 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.694741889 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.689977464 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.644770939 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.679564433 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.371826502 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.874794818 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.041387847 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.810176972 seconds)
  done (took 79.094033293 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.191860949 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.215613897 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.373486183 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.249627337 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.856870072 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.304717861 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.481361569 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.472335921 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.308587454 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.420606904 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.45091009 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.892855695 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.443168262 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.86224922 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.439772239 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.454009255 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.316720816 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.845301199 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.396635517 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.406791189 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.278697263 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.425313171 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.272327975 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.437714473 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.27247764 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.270746104 seconds)
  done (took 38.542776835 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.28212212 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.409968094 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.443558486 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.305547809 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.485995555 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.258240864 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.535604706 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.414994518 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.962295798 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.835158033 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.315045301 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.351050646 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.379615858 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.505730688 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.498076256 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.391804339 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.383609448 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.410652618 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.45456812 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.472068011 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.341692352 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.381756883 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.599150411 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.173436899 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.063772221 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 4.805410432 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.547220139 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.780506679 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.425122003 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.378915888 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.333080519 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.542886441 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.651452779 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.438958561 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.356650202 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.226566479 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.234051672 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.296199361 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.244459792 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.351465129 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.531746441 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 4.68001283 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.540251627 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.694227479 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 4.463101594 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.412352169 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.729199275 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.347145897 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.371922659 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 3.136576395 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.476969277 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 3.889281323 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.394484638 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.368008511 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.294859774 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.595880762 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.415067921 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.6301464 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.346287451 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.89071589 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.355623531 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.668089432 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.420273159 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 4.576130174 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.583887966 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.440721367 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.401258676 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 4.835879511 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.521726341 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.379053496 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.763356875 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.260611468 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.219714541 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.268626452 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.374050684 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.666001264 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 4.175068664 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.546315199 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.575519097 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.494795625 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.578950015 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.799705276 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.216256811 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.656616525 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.395612355 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.204169157 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.241560204 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.510723218 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.434410442 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.675389406 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.746358283 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.571645939 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.691401933 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.372897514 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 4.861622692 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.670591507 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.194674029 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.220808993 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.417892932 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.756569178 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.295000399 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.426591371 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.789716556 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 4.876317598 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.498933071 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.404421102 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.559353178 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 4.537483779 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.641214773 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.219471372 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.408207833 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.321554904 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.427441857 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.641674912 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.19466311 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.755445609 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.327290588 seconds)
  done (took 247.752596878 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.207095699 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.192821714 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.178299631 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.170746338 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.18800938 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.740853285 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.246959788 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.178701625 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.842774581 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.263517143 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.283482246 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.262088814 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.272965685 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.451202969 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.490119083 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.513461106 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.394682589 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.259064512 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.286597102 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.251542697 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.383639195 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.274932411 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.255814341 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.263686918 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.26763052 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.267371022 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.288859571 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.444290761 seconds)
  done (took 156.273804378 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.330041274 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.705534931 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.372147311 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.415887191 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.352310156 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.346291747 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.818078791 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.451362039 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.389831101 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.326190392 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.429424387 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.555887287 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.603877592 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.905675432 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.439910957 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.483472403 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.95687421 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.475876561 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.339181178 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.323262013 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.501478345 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.653766935 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.574662654 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.579059551 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.476554591 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.582775198 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.40086297 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.340255038 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.451708572 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.82051829 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.332402744 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.668966202 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.450122109 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.337756413 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.813215826 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.668086065 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.89451893 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.958730672 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.512241699 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.280775457 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.277751423 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.550381648 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.603672672 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.379990634 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.323595804 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.948840415 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.355399142 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.593309011 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.341011018 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.282742004 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.446196452 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.456107099 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.564713995 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.203843931 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.48954847 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.479722835 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.913500357 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.315541561 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.350860248 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.621690342 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.295490424 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.859954165 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.822708175 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.394785975 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.342802471 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.20314913 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.439880209 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.86660766 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.962230446 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.380139546 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.672248314 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.517804264 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.285061368 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.577657151 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.477238232 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.727039599 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.883853617 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.469042595 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.415739116 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.38747381 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.618685376 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.336440882 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.838414096 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.414444497 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.266673751 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.836932296 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.710858034 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.310196649 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.363116835 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.446588852 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.446394467 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.535577659 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.559987216 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.35725919 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.17184493 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.509970901 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.570417445 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.323286195 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.43592237 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.278055762 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.699829945 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.515708227 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.272584554 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.642694767 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.758692749 seconds)
  done (took 172.299345348 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.991898493 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.332459426 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.524744023 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.831804519 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.603547776 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.742926944 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.489822756 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.355107482 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.529953213 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.530218068 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.486229483 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.382005907 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.235613876 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.023339291 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.29987522 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.440661552 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.358039109 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.899699015 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.606186887 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.224901944 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.735029029 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.957195901 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.579281632 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.700020385 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.728084638 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.791996049 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.949428965 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.410866578 seconds)
  done (took 52.004136608 seconds)
done (took 747.204191801 seconds)
SAVING RESULT...
DONE!
