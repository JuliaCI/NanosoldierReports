cset: moving following pidspec: 2151976
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.351615733 seconds)
loading group "shootout"... done (took 0.892038156 seconds)
loading group "string"... done (took 0.235742043 seconds)
loading group "linalg"... done (took 3.410163426 seconds)
loading group "parallel"... done (took 0.025024379 seconds)
loading group "find"... done (took 1.32524707 seconds)
loading group "tuple"... done (took 0.82267938 seconds)
loading group "union"... done (took 3.528027933 seconds)
loading group "dates"... done (took 0.168048224 seconds)
loading group "micro"... done (took 0.064259784 seconds)
loading group "simd"... done (took 0.390675766 seconds)
loading group "io"... done (took 1.486040622 seconds)
loading group "random"... done (took 2.60697259 seconds)
loading group "problem"... done (took 1.219233564 seconds)
loading group "array"... done (took 4.755776151 seconds)
loading group "misc"... done (took 1.21868359 seconds)
loading group "scalar"... done (took 3.825328559 seconds)
loading group "sort"... done (took 0.335586453 seconds)
loading group "sparse"... done (took 3.739587813 seconds)
loading group "collection"... done (took 6.53990357 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.534520272 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.085787902 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.289907364 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.082911279 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.287373842 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.090785482 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.094398788 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.079846009 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.215770198 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.174235563 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.234452401 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.409542728 seconds)
done (took 5.41911998 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.337164606 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.034733947 seconds)
    (2/2) benchmarking "String"...
    done (took 0.134149979 seconds)
  done (took 0.862318157 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.145371593 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.0179608 seconds)
    (3/3) benchmarking "different"...
    done (took 0.025608172 seconds)
  done (took 0.869921049 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.023210761 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.10938944 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.025525781 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.026227911 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.026035438 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.024958309 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.025929956 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.025980801 seconds)
  done (took 0.966643705 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.03152234 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.026580706 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.024494055 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.025779435 seconds)
  done (took 0.799326436 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.024051367 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.097143954 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.030206408 seconds)
    (4/4) benchmarking "different"...
    done (took 0.030464997 seconds)
  done (took 0.85502455 seconds)
done (took 5.38655424 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.209697576 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.817412694 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.939100503 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.188281335 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.362596906 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.332422249 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.082311084 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.240574228 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.159261764 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.037674101 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.194092302 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.039616448 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.538112146 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.588259031 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.030335964 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.157687892 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.602683199 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.039887172 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.074817033 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.242676173 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.036126607 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.041623751 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.047682405 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.030071137 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.135586887 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.139801444 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.62745587 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.066834422 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.027638541 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.05339096 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.029439763 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.030983371 seconds)
  done (took 9.877205906 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.159740832 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.147104462 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.025013887 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.060373334 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.055935761 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.026746776 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.032594706 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.025057888 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.044773892 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.093187509 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.049590239 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.171068529 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.024811038 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.028471791 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.150521045 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.12424796 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.040767375 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.041476237 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.026215369 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.041003908 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.053366514 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.037082147 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.035191352 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.035162609 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.072186964 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.096036716 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.043927184 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.068079165 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.024138541 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.036650482 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.055795557 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.066100139 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.024993875 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.0241117 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.069981429 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.043298543 seconds)
  done (took 2.904068923 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.882506108 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.123063135 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.148533785 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.195946309 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.0759382 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.054553977 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.189688333 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.083818737 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.060540483 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.028310842 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.213489447 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.693528621 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.175321629 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.395666847 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.028929933 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.286701755 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.950446014 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.995967759 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.026004267 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.026458232 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.135142083 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.028187914 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.174135563 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.137050675 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.141101818 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.724450564 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.029361105 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.02728974 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.055133897 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.144006075 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.022807873 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.099166967 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.050755282 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.027981617 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.603387874 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.025540332 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.023745809 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.047707492 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.059789489 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.025230465 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.026776513 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.036206455 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.0252501 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.077471496 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.036322219 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.512859981 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.027962867 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.691075437 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 4.902647914 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.03268881 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.029891897 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.06724445 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.02316809 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.026930519 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.568714722 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.093967155 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.025480701 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.312542424 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.027325111 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.02755 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.049958538 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.058900427 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.026005073 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.026946592 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.028569657 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.042638038 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.105907847 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.034238625 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.044874262 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.023377599 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.02431707 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.023225208 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.42642498 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.031204526 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.131006468 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.022759671 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.0291834 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.025710731 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.025172786 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.066263903 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.053630458 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.051226738 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.030791658 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.027597029 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.026043174 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.548669219 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.993725382 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.026175645 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.027705126 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.548448517 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.023614117 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.025974026 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.027560372 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.047274497 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.026707361 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.022320272 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.060549418 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.026715251 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.131738017 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.298266407 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.027256119 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.022937805 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.715555214 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.028182321 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.058743464 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.07702267 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.024848146 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.060200326 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.025237777 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.022672541 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.029150783 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.022674595 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.049237927 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.024174872 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.024709199 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.02426417 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.025414448 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.02760202 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.026255933 seconds)
  done (took 25.403252558 seconds)
done (took 40.77075202 seconds)
(4/20) benchmarking "parallel"...
done (took 0.855191983 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.218053871 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.055751468 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.023447069 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.168202228 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.048369389 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.14066989 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.17816963 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.131209888 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.048672663 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.048955607 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.048799306 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.186247017 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.195497785 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.04969763 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.123792935 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.191855064 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.048990422 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.022609185 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.049384738 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.049446865 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.048826354 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.022183591 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.047519304 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.048708046 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.119408858 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.046712034 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.021782535 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.118431423 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.048209785 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.121195147 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.04852418 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.047798115 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.048380708 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.119863722 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.050515785 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.122842055 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.023019284 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.050528738 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.05043903 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.05189904 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.052526409 seconds)
  done (took 4.159382156 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.050260201 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.042803046 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.06113087 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.020551166 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.031393203 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.04307688 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.020398905 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.045782404 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.065386471 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.046095677 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.045429372 seconds)
  done (took 1.321449154 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.046901104 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.048438297 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.057864493 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.022261821 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.03495449 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.045669893 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.020951645 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.043893221 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.060325918 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.046674131 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.043595407 seconds)
  done (took 1.294508583 seconds)
done (took 7.561700015 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.155190756 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.126861619 seconds)
  done (took 1.078605316 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.600176613 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.217381538 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.133721185 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.249683926 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.126215065 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.159099069 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 5.131410379 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.158456708 seconds)
  done (took 7.612422472 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.091516536 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.153849296 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.028854894 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.026434307 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.026501094 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.026562922 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.028731319 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.027489122 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.026345676 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.028858608 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.029016703 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.026445423 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.027073822 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.029039816 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.027115128 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.027757856 seconds)
  done (took 1.577988148 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.028985088 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.027568899 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.028738842 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.018534276 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.029866704 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.028223909 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.029148391 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.030318188 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.028323053 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.028539785 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.026089304 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.029195953 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.028517669 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.027716386 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.030663504 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.01888159 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.030484949 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.029714402 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.031654855 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.029388984 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.02844439 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.026753371 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.030928428 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.028899603 seconds)
  done (took 1.489284477 seconds)
done (took 12.552906741 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.141587223 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.033107701 seconds)
  done (took 0.972639762 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.130998036 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.131636759 seconds)
  done (took 1.081786225 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.028754833 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.017833562 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.033891658 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.026239566 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.018273644 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.017743275 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.03257955 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.018281961 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.017830783 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.018023405 seconds)
  done (took 1.05564852 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.019791865 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.023676451 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.021569902 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.020687018 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.022892276 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.018851107 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.021339912 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.019367398 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.024785029 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.017947782 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.021446245 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.041165074 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.021661915 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.042207344 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.021791232 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.022094502 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.023416491 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.021348098 seconds)
  done (took 1.228414341 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.018616329 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.01919736 seconds)
  done (took 0.868609372 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.020868153 seconds)
    (2/7) benchmarking "second"...
    done (took 0.01841621 seconds)
    (3/7) benchmarking "month"...
    done (took 0.020258219 seconds)
    (4/7) benchmarking "year"...
    done (took 0.020558362 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.018711032 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.018324368 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.018922047 seconds)
  done (took 0.949556634 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.421837592 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.096127005 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.33905926 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.02700379 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.039061021 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.256475351 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.024068559 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.028300883 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.027721395 seconds)
  done (took 2.060297779 seconds)
done (took 9.038023448 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.047352299 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.152208846 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.157078709 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.461656558 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.036561776 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.024847187 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.060216156 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.23250269 seconds)
done (took 2.004003196 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.291609956 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.371693541 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.215303207 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.024607026 seconds)
  done (took 2.438486963 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.343109598 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.15305575 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.035620394 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.027107601 seconds)
  done (took 1.417082288 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.023204918 seconds)
    (2/2) benchmarking "read"...
    done (took 0.029903977 seconds)
  done (took 0.88127966 seconds)
done (took 5.864587459 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.031627284 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.018654672 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.028836027 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.020307914 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.019950661 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.019337952 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.019223303 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.020207575 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.018249815 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.020484524 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.020296244 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020413888 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.020167867 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020183219 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.019620768 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020427883 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.018467979 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.020100352 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020130409 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.020059097 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.019110595 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.02129479 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.020527259 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.021205389 seconds)
  done (took 1.320056094 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.041412502 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.025182703 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.0254207 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.025300709 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.026835047 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.025684873 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.025775057 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.025360883 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.025359573 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.023659268 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.026057298 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.026489357 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.024064905 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.027021226 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.025089139 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.027445794 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.026349713 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.026411466 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.024507359 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.026232881 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.025048125 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.025517895 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.02672794 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.025666516 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.026316054 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.02624619 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.024293577 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.026010501 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.025462804 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.025801542 seconds)
  done (took 1.615386254 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.024395358 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.016641855 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.016904965 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.027939775 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.016689392 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.016898598 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.017410871 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.016626895 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.017008224 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.017788675 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.017259738 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.016741539 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.01743492 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.016583091 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.017087703 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.017545403 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.022591729 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.038943357 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.017055797 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.016379943 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.021621509 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.01684729 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.016444004 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.016438697 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.017015752 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.017124582 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.017089403 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.017597713 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.016721173 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.017366671 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.017693162 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.02354825 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.024303131 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.017498222 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.029067395 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.023092594 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.017516719 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.021563178 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.017535954 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.016507241 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.016612501 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.016519557 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.016885822 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.016935436 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.028768989 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.017281977 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.018042879 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.017559028 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.017311724 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.017040697 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.017319326 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.018898481 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.023502882 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.018331449 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.01711865 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.01847212 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.017517701 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.018456089 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.018121242 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.01813325 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.018146908 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.023594542 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.019571624 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.018959633 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.044681339 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.019504425 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.030356367 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.017847988 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.018128591 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.022973725 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.018568167 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.043752786 seconds)
  done (took 2.257186676 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.029552306 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.027033189 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.037848762 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.027646215 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.020966399 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.01825087 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.021587332 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018458385 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.028315826 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.02136858 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.017398515 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.020311315 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.026785919 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.021263868 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.018835427 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.027570396 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.021478043 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.020692313 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.017936371 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.021045619 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.01833591 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.02035885 seconds)
  done (took 1.3391876 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.116150197 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.026848812 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.0769514 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.024840929 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.023237555 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.023224874 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.025619061 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.026350771 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.027120786 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.027555784 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.027431397 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.026552401 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.023441488 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.02722827 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.027529635 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.027543799 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.026591012 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.027101973 seconds)
  done (took 1.435801698 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.041333012 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.026489019 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.055223837 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.026177148 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.026130012 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.022351608 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.029885264 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.028311993 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.02280185 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.026369441 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.028476735 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.022506168 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.022090401 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.026255292 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.022678161 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.026702346 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.022692136 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.026763955 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.029138153 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.030543337 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.030260297 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.028491751 seconds)
  done (took 1.451698192 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.040711698 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.025033241 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.044625244 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.026863773 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.018566604 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.018556126 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.027378685 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.025678729 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.026141116 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.02421852 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.024789753 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.017378242 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.026781705 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.024806569 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.027123621 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.024861637 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.023943695 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.025320296 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.024182485 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.017811113 seconds)
  done (took 1.359545683 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.132093786 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.019843351 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.019339586 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.023937735 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.019571308 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.019671961 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.02409071 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.019559183 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.019495695 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.046355281 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.020041633 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.019859665 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.024522257 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.023048584 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.020237879 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.024857129 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.024518288 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.024749328 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.020174175 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.020300915 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.046548531 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.020010193 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.02475652 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.020141849 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.020413952 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.020250481 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.020375734 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.023382209 seconds)
  done (took 1.583099286 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.041222501 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.016931397 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.017171415 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.021186542 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.021372606 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.02779913 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.021507707 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.021299336 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.017064272 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.017214736 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.019304107 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.016853409 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.016879377 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.029075134 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.017300905 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.019366854 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.026789439 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.020737186 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.029340552 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.027389121 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.01895575 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.026396299 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.019499792 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.017187778 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.027430919 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.018722455 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.020331653 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.021048681 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.01807666 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.016055518 seconds)
  done (took 1.495316915 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.030322377 seconds)
    (2/2) benchmarking "in"...
    done (took 0.028785854 seconds)
  done (took 0.875200841 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.021496638 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.038629727 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.016821309 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.032614017 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.029846364 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.022335598 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.028963333 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.030424566 seconds)
  done (took 1.054315397 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.130179603 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.155433388 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.019134439 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.019253372 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.129238518 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.088226713 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.14022037 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.03213516 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.033523446 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.022175015 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.018928574 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.140982615 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.018740726 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.033313635 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020350702 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.029832244 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.027545219 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.038656206 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.033987317 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.017603304 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.03191773 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.018552642 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.017456875 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.018295699 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.018769877 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.025348139 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.034758778 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.031259821 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.026760594 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.01684494 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.037960951 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.017327699 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.018029771 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.02666281 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.128660014 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.017463917 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.057728003 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.017575372 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.021569923 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.01708909 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.029913936 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.038871218 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.032244852 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.03597106 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.018620533 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.019118473 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.017523405 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.019476487 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.023091209 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.029081599 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.01875966 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.02797805 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.018599842 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.020446083 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.031207947 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.019015892 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.023062604 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.02905081 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.0350433 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.031370454 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.034413498 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.03801074 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.029806349 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.027284537 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.019651824 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.042553152 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.020316189 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.034577283 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.036132802 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.019715677 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.032752512 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.01843497 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.017700087 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.018655224 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.057900403 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.020180984 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.019603576 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.018903973 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.018531986 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.020010648 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.02974387 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.023044383 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.02687037 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021253392 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.037106376 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.029590487 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.018854063 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.025641908 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.038706145 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.023553792 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.018845485 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.038267829 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.023786573 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.018443836 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.037509173 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.028770566 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.019112889 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.018090954 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.022218465 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.032065635 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.019131891 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.016688519 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.026774187 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.019224359 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.129156277 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.022318034 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.026328491 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.017183881 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.027887255 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.023645875 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.018802895 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.016376508 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.02229682 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.018083403 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.016296532 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.027764381 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.018415248 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.033668111 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.025348476 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.033118972 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.03333877 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.028799163 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.034338456 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.017485419 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.016427818 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.037258205 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.028670622 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.019814365 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.037884847 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.017870396 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.028585915 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.017453005 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.018901723 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.027115477 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.016721315 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.01925255 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.017973506 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.023795142 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.019125293 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.019196603 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.024053598 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.027249284 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.031104789 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.019200496 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.02753466 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.018143081 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.035172195 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.028737179 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.024020978 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021526014 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.018954586 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.031758425 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.026844148 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.029433876 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.018712269 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.019620351 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.018821692 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.031609885 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.029288986 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.020213749 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.02708041 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.024074859 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.01951142 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.018613724 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.019526095 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.023150404 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.021925005 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.019285799 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.028042536 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.029155207 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.034827189 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.026090865 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.029153691 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.018017704 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.018839293 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.02063128 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.018748807 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.024510014 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.029400514 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.036522283 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.031855379 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.041505309 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.018534487 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.028748586 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.020042255 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.036971113 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.032887198 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.019322484 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.022829011 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.017570668 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.02030456 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.028209282 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.029977126 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.032599631 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.033668474 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.022719244 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.022508829 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.017312006 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.033112419 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.018538997 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.026922881 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.026987195 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.023343557 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.017774546 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.019874133 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.027794386 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.023357771 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.019022617 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.035272609 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.025640941 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.017925753 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.032670753 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.017677437 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.029381903 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.017860085 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.021825064 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.023708601 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.019625014 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.027729035 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.033789515 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.017459335 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.018359115 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.034510732 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.019730153 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.019579007 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.026383597 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.034346465 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.023174995 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.027407996 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.030564571 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.030869736 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.024405911 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.03088282 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.020148087 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.029545243 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.022249637 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.032229826 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.018973102 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.039088574 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.01813327 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.035915662 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.019501199 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.031883272 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.019441502 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.029747651 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.020072402 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.039242459 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.020849934 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.02001885 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.03210307 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.017817745 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.029225539 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.018535629 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.02556033 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.027229427 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.029814148 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.020971494 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.029712767 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.020468839 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.028983366 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.025090133 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.028854882 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.028314466 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.023796427 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.018232909 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.027341678 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.030254602 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.027234739 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.020130469 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.172212505 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.018863316 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.028865992 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.01931229 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.018758188 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.026414428 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.023071456 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.024595865 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.018680413 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.018779607 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.018699815 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.026332222 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.027869551 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.037157768 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.027340192 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.026332586 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.028039188 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.0177911 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.033979855 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.017069501 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.024995567 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.016314764 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.022775021 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.026568837 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.017033502 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.037047488 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.01881704 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.026352592 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.030091911 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.026300665 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.021431629 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.035804891 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.019749949 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.026314565 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.025640747 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.022806704 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.025678366 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.019675479 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.028018618 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.028912243 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.029908988 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.018484123 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.026249406 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.027788206 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.018816307 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.024852899 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.01879546 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.026772814 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.019345939 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.016961067 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.023054906 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.029283866 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.02346952 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.023722423 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.017173308 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.015994915 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.016989146 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.023789066 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.023186832 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.026728633 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.03412544 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.016828644 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.018153338 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.017270352 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.021990017 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.036611303 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.027672823 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.026163213 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.023335265 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.016864018 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.018279237 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.018354618 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.01681056 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.019301922 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.016328836 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.01682548 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.028069493 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.01850694 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.022279691 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.017204292 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.017787002 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.027354415 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.020858257 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.017261197 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.024340022 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.016817432 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.022687461 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.016301298 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.01823582 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.02203651 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.016950211 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.021461333 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.027828578 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.034915065 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.025006433 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.026763488 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.017953038 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.025377127 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.033830307 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.024518771 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.017873073 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.026811123 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.016706942 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.037548413 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.02773337 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.026660881 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.027880185 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.018227459 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.035177167 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.022581408 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.027802599 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.033387871 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.018587995 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.025091198 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.0171782 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.033600224 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.022364168 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.016937793 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.02633834 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.026215669 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.024604007 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.030359152 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.018794912 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.027384228 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.022520494 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.022278425 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.019070988 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.019061705 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.026979051 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.034912031 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.018432424 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.022643179 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.026019601 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.026579848 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.023082423 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.030262879 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.025867828 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.018560531 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.019383633 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.022338473 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.018231559 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.030739914 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.018125906 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.023053468 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.023373956 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.017644377 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.025187843 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.035195208 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.0281539 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.02834057 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.017944492 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.017211309 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.037338602 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.022422586 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.021389056 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.026748247 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.028727035 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.031295168 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.028269013 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.036515166 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.01861441 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.024424381 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.031216001 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.019078463 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.017793001 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.021943604 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.019388947 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.027877956 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.028946163 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.026596488 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019917449 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.025691173 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.032810448 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.019450864 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.023255825 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.023822862 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.018884525 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.028852979 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.026628897 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.027984855 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.019746215 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.017727645 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.022010661 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.027144166 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.026405534 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.027887153 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.018935944 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.155027214 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.032373757 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.025475177 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021064847 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.017556782 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021111997 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.027658148 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.024169558 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.018165747 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.023554391 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.022786259 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.026683235 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.028635645 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.024322832 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.018311699 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.037085567 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.027406024 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.027745723 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.019913142 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.019627543 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.018449849 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.017949422 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.029960653 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.017975368 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.019382922 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.023340073 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.019668104 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.036314567 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.026614464 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.036094954 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020324051 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.023108911 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.017592291 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.028029994 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.023324045 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.01837793 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.029378851 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.017375847 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.034824493 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.031051865 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.025504295 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.018033639 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.024170697 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.027642005 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.034591681 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.028720334 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.027737732 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.021311456 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.027926526 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.019933996 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.030075314 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.017918411 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.017086497 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.028714966 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.027153616 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.031118673 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.017903045 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.028710154 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.020050181 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.026512254 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.027554035 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.020122914 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020400898 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.020136972 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.028650774 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.023698765 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.028280672 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.024268794 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.037087799 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.018923639 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.029440756 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.026705688 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.029256813 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.032297476 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.030187016 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.026514629 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.017854071 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.02560252 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.027237013 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.019399129 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.023840761 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.021461326 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.041289941 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.019281306 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.019304427 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.032763961 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.026296881 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.018136133 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.026193117 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.02335686 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.028411295 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.018484927 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.029181811 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.024422101 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.019443245 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.024116429 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.023902368 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.01730098 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.017921183 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.018293145 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.027949138 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.023121391 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.017783506 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.038173776 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.019303237 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.026722597 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.029883302 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.025262168 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.01960233 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.017286371 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.018528942 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.032276113 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.034703512 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.022541209 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.02724557 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.019706162 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.027208318 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.016739308 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.026907781 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.026781192 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.181104334 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.016980823 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.017094328 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.033067234 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.033887795 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.023266601 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.036431263 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.027564499 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.019437169 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.041147369 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.027698647 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.018527885 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.029804028 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019468728 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.017337313 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.017151494 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.019114753 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.030264894 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.017749099 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.019540663 seconds)
  done (took 16.858346046 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.062177605 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.017735951 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.016431421 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.016461165 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.023279955 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.017312014 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.016252462 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.017669294 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.018467247 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.019760481 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.017519596 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.017482866 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.022821521 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.032727586 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.025379064 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.021052137 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.017564318 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.018778824 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.017416195 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.018539092 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.023158516 seconds)
  done (took 1.318608288 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.020679628 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.021165721 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.020858985 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.021241791 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.0203892 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.017383597 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.020928859 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.01749068 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.021410903 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018002622 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.021601052 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.017736004 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.017971399 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.018013029 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017955409 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.019033174 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.021558093 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.020834549 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.017894908 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.021027584 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.018462691 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.019925229 seconds)
  done (took 1.301350157 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.018511951 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.017009118 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.025021454 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.015751622 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.015659967 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.018654608 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.015785966 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.020702727 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.020634501 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.020624181 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.025199812 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.017150515 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.016222975 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.022906742 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.016562749 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.016959403 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.070690375 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.016886293 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.016572189 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.015645531 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.017635158 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.02519201 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.016811531 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.016731711 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.021400717 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.019153088 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.016405051 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.018306489 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.016415051 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.021306895 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.017336722 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.01596802 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.02523588 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.024102266 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.020567371 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.021020799 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.017111602 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.016334497 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.015628391 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.016118159 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.025393946 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.017884391 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.017007819 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.017870352 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.027061983 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.017805655 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.017191037 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.026729146 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.016997426 seconds)
  done (took 1.828933548 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.027809763 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.072143796 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.023980991 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.052327115 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.028963805 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.021729589 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.023766959 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.056932642 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.017536198 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.017847575 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.029767284 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.030338867 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.018296337 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.019309102 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.023713289 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.018180228 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.018580475 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.017501815 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.020242286 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.017954528 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.021192972 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.024818207 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.029823737 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.031584799 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.019905654 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.017936173 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.018060948 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.019268439 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.02918199 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.02067299 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.019459296 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.019761302 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.028875357 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.025292023 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.018273758 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.018659507 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.030558061 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.019233258 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.01888654 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.017358288 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.01833672 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.019340736 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.023966971 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.030866262 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.020325843 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.026969287 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.019766432 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.017920304 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.03199209 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.019659399 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.022896595 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.032620013 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.020803816 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.020003935 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.020494888 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.029547772 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.018815147 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.017948013 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.019147849 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.030729524 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.017612087 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.019946071 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.030683957 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.017904273 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.020975565 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.03044405 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.025000212 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.019348861 seconds)
  done (took 2.625594594 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.026993744 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.022820308 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.026782721 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.02710843 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.022837106 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.023145958 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.023391629 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.023139692 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.023096755 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.025823951 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.023900421 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.137595636 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.021020546 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.024512387 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.023449296 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.023010551 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.022875384 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.022875436 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.022840254 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.02360226 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.024063712 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.028247767 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.023976579 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.028681521 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.060533699 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.021883437 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.024728086 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.024833975 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.029510878 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.024975183 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.031897938 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.024790165 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.023747508 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.027762307 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.029544296 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.02276968 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.016279341 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.022941587 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.023787069 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.023791527 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.021154104 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.029479304 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.024130382 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.020690392 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.02351245 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.023170557 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.027682656 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.029788928 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.024272526 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.026121134 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.023900783 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.028883308 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.024180464 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.024337416 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.028786968 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.065242575 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.030433286 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.030068917 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.025619413 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.031096552 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.030925279 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.039508714 seconds)
  done (took 2.618220634 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.030015242 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.021290515 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.026877046 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.015915996 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.015736366 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.021689298 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.015818228 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.016080004 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.022306045 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.022745284 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.024294976 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.0233093 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025219078 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.024446032 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.023349939 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.025161152 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.023416953 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.023406868 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.022896219 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.02246887 seconds)
  done (took 1.310824507 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.019260793 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.02121323 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.016628372 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.020464151 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.016673733 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.019871145 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.016481279 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016795381 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.016917414 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016884246 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.021262262 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.021718683 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017646677 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.023901501 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.020920332 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.020896536 seconds)
  done (took 1.152508463 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.020265498 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.025843889 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.126900567 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.0178857 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.01929468 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.016630195 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.017384226 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.015718847 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.018253083 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.032071924 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.017351748 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.020075255 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.018001903 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.016668733 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.017141655 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.01993001 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.0190368 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.017190536 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.017486902 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.124692516 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.03100869 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.0186545 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.020086691 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.018645398 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.019815805 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.02966583 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.018225731 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.019064387 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.016135992 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.019116856 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.018659814 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.026810514 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.019558754 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.01802445 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.016646416 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.01755198 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.017865641 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.019698025 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.019416826 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.017401838 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.015718909 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.019191164 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.018219017 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.018846316 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.019568896 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.020308255 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.019062513 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.02687695 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.01748563 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.019236918 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.017530728 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.018576591 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.017619106 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.024146615 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.018939661 seconds)
  done (took 2.150406577 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.037635305 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.024764772 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.01682759 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.016539972 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.023030699 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.024439596 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.023283076 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.023757523 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.0243247 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.016546468 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.02598585 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.023860111 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.025849858 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.024448816 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.025325898 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.023981795 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.016431529 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.024368229 seconds)
  done (took 1.307296573 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.023876387 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.020748363 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.02166283 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.018276604 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.018270502 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.022170375 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.016754656 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.018099197 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.017692608 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.017734231 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.017769986 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.01725114 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.0172827 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.017199898 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.020882176 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017537297 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.017126434 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016001248 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.017310185 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.015919337 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.02214999 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.016846682 seconds)
  done (took 1.261093967 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.187514541 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.148673588 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.040864999 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.03656378 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.028002546 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.056300806 seconds)
  done (took 1.360194983 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.057350388 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027205731 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.024093003 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.052553104 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02331673 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.021869494 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.021985102 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.021893714 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024160516 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.030317479 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022070132 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024407695 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02471452 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026390614 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02308921 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022389714 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02133975 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.021149075 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023224284 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.034222937 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02131281 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024166644 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.021646376 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.021381239 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.021983941 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027087552 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025330952 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.031738117 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022395559 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02494077 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023272778 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022262852 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024644972 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.030431962 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.022988095 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024160527 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02105706 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.034622616 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023014803 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.0267568 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.023770124 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023718671 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024743751 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.024035502 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023680272 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.021361345 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023925745 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.021600621 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.021606462 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.036832063 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023413654 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027061334 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023995594 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024825286 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024889603 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.036347076 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.030291447 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02635083 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023294028 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029970736 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.025616217 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023111623 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028518704 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.032889587 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025168399 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028565508 seconds)
  done (took 2.591664559 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.030100782 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.050939735 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.021165168 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.030166154 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.025994552 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.021505403 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.021484004 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.021377354 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.021384774 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024049718 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.064692372 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.021691042 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026205707 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026161387 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02167195 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.021390224 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02127379 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.025895725 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024315108 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.037095779 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022249234 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026668846 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026507359 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026689648 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.031088465 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022863189 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.021688465 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.021880546 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.021956983 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.021815651 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.024468209 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.021681355 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.025606607 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.023246974 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025445109 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.021076724 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.021020483 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.024731089 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022121878 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023067267 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02679377 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.034817252 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.021744209 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.021228942 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.029808828 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.021290963 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.021301028 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023450295 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.021794425 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024270715 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.0311319 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.031130604 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.032008416 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027611128 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022443694 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022332272 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.021982136 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022395828 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022698841 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023735042 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027458563 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02292887 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.040380982 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023964899 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024193246 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029454937 seconds)
  done (took 2.598491134 seconds)
done (took 56.912145049 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.223344257 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.174402249 seconds)
  done (took 1.270934308 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.138160296 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.137875314 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.170572616 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.027104293 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.086398149 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.182781586 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.128524781 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.027627486 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.026271322 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.027833341 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.026920843 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.028953422 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.029134437 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.027812642 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.097028243 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.028101395 seconds)
  done (took 2.083359964 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.077191735 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.288808114 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.075467965 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.026552255 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.115599342 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.033962636 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.028359454 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.033174946 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.033315323 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.027205654 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.077757307 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.048705583 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.029545526 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.030143509 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.025064724 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.028297323 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.029068404 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.030343331 seconds)
  done (took 1.943006926 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.092833397 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.035742219 seconds)
  done (took 1.010045637 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.14305775 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.065425994 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.113207128 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.323742599 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.096557001 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.297278635 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.103892574 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.101288611 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.07174064 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.097925281 seconds)
  done (took 2.302649057 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.06310383 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.060223956 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.295749797 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.060947116 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.040204727 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.03334514 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.034289033 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.034058389 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.034658948 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.033468213 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.082210369 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.03188211 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.027878733 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.076470633 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.050314799 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.063898973 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.025979622 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.031880002 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.036221172 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.025949459 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.031000264 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.032309579 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.136582333 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.031132873 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.049236268 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.028024484 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.029753716 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.030287117 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.030062953 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.031387988 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.032557309 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.054261222 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.031390363 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.03885386 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.029258181 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.048726963 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.025143104 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.048391514 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.029276027 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.026747612 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.029382541 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.033346852 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.02777073 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.033552656 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.034395335 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.033379795 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.033352369 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.027453931 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.035168046 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.031558871 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.029579903 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.032995335 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.033313641 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.03250767 seconds)
  done (took 3.278043502 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.080571449 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.071929778 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.027494523 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.080174335 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070481759 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.026811588 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.085120211 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.065325292 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.081753613 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.026955814 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.026198707 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.026184069 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.033213704 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.036891897 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.077619917 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.070011514 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.026109525 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.024739054 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.071033327 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.07150866 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.02437856 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.080615417 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.070353712 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.068827757 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.023539863 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.025014237 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.024608924 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.025344008 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.032430892 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.032523396 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.025406168 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.03454045 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.036890479 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.032661228 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.024926821 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.026097136 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.02650822 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.034928952 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.034831699 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.034559629 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.032748043 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02618706 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.026655727 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.027009908 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.027503609 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.026040963 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.035142657 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.034240397 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.035223676 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.027326282 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.027223106 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.026207017 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.027125923 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.032861732 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.032798541 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.034677183 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.036126947 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.026422789 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.026033217 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.027870575 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.036938629 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.034789108 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.033829903 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.027197119 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.034169788 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.026498002 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.035467725 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.038426376 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.025460811 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.025796236 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.025333698 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.025514195 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.025904747 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.031778419 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.03189844 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.025983691 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.025745919 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.025716044 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.033261028 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.03165053 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.024030103 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.030991196 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023076754 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023868303 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.024565261 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.024707203 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.032011466 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.03196825 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.024409025 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.023977309 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.024582183 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.024720257 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.02421081 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.03274171 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.032635925 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.031883783 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.032135436 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.024852481 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.034007057 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.032403721 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024781281 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.031509651 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.025023733 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.026225969 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.026032916 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.033222495 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.032348332 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.034120588 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.025747025 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.025628595 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.034233446 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.037564629 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.026713412 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.034194235 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.036668492 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.034634651 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.027204327 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.03807461 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.027563695 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.036609557 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.027435089 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.035570925 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.026938924 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.03438946 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.026552088 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.025568024 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.026643119 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.036928911 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.028162512 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.027395383 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.028245699 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.027865314 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.034168184 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.037320476 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.028262871 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.035775275 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.035564087 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.027940947 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.035645951 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.027173441 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.036892224 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.028194652 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.027799898 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.02656281 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.037942899 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.027185815 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.027873235 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.026574991 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.036013906 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.026360659 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.035477663 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.03326447 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.025477786 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.036086847 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.035528488 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.032698138 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.034803802 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.025366924 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.024464636 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023922107 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.02428087 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.032816759 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.03424761 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.025091334 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.024279057 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.030512436 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.033087487 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.02367423 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.030844478 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.031348074 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.031250772 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.024288792 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.024184743 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.034203296 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.035271378 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.031487966 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.033450237 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.032694877 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.024365136 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.032348151 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.03490292 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02589563 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.040210967 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.026780087 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.038242134 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.036771139 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.033558473 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.036233455 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.037939768 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.036415727 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.036917322 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.03889345 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.027359075 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.0272819 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.03500049 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.02761764 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.027619499 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.181130869 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.027229682 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.027235483 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.038593772 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.026838001 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.034585434 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.026716825 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.033777679 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.027367663 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.027361428 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.03757235 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.027850527 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.027683225 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.032589209 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.027154124 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.032377248 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.035522447 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.032752259 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.026685237 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.026909706 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.034311527 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.033444893 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.026014379 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.025861297 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.026670651 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.03365512 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.033173555 seconds)
  done (took 8.449649011 seconds)
done (took 21.226035865 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.14228226 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.077478787 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.13938918 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.083737621 seconds)
  done (took 1.343840737 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.058090349 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.021274902 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.145506156 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.15928221 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.023338416 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.142291972 seconds)
  done (took 1.444550097 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.254658164 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.152770757 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.158029024 seconds)
  done (took 1.488102408 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.153372659 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.288553009 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.577707417 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.149801824 seconds)
  done (took 2.074574817 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.171813506 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.162066773 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.031731824 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.178630877 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.039086316 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.016655086 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.099817862 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.017357765 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.050591124 seconds)
  done (took 1.735796166 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.096224552 seconds)
done (took 9.06825112 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.211501345 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.144678785 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.038316143 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.031712778 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.134422982 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.138108005 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.15533539 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.033061098 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.144102083 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.314308933 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.186758285 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.050535587 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.15338178 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.044966784 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.265935715 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.034061879 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.03191496 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.026050912 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.149146019 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.137418735 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.245072182 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.030215564 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.103936224 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.040141668 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.112499157 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.084976297 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.197076117 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.317252576 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.277741526 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.033275821 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.123820619 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.043086506 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.119132665 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.129388697 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.134851339 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.053560172 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.023151194 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.252083177 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.111155424 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.335382683 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.17209542 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.028870124 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.144733623 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.027221572 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.02104145 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.144145585 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.034634419 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.028599121 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.044977534 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.02849024 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.039276471 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.028800181 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.132937499 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.025486724 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.09673442 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.136832201 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.190344807 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.110422318 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.028908839 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.039755189 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.031747807 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.162932317 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.039975447 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.028379893 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.035568845 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.022163523 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.13725367 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.043662124 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.022509422 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.03393016 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.031041463 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.100956533 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.151921952 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.0667183 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.033889784 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.110778799 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.101024053 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.04898263 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.050240717 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.030691537 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.020197568 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.195273426 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.027522988 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.040866407 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.029259556 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.056977771 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.021999522 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.038041184 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.172299653 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.153998963 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.09300642 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.023072608 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.248131203 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.02340456 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.047735934 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.023088912 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.022235838 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.189539495 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.022020097 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.022199097 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.033115185 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.031473174 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.023908752 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.170346739 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.107489367 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.030512984 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.02893319 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.021948097 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.027542614 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.023300657 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.023360785 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.02307944 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.10286451 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.040541532 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.022200274 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.108457697 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.124052122 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.033226782 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.039568569 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.260929264 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.027043979 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.034467272 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.031497507 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.147460558 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.029981747 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.142571764 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.024247926 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.044551973 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.120361746 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.102508379 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.108408435 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.021367928 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.143763755 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.031875597 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.021274544 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.029862015 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.05094544 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.032500457 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.03983458 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.030949121 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.145857448 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.033566203 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.028840317 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.126054922 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.021544188 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.113765399 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.106699441 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.139725887 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.027283127 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.032003221 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.097789807 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.045866787 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.052944067 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.044157644 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.027201718 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.021814262 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.02157899 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.036266892 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.021193969 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.022237948 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.036195182 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.029406689 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.039231262 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.248813602 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.03197882 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.025299893 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.257250149 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.034381839 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.096090005 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.043131561 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.021852527 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.104968995 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.022842256 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.04366238 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.089336574 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.022231832 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.102000119 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.02173359 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.02109126 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.027176902 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.022643181 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.032310537 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.036252394 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.0221126 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.035480753 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.03019448 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.021390447 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.103274387 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.024225596 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.191214134 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.104216877 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.100342615 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.022506435 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.042284771 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.022064861 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.142146794 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.022725765 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.074458834 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.119593768 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.03855277 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.044557504 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.023632121 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.102963686 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.035596953 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.026736184 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.108066132 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.137170761 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.094285854 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.028702508 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.249046703 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.031694576 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.022287253 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.028127095 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.032125275 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.022869016 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.104612607 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.026438984 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.020277519 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.020620724 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.022857748 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.019646214 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.046650785 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.020856871 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.030258992 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.027598503 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.024323215 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.023013879 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.019887353 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.029466256 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.104724956 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.123912924 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.027963362 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.041215694 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.034059013 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.033652917 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.071511379 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.029829141 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.164049305 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.022947271 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.03320951 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.04393646 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.021478705 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.027436757 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.028210523 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.040267733 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.025919039 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.023190721 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.031842918 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.022110007 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.022338316 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.021953614 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.022444742 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.032580287 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.023695316 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.021734315 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.021687777 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.03924327 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.026729373 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.026127882 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.031365164 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.040782279 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.485279119 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.023702296 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.024047879 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.034711851 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.027519603 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.021886392 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.023403523 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.021253678 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.023403814 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.021386013 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.021087539 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.050645173 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.028229851 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.023457689 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.044820639 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.029685177 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.033381999 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.124295976 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.041071609 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.028903954 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.022163662 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.265926641 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.102646207 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.045245059 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.042791327 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.022736168 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.034336289 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.023697233 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.023496338 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.022709271 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.053302731 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.028669261 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.023027276 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.02296024 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.022588404 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.073587176 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.03212889 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.022311547 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.032075307 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.022588598 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.022791597 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.05169428 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.023880626 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.022910564 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.042438407 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.0368827 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.112285389 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.035801103 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.026553643 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.075605713 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.02125561 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.021891637 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.022562169 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.1101962 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.034945422 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.023319998 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.022163138 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.030958413 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.032613705 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.078398735 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.0283973 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.025389915 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.030138882 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.020665867 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.021244205 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.048393419 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.051873066 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.023462028 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.025925767 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.021452473 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.021893655 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.100448077 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.029701346 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.027218256 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.11554264 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.024179673 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.030182543 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.020810991 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.496645755 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.027631554 seconds)
  done (took 23.366432429 seconds)
done (took 24.277560411 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.163598853 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.035084995 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.042523085 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.030067106 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.033366097 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.034467769 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.046586439 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.032593112 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.035504324 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.042684374 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.149244082 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.022475758 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.030711555 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.037384275 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.030828155 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.034131412 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.032880071 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.033613757 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.022664678 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.035944166 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.035906631 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.035324203 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.032855475 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.035930403 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.023556932 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.03212037 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.154448227 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.036827208 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.031852352 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.030963314 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.02990079 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.045521212 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.031536213 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.030817915 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.033220022 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.028389903 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.033404559 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.029349665 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.150114104 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.028337372 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.022403016 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.033627123 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.028398667 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.029233006 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.029957484 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.032171982 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.027279923 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.035940347 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.030673443 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.042179529 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.148434938 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.030110138 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.031357753 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.030447301 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.027544581 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.031351636 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.032066493 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.031952026 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.02609617 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.040628965 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.029519106 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.02865844 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.020928582 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.030785163 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.029531222 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.029651354 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.020316249 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.029979705 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.021567557 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.02796837 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.030195115 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.030037062 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.028394929 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.02635627 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.030423573 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.023029196 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.031547022 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.04333035 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.029979943 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.031587155 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.022340549 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.028123883 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.027625423 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.022088848 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.03079424 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.032939256 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.03086108 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.02169548 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.029982184 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.042034992 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.029262994 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.021045339 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.032760046 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.030226308 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.030224486 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.021090613 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.029535885 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.029421807 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.028877375 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.020623057 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.019623231 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.029346588 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.025614819 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.029345205 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.021617737 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.030568404 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.030641403 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.020525415 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.029623541 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.028232232 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.029576466 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.031693717 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.030301007 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.033006058 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.02199927 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.020569758 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.031689056 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.02157706 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.030090149 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.029329033 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.02645371 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.028455686 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.020878102 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.028354095 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.029184518 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.0268597 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.02166241 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.021982942 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.021818607 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.030644766 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.02875264 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.019854468 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.020233056 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.029158624 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.029053467 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.028487754 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.029217349 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.029253856 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.021715942 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.027969395 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.027404434 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.03052326 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.030000687 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.021862186 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.029575067 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.030158517 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.031108696 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.027694243 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.031332144 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.023393896 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.031981815 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.030461933 seconds)
done (took 6.218096913 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.08060203 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.068925183 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.182305396 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.145993497 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.036281113 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.036398303 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.026344335 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.041261435 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.028056407 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.047029041 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.04907426 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.046118402 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.162742732 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.044820862 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.02197952 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.03435864 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.02199004 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.048456272 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.147496087 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.049358182 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.066487742 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.020813864 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.038853261 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.042239975 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.03496852 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.041483662 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.04714541 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.022425126 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.039640702 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.038188903 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.048561405 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.024029541 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.022307898 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.042159474 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.038969196 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.030533334 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.020830791 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.028826876 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.035729127 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.022305123 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.068404053 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.042441427 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.029863451 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.029947386 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.023464522 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.036856533 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.021548624 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.028732812 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.035875988 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.028892945 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.035614198 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.039196288 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.023310314 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.038978093 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.019721914 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.028240202 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.027766616 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.020413769 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.021401914 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.020532218 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.020389711 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.023561372 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.034740511 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.041311298 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.026183042 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.029517788 seconds)
  done (took 3.790480714 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.04776798 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.069286319 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.036218034 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.036747117 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.020709925 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.02107697 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.022599755 seconds)
  done (took 1.244326324 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.095915224 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.141009138 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.144030434 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.14824904 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.15875223 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.144482376 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.035387085 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.052631776 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.058474215 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.164837408 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.158517904 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.149808942 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.026020994 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.034409059 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.054346175 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.151513687 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.035383981 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.028907466 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.141354949 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.150093578 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.026884476 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.054041541 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.035808356 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.025416021 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.150801147 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.14404052 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.026442065 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.065393096 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.02436417 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.021948775 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021732756 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.04662587 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.143684403 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.037993992 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.022934744 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.02191792 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.144027193 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.024226661 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.146937288 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.031057619 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.140640334 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.02446417 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.02501785 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.023040132 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.024014071 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.139991396 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.023592921 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.022153589 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.022133747 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.145590038 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.034317534 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.14524549 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.024475878 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.027184281 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.02906603 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.028692363 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.029206148 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.022521672 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.147534549 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.032909373 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.023859983 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.149477618 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.150090884 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.146602492 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.153828828 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.033038224 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.144682626 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.142422201 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.022739461 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.030561427 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.023006785 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.149000764 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.025702099 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.024747433 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.02096393 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.030618882 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.154661108 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.156685681 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.156065448 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.037209085 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.024758131 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.023512407 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.15604798 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.156451067 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.028990035 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.02316282 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.023199612 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.038914656 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.048140969 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.024603874 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.027748177 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.024891248 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.035514155 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.026387497 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.025722632 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.153474752 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.022494527 seconds)
  done (took 8.025444643 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.036851354 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.022846628 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.022736697 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.023435343 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.023833511 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.023771265 seconds)
  done (took 1.23634777 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.062850017 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.023695124 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.023517446 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.023450277 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.04654742 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.133103968 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.137130832 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.024936968 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.040583257 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.036043835 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.135727187 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.13840531 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.138407091 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.024530822 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.137808782 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.036999376 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.138972428 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.029432453 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.034239999 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.024347423 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.034657017 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.024650396 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.024765523 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.154564359 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.018216153 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.035394914 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.033687855 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.035334129 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.034306123 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.024049861 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.023767749 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.01721793 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.032188277 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.023995908 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.137596649 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.034942277 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.023704804 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.019084774 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.027746878 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.018070698 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.141083623 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.025868921 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.028943671 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.019476661 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.024164671 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.033114735 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.018413947 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.032542053 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.136447985 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.019951143 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.019210231 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.023484133 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.017601502 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.018758383 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.03316426 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.023420526 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.018217614 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.137518833 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.025451257 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.034982775 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.024679081 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.018640846 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.025252933 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.018746027 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.029700742 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.01981864 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.035351702 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.025546214 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.025647516 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.024252182 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.019300647 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.023402132 seconds)
  done (took 4.305942152 seconds)
done (took 19.600975209 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.458989168 seconds)
  done (took 1.475318137 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.998914162 seconds)
  done (took 2.034795818 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.050628379 seconds)
  done (took 1.103289903 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.311394091 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.475867212 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.726503542 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.092550134 seconds)
  done (took 2.645814053 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.857943144 seconds)
  done (took 1.949166582 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.227313619 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.186904938 seconds)
  done (took 1.5192617 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.512842657 seconds)
  done (took 1.557389158 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.447918504 seconds)
  done (took 2.534481396 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.202735309 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.138630394 seconds)
  done (took 1.419812057 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.63722286 seconds)
  done (took 1.696541493 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 6.788411663 seconds)
  done (took 7.873438122 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.20226995 seconds)
  done (took 1.341404376 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.256657308 seconds)
  done (took 1.310732289 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.729880555 seconds)
  done (took 1.833095501 seconds)
done (took 31.329634115 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.04727506 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.0408798 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.041811352 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.039114955 seconds)
  done (took 1.282880412 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.033077067 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.029509118 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.031965992 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.032512996 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.029723543 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.031262131 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.032391364 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.028540815 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.028890242 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.028731617 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.02686715 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.028217485 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.030951013 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.027803046 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.030918474 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.032749906 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.027985776 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.028663681 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.030124157 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.027858841 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.031145688 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.028403344 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.028228346 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.029922421 seconds)
  done (took 1.808164981 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.037874192 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.029340894 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.032324793 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.029101505 seconds)
  done (took 1.217035974 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.035026661 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.034419021 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.04237026 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.042901515 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.034614484 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.03549781 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.041789161 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.042072697 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.049629266 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.0453682 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.026060454 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.025884955 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.024552476 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.039344203 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.042030604 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.018558878 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.019931623 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.036199787 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.035071406 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.038377601 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.028261964 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.023529494 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.036128512 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.036530321 seconds)
  done (took 1.941849804 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.039341496 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.021927097 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.039428803 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.049265714 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.049567049 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.022313944 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.037781161 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.050881591 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.196199982 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.02174101 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.027998151 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.021277524 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.062713917 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.022322293 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.038901043 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.179395011 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.181119686 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.027767424 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.057005168 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.022793819 seconds)
  done (took 2.281086383 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.031389299 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.028416173 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.028938285 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.022510127 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.034820553 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.03096303 seconds)
  done (took 1.283285409 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.025150246 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.02349602 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.024180463 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.029594663 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.024638479 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.024510996 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.024646509 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.023415287 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.023452965 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.024214214 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.024240318 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.024571801 seconds)
  done (took 1.398728201 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.171839803 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.029570882 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.028158408 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.022819656 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.024574768 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.023696413 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.037796839 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.025943731 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.042551117 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.02405917 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.024157661 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.026909357 seconds)
  done (took 1.591161467 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.061055108 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.067171245 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110246441 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08167505 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08841324 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055444079 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.204909394 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.036360259 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.122746544 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.097243817 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08418546 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051205617 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.044860968 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.027269314 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059460772 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.076241443 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099446468 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.030833514 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08085009 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.253265483 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093556621 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.093296273 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109780259 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082964823 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.049422413 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105027317 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.055328619 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.061108595 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081845573 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.085074268 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081031468 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.06325646 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.029504755 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.028767608 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124103105 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.06478271 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080504875 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.052722511 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.065939595 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.049791947 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.086930817 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.028731964 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.042848697 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.070842415 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.045317136 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.098504502 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.054780016 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.078102836 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04169892 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101950143 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089695959 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.182595388 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.046290785 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065632834 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104078976 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072753948 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094730051 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07114251 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.040894671 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.08484799 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.07334791 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064278218 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070705552 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04146323 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144321765 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.050555831 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.25076074 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076144123 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.050087515 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.056060182 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075883705 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102017279 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088951188 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.075218029 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087836175 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.049643336 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086575092 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.05941793 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.085821775 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061166524 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.030713993 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08017651 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089903644 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.056285358 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.059987953 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089696694 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.053367223 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.035206075 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.048647708 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.081002944 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.039058455 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.067714909 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.043749923 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.087311156 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092340856 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056654162 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.075201478 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.080071053 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.036979892 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126899307 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.07011861 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.031710313 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080198305 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.075365178 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116657924 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054968323 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.032524166 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.058028521 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061382978 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.122976442 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063052467 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.039317162 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.077427885 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103121343 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055580834 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.268622666 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.057505108 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10805096 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.076576597 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.044741079 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.033023009 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.055028554 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073514278 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069809089 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085202981 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055564999 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.042790357 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.046807596 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.081798306 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.053534213 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03754124 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08051222 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.066012739 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.03336986 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049379593 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.036056274 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117229565 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.046833223 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105674073 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.262448535 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.03418805 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066824576 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.056848772 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067556575 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.063522596 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08284249 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100343052 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.15907638 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.048959004 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.041331154 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066764392 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.104406425 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086938361 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.049759172 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.045145797 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.059752902 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072002777 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.062155725 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085112879 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.054729726 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072696778 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.065585232 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103710036 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102571602 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057726746 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.064321358 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065368807 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.073966302 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.034383004 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123027254 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064329454 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087940817 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.048440119 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106010608 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.080075483 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067909507 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.047886193 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.066813001 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.062478365 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068049456 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108258477 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.055872269 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.031656268 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053291983 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111438799 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.036058454 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080524502 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.05133576 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.052786625 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077891765 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.052026362 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.039998623 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.025209869 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08375819 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119424872 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.027816475 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.078272537 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.077371045 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.064232977 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.084013626 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.028510892 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089917195 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101413172 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089834584 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111551843 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.159925131 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084514408 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.082265663 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.089141356 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078921711 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.038491983 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.25256465 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.097678325 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051968666 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.05158298 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.095431463 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083757831 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.097396592 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.074586639 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082280723 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.06560683 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065742498 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061405681 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.057805886 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102373851 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.083218009 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.086922448 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.04383481 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07239976 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.080079716 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.095286804 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.040338924 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100291868 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.043609946 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101514331 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.035301609 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.084885694 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.033327131 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.135457087 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.039213698 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.060400894 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.028166904 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.031476165 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107226276 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.086046404 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.334064243 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057232096 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.096363539 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09971441 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.036610525 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075291634 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.077332734 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.063470305 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075289423 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.06854808 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.046489829 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053114277 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.06688525 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.044449094 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.039626818 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086622707 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054548768 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.098740414 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.04348989 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.034152174 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.098417635 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070240153 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052968935 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.035248187 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068553704 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.089962444 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.054813779 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.047899066 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081522893 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06414945 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104161088 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.051603094 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.063817531 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.088437836 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.040945844 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.057877355 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.027394644 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.048046603 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.034477681 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.092777122 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.03563205 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.081660906 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.0270309 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094416384 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.209701887 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.056066161 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.064633816 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069273909 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.095797213 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.051775403 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099909437 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047408842 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.077819238 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067644323 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072635642 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.043981281 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059800042 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.063791957 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079381794 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.053192458 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078560758 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.099778609 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060612255 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.101861587 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048067165 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.08060156 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063319654 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08003648 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.070503698 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155095006 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09827545 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073857622 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.073244985 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.033525985 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0544187 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070047952 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.070059119 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137820807 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082066269 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.028687933 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.062828718 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.053411552 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.067926573 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065608639 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.036593771 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103371985 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059169995 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.046861843 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.067711445 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.046510083 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.062972783 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032962624 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.061565663 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.054990551 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.053807343 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.05543996 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.072695847 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088974026 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.068044721 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106348524 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.063930082 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.051777209 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.078570283 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07874614 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.077754536 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.041879954 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.042475508 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105059287 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.079761186 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.087524591 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.058929467 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071629765 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.073918335 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0622319 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.096119761 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069142097 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.245768379 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037986059 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.034662217 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.026278665 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.030029053 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08207504 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068708377 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067767596 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063471198 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.029698044 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.063880668 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065075908 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.029459364 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043879382 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050985639 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.056536885 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.039152761 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06196625 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.074104529 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.052713494 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.059146336 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.060673448 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097679994 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.056277726 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04537999 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100874256 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105291353 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045161556 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050582417 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.02883601 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.036746291 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083588807 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104007388 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107721187 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.036830353 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.044939618 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.042769785 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045081159 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.02907186 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.046933837 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.048024243 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063720116 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.05599495 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.074167236 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063289338 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033417687 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.06691964 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058246587 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.051243983 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.066263902 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078145582 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.086444187 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.098439955 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.072707134 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07438772 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033567858 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.037301415 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.033824627 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.037165791 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.066442236 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.038047103 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034649387 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105913558 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.051257854 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071281043 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070618432 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.047102764 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033117468 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093357244 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.026653274 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094290593 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.02769729 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.037340918 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.039293455 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035727126 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.052714184 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100864921 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065023739 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.067198787 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065042661 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073904624 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156936566 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123098298 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.284565138 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096998573 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029456085 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.030129521 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.033346393 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.068380346 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048052948 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.079558358 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101212462 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046568007 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059843632 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.035914804 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10160374 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.055317342 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.060163031 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.043209529 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.03683266 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100453897 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.037019739 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.041587215 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.04699595 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.069567747 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.029151781 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.059189176 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.039617686 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.035896786 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146309278 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.668010333 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054092024 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.031071151 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.053609299 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101024628 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092016779 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054517807 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069236575 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.077900224 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.062615843 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.052266701 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.071721379 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.160243392 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.03023047 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.052538059 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.055327871 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.061273422 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067030236 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.055369378 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.045518825 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.0544128 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.044388641 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.03712994 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072773363 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044767367 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.056095232 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.064880256 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.041218282 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.04657811 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.089444825 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.059731186 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.040594318 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046328162 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.068610052 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045275588 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067407157 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.027956122 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.071489707 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.048924103 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081141494 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.060845077 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.071563972 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086780542 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054231352 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098976586 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.067924726 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083635335 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.046817445 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.036952565 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088918997 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.049317007 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035863963 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106670576 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.055668884 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.063618052 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.226492485 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.055811397 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.068300401 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.071429051 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070959732 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.058693062 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036466312 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05636337 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.062565787 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.043385568 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.036169333 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.029399696 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.032185712 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064700574 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041048024 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.043918131 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.074902951 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.045903861 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.060843041 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.055313141 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077506885 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.046654894 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.061159979 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.06773241 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048670548 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087892951 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.061864543 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.089011364 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13905048 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.089181731 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089720946 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093681409 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.035089252 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.036059391 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.025800062 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.074940934 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.038079251 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.045568054 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.036702541 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092231477 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.042238875 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069581337 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.22259316 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.038314903 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.051709969 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054457327 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.026616483 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.041958696 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068630979 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.045220186 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03757409 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.069770807 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.040220431 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087789526 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.068322873 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057507733 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.053477535 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.038806816 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067400642 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.063728993 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.089889636 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.056593669 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.03149935 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.083116526 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.065490137 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101419556 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.03218864 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.038459832 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.088619242 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063472009 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.095910375 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.039748576 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121118167 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105741351 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.064603633 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095746027 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.028632751 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.04890909 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.049328097 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.086011162 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.045084706 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068950191 seconds)
  done (took 44.184393878 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.149616354 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.260461354 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.140889425 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.114216661 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.079899912 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.083216888 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.250887433 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.092669949 seconds)
  done (took 2.460622141 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.027265301 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.065086091 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.042162983 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.31319371 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.057832059 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.023418125 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.030568911 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.039711948 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.025124743 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.022901683 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.06440335 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.024172024 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.027757217 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.469236163 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.022605651 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.028041 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.027967278 seconds)
  done (took 2.568264232 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.320405502 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.72636081 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.287096029 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.55155214 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.104317201 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.565627525 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.031005151 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.037854788 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.69381025 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.376035125 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.100973933 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.184785374 seconds)
  done (took 18.210613693 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.032517563 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.15698361 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.163589148 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.032591351 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.032159831 seconds)
  done (took 1.62953942 seconds)
done (took 83.04488708 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.044725069 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.135920987 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.023364109 seconds)
  done (took 1.371979859 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.164630858 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.163558346 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.166769818 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.162934929 seconds)
  done (took 1.859666388 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.033171736 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.035553448 seconds)
  done (took 1.300233145 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.182944031 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.296372088 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.045851886 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.040981233 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.037951463 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.037875917 seconds)
  done (took 1.307848481 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.028997051 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.028256786 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.028352271 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.028950468 seconds)
  done (took 1.328728744 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.134468445 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.021295828 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.023509813 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.02571374 seconds)
  done (took 1.410381956 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.041425358 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.043331374 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.075117595 seconds)
  done (took 1.339962097 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.042098401 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.043784041 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.038064658 seconds)
  done (took 1.362523921 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.058491612 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.05121514 seconds)
  done (took 1.340922795 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.036953719 seconds)
  done (took 1.263452641 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.046496234 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.055065102 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.214967714 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.183867708 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.22286821 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.208079409 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.035749937 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.033249722 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.036236951 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.037694291 seconds)
  done (took 2.267809777 seconds)
done (took 17.937037149 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.037412932 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.148208874 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.39683157 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.044605573 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.784339406 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.394630493 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.702555094 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.048979495 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.059053617 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.024862064 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.042742984 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.760896697 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.69403511 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.104189572 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.679050243 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.101405549 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.765161633 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.025727895 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.023993377 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.024488552 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.671928377 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.024918217 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.024751851 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.024692708 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.762528276 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.293786341 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.027037473 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.104621113 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.025222388 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.029465319 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.274454321 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.026957795 seconds)
  done (took 13.345347359 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.027346745 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.082415887 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.028668033 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.038977234 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.025008061 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.024882149 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.043484811 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.024648701 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.069172599 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.023587682 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.040886324 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.023242366 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.027980184 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.025023522 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.044128994 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.024855832 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.027144385 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.025554279 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.025105639 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.02617156 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.045675784 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.025011717 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.025520211 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.025749579 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.025424229 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.040983469 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.026981847 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.02605713 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.026132605 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.030376081 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.031562142 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.027461278 seconds)
  done (took 2.252004382 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.085010729 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.086744444 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.03208589 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.070168114 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.08223359 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.02793202 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.116671077 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.049766619 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.075686417 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.02506397 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.042872115 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.024479515 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.063494377 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.026761556 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.046610653 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.025058305 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.027247417 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.024925637 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.023951712 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.024876676 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.043881091 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.024467778 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.024921009 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.025098588 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.025293164 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.042266885 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.0264828 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.025207857 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.025146479 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.029491414 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.031176388 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.026599297 seconds)
  done (took 2.575607915 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.027938984 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.02989055 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.037454802 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.04059492 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.023582134 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.026224138 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.027524173 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.023621948 seconds)
  done (took 1.453114418 seconds)
done (took 20.865963849 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.03822635 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.025123768 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.028800005 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.052465432 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.034347898 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.145048647 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.027667373 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.031242428 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.029121511 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.028351179 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.030586052 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.022218486 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.027644667 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.027651185 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.029746546 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.023540279 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.154655645 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.028961073 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.148570964 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.148152497 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.025510157 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.028735843 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.032477093 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.146246342 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.145997318 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.147404238 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.033110297 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.029074142 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.028783007 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.026038082 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.144807169 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.148321747 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.025726624 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.147284468 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.024088675 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.023961273 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.029034795 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.0254307 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.154054781 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.033150041 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.025418433 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.032228411 seconds)
  done (took 3.768627379 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.1461283 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.154835942 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.15020279 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.036033322 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.032454869 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.036052071 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.161060307 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.034032079 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.033056895 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.160368297 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.027022486 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.031612918 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.03414856 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.024195678 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.031892458 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.028230612 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.034824795 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.026165545 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.031705899 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.03226228 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.158938829 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.0253639 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.033959825 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.033835634 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.02816333 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.034349397 seconds)
  done (took 2.802358918 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.033650377 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.04776368 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.052209902 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.119544165 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.068874363 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.048677924 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.0407371 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.051308186 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.056607484 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.022365676 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.044782582 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.050067703 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.05174091 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.029192703 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.063689116 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.042891449 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.037834024 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.025327366 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.030149744 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.062291249 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.048541991 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.04489631 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.058550237 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.044304057 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.022441509 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.03372462 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.028531844 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.043002974 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.03607341 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.035762138 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.025791524 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.025461565 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.023170132 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.034401246 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.02596634 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.020575595 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.048203228 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.037559144 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.040113799 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.064373761 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.035204023 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.02550788 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.054055192 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.092450399 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.023059565 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.027445426 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.029346715 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.038107959 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.025828381 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.071556988 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.042398858 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.023700179 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.04477098 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.025839515 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.025836957 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.0482239 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.026372017 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.027566382 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.04645811 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.03154276 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.048356888 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.031256719 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.049256262 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.023101522 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.037963258 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.026845953 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.026878528 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.023252314 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.062259031 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.033731799 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.078321127 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.025463644 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.02284355 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.038602083 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.038742592 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.033955391 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.023221796 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.046037973 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.040873331 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.029698248 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.045834496 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.027464044 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.028363269 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.073419836 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.024409816 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.022608854 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.022427202 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.027419168 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.028771973 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.025422428 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.039777627 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.023499845 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.027053369 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.054024401 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.023630917 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.024851719 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.026563677 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.024654316 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.022095529 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.032155134 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.025271217 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.023959607 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.035199159 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.022875735 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.025399434 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.037939292 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.031922301 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.021328797 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.024407047 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.026003313 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.025636235 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.024883682 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.026176121 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.024501699 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.027816961 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.029948964 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.027957133 seconds)
  done (took 5.573252677 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.243455354 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.233912221 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.02475037 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.237794994 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.033808669 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.164385477 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.244010285 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.244680101 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.025270161 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.027401963 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.025248665 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.180825195 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.172198215 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.180772839 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.160754456 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.025901428 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.057636106 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.179679112 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.241358737 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.233992966 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.059130785 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.032551272 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.032016434 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.027000791 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.025781791 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.034808243 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.042791909 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.034500529 seconds)
  done (took 4.458782768 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.031869052 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.07487935 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.02949959 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.051175154 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.041878138 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.02506807 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.026323985 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.025222036 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.042625218 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.030195089 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.024531437 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.028327255 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.027935367 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.026430653 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.024030289 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.030679363 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.031196841 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.023026917 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.029994518 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.030806738 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.038992177 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.051733436 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.029655517 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.025705541 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.0288804 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.024704979 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.030017508 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.032898696 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.023661013 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.023562057 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.020837547 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.032565803 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.039758392 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.0256581 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.023687814 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.024683067 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.024156916 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.02422903 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.024490372 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.022401381 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.022482951 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.029867363 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.024104 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.030394424 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.040187489 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.027714111 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.027372558 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.02851475 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.028531625 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.021747456 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.027334414 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.027371592 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.027131393 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.033800912 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.026634273 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.027254543 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.025777424 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.039737097 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.030392541 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.023733698 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.023485866 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.022864779 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.026609557 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.030955015 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.041954656 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.026564765 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.022442783 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.024390609 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.02566699 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.039231599 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.02476612 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.031887369 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.02110215 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.024407244 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.026522147 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.027006822 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.025485322 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.022389994 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.023245183 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.022512651 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.023363029 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.023464453 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.022686575 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.02642237 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.021582863 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.021499537 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.02365206 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.024587376 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.028015325 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.02165996 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.026487664 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.024666654 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.02254912 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.026818683 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.030297129 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.027579282 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.042392276 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.031149542 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.024160357 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.021257316 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.04179811 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.02669509 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.023719593 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.026957776 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.035027938 seconds)
  done (took 4.302850108 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.056524319 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.027683804 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.046646267 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.064499932 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.036987127 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.030935461 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.039774336 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.026124182 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.04824569 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.023850471 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.034873538 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.023065069 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.038597595 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.034296594 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.026464581 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.034292701 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.026631848 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.045952141 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.040150789 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.02278898 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.032712781 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.036963923 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.036348589 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.042067508 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.04235304 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.043376659 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.03598696 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.025908857 seconds)
  done (took 2.304364178 seconds)
done (took 24.447966769 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.278893112 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.521834782 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.231528951 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.933955617 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.416837621 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.227637687 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.388451848 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.238946512 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.389288561 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.335954883 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.945354501 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.430901378 seconds)
done (took 61.636902924 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.240325759 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.366114272 seconds)
    (2/2) benchmarking "String"...
    done (took 1.480725825 seconds)
  done (took 4.026723497 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.629874844 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.241279513 seconds)
    (3/3) benchmarking "different"...
    done (took 1.240620339 seconds)
  done (took 5.332435219 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.512294367 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.894452008 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.428345536 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.189876576 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.192416879 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.664757331 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.395169606 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.914584757 seconds)
  done (took 27.894691069 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.347025274 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.52601094 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.66677617 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.783009485 seconds)
  done (took 18.650668135 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.721977137 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.739025439 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.803827088 seconds)
    (4/4) benchmarking "different"...
    done (took 1.885217942 seconds)
  done (took 8.523214472 seconds)
done (took 74.538837202 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.207360122 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.56303947 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.245752165 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.390778016 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.295680419 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.256402219 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.150518099 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.189913512 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.250707045 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.220151652 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.237916748 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.249983574 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.291571088 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.312718833 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.230966392 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.212751605 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.569175721 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.176281358 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.174007688 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.250224779 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.602909312 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.259258533 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.276271071 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.331722048 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.766318639 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.316476821 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.36155623 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.270329171 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.908930381 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.277584155 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.260455742 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.264202615 seconds)
  done (took 186.563959399 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.255824818 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.18049548 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.132543825 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.279385503 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.692429681 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.613060241 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.114700856 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.709298429 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.246890242 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.300916568 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.367934494 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.2684042 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.307497397 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.786051756 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.259812829 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.230111596 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.139542457 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.019918904 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.253026522 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.175624355 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.216701428 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.770611687 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.744832165 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.0731284 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.233199868 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.222009324 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.236647838 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.271220667 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.796788962 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.181397744 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.312834125 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.242404203 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.465832067 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.473595591 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.292658661 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.260484921 seconds)
  done (took 158.392544269 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.440376798 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.251690904 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.302548807 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.384980097 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.287453223 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.127467387 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.247513519 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.245206834 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.242379876 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.265618765 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.253369454 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.303034712 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.227642078 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.002637982 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.298576902 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.243147792 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.261674843 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.013917623 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.225514899 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.264933438 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.223960416 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.379287974 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.591835666 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.332261006 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.255696969 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.210283734 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.340426459 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.244195916 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.175222641 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.212134908 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.350477469 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.231398277 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.393958095 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.358948851 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.246640238 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.284212732 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.210102511 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.459893472 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.196378049 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.163078133 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.195968321 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.206943513 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.189986084 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.330920981 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.267842639 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.198849229 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.245540811 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.821647818 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.76553025 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.219495909 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.187745076 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.192741713 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.172606089 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.206628247 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.199315488 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.268924435 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.281877143 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 11.424157353 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.291356672 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.264824538 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.282716352 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.245006021 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.269802869 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.292993675 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.306997273 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.934101657 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.90612268 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.576916318 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.106862207 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.237837557 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.221292077 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.236703286 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.942062696 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.267542102 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.211827053 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.208827201 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.359847698 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.208484843 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.211682267 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.179315269 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.156648578 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.256693224 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.368981857 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.280911369 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.265710531 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.753750588 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.668407373 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.235855525 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.272270012 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.303631456 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.244342649 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.2466246 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.2522258 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.137003181 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.221918271 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.246461214 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.597433945 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.243496972 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.226155896 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.254961873 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.606487739 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.226312867 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.307605269 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.601691849 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.185267183 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.23493813 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.217570544 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.244558161 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.22461137 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.250296073 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.208740397 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.229363887 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.22504133 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.238828799 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.218177792 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.244181234 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.244867533 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.268134418 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.235661493 seconds)
  done (took 345.194348357 seconds)
done (took 692.924700291 seconds)
(4/20) benchmarking "parallel"...
done (took 1.245492457 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.504939836 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.262287953 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.522595065 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.491090802 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.40498404 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.36826022 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.373396265 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.480492947 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.453590624 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.386808264 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.445257955 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.399194654 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.489741495 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.464930674 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.482916525 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.499704186 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.424137926 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 3.014016258 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.438210227 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.398193977 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.445480476 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.391969132 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.42186038 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.495556478 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.499822238 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.418661235 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.639639443 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.478734312 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.482072683 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.493350539 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.520562709 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.516367613 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.456547603 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.456152547 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.525137842 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.529922211 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.422610212 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.499514129 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.411222463 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.454059792 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.459672625 seconds)
  done (took 68.574647314 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.631990275 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.407550675 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.523249208 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.533687207 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.159122489 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.527785452 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.597862237 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.406907722 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.400583072 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.532337904 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.52589547 seconds)
  done (took 19.473877493 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.488999156 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.423608064 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.561009453 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.552412884 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.618322004 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.526248914 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.612037358 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.454286906 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.441617216 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.585956168 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.573704274 seconds)
  done (took 19.029732738 seconds)
done (took 108.322587891 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.852404109 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.304155236 seconds)
  done (took 4.36455854 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.261042329 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.253081924 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.252444884 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.239761174 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.238288256 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.249427754 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.300971151 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.263689004 seconds)
  done (took 11.292611061 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.277048846 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.251802427 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.244180752 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.245426858 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.254387284 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.236833889 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.23073168 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.218479632 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.232860539 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.240058236 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.213873453 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.212792066 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.226184346 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.211777407 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.239227533 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.217779183 seconds)
  done (took 21.001761845 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.239347435 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.208083422 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.190417766 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.224105956 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.241714092 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.249709575 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.223372452 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.23889004 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.21260662 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.206290721 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.24111244 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.241396481 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.279721913 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.216693249 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.245333572 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.248642162 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.239485724 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.250467342 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.179942038 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.232079337 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.189631954 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.188620734 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.201706165 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.260579426 seconds)
  done (took 30.658842462 seconds)
done (took 68.565520329 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.794591489 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.996044799 seconds)
  done (took 6.977838384 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.186854559 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.17018683 seconds)
  done (took 3.547182401 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.147568512 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.181866465 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.178419976 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.134286513 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.138873854 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.119726994 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.192805424 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.176863351 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.140666694 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.148345176 seconds)
  done (took 12.702352794 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.12356378 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.163471128 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.167666804 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.185964789 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.180390022 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.144298949 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.129844343 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.14431638 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.173919468 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.186762269 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.158492096 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.330105456 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.153848715 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.403581229 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.119134683 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.154082659 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.16143581 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.165795628 seconds)
  done (took 22.368618145 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.133730922 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.122432445 seconds)
  done (took 3.370132356 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.142435328 seconds)
    (2/7) benchmarking "second"...
    done (took 1.130096824 seconds)
    (3/7) benchmarking "month"...
    done (took 1.146629081 seconds)
    (4/7) benchmarking "year"...
    done (took 1.139008877 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.171621633 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.153158217 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.155733587 seconds)
  done (took 9.16343078 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.667457281 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.362493023 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.416243949 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.677377028 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.882794062 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.116624854 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.860104215 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.074135263 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.888202435 seconds)
  done (took 17.08542947 seconds)
done (took 76.410028146 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.8825987 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.177815174 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.688171491 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.337387592 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.308724533 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.533326695 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.223440922 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.746821452 seconds)
done (took 38.030597107 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.30626923 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.193351292 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.215195301 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.173725035 seconds)
  done (took 19.780809227 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.153732947 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.72841577 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.185517237 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.246917986 seconds)
  done (took 19.522503954 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.54905908 seconds)
    (2/2) benchmarking "read"...
    done (took 1.565945829 seconds)
  done (took 4.265934827 seconds)
done (took 51.074579105 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.128651744 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.146834384 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.156074239 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.121013811 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.132626243 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.119679892 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.14216979 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.14699586 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.133844121 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.126986646 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.13429622 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.123303524 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.142668622 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.15024381 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.183063221 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.174677593 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.134771354 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.11641677 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.124303486 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.13231078 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.143202849 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.124347974 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.132188477 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.135400865 seconds)
  done (took 28.469472146 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.308219599 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.247045739 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.269015892 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.289422568 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.303158098 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.346169888 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.34731225 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.29429153 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.346620143 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.366470522 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.239221313 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.310059683 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.325591048 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.282648909 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.295532671 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.290126135 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.294368013 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.250408359 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.302231098 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.266272138 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.276373536 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.229550288 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.321162373 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.272919674 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.264272718 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.220460753 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.349268876 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.270527228 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.271590305 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.290012737 seconds)
  done (took 39.890527053 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.197498865 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.156804246 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.14815335 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.248255002 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.166167862 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.161828893 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.189226876 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.143572996 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.164201447 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.158892733 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.161923982 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.174461168 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.173684921 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.169458721 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.18120697 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.175030052 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.232654699 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.358639686 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.162880199 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.153903351 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.212433412 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.1710943 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.167706793 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.173711476 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.148394329 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.138830468 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.130617057 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.153814145 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.168901541 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.168280149 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.178440392 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.233632942 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.225486738 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.182985513 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.313755604 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.25225925 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.22720661 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.196348545 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.172183708 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.163453312 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.163376194 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.211882503 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.189746071 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.184294655 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.225195037 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.170358652 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.165843216 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.170784157 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.16632492 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.180925558 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.156937725 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.159337731 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.148087198 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.117696559 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.121372004 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.137365284 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.146270169 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.13524663 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.171465199 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.166881539 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.190825458 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.236832576 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.119308136 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.143197946 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.527988014 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.17067057 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.198750606 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.142662537 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.140890819 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.362457194 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.177266876 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.405275628 seconds)
  done (took 86.739913927 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.222227417 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.237140839 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.302535676 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.289095744 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.190063841 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.228916204 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.248295511 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.220533545 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.894551823 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.203110775 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.237136997 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.209814456 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.846889199 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.201238758 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.165204864 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.270034982 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.169790968 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.226929446 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.164864946 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.160897891 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.181141972 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.16933651 seconds)
  done (took 29.240491628 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.232494491 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.160070559 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.168788821 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.131545209 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.130725586 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.138743511 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.16036591 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.161430592 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.174334076 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.182885556 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.18553075 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.174561678 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.13172021 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.180888568 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.16901478 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.134326752 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.167981856 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.15414041 seconds)
  done (took 22.128405134 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.383867312 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.373875293 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.375286953 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.235807833 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.454576035 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.469779059 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.302622198 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.41372117 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.245673691 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.299138963 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.357204424 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.248809746 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.396450072 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.180351911 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.240592711 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.474050145 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.361150781 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.245380299 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.406418836 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.359858998 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.408507602 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.366410866 seconds)
  done (took 30.765795655 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.280102071 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.270322436 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.235774104 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.26251834 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.163359552 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.158937191 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.218693569 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.197718313 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.163531448 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.252955141 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.193760003 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.174878057 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.195581261 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.20991395 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.274294939 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.211938002 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.28454721 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.247131771 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.238234416 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.160937345 seconds)
  done (took 25.622643172 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.135133204 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.141839346 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.174708384 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.176721656 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.15630883 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.156948109 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.147937955 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.193849025 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.181100131 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.366450368 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.145764433 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.118658793 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.129034099 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.145438899 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.134967064 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.130768532 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.16329013 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.122743572 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.117346113 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.160843195 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.425241675 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.129421321 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.155696683 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.126928725 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.128276958 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.117737725 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.12811947 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.149038038 seconds)
  done (took 33.703670538 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.300761071 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.19846602 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.159335108 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.156627581 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.156383174 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.238411841 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.151141332 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.153776704 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.145687634 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.141585158 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.167453249 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.150832669 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.171305565 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.213940843 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.155189143 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.141536617 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.251188896 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.143126961 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.196991604 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.140247334 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.201036643 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.380004159 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.218306262 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.225603516 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.216736095 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.218304688 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.15739405 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.253409253 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.251869047 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.200314982 seconds)
  done (took 55.029763058 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.245703858 seconds)
    (2/2) benchmarking "in"...
    done (took 1.244338258 seconds)
  done (took 3.678746169 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.179736485 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.375089843 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.24047487 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.376702024 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.346255061 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.365530199 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.375554265 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.24204271 seconds)
  done (took 11.694226622 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.159679973 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.278707706 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.261925489 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.154566185 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.155290405 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.423914027 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.170716755 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.906469362 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.876552598 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.203972774 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.305340086 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.781488339 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.177355287 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.453150873 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.271753257 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.977817568 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.329394011 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.544496147 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.101182359 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.262795467 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.790559764 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.232820183 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.127736018 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.167671678 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.140933543 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.041473695 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.91315333 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.736687344 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.229436979 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.232085533 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.783608128 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.212011833 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.158904295 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.319296497 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.231855071 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.126045216 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.199148885 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.209159489 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.111408733 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.123426634 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.619993716 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.761737541 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.300515682 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.285691187 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.237162982 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.225797742 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.247973386 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.265374873 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.477292559 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.905896881 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.28146572 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.172390463 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.368553276 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.27082841 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.6730307 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.336649256 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.192372733 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.118164782 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.699513842 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.362367236 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.572794488 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.302517784 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.168797452 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.319111214 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.262516397 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.49791097 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 3.129481005 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.936497891 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.862159028 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.364487138 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.582045509 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.401990974 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.263223979 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.216613082 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.153366072 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.570215454 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.263761953 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.247789404 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.224764729 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.25451854 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.448940467 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.339255413 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.055300585 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.383587468 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.430201216 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.689780686 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.353442597 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.24595659 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.840622891 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.107780583 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.374923575 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.640718676 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.539718409 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.329196705 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.114611834 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.432801315 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.238370584 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.262614256 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.064334312 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.597352559 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.327727395 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.235026841 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.629266577 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.265919825 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.221575544 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.178846606 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.732971259 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.312114867 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.377079368 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.288361682 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.268768668 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.227242887 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.931050954 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.426983614 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.185863952 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.670911685 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.189588028 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.495943648 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.460494004 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.329090183 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.480437343 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.067479058 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.453183928 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 3.104552789 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.279066171 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.57923522 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.237547864 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.856694535 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.399763016 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.312750907 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 5.069707234 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.208707345 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.190316818 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.286040088 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.193605058 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.195981474 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.267017907 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.247509968 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.220889273 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.202208335 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.31824108 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.494025877 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.712765486 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.283078205 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.332677105 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.278166165 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.695734468 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.450230949 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.784571821 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.288810003 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.128914932 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.611943622 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.305998195 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.994321179 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.344507316 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.242464782 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.249211043 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.054647115 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.148227908 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.317878567 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.223177598 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.840136384 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.323551079 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.227014575 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.230064836 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.761744236 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.370087423 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.243946462 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.282169186 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.918198645 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 4.771073664 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.294646944 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.47003254 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.328405213 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.179608146 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.16408176 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.174981782 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.950206262 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.87752037 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.272891444 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.807145288 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.818053214 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.240216325 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.302059161 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.303145699 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.425073044 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.3573235 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.324372039 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.215657355 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.204925415 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.180997128 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.716357898 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 4.008179959 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 4.914630956 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.101109146 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.214109752 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.244624751 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.320378535 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.864204388 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.355022655 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.807221699 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.111181717 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.213397355 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.145875829 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.182083108 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.292695014 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.308624131 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.281290692 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.476599025 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.2768296 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.151792544 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.712618314 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.227142043 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.707844686 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.254899709 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.959768391 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.151736393 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.231490712 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.223628708 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.627483175 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.173467963 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.142381826 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.666541891 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.215837519 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.126503164 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.119828569 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.560685562 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.080883869 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.890505208 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.673649696 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.211606224 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.756563917 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.410893236 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.36332574 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 4.019200897 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.291082052 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.518236449 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.295921683 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.443438556 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.279619906 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.747771519 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.323893568 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.619198713 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.251996416 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.088215093 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.263112625 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.611214352 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.28046764 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.160232277 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.263097125 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.231403408 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.727230667 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.244236326 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.231062107 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.403991229 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 3.995458268 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.214167452 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.403379909 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.197831752 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.044758112 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.163330621 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.515430594 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.10060623 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.181723363 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.351822018 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.930700774 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.286251196 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.461021292 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.336685796 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.251534167 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.215795214 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.277987629 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.209919379 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.169586686 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.4371948 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.124043632 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.185342722 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.296739337 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.164410084 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.135989173 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.26297734 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.164477849 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.272669802 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.504158058 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.714273325 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.893813935 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.226615149 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.630946028 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.211640213 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.858983097 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.291026934 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.183007487 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.789174016 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.294381192 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.414433972 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.336703022 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.297192477 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.699129615 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.353550308 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.381250165 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.208576402 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.233831951 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.883142666 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.714536322 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.334239598 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.402502865 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.332640353 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.715349519 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.222762955 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.729098179 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.2163003 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.927808858 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.234562047 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.264689771 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.203159901 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.220036385 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.755316742 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.21225422 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.201219171 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.897580349 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.627207103 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.19034024 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.903477408 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.294187528 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.153157026 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.13263682 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.138060821 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.056977158 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.199076717 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.325894741 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.218471925 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.107487892 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.122551882 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.044786865 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.386417176 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.926990733 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.038112972 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.117240711 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.356984012 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.238576538 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.220196603 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.20404 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.214494295 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.187357697 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.201405767 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.554545247 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.339343703 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.857783345 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.342128239 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.21449506 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.337457356 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.241707285 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.224275157 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.348680311 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.271226927 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.326532677 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.278013184 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.201922161 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.648722164 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.332583729 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.223005904 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.476822869 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.374228926 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.303982943 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.40696482 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.281893452 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.578954389 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.458520798 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.956502634 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.160798103 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.037107857 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.308204893 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.853001627 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.063819999 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.587168622 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.74353924 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.164469759 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.347491926 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.953259078 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.54269707 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.238361304 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.155463719 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.123872384 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.149921702 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.115734937 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.352630556 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.195704785 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.380490191 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.256638929 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.140123728 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.387816043 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.241556397 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.198577567 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.315424607 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.157248616 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.15485249 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.148419741 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.530755926 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.872378432 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.15352859 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.125155336 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.066357123 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.989520692 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.967677112 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.778691637 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.110932026 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.313408675 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.203968444 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.383447548 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.25325935 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 4.75945128 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.359535379 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.978767632 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.520304697 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.243799692 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.316167483 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.538277681 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.851171773 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.497114186 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.352320959 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.254086661 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.500414099 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.176975488 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.341602019 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.129339692 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.502696154 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.774462933 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.710927149 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.440415874 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.281892682 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.122380986 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.815529524 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.286857126 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.252245864 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.040722994 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.395571247 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.564008513 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.157453215 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.455536145 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.438530481 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.915474429 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.95096089 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.365501753 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.766472249 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.337775575 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.197688237 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.707299065 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.199850952 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.293601013 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.287401836 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.222948019 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.231106817 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.848568048 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.808198069 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.448356909 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.248754284 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.23540475 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.800802372 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.092288741 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.374985345 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.231033222 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.234934504 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.43999372 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.330092572 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.249824454 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.678790646 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.886278867 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.405306843 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.768204174 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.410141061 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.415646623 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.487357604 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.62570449 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.364146313 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.327905385 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.248064787 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.2615782 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.240087346 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.600270081 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.384622806 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.270285147 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.82034677 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.405875209 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.855872183 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.365856915 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.446674891 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.270875973 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.689070498 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.377421724 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.783126325 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 4.220011537 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.423479705 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.589452481 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.41037867 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.350603811 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.929285236 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.354710078 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.259094088 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.140749078 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.503349385 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.510238362 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.607228428 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.524435764 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.324905357 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.874875828 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.322778861 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.804010503 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.364049221 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.240321483 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.730501758 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.423899336 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.591628388 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.381562997 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.640997309 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.350605452 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.630380972 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.544736209 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.367837075 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.271369942 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.268553481 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.22040351 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.285746114 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.894816517 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 5.216508358 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.642895463 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.339230269 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 3.127957464 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.728477438 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 4.809929535 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.552769766 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.398352939 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.506477311 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.452829663 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.1902459 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.572837739 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.275948818 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.397921702 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.348233337 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.993496583 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.262374166 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.242722688 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.587210742 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.355422301 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.245902142 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.227666985 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.171776742 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.957700046 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.26883136 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.4001996 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.288641537 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.22960869 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.771497254 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.443001639 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.221625092 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.203899159 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.232256042 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.092467516 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.336158783 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.262536482 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.522621327 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.360139973 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.50148235 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.999810478 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.640770356 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.329021726 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.218533036 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.208053166 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.720390777 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.702059879 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.340811122 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.588246583 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.232266178 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.716555462 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.214592486 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.626161268 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.711088882 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.077595948 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.301902073 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.208968329 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.179874492 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 4.899313193 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.268771909 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.967085361 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.634640927 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.270163911 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.929164123 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.078961635 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.231962079 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.308604041 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.189172156 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.212264049 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.200289351 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.191232464 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.685875 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.176418498 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.208799001 seconds)
  done (took 1471.045404931 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.438392488 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.175786147 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.197193214 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.194445909 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.181153356 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.177573273 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.148434781 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.177921947 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.14765953 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.158262573 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.140308127 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.135566218 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.143370052 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.425323969 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.180762768 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.257709461 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.253817713 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.176156166 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.168917058 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.171453071 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.183566111 seconds)
  done (took 26.401632353 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.178200065 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.223936269 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.231736621 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.184085248 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.194740734 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.183367626 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.167375868 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.165672476 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.16012057 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.166420968 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.137494279 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.16237268 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.170214513 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.142079654 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.177817431 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.152011362 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.161329882 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.151230977 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.153779771 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.184260298 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.157793109 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.1486609 seconds)
  done (took 26.912266692 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.197080223 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.189076733 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.855202303 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.269322654 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.161884025 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.140542766 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.130932068 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.359673932 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.119478394 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.095390848 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.601299853 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.185043113 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.178023404 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.361581439 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.25684976 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.154962285 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.29139265 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.210928652 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.178111111 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.172557346 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.199188008 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.386215746 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.304560791 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.196690358 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.932969988 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.307053946 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.159249159 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.195230731 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.155948151 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.143312733 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.222991762 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.140587114 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.910374218 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.84308103 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.371319675 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.072456885 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.260598886 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.160568635 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.144936577 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.144727645 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.334100668 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.914260316 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.145383065 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.164329221 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.338216516 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.211521953 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.127478693 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.506981403 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.221373579 seconds)
  done (took 90.460198796 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.188055982 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.332698213 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.217852125 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.136893751 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.301103865 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.1445002 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.31313268 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.182442276 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.147874758 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.117060862 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.330454942 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.387938138 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.220768303 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.212386959 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.327820626 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.192827704 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.183155796 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.176011038 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.195427966 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.217370603 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.174338042 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.253994222 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.303122723 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.317578061 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.157809841 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.146648813 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.117863176 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.182993344 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.358716053 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.227880391 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.169321382 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.177023585 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.382507343 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.311352789 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.121643835 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.145295939 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.34978893 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.130452339 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.154016654 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.137568451 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.169509831 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.14295079 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.267811872 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.312109806 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.124234655 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.31896444 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.144621524 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.121289779 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.282312133 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.130189708 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.133113612 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.351729098 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.195829021 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.205248456 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.20132162 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.358464327 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.182465823 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.147963357 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.144452652 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.297425708 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.115237684 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.167796947 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.292945671 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.126973763 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.127688158 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.344140847 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.247152889 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.124188556 seconds)
  done (took 83.763556934 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.178473881 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.139988243 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.130576517 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.114126746 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.125028994 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.107783715 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.149750737 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.127937135 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.157221988 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.12041325 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.130172242 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.146867486 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.135267638 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.174073553 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.19858864 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.206626213 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.211395509 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.219709257 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.183145925 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.187906585 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.162061637 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.132952611 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.153475265 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.126220698 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.515216341 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.166632533 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.145819339 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.194855156 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.125571011 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.141439047 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.484443727 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.151251041 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.131308064 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.137451961 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.48232279 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.146257157 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.149981964 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.132071179 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.126360094 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.150355904 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.153711602 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.126282004 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.151650753 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.157976618 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.168916378 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.130838705 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.121578128 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.508092131 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.153751351 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.141907783 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.157700302 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.166725097 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.183114454 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.167642598 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.174727284 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.314245572 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.17943768 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.180834875 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.208295594 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.209550246 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.164915882 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.327078769 seconds)
  done (took 74.453911201 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.166088998 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.181064666 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.212200502 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.163959702 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.172649137 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.177270185 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.155270958 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.150682213 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.141453425 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.155635848 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.139155867 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.148827062 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.146797587 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.170231621 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.178947689 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.207372764 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.183901414 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.169045258 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.164966392 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.151930504 seconds)
  done (took 24.502273344 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.196843524 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.177789378 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.185919566 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.215214171 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.215030053 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.186168379 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.170726246 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.172977435 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.171723734 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.182282587 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.169574157 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.185441033 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.181935072 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.18186356 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.164896905 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.152919869 seconds)
  done (took 20.087696668 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.1434189 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.15286445 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.124883415 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.140846444 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.180743383 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.201810438 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.184404262 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.162508224 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.141893669 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.685708888 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.152994436 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.160541366 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.152092858 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.160912879 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.15571126 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.142058882 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.150102353 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.151803162 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.146193483 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.16072403 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.713739059 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.15506862 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.129209448 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.176117967 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.158508828 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.73442852 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.164301244 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.188956376 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.15839778 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.165063377 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.148917359 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.640401054 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.139598256 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.173974134 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.14445211 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.151626801 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.154267996 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.147181704 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.16356025 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.160300682 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.163707379 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.163235448 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.137517339 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.163836832 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.153721908 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.14112787 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.143911901 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.637567252 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.125254913 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.139593815 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.154288452 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.146883582 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.136977581 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.671171182 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.119325914 seconds)
  done (took 67.751070945 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.215125113 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.243378296 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.112004683 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.137099341 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.191362032 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.167690364 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.21838671 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.148064102 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.198637014 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.128228707 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.190868119 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.158995734 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.181831568 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.236870011 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.229383681 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.22513942 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.120013038 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.213490956 seconds)
  done (took 22.434050066 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.119275329 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.194738938 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.197769819 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.146675595 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.130585533 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.185493435 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.219545254 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.183920807 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.134056225 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.159650847 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.221381537 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.129497651 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.131798495 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.150854375 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.200535632 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.197210468 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.134178992 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.111263717 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.145925452 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.215400076 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.186881343 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.133279256 seconds)
  done (took 26.747123001 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.194995405 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.232449689 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.140759333 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.181512796 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.187555 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.191608546 seconds)
  done (took 8.244067337 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.158933381 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.126930563 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.222797504 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.226067476 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.114474523 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.14842057 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.179551708 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.197698327 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.214513137 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.489440148 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.141304837 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.162210475 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.149190668 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.187213347 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.197128225 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.176363923 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.18806263 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.139774983 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.16258916 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.296015802 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.209539157 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.174210488 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.135978143 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.193988687 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.176270176 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.154305153 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.167359598 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.458342723 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.192938267 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.234890478 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.179180679 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.183738557 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.232483065 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.523675071 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.264818714 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.209163675 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.162777119 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.318055475 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.154780116 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.155272028 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.23734475 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.143534999 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.166592322 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.144663446 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.169909548 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.186087572 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.182882929 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.172851173 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.127299945 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.483552687 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.147704643 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.160478884 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.139699036 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.135287797 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.14023189 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.47109346 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.467256791 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.148178192 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.174380797 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.44856947 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.150686102 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.187641847 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.191704842 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.492893674 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.195025707 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.151547935 seconds)
  done (took 81.321163453 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.154167088 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.223602437 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.193303367 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.484534534 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.231324268 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.207535732 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.164947693 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.16851803 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.217881068 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.211703567 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.304710114 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.180797572 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.147780309 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.123406897 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.156479366 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.148017702 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.18932296 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.181180702 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.221035017 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.519747852 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.190266713 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.224887863 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.2356479 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.210985793 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.496874014 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.2062977 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.147613157 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.228601911 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.21829193 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.195290889 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.194602898 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.185516693 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.201740131 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.258974072 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.143133707 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.146464292 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.179359771 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.188014451 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.227777284 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.205335292 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.179185569 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.344182741 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.180494102 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.203838684 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.490778816 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.243200274 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.250990447 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.290477824 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.221477674 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.260910569 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.526130019 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.51727905 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.557857033 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.26919164 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.223428876 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.232272689 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.261015867 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.252824061 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.230504892 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.224527621 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.242700895 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.210916914 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.582908862 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.242601959 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.258985986 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.249181633 seconds)
  done (took 83.630812249 seconds)
done (took 2475.865990577 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.376509446 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.341728121 seconds)
  done (took 13.939474588 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.225026116 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.254238994 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.395477153 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.233872276 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.291554214 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.332823836 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.303675096 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.236993895 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.252411067 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.370300877 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.247233327 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.35946112 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.328062452 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.188257336 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.15481783 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.238765867 seconds)
  done (took 41.68542948 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.248338978 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.421397227 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 3.220512701 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.994301108 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.212632289 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.296101369 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.586446012 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.585941573 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.516987353 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.674028534 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.483918959 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 4.759367046 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 6.114557414 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.301548776 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.818884013 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.83569927 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.969092789 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.012769305 seconds)
  done (took 62.265926777 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.160505359 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.288199292 seconds)
  done (took 8.644144796 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.166233912 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.155423274 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.165098622 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.167395055 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.149098823 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.164558136 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.150229766 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.160784294 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.186165055 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.187227125 seconds)
  done (took 62.815988517 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 6.136069089 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.899025184 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.670153273 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.776023828 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.77597301 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.543072957 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.310353254 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.947452053 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.25160365 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.129240526 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 4.976501099 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.627548721 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.883972047 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.129986301 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.654568301 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.447027453 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.788640568 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.675871145 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.451868779 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.50203091 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.438010285 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 4.9508379 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.646884924 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.089679149 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.295244799 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.265209148 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.313388026 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.248608607 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.187765019 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.069623138 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 4.961401384 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.152411293 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.135543721 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.140383083 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.216909778 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.780517828 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.81155506 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.358189062 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.490713299 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.480018744 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.533421837 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.410508048 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.273537279 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.418364533 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.384651548 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.355292798 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.090570579 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.405496382 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.273329866 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.330897747 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.757846321 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.326978917 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.280877981 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.315833126 seconds)
  done (took 153.935148701 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.198936664 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.561743084 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.358205255 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.186438952 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.560603113 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.338730816 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 4.8774902 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.723769901 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.134959477 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.415269017 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.377991414 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.345502984 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.217023979 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.177396844 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.196556105 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.197228395 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.356731579 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.599864274 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.14873755 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.140561649 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.369233906 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.397349585 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.249389676 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.110262551 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.317920625 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.374267989 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.535355683 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.259443328 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.54304949 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.154215316 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.538400625 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.108802881 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.165671736 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.03601828 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.49520902 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.451174751 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.527838834 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.135725238 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.863726182 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.135093104 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.778202278 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.402907248 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.489500182 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.301997629 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.283920272 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.354038611 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.719376812 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.108667372 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.88103016 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.299184865 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.345231857 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.372382011 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.438307679 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.138748344 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.487515949 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.123468114 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.115800914 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.475976607 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.338828203 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.334803681 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.209962167 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.119599731 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.112588956 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.436125133 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.155046772 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.25073504 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.121042662 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.137415624 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.264699556 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.278883303 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.281683546 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.429693675 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.429404234 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.066260683 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 3.55055412 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.351865043 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.528975298 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.409205554 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.154583531 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.141998469 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.537772384 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.578695137 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.284199894 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.363487086 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.441053742 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.406400025 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.688705957 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.117982041 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.358206745 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.300921278 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.367697174 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.310139459 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.509708857 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.067322577 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.163014145 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.12130218 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.205368109 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.260060459 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.153593086 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.64005703 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.40330645 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.76795697 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.340061991 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.597663241 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.229679339 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.112235504 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.724642154 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.116227737 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.371760054 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.448020475 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.160120051 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.128888103 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.264981196 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 1.937684775 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.149839015 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.218851101 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.531110321 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.17760414 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.337457223 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.170877607 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.403753083 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.078398293 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.417117646 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.165264875 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.429455439 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.364423575 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.368445505 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.21721176 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.594823708 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.516479178 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.672475367 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.510441493 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 5.879159279 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.257491145 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.515497936 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.216249796 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.175355417 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.353463008 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.203410723 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.398615854 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.252374557 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.493947274 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.391744452 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.569324887 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.211829957 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.453588101 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.444705231 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.580069283 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.189591857 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.32937437 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.197747778 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.16936547 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.357002061 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.180021743 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.183615083 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.000794633 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.209121537 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.276343484 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.350887149 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.814824175 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.649302245 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.506674905 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.199995459 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.6294448 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.346451771 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.597754468 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.658207476 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.324076992 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.12080195 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.176227432 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.181333855 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.376746737 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.352241307 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.173861183 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.223934093 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.9287548 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.26053997 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.16391802 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.341967286 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.836084707 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.606473943 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.364820632 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.177964567 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.485543305 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.183382426 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.457644436 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.714497448 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.474430135 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.2230612 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.257064181 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.228596214 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.235638891 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.442796643 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.458415004 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.81531161 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.395251517 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.529742013 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.442431491 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.547573844 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.676804052 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.264178588 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.485286685 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.236106986 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.646661877 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.246249326 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.377846094 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.528239412 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.206215208 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.501440315 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.550568881 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.285155709 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.673788894 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.201426321 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.214195796 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.21912807 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.404625119 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.706092044 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.241755161 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.300219405 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.58221705 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.31372478 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.38429207 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.429071811 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.189653695 seconds)
  done (took 741.71874519 seconds)
done (took 1086.237691159 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.19628362 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.201029426 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.203154087 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.199781288 seconds)
  done (took 26.012036934 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.029781516 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.025149132 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.336468501 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.263949889 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.394812893 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.504225969 seconds)
  done (took 11.752551652 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 4.748087965 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.232003968 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.214384184 seconds)
  done (took 18.42567352 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.514088541 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.685806385 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.38177271 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.300129963 seconds)
  done (took 7.097105277 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.228589013 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.217639072 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.209693911 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.207960057 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.202246433 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.217052002 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.221798943 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.205605741 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.197946149 seconds)
  done (took 12.11061503 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.646364607 seconds)
done (took 81.238596099 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.634362584 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.496545288 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.224323691 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.388737994 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.335193026 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.547530503 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.343161187 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.257606658 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.532313777 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.686170565 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.72151616 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.492795295 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.772244812 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.747775035 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.459742111 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.25974248 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.241836016 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.308753202 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.923992138 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.450194144 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.882636577 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.33853015 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 6.21219483 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.24637352 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.182401274 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.288661849 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.466052851 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 6.209005363 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 3.448538478 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.224314326 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.322536981 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.671990508 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.405483657 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.517524082 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.296086019 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 2.122341759 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.634366806 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.187604628 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.389312718 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.794713318 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.487655075 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.31146219 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.198058945 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.500289644 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.672463954 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.267700684 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.202426525 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.379595691 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.748732145 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.276968266 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.498435693 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.169383519 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.762220009 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.207727086 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.192480905 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.099486717 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.134877185 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.709404678 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.352914797 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.379540157 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.148726723 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.107082918 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.042185854 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.155472829 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 6.13127509 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 3.143985081 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.562823214 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.229346959 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.621347591 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.162533775 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.161532508 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.160669136 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.863683162 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.209126602 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.147458487 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.15357561 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.44348549 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.230984511 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.136181894 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 6.232202691 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 3.435194555 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.190029554 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.398534806 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.45468642 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.306667804 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.539482579 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.66570852 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.540682607 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.75253198 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 6.169704966 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.268215194 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 7.769818562 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 7.47365585 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.139551595 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 6.192845766 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 7.423012569 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 2.456893166 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.62558174 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.249226365 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.785993377 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.170132464 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.188537821 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.641342588 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.489501551 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 2.014390866 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.165212604 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.28969495 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.114357695 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.324146692 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 6.161866465 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 7.647334549 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.663327423 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.116908406 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.179285058 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.659503521 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.163876561 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.424531322 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.459726861 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.220921978 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.141576227 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.371870362 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.158643356 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.251001329 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.724623089 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.504375711 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.388820423 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.156478807 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 2.479549955 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.13633946 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.33410101 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.12126091 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.769875696 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.704224874 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.159605626 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.389008376 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.239222116 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.118818129 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.334317396 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.195495881 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.261461003 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.47244637 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.432363369 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.292170846 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.125653258 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.52751693 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 5.467887143 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.39461236 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.437525664 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.284981077 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.44146286 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.198820095 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.143790065 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.271267652 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.536200621 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.725148076 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.813229769 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.384832848 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.255181997 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.704339408 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.448669943 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.982731345 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.236221766 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.203680005 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.131829125 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.191581113 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.257894909 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.160069474 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.276522936 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.414497856 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.556514163 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.957728218 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 2.058388422 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 6.205580562 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.481005791 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.32510971 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.157109027 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.787643294 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.17162916 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.619645992 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.674513013 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.237871785 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.192932616 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.191974392 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.265774997 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.993616263 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.222853885 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.597020886 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.779635202 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.570688456 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.541584752 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.343177575 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.213359908 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.6023942 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.420128778 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.468100146 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.373857948 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.842072142 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.285940466 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.582714575 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.335983069 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.488444343 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.172493192 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 2.20702856 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.401033637 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.664539012 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.494743824 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.464490284 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.376511569 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.477807366 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.143295927 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 6.153482593 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 7.755841295 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.432588852 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.236715816 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 6.167219262 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 7.663657659 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 1.508324614 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.18625597 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.372064528 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.643629252 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.330682513 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.294866485 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.725480343 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.231063002 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.531549717 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.45253226 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.338856047 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.421762721 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.276404851 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.43446369 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.449145499 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.383609294 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.480061223 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.398557761 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.549939391 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 6.205712616 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 2.923862792 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.287903018 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 1.691058688 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.284547413 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.259924136 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.599541836 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.48699302 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.59500483 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.438311411 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.421432655 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.278641324 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.350044449 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.829575119 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 2.115778825 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.85421779 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.213758726 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.295463979 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.275914441 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.787445886 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.644048826 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.30910926 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.39644617 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.852402598 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.221001396 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.423212107 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.258804216 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.226553417 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 3.073911546 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.331314178 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.459353568 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.899651337 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.198379357 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 2.301955708 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.260493351 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.726314829 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.716514416 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.229687663 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.325831409 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 6.175396403 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.136678011 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.560876168 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.18613556 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.335205023 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.474767154 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.309975039 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.290589517 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.175658769 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.198421773 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.819584607 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.575999524 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.684928739 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.182746621 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.537152903 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 6.217969498 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 2.628478855 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.237656683 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.314005963 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.674009537 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.277776853 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.485694881 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.221329107 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.172931833 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.389514791 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.146793053 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.11540669 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.279732727 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 6.125182753 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.631877821 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 3.061073681 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.325925277 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.164520805 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.380083902 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.339177426 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 2.123580801 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.268093425 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.238134433 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.749724717 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.630538839 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.163792086 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.555275629 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.132459139 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.531878618 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.130296879 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.147372645 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.257591306 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.269193044 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.142852404 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 2.205401199 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.316543911 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.724703676 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.457359552 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 2.067093381 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 6.208210292 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 2.539175609 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.247708455 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.435869091 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 5.949833522 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.147534274 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.317471845 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.775408883 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.292027434 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.174608727 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.392404127 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.168214558 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.785426923 seconds)
  done (took 888.378931729 seconds)
done (took 889.814504306 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.263185815 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.544463037 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.444154064 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.111629887 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.937446718 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.822446306 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.377189506 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.37547206 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.244297433 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.402312014 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.135731053 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.016488051 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.324273237 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.331515495 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.289093873 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.354107488 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.420402591 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.366319518 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.265740257 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.234928688 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.510190837 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.222330869 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.584722208 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.442303927 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.527849523 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.238801819 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.245433267 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.556541486 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.476605404 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.13507746 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.352355683 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.341813328 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.957113025 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.370232494 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.220700622 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.243432452 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.002265864 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.228510915 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.163073862 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.208664663 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.527231885 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.276248055 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.87434133 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.081014453 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.937739452 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.55501747 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.000377063 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.264922142 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.264872821 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.303708926 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.155759142 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.1651 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.540963993 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.128983033 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.053176727 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.080341696 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.534525012 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 1.988293886 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.871234663 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.313539892 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.510703362 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.219668904 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.302668737 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.352772812 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.259244679 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.414469985 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.575331983 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.183412703 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.357811127 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.378590115 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.403001793 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.353668297 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.256539358 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.382217818 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.324301077 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.389203246 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.880831504 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.371874015 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.936746458 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.258454583 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.115519722 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.091672265 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.109075199 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.27597968 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.255942524 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.980911076 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.325162984 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.150378265 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.33150617 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.378389247 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.061138932 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.4215065 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.67193558 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.229483329 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.204416786 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.316809765 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.258614709 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.177877539 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.156915959 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.388004147 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.02825854 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.292558167 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.260400192 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.285449504 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.278909348 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.202877933 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.288110856 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.640835296 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.347250368 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.277831741 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.509577053 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.251885648 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.366219537 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.2433368 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.207189694 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.901120319 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.42686056 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.045413826 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.258863899 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.913930176 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.467609392 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.303230695 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.574259326 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.502955516 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.267444859 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.282559056 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.297875298 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.123878649 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.293583878 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.311654807 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.368227616 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.58365485 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.315063857 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.116051627 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.397757836 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.839939504 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.365259574 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.377319891 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.196918935 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.04292792 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.2688128 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.139895971 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.435374506 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.517416544 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.370937777 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.43309721 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.241869735 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.425600999 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.150467359 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.231755253 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.36369256 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.273318576 seconds)
done (took 250.307641122 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.507013585 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 3.475614237 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.422356927 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.403296811 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.511262586 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.478911804 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.23784095 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.594723397 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.267044182 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.536342131 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.353106492 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.278657753 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 3.480749578 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.340636482 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.517307756 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.375333124 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.21517536 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.374184144 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.591947567 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.567808819 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.20992624 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.356438789 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.254467238 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.532197703 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.11941826 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.136164809 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.446953074 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.247039869 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.412446682 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.140174447 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.145290763 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.38168186 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.469389727 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 3.223200221 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.525365541 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.161929348 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.469891668 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.217200807 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.447727967 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.523087171 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.424140767 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 3.939297585 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.180283403 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.183164084 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.223464445 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.408350972 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.226299864 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 3.374617274 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.143620885 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.135645792 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.415772162 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.174918322 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.30482807 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.424667236 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.390789163 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 3.260823845 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.561787388 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.56161535 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.559615379 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.422568631 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.392487785 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.563501254 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.511168425 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.267748825 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.176533089 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.430294475 seconds)
  done (took 127.75699986 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.573300185 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.49683922 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.598645758 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.451372524 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.696145791 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.606327349 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.546793217 seconds)
  done (took 14.127426821 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.215958632 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.172987138 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.423943081 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.395645852 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.178297382 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.299861983 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.290718199 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.169510207 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.448086867 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.261021778 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.516070663 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.472497384 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.093187466 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.145418579 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.300649379 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.529488238 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.193387904 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.266745482 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.227786035 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.460787659 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.1735071 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.165698771 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.337841695 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.152839712 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.220737983 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.244589625 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.188166344 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.175717328 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.191079268 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.163768302 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.209199815 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.289100017 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.192126314 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.175203675 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.248905959 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.555739328 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.23184164 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.296943315 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.351325687 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.175820996 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.256094232 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.322708713 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.42241052 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.301266634 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.252545148 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.488208969 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.282792107 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.275252187 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.268907307 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.310722677 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.466986554 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.250771492 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.241026188 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.189843243 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.431634431 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.16217827 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.315299129 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.198266321 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.19528885 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.293548821 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.262908164 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.494362897 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.445454596 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.214369832 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.476940238 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.516085304 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.209475793 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.226668318 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.20983099 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.504502544 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.217803892 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.394370484 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.236936384 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.346440696 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.319327066 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.408492329 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.44457792 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.122929883 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.054050344 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.171983191 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 1.629762774 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.25210626 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.588845607 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.162478369 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.182533271 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.228534584 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.235165543 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.890633924 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.129266486 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.241068194 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.551966913 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.253540854 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.303387582 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.285112347 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.200952151 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.287087132 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.374046125 seconds)
  done (took 151.076251634 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.298686142 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.391921597 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.627702339 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.098433754 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.214291245 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.393403263 seconds)
  done (took 15.204190294 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.65558593 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.01752402 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.255020752 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.304462611 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.331028283 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.178007362 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.220558866 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.436814502 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.394341908 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.267413548 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.135713935 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.180436812 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.137090849 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.372973164 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.16947389 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.217390589 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.167974058 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.234351917 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.243206425 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.304266545 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.350290814 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.2669634 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.273639069 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.896041651 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.20877019 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.235023553 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.965105359 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.218577008 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.238017041 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.581326674 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.385044604 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.205677966 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.89283724 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.318841067 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.964557003 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 1.921650522 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.415671528 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.234813698 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.267626919 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.229544586 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.258089981 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.354939066 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.309950369 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.214331591 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.530826432 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.857388946 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.296370268 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.588627522 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.249453639 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.244533062 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.221900319 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.288807046 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.215892207 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.221612094 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.621808256 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.746998478 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.164282778 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.173574493 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.260177206 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.898884206 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.298760838 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.205704396 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.597030574 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.094621508 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.195402434 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.149709938 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.914259585 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.373929559 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.335654676 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.263480868 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.170799895 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.256172715 seconds)
  done (took 119.022620713 seconds)
done (took 428.332812273 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.364391091 seconds)
  done (took 7.571163515 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.270417604 seconds)
  done (took 7.548995635 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.286274652 seconds)
  done (took 7.576775474 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.199172668 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.271582234 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.253246932 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.200149668 seconds)
  done (took 26.126204677 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.907428564 seconds)
  done (took 8.112008365 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.233707948 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.24706547 seconds)
  done (took 13.707630558 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.404812457 seconds)
  done (took 7.628003036 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.774897911 seconds)
  done (took 8.004634193 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.177888216 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.189626717 seconds)
  done (took 13.559021433 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.177164546 seconds)
  done (took 7.353972508 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 6.406640686 seconds)
  done (took 7.618805591 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.20636419 seconds)
  done (took 7.506118704 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.247113416 seconds)
  done (took 7.443786208 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.312776212 seconds)
  done (took 7.55874753 seconds)
done (took 138.485032135 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.212807995 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.207859258 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.215626393 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.191977526 seconds)
  done (took 26.020670861 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.548455403 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.571178983 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.521807645 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.62903482 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.497286534 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.470579627 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.54251243 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.529787852 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.503066008 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.59788435 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.530145982 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.598001805 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.708975861 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.53323933 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.504410609 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.651706774 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.61712955 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.541534433 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.480021251 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.561318787 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.713039077 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.712857799 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.007398635 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.989723659 seconds)
  done (took 39.758579379 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.455008337 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.596565144 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.415128239 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.541769035 seconds)
  done (took 7.23869558 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.292533892 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.631917504 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.587051596 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.642717028 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.557931925 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.399517635 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.566284477 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.422916369 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.39151466 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.404134912 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.84522627 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.352562826 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.349444878 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.6163125 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.382625724 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.213971396 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.202115855 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.352720742 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.597441382 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.460251685 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.481741435 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.558418588 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.615226569 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.608594076 seconds)
  done (took 36.75474378 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.015676592 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.200270643 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.56534518 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.136814731 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.916293698 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.021312004 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.520153987 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.758004341 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.496874677 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.485779674 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.0128131 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 1.962247861 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.361047951 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.086539865 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.95525329 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.394469082 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.37197111 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.038431722 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.636895409 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.565860725 seconds)
  done (took 40.71838971 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.241509838 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 6.227063937 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.424226194 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.391176919 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.244875256 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 6.2391793 seconds)
  done (took 29.019765296 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.514048449 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.331136787 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.491805411 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.452799383 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.352384454 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.313825817 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.770030414 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.424929442 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.940790661 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.886765947 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.692056916 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.614744284 seconds)
  done (took 22.978929384 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.142871586 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.167103279 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.175548618 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.338416469 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.018252037 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.034447828 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.534817278 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.170069094 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.257973386 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.375122309 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.027564751 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.348406429 seconds)
  done (took 40.75995306 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.37298593 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.360304994 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.509214749 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.207704124 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.654249806 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.238940565 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.580089532 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 6.203250475 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.843644041 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.97838635 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.729878213 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.154767064 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.693701306 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.127979019 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.901344289 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.495904098 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.993423622 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.666222696 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.475349719 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.185668742 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.135570544 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.264648823 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.222082242 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.62697428 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.483823272 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.174740283 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.376737092 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.400913554 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.205202666 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.395695941 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.16101905 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.641714267 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.314616549 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.473848045 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.628213661 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.16439688 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.299628659 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.146322899 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.70770252 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.432153851 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.275244239 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.275044315 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.125610499 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.134136312 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.397923504 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.989077545 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.17619795 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.853951865 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.104948545 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.426974596 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.898285404 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.007600665 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.563008388 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.856528331 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.264386237 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.513673037 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.38904599 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.187313365 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.497407726 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.440486256 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.182188011 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.341305403 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.311662121 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.126528249 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.571492361 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.333057244 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.294420374 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.352191008 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.434953208 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.435156524 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.55425073 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.419017556 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.843915544 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.203502725 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.666720247 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.074949314 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.494850664 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.177464017 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.83725369 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.681354892 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.14015175 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.349624762 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.907946274 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.157726119 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.202175544 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.378081973 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.030235651 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.11992538 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.193866866 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.424772505 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.430142251 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.231197904 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.246993079 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.38452465 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.882208253 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.236496567 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.200345794 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.567907691 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.234929762 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.804100299 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.160719784 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.188803479 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.207025877 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.800041982 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.584926646 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.975199814 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.951010193 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.91354849 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.485051011 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.770760259 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.35270848 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.009003892 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.540807674 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.523611048 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.187141512 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.839742586 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.161334006 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.391645837 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.361473226 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.144328943 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.127329017 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.613358185 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.364528034 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.193976732 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.467583528 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.179511039 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.311607369 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.124309096 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.729211816 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.118636995 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.404006089 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.650081723 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.259742967 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.332609678 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.162450194 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.290707862 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.602923751 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.190898591 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.606048489 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.554342201 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.390889622 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.943852296 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.108291832 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.088029447 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.588398073 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.403909704 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.548921456 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.884076326 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.342692717 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.221970032 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.178225063 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.374380406 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.116186437 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.726672489 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.140657549 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.866698872 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.185443814 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.411189673 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.165022809 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.356817849 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.14339851 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.332312325 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.663449034 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.333562339 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.376036045 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.471330283 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.351483004 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.220339663 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.116326789 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.46212563 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.3655888 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.606984975 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.401602715 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.608224453 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.638784451 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.626138835 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.401701473 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.560017414 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.019581744 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.388225595 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.409528962 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.17125941 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.237377605 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.178546159 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.418497895 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.452433092 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.411033744 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.983489384 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 6.064416927 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.246842601 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.266353742 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.660563345 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.145675031 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.315060308 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.558027234 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.133388536 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.633868339 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.200585553 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.560163892 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.660164896 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.169625498 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.448903066 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.77053959 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.70216013 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.500755651 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.493129971 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.119321284 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.973586297 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.764653346 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.333260713 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.174480468 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.607684933 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.795032103 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.353547216 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.144541548 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.47913829 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.070214139 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.01315765 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.694563403 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.638378679 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.202615138 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.334573916 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.688341797 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.149243662 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.973340753 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.434547514 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.391321671 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.156387793 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.625450334 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.376164819 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.50730093 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.146229369 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.153210471 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.464516651 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.447020121 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.428115063 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.587364197 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.391556645 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.83763986 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.229614248 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.789155635 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.33273386 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.206395893 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.578109827 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.312800309 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.939935636 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.312754676 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.972846783 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.454173549 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 4.90486125 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.468442292 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.124727289 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.549654238 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.717642315 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.146358825 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.138728061 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.244319497 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.10754397 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.316824133 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.867528704 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.222356074 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.299422362 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.40712697 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.412127967 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.337872597 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.596614445 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.573731267 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.899713569 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.147677868 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.315026668 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.284135735 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.443486691 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.169179667 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.420012572 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.761845284 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.60081154 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.087572394 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.669404571 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.549490011 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.162798117 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.482761481 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.35698909 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.433674719 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.05867014 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.7183232 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.172873326 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.269719556 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.105320953 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.763344565 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.608743491 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.482475376 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.582229911 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.206475189 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.595526453 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.538764438 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.459116954 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.172952335 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.406753477 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.150563565 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.458931388 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.170661067 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.083944261 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.640097269 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.185367622 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 6.184572714 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.389179551 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.524991178 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.336555794 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.737449427 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.383775707 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.30796578 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.986060246 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.358481375 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.330213406 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.54268866 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.86372651 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.437163256 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.206864008 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.320901013 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.769648109 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.497023793 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.681146644 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.670667238 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.427931659 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.900240452 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.130168955 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.362164688 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.33975864 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.170430549 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.38539182 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.585402357 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.192457934 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.355256428 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.453190378 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.53760294 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.706084602 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.105551565 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.853647374 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.624377608 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.649054949 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.710747764 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.925317171 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.432340737 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.275297079 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.424834226 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.215819499 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.289548689 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.408445753 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.868786244 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.190016115 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.99938785 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.925567337 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.2607121 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.686546375 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.211157805 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.020713436 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.309072249 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.347166689 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.336449365 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.290672904 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.103002287 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.927589102 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.905570638 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.444930562 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.316376125 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.317146434 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.218694888 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.394909141 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.762035382 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.532054431 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.941427974 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.564682007 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.390069083 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.13948931 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.149073935 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.476798418 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.574384406 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.196082833 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.449575921 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.577040177 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.283252477 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.245188271 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.274025766 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.51716164 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.060170969 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.913964643 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.404247303 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.566979984 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.737749109 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.167952496 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.956917285 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.37280284 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.54971456 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.543877214 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.973819249 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.584666194 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.447427487 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.313835952 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.149613183 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.345099879 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.149921854 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.297932135 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.901756524 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.434289509 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.148826686 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.407942444 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.837265403 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.225704406 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.184018589 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.628350211 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.418600949 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.368809774 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.202146926 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.914704868 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.521942143 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.327228009 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.170529884 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.920079116 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.092264523 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.38517914 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.157509655 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.292705186 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.998945262 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.15961106 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 3.009219619 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.615552641 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.228704547 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.406473671 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.159825041 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.835391156 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.351106381 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.698514939 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.156074288 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.448266138 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.701843796 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.381675825 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.206764281 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.551672284 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.335990766 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.530336136 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.641121626 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.566686391 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.553388643 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.434783435 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.432143318 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.659363294 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.44457498 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.390636243 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.148632172 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.185322977 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.286192813 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.582065084 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.573620676 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.212529311 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.711203863 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.469469273 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.297860556 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.414764335 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.313699304 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.786872653 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.357349365 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.271659958 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.401632697 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.237774341 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.438611583 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.154695516 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.405877047 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.120920938 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.193814465 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.403627919 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.424550434 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.573039145 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.452468001 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 1.764003182 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.331381478 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.920317368 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.933798615 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.683306678 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.148971404 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.8078312 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.618180158 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.12973464 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.546717962 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.742068075 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.280840823 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.84199948 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.398261388 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.143068199 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.363092654 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.651956759 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.155629083 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.815561127 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.525071641 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.17520976 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.545409095 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.202855956 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.35790147 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.946444989 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.65286636 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.162245537 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.770454367 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.568031231 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.696003368 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.833794086 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.153322701 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.322837149 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.764498639 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.143049727 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.190652417 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.343605388 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.67560699 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.202949369 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.693688669 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.215297101 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.380519777 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.141075686 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.226574151 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.174714541 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.350138691 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.354877772 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.383716972 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.432633021 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.326625425 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.13785376 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.970983054 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.860078113 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.222244629 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.447591969 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.176904601 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.528437522 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.799842292 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.121106474 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.691685969 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.326966541 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.152857569 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.522282867 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.393344035 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.141938418 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.300985117 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.1747202 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.489383546 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.315294569 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.646972182 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.37956094 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.115522127 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.22813274 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.157142017 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.684179698 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.490028183 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.06427288 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.134422769 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.456288844 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.121606942 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.733623628 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.80872169 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.313320441 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.292766684 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.029129596 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.866255204 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.955748745 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.376272539 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.136643032 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.367279884 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.683549389 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.107315432 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.761884384 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.124019377 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.329044709 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.480866289 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.120977185 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.302864399 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.14763476 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.132002619 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.695398408 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.164125421 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.463651844 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.134935901 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.697561932 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.161363288 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.221362005 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.427537213 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.545838091 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.176557695 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.888842787 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.343085333 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.167531411 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.165929433 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.510264286 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.307539947 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.399972032 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.519045243 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.296275322 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.596970188 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.061764284 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.808428458 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.352311061 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.498067511 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.178436652 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.748808539 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.237190946 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.813879518 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.804483554 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.323264968 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.71222633 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.410068003 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.919968456 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.241434035 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.647401181 seconds)
  done (took 1983.741962225 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.159227073 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.283139434 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.257955624 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.206492683 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.247061633 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.180084546 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.284382321 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 6.193701902 seconds)
  done (took 50.966918432 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.151347145 seconds)
    (2/17) benchmarking "4467"...
    done (took 6.196782579 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.695397518 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.437912639 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.16656025 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.234097148 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.384538308 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.747327502 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.173575114 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.134613841 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.264479495 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.387111851 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.216128771 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.24326054 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 6.005674754 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.281216983 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.19663693 seconds)
  done (took 94.112434186 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.270034963 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.318366349 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.268733856 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.001320186 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.29830551 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.677803292 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.251060591 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.230047829 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.603385554 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.904493065 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.250314737 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.361323615 seconds)
  done (took 82.635610984 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.27279405 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.288446633 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.254874221 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.254237601 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.284980265 seconds)
  done (took 7.567688945 seconds)
done (took 2463.590845407 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.468340809 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.794023309 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.827025381 seconds)
  done (took 4.859838782 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.28157689 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.360580483 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.388215295 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.352358306 seconds)
  done (took 6.606413365 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.501370597 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.6402152 seconds)
  done (took 4.319022226 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.518906412 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.271421363 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.823732791 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.279390556 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.246031843 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.276906988 seconds)
  done (took 20.06443773 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.307194813 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.303566698 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.302184973 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.301529042 seconds)
  done (took 6.487154594 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.268985932 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.300791118 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.266616186 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.295705988 seconds)
  done (took 19.421818102 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.570933792 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.352076582 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.994827097 seconds)
  done (took 6.172537141 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.079192772 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.407349565 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.079730549 seconds)
  done (took 6.849068178 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.474396401 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.202207949 seconds)
  done (took 5.921357939 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.444559706 seconds)
  done (took 2.712155244 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.745201157 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.734224749 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.930407681 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 1.977329223 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.158929082 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.506881865 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.628039901 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.465970098 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.774326696 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.795071121 seconds)
  done (took 18.968853517 seconds)
done (took 114.731396411 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.355694264 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.643254986 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.375770681 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.551886366 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.414211639 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.402760017 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.325104955 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.37856225 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.669226271 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.673463583 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.088346301 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.406422408 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.341212896 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.6386544 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.235566145 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.532231924 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.302596691 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.297245271 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.701962519 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.034654216 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.241079279 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.552226571 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.725413829 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.549805725 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.347727517 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.330597214 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.104632869 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.531640008 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 3.911614031 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.119714883 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.296281122 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.236623268 seconds)
  done (took 155.559534335 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.140862035 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.214340251 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.25659668 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.139427744 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.116229453 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.191746137 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.192849616 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.154081108 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.078193592 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 4.997350854 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.178573435 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.088283808 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.158491213 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.132971929 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.148177369 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.155224124 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.145271508 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.201065305 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.187893067 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.21289489 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.213222913 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 4.920749474 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.221383507 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 4.874032196 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.309081654 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.151897435 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.151491984 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.144656898 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.18060215 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.231581517 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.210022291 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.18628154 seconds)
  done (took 190.040389068 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.157711746 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.137599922 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.149084002 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.133097329 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.163220537 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.219643916 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.172166715 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.191769066 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.188405436 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.17777545 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.195277021 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.162486616 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.218772216 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.161044674 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.164549233 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.164657078 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.184167749 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.191395602 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.265644539 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.24178728 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.226696569 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.198246781 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.254990019 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.20524137 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.260369702 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.196488406 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.152487 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.184163814 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.171388778 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.231325026 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.248177677 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.157407956 seconds)
  done (took 199.291396787 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.468111757 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.209668007 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.104783123 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 1.747792285 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.08354656 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.195612106 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 1.745340117 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.523948649 seconds)
  done (took 14.261736662 seconds)
done (took 560.431162057 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.885759364 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.107696784 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.408917639 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.502822336 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.756496964 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.488825044 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.447976129 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.634741837 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.913144244 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.597253916 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.667853639 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.391653137 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.074953775 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.4399675 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.380745219 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.653155435 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.633285327 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.902540613 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.438822393 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.05454323 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.413659882 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.13149696 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.619563949 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.977414729 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.642342037 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.169960199 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.376942392 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.599458275 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.412413799 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.3341657 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.206690312 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.621605978 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.368569808 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.460519996 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.665231785 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.686617155 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.647852193 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.68674989 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.389765322 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.879143813 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 1.997848167 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.759361566 seconds)
  done (took 78.62058506 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.160527386 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.186665774 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.338202292 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.234068228 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.85517802 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.280709611 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.533775755 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.474951035 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.356423929 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.484142321 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.577026551 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.951499868 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.493777386 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.971448884 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.523229757 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.50590266 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.362725399 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.938187035 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.488533017 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.48439008 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.325918406 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.430491748 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.239511658 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.426006016 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.257980882 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.233999883 seconds)
  done (took 39.291788433 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.287688602 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.381775021 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.476883519 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.265083704 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.455273409 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.179724719 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.547511628 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.349062075 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.807910335 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.580904196 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.321060751 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.3794042 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.445495346 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.540450195 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.550117814 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.486530002 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.470365185 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.447287821 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.500103771 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.538847351 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.408393159 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.364259586 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.554348098 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.190998636 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.041285378 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 4.7464588 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.396596078 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.768209063 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.453759535 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.414540364 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.405747078 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.601442828 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.685508628 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.540596706 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.398151641 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.257015377 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.261877377 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.32112602 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.175512941 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.41242919 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.507206314 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 4.621352157 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.557628257 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.801346683 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 4.643408328 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.490589356 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.739925246 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.363140586 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.377109592 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 3.186945659 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.520567856 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 3.887576155 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.515868209 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.472947083 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.409831624 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.723118864 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.499092218 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.70218569 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.370693377 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.857349687 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.377872488 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.737522101 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.429518605 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 4.646484506 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.598823497 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.457064054 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.503668371 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 4.855316022 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.592213223 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.506332227 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.940110231 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.34506356 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.345792717 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.418804243 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.436317722 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.721238829 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 4.237749471 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.662278247 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.639783756 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.534604174 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.503924404 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.790786439 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.205315887 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.548235901 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.426186777 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.237720796 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.34352794 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.62288648 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.545959283 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.795956535 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.851490272 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.671118034 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.520534987 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.427937911 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 4.95965487 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.79926563 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.278394675 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.291080056 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.525947153 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.860406287 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.382639266 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.575909939 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.95688354 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 4.882338019 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.637627648 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.438825311 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.685858771 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 4.663711355 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.677561971 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.276939291 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.51856461 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.367640401 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.447340956 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.505572685 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.221407775 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.788880738 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.334000309 seconds)
  done (took 252.390683921 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.231694317 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.188317486 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.200877016 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.247308209 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.201312953 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.806983563 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.308996307 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.210148687 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.730299167 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.207035145 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.184681968 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.224559594 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.227388116 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.236858479 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.425682982 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.470307832 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.376117728 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.202947311 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.157431865 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.194762378 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.36876848 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.170549398 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.134087613 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.196072287 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.198398816 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.150565864 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.278056484 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.194043413 seconds)
  done (took 154.949115774 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.183759132 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.590473675 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.260459939 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.318110763 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.263180943 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.211780152 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.700465942 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.32233028 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.32148289 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.314543065 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.284960503 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.44646552 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.542519006 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.838743503 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.373393015 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.401262332 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.871281003 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.404190053 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.267874086 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.249654407 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.44051361 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.590557646 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.538732863 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.563206721 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.400223377 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.51038995 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.302812414 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.231091826 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.398499505 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.807980655 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.332119501 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.631902585 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.45576531 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.277071207 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.763103937 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.64577576 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.833751509 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.886356621 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.469757322 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.209300179 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.225508992 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.464195237 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.541082802 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.268087499 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.215815017 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.854914832 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.233380562 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.474432824 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.252818707 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.193093923 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.32659368 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.287542287 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.471432989 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.069898114 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.412785896 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.317199178 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.801278425 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.193233154 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.220281699 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.508075717 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.168307063 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.667547514 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 3.163311962 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.346246351 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.328247506 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.183610749 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.407745784 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.89322526 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.975587176 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.368361171 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.704400598 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.495926812 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.32653451 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.604695534 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.518470751 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.757406704 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.891849413 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.427372119 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.378390906 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.327592435 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.503510479 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.227415135 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.760997027 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.317442174 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.215716488 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.699860072 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.606092636 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.187796739 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.217738257 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.323873271 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.39760906 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.432404349 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.45626166 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.300883682 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.121339581 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.468356263 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.481902992 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.204141627 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.326307629 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.216941435 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.620908565 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.382612711 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.18226246 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.514556717 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.670691614 seconds)
  done (took 164.756501963 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.885984223 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.297020246 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.49281326 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.806065847 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.594902719 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.702560784 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.467814579 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.283895908 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.475652801 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.398694902 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.447862945 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.29359858 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.137874171 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.952822639 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.293654694 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.376576199 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.272285445 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.795666447 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.456764909 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.132827713 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.684503731 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.994086281 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.551094049 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.659655043 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.721192062 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.805813911 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.95527873 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.372736434 seconds)
  done (took 50.513958234 seconds)
done (took 741.753186492 seconds)
SAVING RESULT...
DONE!
