cset: moving following pidspec: 3838291
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.77488376 seconds)
loading group "shootout"... done (took 0.801930409 seconds)
loading group "string"... done (took 0.201242438 seconds)
loading group "linalg"... done (took 3.10104578 seconds)
loading group "parallel"... done (took 0.021314159 seconds)
loading group "find"... done (took 1.451706594 seconds)
loading group "tuple"... done (took 0.72103215 seconds)
loading group "union"... done (took 3.029034039 seconds)
loading group "dates"... done (took 0.179420487 seconds)
loading group "micro"... done (took 0.057066239 seconds)
loading group "simd"... done (took 0.370901312 seconds)
loading group "io"... done (took 1.342225135 seconds)
loading group "random"... done (took 2.320089518 seconds)
loading group "problem"... done (took 1.196519829 seconds)
loading group "array"... done (took 4.734033646 seconds)
loading group "misc"... done (took 0.943408372 seconds)
loading group "scalar"... done (took 3.498098709 seconds)
loading group "sort"... done (took 0.311279491 seconds)
loading group "sparse"... done (took 3.588230777 seconds)
loading group "collection"... done (took 6.298268844 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.415701781 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.070708056 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.079260057 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.075797253 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.157761491 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.081102892 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.086184396 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.06752466 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.204582829 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.069870594 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.06944452 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.380416709 seconds)
done (took 4.635233854 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.262673078 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.031596065 seconds)
    (2/2) benchmarking "String"...
    done (took 0.027108644 seconds)
  done (took 0.661643195 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.026909863 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.014925527 seconds)
    (3/3) benchmarking "different"...
    done (took 0.021709791 seconds)
  done (took 0.653418257 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.019974056 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.09465299 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.02090854 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.021622407 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.021519691 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.020924046 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.020661497 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.020617299 seconds)
  done (took 0.81207867 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.027927789 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.022096389 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.020230469 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.021808017 seconds)
  done (took 0.686686307 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.021961857 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.082153163 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.019681227 seconds)
    (4/4) benchmarking "different"...
    done (took 0.019479723 seconds)
  done (took 0.733639549 seconds)
done (took 4.439803449 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.096278434 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.685404348 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.720657711 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.07610857 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.244401377 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.330108694 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.07453565 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.135516434 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.04294053 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.030197664 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.077235383 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.035510545 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.354105589 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.326942901 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.025843715 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.140234617 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.582927311 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.038825525 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.07042615 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.264848406 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.036072367 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.038423275 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.043263468 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.025862972 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.141764387 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.135606184 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.59384179 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.05788897 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.023672479 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.050076597 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.028846116 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.031605737 seconds)
  done (took 8.19251361 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.048433949 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.043219559 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.022608448 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.058948615 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.048177541 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.02390149 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.029242431 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.022279403 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.041692623 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.087545457 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.044676483 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.052535219 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.020394117 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.023332185 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.02590554 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.115434794 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.03678341 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.035834468 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.021582538 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.035534189 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.049326277 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.033571449 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.032297888 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.031869314 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.067944761 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.08994692 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.045034384 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.064061778 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.021799127 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.033853458 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.052735564 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.063380574 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.022249451 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.020728405 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.064504849 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.042068432 seconds)
  done (took 2.205490984 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.978286632 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.049805778 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.037089899 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.028183258 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.063613858 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.051604033 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.076509414 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.075855375 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.05401035 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.02329619 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.102034524 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.626385545 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.062221144 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.027504256 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.027972326 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.074095788 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.313059699 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.854145842 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.023895121 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022794573 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.024875891 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.02460806 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.067492957 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.021203748 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.131486502 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.571252257 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.029070016 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024453167 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.052378177 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.038667917 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.023887525 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.10205732 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.050946607 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.028494812 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.528207412 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.022001658 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.019955132 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.046054413 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.050637325 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022444293 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.023596721 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.034490506 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.021753181 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.07906385 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.036415578 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.651850075 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.024753715 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.586115524 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.175513187 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.027022773 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.025436488 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.056394286 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.018920517 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.022306619 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.628090463 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.096550358 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.021676418 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.242454103 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.024310382 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.022918736 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.023338871 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.054252652 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.022309225 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.023474851 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.025452488 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.040433969 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.971517735 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.040526102 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.041966224 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.020606089 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.021733477 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.020109237 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.379560077 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.028692306 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.024390905 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.01988894 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.025643007 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.021889354 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.021378567 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.062505845 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.04858417 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.045264281 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.025288297 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.022457832 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.021572208 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.538536785 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.957650996 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.024501206 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.023948841 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.458551276 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.020094393 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.021958124 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.023667042 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.04337048 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.022565769 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.019355645 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.058498068 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.024009334 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.023715328 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.550529263 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.024050595 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.019749371 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.476586733 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.024427321 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.058839253 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.077548573 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022271624 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.062571132 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.022825175 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.019830984 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.026223065 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.019707484 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.024052722 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.166387264 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.021203875 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.020083567 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.021884841 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.023013609 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.021695165 seconds)
  done (took 17.082926862 seconds)
done (took 29.055081799 seconds)
(4/20) benchmarking "parallel"...
done (took 0.664219749 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.086097242 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.047797106 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.106512768 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.055376458 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.022934262 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.055967232 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.061510378 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.058762322 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.023049913 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.022925898 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.022949512 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.056676681 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.059165453 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.022957694 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.052394403 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.057916438 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.022964668 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.01884464 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.022859266 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.022903472 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.022957799 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.018820144 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.02291204 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.02302542 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.054154019 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.023138841 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.01897731 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.053476617 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.023113138 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.052846574 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.023208217 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.023077315 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.023087325 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.054371118 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.023076234 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.053896175 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.018945915 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.023196348 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.023865141 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.023093087 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.023153398 seconds)
  done (took 2.209867515 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.039761341 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.036325579 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.038508694 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.017257456 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.026422212 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.036497737 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.017250306 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.035902829 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.039011246 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.092512961 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.036679145 seconds)
  done (took 1.077579074 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.038747878 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.037502019 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.038099289 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.017267452 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.028120984 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.037339666 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.017205479 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.03679275 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.038942438 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.037445598 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.037427425 seconds)
  done (took 1.018278068 seconds)
done (took 4.944151158 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.044119979 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.019528296 seconds)
  done (took 0.705576729 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.459038641 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.118245097 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.025770393 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.147451348 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.021643473 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.045510622 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 5.825403998 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.042405403 seconds)
  done (took 7.379294226 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.072822561 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.025746167 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.022911663 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.021754178 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.021977356 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.021852317 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.023524551 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.022193076 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.021500449 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.023997724 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.023769051 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.02196088 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.022578945 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.024018485 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.022019606 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.02225374 seconds)
  done (took 1.177006068 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.027798699 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.024717366 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.025875714 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.016450363 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.026667145 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.025084386 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.026273383 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.026890008 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.0257549 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.025792942 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.023571498 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.026275839 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.025425735 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.024129569 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.026336438 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.016443367 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.02644435 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.026067082 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.027901228 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.026964109 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.026367823 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.024307567 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.027914649 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.02485588 seconds)
  done (took 1.261984607 seconds)
done (took 11.177178321 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.136467247 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.028822045 seconds)
  done (took 0.810350693 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.023802394 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.022954464 seconds)
  done (took 0.701302923 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.027488561 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.01537475 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.030551583 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.023057217 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.015380033 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.015168876 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.029779786 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.015542918 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.015370652 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.015462835 seconds)
  done (took 0.856003459 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.018668279 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.022317286 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.020281927 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.018447868 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.019999398 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.016221924 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.018321407 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.016501984 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.021984644 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.015703948 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.019188012 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.036130365 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.018784504 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.036706161 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.018716762 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.019224831 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.020622065 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.018507556 seconds)
  done (took 1.032951865 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.017094536 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.016286006 seconds)
  done (took 0.692088459 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.019835816 seconds)
    (2/7) benchmarking "second"...
    done (took 0.016310725 seconds)
    (3/7) benchmarking "month"...
    done (took 0.017927271 seconds)
    (4/7) benchmarking "year"...
    done (took 0.017760554 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.015875174 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.015327951 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.015850238 seconds)
  done (took 0.771287902 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.371525162 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.077184344 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.289872651 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.023399266 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.030748968 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.216144793 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.018993298 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.023334963 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.023219827 seconds)
  done (took 1.727544614 seconds)
done (took 7.249165125 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.039017652 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.137211074 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.042205653 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.381993355 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.032847019 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.021649936 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.052927958 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.130301611 seconds)
done (took 1.504871317 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.254796986 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.324957752 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.306377002 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.101359566 seconds)
  done (took 2.394517471 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.291791721 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.034806719 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.029222004 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.021792157 seconds)
  done (took 1.05339761 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.021353265 seconds)
    (2/2) benchmarking "read"...
    done (took 0.026173131 seconds)
  done (took 0.715802893 seconds)
done (took 5.088946954 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.026618029 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.01615347 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.020953787 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.017689565 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.01734629 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.016804313 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.016740596 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.017621354 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.015677685 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.01779946 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.017813773 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.017832452 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.017490709 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.017541285 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.016965799 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.017816752 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.015925261 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.017527001 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017480059 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.017506285 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.015848569 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.017824948 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.0170275 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.017528345 seconds)
  done (took 1.082243743 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.035061599 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.020181643 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.020903865 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.020652545 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.021122986 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.020669212 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.020667109 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.019786249 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.020719146 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.019555745 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.021068394 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.021899423 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.019621024 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.021361739 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.019805943 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.021377418 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.020952867 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020092714 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.019745183 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.021332758 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.02090782 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.0201379 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.021318698 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.020817122 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.021255917 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.021207294 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.01977585 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.020100117 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.020845153 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.021215655 seconds)
  done (took 1.303091352 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.022205517 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.014581921 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.014846924 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.02454911 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.014412016 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.014753388 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.01494608 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.014268584 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.014665957 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.015458434 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.014912626 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.014390874 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.015088425 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.014378202 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.014385199 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.014879922 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.019419278 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.033603001 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.014748689 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.014512944 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.019014731 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.01464177 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.014523992 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.014521539 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.014946307 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.014530287 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.014309008 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.014852047 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.014510671 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.015098053 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.01450927 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.018919769 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.019766466 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.014484596 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.024561557 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.019506722 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.01447816 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.018855879 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.015466741 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.014374739 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.014432419 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.014382075 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.014547148 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.014566987 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.024876139 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.014764257 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.015472561 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.015028997 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.014745845 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.014361097 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.014559469 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.016150408 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.020235687 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.015859446 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.014499191 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.015566796 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.014459302 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.015307042 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.014642904 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.014455848 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.014485776 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.018538001 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.015966099 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.015233423 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.03472282 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.015941435 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.02495851 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.014669826 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.015332862 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.018625331 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.015239627 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.032945932 seconds)
  done (took 1.881104613 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.025917115 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.025565598 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.033234928 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.024195749 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.01787645 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.01536378 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.018260365 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015315527 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.024251797 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.018958796 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015463001 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.018566209 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.024423151 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.0192317 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016572701 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.024396205 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.01898814 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.018333498 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.015514573 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.018867904 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.016478847 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.018543981 seconds)
  done (took 1.119354656 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.093682502 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.020610716 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.060010616 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.023675882 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.022291074 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.023570721 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.020522547 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.020586181 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020756224 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.021205809 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.021218655 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.02071329 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.022605847 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.021166558 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.021195367 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.020973216 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020702351 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.020987877 seconds)
  done (took 1.167772037 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.032436254 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.020375806 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.04386104 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.020046338 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.020135583 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.019816148 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.022917939 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.023335791 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.019699049 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.020219546 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.023684951 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.019997386 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.020000405 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020342031 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.019958567 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.020337159 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.019969847 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020327091 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.023690205 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.023349565 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.023312728 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.023652498 seconds)
  done (took 1.173781463 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.033543749 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.019551479 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.034950455 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.020963194 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.014911381 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.014864346 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.020580909 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.019706042 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.020472713 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.019241956 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.019738065 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.014892001 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.021194865 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.019849172 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.021580127 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.019893598 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.019621277 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.019964001 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.019519433 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.015073716 seconds)
  done (took 1.081883106 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.02672662 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.01710824 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.017012401 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.021314037 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.016969708 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.016856412 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.021223171 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.016852275 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.016894476 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.038356239 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.016956746 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017052813 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.021637019 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.019883389 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.017099128 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.021621119 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.021549641 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.021564985 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.017086861 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.017126554 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.038630553 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.017020239 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.021679962 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.017299561 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.017246038 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.017295072 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.017218275 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.02021271 seconds)
  done (took 1.239237728 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.020681803 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.018335851 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.018468107 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.018307214 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.01834319 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.018255514 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.018325116 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.018329052 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.018012213 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.018323518 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.017957646 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.017955709 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.017951304 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.01793331 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.017954041 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.017973352 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018011706 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.018379541 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.018362507 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018353191 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.018051783 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018117391 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.018182216 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.018481473 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018474291 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.018097098 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.018465092 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.018440012 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.01823584 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.018497462 seconds)
  done (took 1.222699699 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.02881782 seconds)
    (2/2) benchmarking "in"...
    done (took 0.025720551 seconds)
  done (took 0.727589916 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.017917227 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.032134609 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.014452167 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.027250209 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.022480241 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.018558741 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.022784334 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.022351042 seconds)
  done (took 0.845666693 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.022179512 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.044449523 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.016123343 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.016430436 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.018573917 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.08110266 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.028172569 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.027553346 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.029581703 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.019025252 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.016096235 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.027498942 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.015629477 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.029350443 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.017421698 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.025661221 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023240345 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.033957861 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.029049058 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.014948353 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.028670442 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.016503554 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.015118132 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.016591184 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.016164905 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.02274666 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.031733825 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.028400406 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.024555885 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.014313379 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.034555618 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.015107224 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.015752402 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.024332988 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.018519475 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.014948338 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.052262968 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.015268792 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.019522233 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.015033064 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.02708698 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.03604871 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.029421524 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.032942008 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.016503265 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.016983078 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.014953897 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.016743104 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.019333846 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.024621505 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.015363078 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.022671401 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.015002269 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.016568141 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.025735092 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.01535763 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.01992598 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.02452739 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.028940781 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.025658507 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.027647708 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.030841411 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.024123369 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.022367777 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.015902817 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.034993035 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.016818955 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.028430108 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.030147776 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.016371968 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.028272239 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.015119509 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.014393933 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.015305886 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.049021478 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.016579361 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.016087345 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.015303297 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.015453335 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.016533831 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.024833292 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020070421 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.022687759 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.018340239 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.031278596 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.024591675 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.015215545 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.021340391 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.033579906 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.01989133 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.015708938 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.032530339 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.019454545 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.015218275 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.033442613 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.025969182 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.016896173 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.01608159 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.019454839 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.028947443 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.016717183 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.014553255 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.023940269 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.016932644 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.017450498 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.019579786 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023556422 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.015168568 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.025528277 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.019858403 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.016821759 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.014525775 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.020232015 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.016123032 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.014547324 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.024940608 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.015485557 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.030115307 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.022377862 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.030007743 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.030531884 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.025977521 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.031451352 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.015236889 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.014557667 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.033687243 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.024754836 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.016908874 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.034143707 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.015689629 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.026402985 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.01585611 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.017290999 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.025126919 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.015114239 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.017502712 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.015997481 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.020916609 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.017302858 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.017522597 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.021989198 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.024366405 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.028181734 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.016870501 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.024558139 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.016050779 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.031814877 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.025624971 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.020757218 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.019163162 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.016529192 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.028103246 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.022813478 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.025034362 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.015673671 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.016553882 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.015872748 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.026915933 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.025405613 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.017499604 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.023455721 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.020785296 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.016516487 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.015820486 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.016783592 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.0197789 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019275798 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.016347287 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.02357616 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.024571077 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.030100903 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.023358756 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.024790131 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.015252961 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.015800612 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.017785199 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.015750968 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.020795606 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.025258671 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.03168543 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.028031988 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.037689376 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.016194595 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.02578846 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.017756559 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.03325306 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.029430299 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.016980757 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021066088 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.015122258 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.017879536 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.02541465 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.027547079 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.030161256 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.031112787 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.020968378 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.020919194 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.015848172 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.031217937 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.016288847 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.024436529 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.025218018 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.020737848 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.01579618 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.017903693 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.025190076 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.020974278 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.016198337 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.031915375 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.022559087 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.015870775 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.030371796 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.016204142 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.026815502 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.01582714 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.01985472 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.021520047 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.01804701 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.025382175 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.031488036 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.015065011 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.016317747 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.03188073 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.01788736 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.017846227 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.024134465 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.031507631 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.021008892 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.023990005 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.026900595 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.02659438 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.020974439 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.026332132 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.017254508 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.025486532 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.019703802 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.028241231 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.01611081 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.034929003 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.015187936 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.031514477 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.016899875 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.027428827 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.016531127 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.025652937 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.017021456 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.033718709 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.017774256 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.017099127 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.028348708 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.015178164 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.025349385 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.015959246 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.021418673 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.023064135 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.025543115 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.018023659 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.025755336 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.017869214 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.024781626 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.021097781 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.025064862 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.025373925 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.020985311 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.015877719 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.024229649 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.027311887 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.02430372 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.017725057 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.017837534 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.016512218 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.025531433 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.017857676 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.15891498 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.02365254 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.020356604 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.021302356 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.016387784 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.016474485 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.016410587 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.023632507 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.024631919 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033208807 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.023750608 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.022576904 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.024253281 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.014906878 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.030659958 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.014954242 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.022544249 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.014262751 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.01980887 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.024126789 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.015109525 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033887864 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.016318327 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.022734022 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.026837477 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.023506345 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.019162939 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.032557146 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.017661956 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.02317152 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.022707485 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.019892241 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.021919715 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.016247165 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.023301083 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.024459104 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.025404428 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.015519391 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.022364914 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023881573 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.016274892 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.021251776 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.016160544 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.023353619 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.016381821 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.014301111 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.019925545 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.025904609 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.020107337 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.020263653 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.015093745 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.014148756 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.015014502 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.020223122 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.019853953 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.023382481 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.030132601 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.014143659 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.015538777 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.014714879 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.018996317 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.032531624 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.024275679 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.022769769 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.01990512 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.014274993 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.016021946 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.016245342 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.014894795 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.017571639 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.014298973 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.014712252 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.0252431 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.016183679 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.019682147 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.014962254 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.015775842 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.024400385 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.018644614 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.015116367 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.021833608 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.014622839 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.02039251 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.01425305 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.016089307 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.019755618 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.014480051 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.01898479 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.025008705 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.03103079 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.021821717 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.02372875 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.015828266 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.022718104 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.030249033 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021442095 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.015992523 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.024418207 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.014772248 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.033637178 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.024398748 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.023693671 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.024902823 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.015992126 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.032134616 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.020237797 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.025229265 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.030788956 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.016121971 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.021452771 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.015186565 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.031140965 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.020309769 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.015235147 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.02388958 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023185568 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.021616068 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.027096932 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.016088907 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.02380925 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020137662 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.019296377 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.016891249 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.016884356 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.024094994 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.031459069 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.016105616 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.019247044 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.023315172 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.023747304 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.0203065 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.027421814 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.023461042 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.016285811 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.016979804 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.019383567 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.016007087 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.027325571 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.015656842 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.02025813 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.020242613 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.015234308 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.022432816 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.032362473 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.025112968 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.025274941 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.015634657 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.015034345 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.033985112 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.019719269 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.019165759 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.023853265 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.025375757 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028256724 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.025240026 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.032941544 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.016215972 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.022007165 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028098521 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.016700782 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.015568673 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.019838372 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.017386494 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.025015628 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.025710026 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.023207024 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.017637287 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.023008561 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.029360513 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.017231978 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.020868997 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.020618143 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.016584682 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.026314769 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.023858717 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.024453041 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.017246843 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.015565882 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.019511752 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.02472455 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.023249708 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.024840805 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.016648994 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.022908127 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.03000196 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.023277837 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.019215145 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.01564989 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.019330836 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.025059676 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.02100241 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.015845594 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.021034971 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.019878858 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.023536818 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.025489989 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.020850879 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.015839464 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.033366326 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.024665794 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.025177799 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.017774568 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.017867907 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.016329495 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.015822907 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.027388077 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.015849594 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.017601813 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.021044418 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.017776725 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.034134451 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.024121227 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.032026595 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.016955569 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.021045276 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.015927746 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.02562015 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.020863055 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.015901881 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.026430305 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.015270567 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.03166163 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.028041432 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.022267266 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.015948297 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.021484527 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.024702283 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.031331626 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.02576658 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.025030128 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.019682743 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.025781697 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.017806169 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.027128291 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.015928932 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.015065942 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.026212019 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.024512725 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.028786697 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.015983734 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.026293737 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.018062894 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.024231953 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.024862216 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.017913082 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.017906724 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.017794338 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.025720067 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.021046136 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.025446488 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.021174626 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.033495658 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.017011763 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.027303702 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.025048377 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.027323085 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.030135374 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.028924421 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.024766902 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.016497759 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023398206 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.02471605 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.017260205 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.021340974 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.019756547 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.039065872 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.017847474 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.017801171 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.031121072 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.023698752 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.016243333 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.023345888 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.021200371 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.026337623 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.017060452 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.02658377 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.16299593 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.016040359 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.020359524 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.020385565 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.014329541 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.014940493 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.015243941 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.024781318 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.020057074 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.015137553 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.033984048 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.016250773 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.02370206 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.025762939 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.022052035 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.016204009 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.014227894 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.015662263 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.028417881 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.030373047 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.019087462 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.023627164 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.016348379 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.024138806 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.014274808 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.023677024 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.02285714 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.023420678 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.01485409 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.015101728 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.029836681 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.030327396 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.020036832 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.024607773 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.023840711 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.016233528 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.036299765 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.023771613 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.015654737 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.025530314 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016695044 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.014439281 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.014302749 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.016242907 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.026335218 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.014774906 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.016785488 seconds)
  done (took 14.016664762 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.055434059 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.015960002 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.014734338 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.014673181 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.021471564 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.015681742 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.014661917 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.015732093 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.015713976 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.016743805 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.014707792 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.014751135 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.020186253 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.027164259 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.022303463 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.018271323 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.0148733 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.016079544 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.014840482 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.015980324 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.020608683 seconds)
  done (took 1.122303449 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.020136842 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.019179952 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.018533886 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.018678495 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.017892896 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.015042077 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.018193186 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.014981706 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.018645542 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.015285756 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.01871251 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015148786 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.015493242 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.015447055 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.015466892 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016460498 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.018848481 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.018156047 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.015154625 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.018575705 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.016551858 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.018516143 seconds)
  done (took 1.088489127 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.017609619 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.015580202 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.023496337 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.014428969 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.014363939 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.017073318 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.014358758 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.01917466 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.019183976 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.019229513 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.023417252 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.015075159 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.014293543 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.020544338 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.014313578 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.015028341 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.057158144 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.015291446 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.015320237 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.01461416 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.016791228 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.023652976 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.014715033 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.014848184 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.019359053 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.017250997 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.014645917 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.016891009 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.015144175 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.019356942 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.015341969 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.014405489 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.023441416 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.022784541 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.019324526 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.019361237 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.015773375 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.015257011 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.014615818 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.014625663 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.022876707 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.015940516 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.014981803 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.015726972 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.023540473 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.01480182 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.014508173 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.02377858 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.014915131 seconds)
  done (took 1.598000812 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.025528915 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.067198969 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.020676431 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.050170834 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.026048505 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.019729522 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.020552227 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.053140003 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.015812416 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.016315065 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.027284652 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.027388955 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.017232815 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.018428475 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.02174108 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.017211539 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.017801684 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.016540401 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.01940694 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.016822311 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.01973366 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.02200773 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.026852675 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.027214779 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.018342742 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.016809106 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.017023173 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.018612164 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.026981519 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.020170904 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.018725282 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.019231128 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.027301872 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.022434151 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.017051911 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.017261924 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.027813349 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.017701522 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.017391113 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.015988953 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.017128387 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.018530962 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.021951623 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.02801731 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.017595298 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.022364086 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.017613575 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.015735893 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.027552974 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.017436942 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.020923233 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.028401207 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.018515541 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.017894594 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.018894141 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.027571753 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.017690046 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.01654762 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.017844122 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.027240114 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.016029222 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.018318713 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.027940361 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.017145566 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.020460993 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.028062344 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.022546254 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.01838913 seconds)
  done (took 2.35445836 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.024474006 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.04937723 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.028279589 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.028217113 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.023761926 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.023869447 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.023769869 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.024072373 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.02405693 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.026804483 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.024278867 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.059360268 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.021280054 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.025665361 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.024250286 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.024191701 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.024237213 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.024196245 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.024153092 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.024357751 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.024532174 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.029095486 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.024550645 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.029048358 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.026804905 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.021387241 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.02440821 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.024414521 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.0292629 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.024457898 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.026829681 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.024529633 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.0244929 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.029297636 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.026873081 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.024403921 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.01537316 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.02433029 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.024580394 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.024489046 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.021382166 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.029304043 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.024455311 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.021378088 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.024585246 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.024596671 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.029631042 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.027154917 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.026503469 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.027712039 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.024921082 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.02976907 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.024750122 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.024869344 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.029707947 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.032098597 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.029909009 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.029940047 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.025033828 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.029882346 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.029876776 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.032291698 seconds)
  done (took 2.38070574 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.027879986 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.020400509 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.032662373 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.014547282 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.014465263 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.022927309 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.014442453 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.014500702 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.020052527 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.020343412 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021691649 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.023259963 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025015627 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021823802 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.023288011 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.024999976 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.023222321 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.023248891 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020422885 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.023226215 seconds)
  done (took 1.157707704 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.031763014 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.033031213 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.020182618 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.023163175 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.019890808 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.023088594 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.019389454 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.019886299 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020272688 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.019918799 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.024327663 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.024284652 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020445491 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.023433416 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.02416549 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.023454957 seconds)
  done (took 1.085439809 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.019691497 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.022434158 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.020774502 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.015708916 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.017490016 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.015146668 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.015844855 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.01447925 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.016960473 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.028678697 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.015470012 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.018032507 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.016057902 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.014870561 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.015409334 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.01794264 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.017187846 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.015739705 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.016012974 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.019892403 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.023701436 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.016475782 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.018031451 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.0156939 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.017637135 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.023628678 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.016891746 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.017651575 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.015639637 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.01798557 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.017729002 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.02227052 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.017901481 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.016273161 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.014954768 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.015772538 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.016212395 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.018310153 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.018234536 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.016208726 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.014730876 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.018028285 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.016321514 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.016554589 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.017431668 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.018336065 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.017374861 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.021618625 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.016073387 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.01789876 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.016244661 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.017349151 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.016213447 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.022759276 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.017744503 seconds)
  done (took 1.690451378 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.033303025 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.020256505 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.014569464 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.014442433 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.019740169 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.020224291 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.01978346 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.019819236 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.020307858 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.014461202 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.020304593 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.019324549 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.0203518 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.019803006 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.020424162 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.019974455 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.014487495 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.020161953 seconds)
  done (took 1.073424618 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.022428885 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.020095191 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.019027643 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.016360754 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.016306805 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.020099057 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.01474037 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.015900924 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015865564 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.016325981 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.016356138 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.016071693 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016143761 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.016105525 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.019918342 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.016439408 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.016162862 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.015217906 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.016599086 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.014920135 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.02047547 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.01504103 seconds)
  done (took 1.091994246 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.077354498 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.040819836 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.037246023 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.03381576 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.025826649 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.04903569 seconds)
  done (took 0.980891663 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.050668035 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.052085873 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.019820807 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.019804391 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023665325 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022057508 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022025171 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022140561 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02494523 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.025889432 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022523027 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025655503 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025366507 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027075914 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023941507 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023958605 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022507915 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022528412 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.020006218 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029134951 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022733578 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02595334 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022855773 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022597155 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022699688 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027464395 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025876974 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026402467 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022640182 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026014002 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024395979 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022820575 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026158269 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026349569 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.020134571 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025885765 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022867689 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.029838527 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024456517 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027577251 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.020072186 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024395342 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025984503 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.025564221 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026202428 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023168502 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.025949887 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023052331 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023051577 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.031420946 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024788396 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027774932 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024713866 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026451777 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026227178 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.031494448 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026822451 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027954774 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024774958 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026841089 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028193219 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025007865 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028060546 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027002472 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02480772 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02816673 seconds)
  done (took 2.416321894 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.058728912 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.020253523 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.022248882 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.025684026 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026535125 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022163924 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022229443 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022286966 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022444506 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.020289136 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.057186059 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02266728 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027030771 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026990064 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022547032 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022443831 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022412709 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026918537 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.020295491 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.030766301 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022722633 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02750716 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027464164 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027481941 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02642267 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024506877 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022770872 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022748313 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022746769 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022695216 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.025611413 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022880822 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027406592 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.020408012 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027400155 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022879351 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022650215 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.025516735 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022753118 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024401018 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027566085 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.029672628 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022799151 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022834373 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026757422 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022952649 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022987502 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.020607351 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023035864 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.020551051 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026722827 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026617343 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026688012 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027912111 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02316379 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.0231527 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023018006 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022980174 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023129679 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024765488 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.028053619 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023012244 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.031825535 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023329198 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02320514 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028219319 seconds)
  done (took 2.407919534 seconds)
done (took 47.975373131 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.211783812 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.175421167 seconds)
  done (took 1.092949949 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.028756912 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.02677286 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.047901336 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.022909224 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.081174603 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.174184609 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.125618108 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.025772425 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.023501515 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.025504853 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.023160176 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.025193757 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.025315381 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.022981253 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.085999127 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.02584039 seconds)
  done (took 1.516165263 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.073160128 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.132656997 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.057827905 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.022245889 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.103226711 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.028231009 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.02392188 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.027581241 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.027998928 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.022414277 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.069573479 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.035408396 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.026900945 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.027830194 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.023912369 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.026915442 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.027796896 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.028260178 seconds)
  done (took 1.50566638 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.095982921 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.034085355 seconds)
  done (took 0.850887307 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.111957878 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.06351791 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.102244611 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.30034633 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.091401567 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.096790207 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.099463638 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.09850467 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.067779006 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.093241756 seconds)
  done (took 1.843584248 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.060047703 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.056775156 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.279248093 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.053853536 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.033821799 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.028830504 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.028597697 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.031045111 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.028854934 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.028747808 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.074240725 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.027367528 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.023991614 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.075923441 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.049770507 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.058922761 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.023156967 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.029446692 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.031951055 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.023137233 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.027737516 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.031286254 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.13025045 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.029927457 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.051843166 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.027329631 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.02905879 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.028037453 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.027964491 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.030240486 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.030626067 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.052188514 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.029817614 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.036887116 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.028245842 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.048991906 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.02404827 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.05070992 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.026733975 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.024095762 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.027198303 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.031109456 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.024655471 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.030242522 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.029252956 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.029634868 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.031741504 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.023288201 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.02915852 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.026893382 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.024263789 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.028237794 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.027968725 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.029066953 seconds)
  done (took 2.938879769 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.075095437 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.063384858 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023582465 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.070648256 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.062726319 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023644199 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.076659622 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.057953886 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.075875509 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023270733 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023013952 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.022854349 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.029703571 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.033631542 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.072728049 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.066352253 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.024929385 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.023510025 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.065160182 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.065451375 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.02249299 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.07767877 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.068473549 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.064875925 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.022261115 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.02379121 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.022454496 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.023094961 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.030516223 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.030130563 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.022752361 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.032570181 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.033979208 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.029174538 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022221828 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.022527375 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022456948 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.030194361 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.031950496 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.031774192 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.028484272 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022201468 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.022482243 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.022988869 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023553005 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.02206462 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.031572923 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.029647705 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.031333543 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.022941519 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.023009617 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.022359623 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023227309 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.03085664 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.028252534 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.029587782 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.032346198 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.022830125 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.022630328 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.024100113 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.033516701 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.03030516 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.030162762 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023749263 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.031616661 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.022808559 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.032727237 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.034810529 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.022610134 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023165996 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.022852354 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.022875827 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.023123412 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.028902106 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.028980895 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023198205 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.023096828 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022589255 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.030804045 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.028972839 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022647362 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.03125755 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.022328303 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.022931836 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023304257 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023810993 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.032244432 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.030259425 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023315439 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.02293962 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.022940432 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.022886523 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.022232045 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.031427831 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.03000815 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.03059957 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.033384639 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023776012 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.033815117 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.031470566 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.023933369 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.030400861 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.023365932 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023728458 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023687395 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.030378699 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.029837956 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.031864676 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023370089 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.023150848 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.030974348 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.033525102 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.023258109 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.030009947 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.033094542 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.030607679 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.022781164 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.033478546 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.0234784 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.033631705 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023595523 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.033135919 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023532857 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.030739345 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.023489266 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.022755646 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.02337227 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.034115069 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024385475 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.02356976 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024013962 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023616835 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.031278364 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.035656631 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024229984 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.031373337 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.03122 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.024038336 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.033442648 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023741466 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.033872042 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.140318906 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.024505586 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023001439 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.036607966 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023577869 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.023965338 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.023514208 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.033214291 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023450368 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.033087496 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.03073318 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023206471 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.034829911 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.032921653 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.030653258 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.033586159 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024354829 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.023774195 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023434555 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.023729 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.033593527 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.035170147 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.024542377 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.02371798 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.030289493 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.034301796 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.023238046 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.030585239 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.030560413 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.03095523 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.02393434 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.023731133 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.034012101 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.036435429 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.031011379 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.034045171 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.031747762 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.023661869 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.030620493 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.170168042 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022949572 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.034401805 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.022662744 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.031422005 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.03097061 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.027459619 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.030565586 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.03194797 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.030579139 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.030225528 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.032230791 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022208354 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.022422496 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.027988403 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.022436198 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.022571944 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.027755962 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.022881771 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.023450636 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.034459939 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022710252 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.031122171 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.022128483 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.028686095 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.021986947 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022935595 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.03304657 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022449 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.022921124 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.028070074 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.022569352 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.027854897 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.030915683 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.027841215 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.022369139 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022798969 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.031094511 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.030652321 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022375637 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.022346877 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.022814022 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.030234619 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.029816751 seconds)
  done (took 7.672268896 seconds)
done (took 18.15017106 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.149634733 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.070889384 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.154839131 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.090462572 seconds)
  done (took 1.182770671 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.055451375 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.019003085 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.032761916 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.040516505 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.018904993 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.027922794 seconds)
  done (took 0.930900198 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.210814206 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.137315368 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.140788711 seconds)
  done (took 1.223785354 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.130644224 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.267178895 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.478770975 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.124575592 seconds)
  done (took 1.746011778 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.06196542 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.05264265 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.028844437 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.062345751 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.036275317 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.015452801 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.085299086 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.021855076 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.049791002 seconds)
  done (took 1.209064555 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.094371335 seconds)
done (took 7.126638583 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.198582171 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.029782214 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.032206941 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.028559136 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.125525087 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.02118879 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.133958441 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.028344016 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.133489903 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.193034014 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.149909235 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.045157598 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.043592081 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.04160144 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.143533349 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.032506542 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.028099704 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.023502057 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.150448668 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.125276241 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.126233415 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.030227635 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.091208473 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.029509582 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.109266052 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.076925287 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.159202739 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.200777369 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.163649966 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.029679896 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.11745308 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.041397111 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.128400209 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.123019125 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.021996811 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.04606846 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.019533699 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.138705664 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.097646804 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.191466949 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.154053324 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.02795734 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.144421392 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.023994652 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.018779461 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.031741248 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.032070288 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.027767925 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.041622173 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.02742498 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.039854769 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.025589473 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.131481388 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.022677013 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.090086232 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.022356701 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.154064627 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.081258757 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.024208338 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.036633343 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.028031341 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.181603006 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.03759851 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.024263026 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.03067297 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.019074492 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.021589625 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.035967646 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.019429786 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.028994475 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.027349902 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.104469861 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.041952651 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.061830835 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.030310066 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.115437658 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.095144446 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.044064446 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.046503017 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.028051827 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.018556211 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.189834677 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.023079979 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.036631898 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.019156748 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.049530239 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.01916926 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.034701147 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.157343903 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.153204485 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.077615996 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.020093669 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.225318139 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.021690997 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.045342963 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.020437508 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.019894628 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.155942941 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.019721268 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.019930624 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.029602135 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.028045904 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.021634778 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.158512477 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.110313348 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.027622687 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.02875716 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.020750905 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.018864058 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.021091133 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.020733863 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.020178834 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.087073201 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.035191977 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.019441452 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.107667951 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.120186941 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.030731888 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.038947654 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.08025882 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.022883288 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.02877952 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.027321713 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.127588267 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.027954686 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.139425423 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.021431093 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.044062319 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.118558179 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.096355699 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.106523852 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.019874973 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.183855165 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.032717761 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.019463055 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.027343268 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.048869979 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.032053841 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.035142923 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.019752221 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.184669228 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.030370342 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.018894766 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.118638744 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.171562991 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.113102274 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.096942371 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.119499991 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.026584192 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.029410912 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.091890241 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.042601558 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.046247035 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.041981756 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.022268338 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.01935277 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.019090217 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.034094202 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.018508471 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.019341276 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.033315134 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.027646016 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.019109294 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.125755489 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.030472122 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.023081735 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.146032149 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.031068207 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.085910962 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.03963599 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.019706411 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.109469608 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.021090839 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.037284203 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.08059962 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.019660352 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.096119224 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.019489221 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.019260446 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.026657347 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.020838588 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.027810883 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.03191283 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.019464694 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.032790159 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.01803016 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.019341379 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.108358185 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.020984931 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.157489716 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.105801418 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.105203205 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.019536179 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.036235246 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.01895242 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.134236349 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.019318924 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.066367104 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.118857487 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.035286119 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.037139664 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.020418308 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.094944848 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.034011369 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.019035592 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.094489752 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.117588489 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.085320817 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.026638909 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.12608596 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.028189267 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.019541726 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.026502004 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.027375936 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.019833584 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.097786198 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.019135047 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.018718535 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.018974593 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.020914717 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.018339784 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.042447837 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.018494983 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.02666599 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.019076943 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.021745986 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.021020438 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.018458986 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.02692524 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.097182267 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.119033653 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.018498268 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.036635889 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.031568349 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.029982404 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.065605995 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.025832763 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.172974604 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.018740209 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.028269462 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.040613539 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.01886979 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.022518932 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.019288294 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.036866792 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.018672163 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.020392349 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.027551979 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.019494606 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.019658334 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.03332762 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.019493989 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.027395677 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.020354209 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.018738022 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.018742507 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.019205919 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.023614881 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.0227732 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.029221209 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.036620065 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.133393679 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.020203112 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.021218694 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.019248759 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.019197638 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.019478499 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.020639512 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.019122395 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.021067298 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.019456173 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.018846137 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.046907736 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.02267706 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.019911448 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.040407562 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.019274044 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.028267307 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.117050218 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.034830837 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.022540953 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.018554308 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.145983944 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.101058254 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.040563084 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.038731781 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.019655884 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.029018891 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.019606778 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.019797299 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.018579779 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.045451148 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.022778394 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.019651166 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.018542463 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.018831317 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.065104637 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.026829554 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.018854482 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.026856115 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.019167532 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.019179447 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.045679417 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.019889734 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.019485091 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.038531837 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.032674648 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.098005777 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.030997245 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.018581435 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.068743833 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.018904486 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.019563435 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.020002799 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.110443996 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.031673122 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.020941957 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.019502128 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.026810134 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.028057453 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.070721552 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.019185962 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.022901078 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.018574905 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.018908792 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.019977112 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.04466111 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.045972614 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.020789009 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.023130641 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.019544146 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.020062489 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.092241266 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.019136002 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.024088565 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.105480998 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.021717304 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.02727426 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.019085198 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.13275551 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.023471799 seconds)
  done (took 18.735942369 seconds)
done (took 19.483075286 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.052562137 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.032897372 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.0324314 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.027744362 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.031349652 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.030679604 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.032578928 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.028385533 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.033213934 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.030801221 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.029092968 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.018473771 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.026169728 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.035351567 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.027600691 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.034630694 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.031113176 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.033940999 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.019718929 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.034339817 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.029288097 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.03210196 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.027898207 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.033622839 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.019629773 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.027645738 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.041883082 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.036689633 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.022655682 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.028525346 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.026604269 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.032486254 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.026655395 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.02629857 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.028342808 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.024363759 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.028849544 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.025541746 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.041882106 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.024373522 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.019790332 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.031056723 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.026225967 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.027082398 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.02786481 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.031024482 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.024493555 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.034608347 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.018989092 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.032059683 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.041959266 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.023607252 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.022870735 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.027789216 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.024663338 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.028549335 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.022672383 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.030675576 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.024382416 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.031418757 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.027333502 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.027283667 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.019219266 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.027787835 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.026477531 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.026741498 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.018231973 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.023926558 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.019176974 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.019219399 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.01856921 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.027746991 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.025999026 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.024217666 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.018599607 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.019156565 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.018606818 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.031393293 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.026288455 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.027855293 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.019579005 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.024524389 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.024184285 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.019686626 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.023973917 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.030730799 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.018621573 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.01973914 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.018618987 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.03077944 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.025726082 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.019166337 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.030801252 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.023801298 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.023540319 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.019291813 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.018737701 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.023778383 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.0271676 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.019181912 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.01825183 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.02372634 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.024263381 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.027716548 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.019608869 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.023649002 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.023518791 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.018299131 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.027775407 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.026442181 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.028026894 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.031953996 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.027747731 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.032361877 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.019650833 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.018165939 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.028873083 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.019570253 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024024146 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.027239313 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.024539639 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.027253046 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.01982356 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.018658033 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.023859287 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.025184734 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.01962915 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.019761956 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.01962544 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.027969459 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.026546161 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.018266162 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.019242645 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.027879729 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.027884028 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.018705887 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.018612389 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.02776202 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.019854978 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.025242078 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.024485352 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.027927064 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.018941166 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.019596335 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.018532493 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.018895637 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.018666493 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.024562372 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.023986326 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.019788027 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.027847182 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.026453338 seconds)
done (took 4.81226332 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.034060593 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.061392821 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.05766087 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.035015225 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.031884034 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.020342253 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.023878039 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.038031132 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.022987394 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.043696487 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.044571518 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.041123442 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.047384701 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.018242539 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.019542357 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.020339446 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.018023667 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.03146688 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.035944974 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.048058874 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.054794418 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.019114748 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.037166605 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.038999974 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.031035747 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.037113683 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.020852655 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.020400547 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.022421485 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.036174448 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.045531665 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.019429545 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.020771178 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.038021251 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.035014969 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.027885764 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.020522079 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.025883035 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.020548018 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.019662885 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.021599331 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.037133104 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.025867854 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.02612066 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.020810117 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.020257318 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.020095029 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.026833579 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.032849219 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.025333383 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.031492711 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.038379163 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.021561696 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.020061594 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.018404836 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.026327631 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.01996958 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.020211876 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.020466545 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.019314597 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.020433615 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.022535829 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.02528926 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.025910119 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.023592229 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.02618037 seconds)
  done (took 2.715140497 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.038658218 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.04625673 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.033543411 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.033854042 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.019270252 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.019938831 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.019926883 seconds)
  done (took 1.028992013 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.064945694 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.027041481 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.03116837 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.031239219 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.040385107 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.028556556 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.031962399 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.048329526 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.019141025 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.043815361 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.037717794 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.032082557 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.023144193 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.031718957 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.050141276 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.034281817 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.032209954 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.02658564 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.026765799 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.032231011 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.024071044 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.051891176 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.031852424 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.020852797 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.032931908 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.026323396 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.02285144 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.020676836 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.022505127 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.019877256 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.01980307 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.041789732 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.025562566 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.026077147 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020820107 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.018929284 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.023461279 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020781312 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.023283954 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.027017902 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.022726238 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.022090652 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.022385475 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.020057237 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.021197312 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.024123897 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.020899266 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.020028761 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.019688221 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.026740372 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.019276435 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.025720366 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.022360433 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.025009283 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.027108952 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.026149542 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.026861412 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.020464367 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.027411993 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.029621537 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021722452 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.031791778 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.030815024 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.022802339 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.030806527 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.028541936 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.025699793 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.022857476 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.019682662 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.027695203 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.020514995 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.03092649 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.023077636 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.022324379 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.025176151 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.027141637 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.034649233 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.034592443 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.034607976 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.03330442 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.022636379 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.020185069 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.03418732 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.034418143 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.02483605 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020092337 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.0210365 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.034049136 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.043728269 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.022187319 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.024971416 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.020194325 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.030143967 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.022677534 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.02250564 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.027109571 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.020193765 seconds)
  done (took 3.488884599 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.024327073 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.022334857 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.02095031 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.020967827 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.021154335 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.020946426 seconds)
  done (took 0.960031994 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.045016935 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.020428868 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.031726307 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.020171722 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.041785841 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.025758878 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.026216784 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.021774166 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.035636762 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.03085037 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.02567014 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.027644549 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.028464599 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.021549097 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.025729225 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.030321151 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.026025849 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.024408772 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.029950747 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022005191 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.033435992 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.021720172 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022038673 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.030130363 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.022657452 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.030292152 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.029827205 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.030351308 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.029902218 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.021952027 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.02155739 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.022502889 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.026626394 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.021957876 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.026302142 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.026730986 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.020364344 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.024736745 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.022975439 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.022644877 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.027932939 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.02213629 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.023111288 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.024823513 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.022119741 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.026921406 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.024864749 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.024072083 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.025901237 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.024711139 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.024756149 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.02100621 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.022659986 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.024796155 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.026910959 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022191361 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.02475434 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.026208586 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.021709646 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.026965203 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.020503037 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.022753786 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.022150729 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.022918506 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.025223763 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.024758428 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.026910639 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.022125805 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022188352 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.02046229 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.024840548 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.020421936 seconds)
  done (took 2.647442658 seconds)
done (took 11.662558024 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.53036045 seconds)
  done (took 1.334298579 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.579305548 seconds)
  done (took 1.414419199 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.049629103 seconds)
  done (took 0.873527185 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.285866736 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.37198757 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.707473647 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.092033679 seconds)
  done (took 2.271007782 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.842838781 seconds)
  done (took 1.679572558 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.21651345 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.178890917 seconds)
  done (took 1.259417202 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.354181371 seconds)
  done (took 1.180055714 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.174934224 seconds)
  done (took 2.004871977 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.188643332 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.116558577 seconds)
  done (took 1.135663409 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.477645328 seconds)
  done (took 1.306694525 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.50736045 seconds)
  done (took 5.335330718 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.198169203 seconds)
  done (took 1.093515524 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.18971868 seconds)
  done (took 1.023078356 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.696224392 seconds)
  done (took 1.527444213 seconds)
done (took 24.26459103 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.042733716 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.038423811 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.038086821 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.033432058 seconds)
  done (took 0.97502347 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.029184865 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.023349223 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.026291543 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.026435015 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.024068114 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.025694951 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.025623676 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.022714937 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.02392527 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.022926756 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.021607269 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.022889234 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.025426013 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.02276274 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.025316162 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.02647395 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.022835077 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.022914794 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.025213513 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.022887351 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.025616797 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.022999292 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.022958371 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.024633938 seconds)
  done (took 1.418924786 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.033314168 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.025164434 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.028188993 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.023955088 seconds)
  done (took 0.947575173 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.031991227 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.029907017 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.038336081 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.04287615 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.029249901 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.030072606 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.036321731 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.036803532 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.042261495 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.039152531 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.020903634 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.02064862 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.019946459 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.038496486 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.03612806 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.015482136 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.016902555 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.03017962 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.029387858 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.032120285 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.023013952 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.018775571 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.029347896 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.030013345 seconds)
  done (took 1.551791895 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.036862966 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.018828487 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.033847292 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.043703091 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.044580957 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.018622645 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.031593734 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.044568675 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.080234233 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.018625995 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.024644888 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.018603746 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.056345581 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.018740931 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.033676045 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.062018412 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.064729007 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.022588996 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.051215101 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.018782451 seconds)
  done (took 1.58625012 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.027858348 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.02381704 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.023492801 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.018891307 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.029856139 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.025857694 seconds)
  done (took 0.994253148 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.023906617 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.021621665 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.020329455 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.02556801 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.021310503 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.02120967 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.020589809 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.019462879 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.019387541 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.020155513 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.020132793 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.020596582 seconds)
  done (took 1.091792965 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.113118323 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.025820419 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.023649743 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.019421708 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.021138628 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.020105599 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.034803914 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.021877147 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.037386231 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.020109309 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.020192464 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.022175873 seconds)
  done (took 1.219233706 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.05995728 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.063951856 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.097190033 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068860913 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.069976854 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048587161 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.080480054 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.031242226 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.116875246 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090851017 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069652701 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047130253 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039348523 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.022828759 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053935387 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.073004393 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091040593 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.026024821 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.067204095 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118818181 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085736072 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.089940254 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101756653 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071024203 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.044952836 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102099924 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050076143 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.056933368 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.078507678 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.08249856 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073377937 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.051910509 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.024736929 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.024126666 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105691256 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.061078773 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07718302 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.04718628 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.059840698 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.042240889 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062400175 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.022922298 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.047561484 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.065415722 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038847904 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089316793 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.047604061 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073090853 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035557507 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096765865 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088023229 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.055169087 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.041165304 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061908268 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.098863898 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072480738 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099010179 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.064461301 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038828463 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.07800992 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.066646052 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058636708 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.212904587 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033540223 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130233119 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.041759068 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.06491306 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064421239 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.046941972 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.048506481 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.059285776 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.087881976 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07752642 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.077664062 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089467624 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.047274329 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071981931 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.052469583 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.079815405 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055900043 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.025859371 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.073906708 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080728103 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.051200719 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.053224604 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081589304 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.045016704 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.03101019 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.054247153 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.073742174 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033791871 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.067975169 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.03392701 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.063478798 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093293118 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052382285 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066459122 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.07264852 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.031733352 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111172063 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.062724128 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026384068 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.071410018 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068273513 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112350376 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050914424 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.029817478 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055080895 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061212271 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.10764457 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067231284 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.03475886 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067591534 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101928203 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051129515 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.130480965 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.052492422 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103497207 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072009002 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.042207169 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.029941894 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.046064815 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073264894 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066635253 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071849352 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051146994 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.040564225 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.041933261 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.224045658 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.045822122 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033834941 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.066430977 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.056169205 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.027637056 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04069075 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.029652344 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093401031 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.031026164 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.08690179 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077017903 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.028415154 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058824761 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.050039819 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.060244406 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.049895292 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.069417361 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.090216221 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.132029922 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.042751799 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.046692659 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05958942 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.095393556 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078285641 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.044378956 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.029563823 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.052566304 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063560168 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.050311291 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.07933015 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.049174463 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061397525 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.057165616 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096292095 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099848532 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054377015 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.055410444 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062644449 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.077104437 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.03029892 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112747683 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059217842 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.073136057 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.037834521 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098219691 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.066003618 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044262462 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041007769 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.054714305 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.059184867 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061703378 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100694949 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.050837315 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.026784234 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049840338 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105645574 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.031241668 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068579605 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.046590371 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.048705617 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076161175 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.05226141 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.036961898 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.022451816 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091158259 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12363688 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.024452516 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.072629312 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.075195278 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.212190021 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.074056068 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.022650091 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.07046622 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091115942 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068553586 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091516515 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116834368 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069725507 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.069942642 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.065079851 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.057955545 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.032168737 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.077333618 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.086206299 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047848171 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.043774139 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.08549411 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.070163077 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.087401394 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.068267278 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071107157 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.058997165 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.063850639 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057195698 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.060437084 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100870748 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.076364121 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.080175005 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.039890191 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061022553 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.074693958 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091997306 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.035720431 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098015766 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.038050654 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.075616475 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.030996845 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.080146183 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.029647436 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.11972441 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033238707 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.054704645 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.02321505 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.027855212 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098505045 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.067640761 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.062133773 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057002996 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.09719253 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096701387 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.031636836 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.065380434 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.074696972 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.058142854 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077041923 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.065864999 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.044931849 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053494019 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.066208498 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.041452875 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.038312658 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075896016 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053326877 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.229266536 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.037619974 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.028134618 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091716721 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056970077 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047334812 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.031340382 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060169436 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.07658304 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.045811124 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.039637066 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066660368 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057177715 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092680223 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.043602832 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.050278027 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076797074 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.033123873 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.044892282 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.022524069 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.038449445 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.029306275 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078759598 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.028709207 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.067108389 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.021974081 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082815753 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038164003 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.045809222 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.054599571 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061446653 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.079375103 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.047212239 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094406732 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042747958 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.073880004 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061741301 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048512011 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042568795 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057172482 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.054549884 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.076956512 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.049984368 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078938028 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.099547778 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058136253 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097763292 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044868632 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.077255374 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061208614 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.081002001 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.066849987 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124085934 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096124901 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066776972 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.068144515 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029274136 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051077981 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062405041 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071173223 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139913172 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088341184 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.026725121 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.066558091 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.049951572 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.068393887 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063651547 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.037982436 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10851334 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.208387911 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.041592364 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.064684758 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.042922136 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.056607696 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028947366 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052229052 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.056325368 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.047007869 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050333475 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.068630088 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079961092 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06462844 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094675547 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.053385347 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.044683542 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.070429096 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06232791 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061806852 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038116354 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03858391 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089006376 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.072341729 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.077942099 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.052647432 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060218706 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.06448293 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051936127 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.076356494 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060957906 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.080423414 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033410659 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.029043644 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.021772418 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.02550978 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078649822 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062374443 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066627279 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.052877457 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.025854331 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.057930227 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.060921153 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.025638927 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041966834 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048884608 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.049795124 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.046714787 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062474332 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.065436392 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.050272813 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.058909925 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.053953557 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104844887 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.055290304 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043208712 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100927357 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107792983 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042537471 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049063694 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.025489523 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033294824 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071028177 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111168495 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116190829 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.032841712 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.042355374 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.042792919 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043559124 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.0258445 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.045361642 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.045605892 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063358522 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059166825 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.072281097 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.209464976 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028956849 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.056185736 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051530169 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.045092757 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.059545462 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07155878 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.077516463 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.092255721 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065401015 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059805481 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028971819 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.033130539 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.028913007 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.03245559 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.054528402 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.032232343 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029356963 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094494553 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.044582831 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056858186 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060244552 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.040722856 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028086914 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085497752 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.022526174 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086314491 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.024293105 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034475322 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.035614033 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03155437 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.045679741 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.08883161 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.064654326 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.066057582 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060608037 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058017033 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115569329 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113935185 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.034302176 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099390663 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029431031 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.029043639 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.029651623 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065810622 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044191474 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.069675763 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097673701 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04452156 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057584116 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.030768128 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100744327 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.054840432 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.059092484 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.041002821 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.032923023 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100509152 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033081319 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.034360167 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.044223895 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.066171332 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.02618404 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.059809561 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.039145442 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033987665 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124808879 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.667297671 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.047454634 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.030554376 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.052964051 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103998862 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095689559 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054867199 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067449785 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.078381241 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.202240437 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.048369237 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060253548 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.144029686 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027322566 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.046748103 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.056007101 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050352505 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053893972 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.051110026 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.040025609 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.04520422 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.039932982 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.032190067 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.05989355 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040838843 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.04957533 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.062661394 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.035480746 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.040214449 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082522761 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.055118399 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.034020959 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040310214 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.05613355 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040282845 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055881919 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.022492385 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.065038528 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.04328147 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069887112 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.052391656 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.061176426 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081852815 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047035153 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09016938 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.060886325 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.075862325 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.040818316 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.031528978 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081015401 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.042205535 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031103187 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100012147 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.049753119 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.057863356 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058604696 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.050604153 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.068097055 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.072852502 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06729644 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.051653749 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032528502 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056041283 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.057823919 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.03979389 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.032140676 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.028260825 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.03005839 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064317745 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041554224 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.037568815 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.071174002 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.044824494 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.059352369 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.0606078 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080637409 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.041833283 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.058108645 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.067513647 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048526473 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067979352 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.057879283 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.089574523 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14181358 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.225435764 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082613019 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086581275 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.029676696 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.028375632 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.022089131 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.067975083 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.032513783 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.042151117 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.034474493 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085793703 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.035548527 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063809692 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.196798004 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.033605377 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.046559832 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048260342 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.022815925 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.035719106 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059237087 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.03977837 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032641775 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070365215 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.035498696 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.080001561 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062495556 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051365787 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.046970797 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033454256 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06566108 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.056063928 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.081577891 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.04736445 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.028108732 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.075405286 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.05682816 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092697036 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.026500717 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034257562 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084665946 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057721889 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.0867044 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033697629 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10733234 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099728154 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.054792081 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090894626 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.024736799 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.041176707 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044084624 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.080206069 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038893498 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067346047 seconds)
  done (took 39.331030777 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.145394986 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.136970339 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.075896747 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.086872127 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.242842046 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.250666391 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.104917412 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.079886729 seconds)
  done (took 2.104913809 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.027557546 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.036649219 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.034430317 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.161230092 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.072810318 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.020796036 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.025380877 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.035062925 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.024029743 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.020111615 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.058791277 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.020374713 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.024389401 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.429668146 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.019866809 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.025410001 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.024310585 seconds)
  done (took 2.064093961 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.306981675 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.734264739 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.315018312 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.654097496 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.09277208 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.475365539 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.02920627 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.034212659 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.534645701 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.344866764 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.087804719 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.180359562 seconds)
  done (took 15.74490051 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.031223311 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.030274272 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.029695834 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.026864791 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.026682498 seconds)
  done (took 1.098919883 seconds)
done (took 71.034135648 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.039800437 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.120329948 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.020161448 seconds)
  done (took 1.131420521 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.036859841 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.033260933 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.032720385 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.033426169 seconds)
  done (took 1.089701725 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.029945151 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.029479193 seconds)
  done (took 1.01200237 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.18037318 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.126343849 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.042463023 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.038518252 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.033754847 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.033826065 seconds)
  done (took 1.064988932 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.026348338 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.024216358 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.024190832 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.024487776 seconds)
  done (took 1.051860135 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.025660152 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.019102692 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.021707058 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.023177846 seconds)
  done (took 1.044463367 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.039962853 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.039104296 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.067506769 seconds)
  done (took 1.098943178 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.037602601 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.037779519 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.031376977 seconds)
  done (took 1.063807388 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.064351528 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.049281857 seconds)
  done (took 1.067181487 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.034854699 seconds)
  done (took 0.990714191 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.046236138 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.05020971 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.092664096 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.058204043 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.093188327 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.078963616 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.029125518 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.029875931 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.02581608 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.024889967 seconds)
  done (took 1.480921105 seconds)
done (took 13.437992063 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.03896646 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.143673867 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.270692024 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.040029511 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.607132035 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.266204429 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.675275232 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.043013963 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.051879425 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021210094 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.037240089 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.585704265 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.679710237 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.09924293 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.666275729 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.091170404 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.515135711 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.02194038 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.020637606 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021204915 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.659037484 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021211401 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021176831 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.021566333 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.512690115 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.286185185 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022242084 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.092300661 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021323634 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.024820861 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.269723943 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022018919 seconds)
  done (took 11.817271046 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.030013498 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.078914651 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.025903685 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.036620669 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.023125219 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.023137429 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.024961646 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.021673655 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.062631447 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021302201 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.039809345 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.020703522 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.025463016 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.022230033 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.040740578 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.02110128 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.023222807 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.021814708 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021185779 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021799508 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.039697428 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.020833598 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.02163076 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.021709507 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.021441766 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.034714975 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022192281 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021113449 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021292634 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025011615 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.026027464 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022523822 seconds)
  done (took 1.871572959 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.081141079 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.081758795 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.026486729 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.061122876 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.068111709 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.023699851 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.102349371 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.04319864 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.065980491 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.02167655 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.03800355 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.021196864 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.056642039 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.022733357 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.042019687 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.02160849 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.023664973 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.021934153 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021183703 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021827721 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.040342574 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021105988 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021708838 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.02196634 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.021851093 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.037015928 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022545915 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021496575 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021442174 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.02519154 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.027166698 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022686405 seconds)
  done (took 2.135521726 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.024725301 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.024809139 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.030719946 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.033432122 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.019775428 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.021896001 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.022871225 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.019718589 seconds)
  done (took 1.165912518 seconds)
done (took 17.95636538 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.035073352 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.021661973 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.024446854 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.04103759 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.02776995 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.022841368 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.018415855 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.028134502 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.024913543 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.024908702 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.026338181 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.019918754 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.023558793 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.018432447 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.025202404 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.019437232 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.025316794 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.023459366 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.022984062 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.025345098 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.021843771 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.02503668 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.028014131 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.023053644 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.02305603 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.022999026 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.028235967 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.025268598 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.019904436 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.022568797 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.02279726 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.022623052 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.022216626 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.024725525 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.019543048 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.019462639 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.023899052 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.021390523 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.025510105 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.028244948 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.021706173 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.028196171 seconds)
  done (took 1.969734659 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.029333644 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.03305288 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.024962373 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.031589115 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.028179567 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.031188958 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.028818087 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.028118016 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.026825721 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.027977327 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.022424722 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.027044899 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.02925615 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.0203207 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.026934841 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.023275254 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.028951976 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.021408151 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.026886302 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.027071434 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.028988895 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.020386585 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.027833368 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.028414622 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.022888693 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.02865745 seconds)
  done (took 1.667468625 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.029678096 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.042599556 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.045295554 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.098238472 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.062661233 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.283614406 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.036679664 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.046824112 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.053967879 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.021022364 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.042504032 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.047143466 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.048934414 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.027738884 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.059693455 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.039101911 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.033228969 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.022508262 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.02728806 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.055012906 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.043598281 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.039536359 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.053541761 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.040648984 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.020008646 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.030122045 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.027995366 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.036924122 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.027981701 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.032618888 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.024739823 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.024205875 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.02158301 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.032221565 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.024636398 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.018894047 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.043049026 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.033028339 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.035346705 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.059440981 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.030622126 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.022177736 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.047536612 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.085056525 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.02037273 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.023240327 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.024916966 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.032971711 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.022184112 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.051064814 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.03582875 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.020560552 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.039474732 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.02217124 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.022116898 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.036138186 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.022314952 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.022788425 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.032161091 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.026738694 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.041648705 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.025888518 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.040984965 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.02052267 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.03166895 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.022213847 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.02238493 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.019472202 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.054543313 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.028004117 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.06978002 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.021864296 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.018963837 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.032769904 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.032055757 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.027937574 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.02055221 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.039458499 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.033095921 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.024590868 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.031526404 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.02365339 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.023983829 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.056893151 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.019893218 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.018918142 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.018904813 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.023074168 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.024069928 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.021319853 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.03316926 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.020345411 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.024089681 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.034900316 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.020731499 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.021426103 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.023140229 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.021865374 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.020244501 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.030615753 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.024599719 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.022481976 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.033322711 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.021818186 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.024048582 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.035558185 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.029755004 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.02026283 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.021777507 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.02309518 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.02246492 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.02515334 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.024192485 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.022727708 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.027910153 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.02825726 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.026773398 seconds)
  done (took 4.977149374 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.115598384 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.105345387 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.021523979 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.099055486 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.028621065 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.024261029 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.101460804 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.101151812 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.021233065 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.022183811 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.020410307 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.04774107 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.042837812 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.053620827 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.034268479 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.023112487 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.046167477 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.052705078 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.104547466 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.09802925 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.043973772 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.0289009 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.023397095 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.022381581 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.02245924 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.030437081 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.036827962 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.029313998 seconds)
  done (took 2.387323932 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.028924116 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.06478995 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.024484113 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.044970304 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.037958052 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.02134065 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.023035152 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.022109971 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.03789874 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.026415282 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.021016719 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.025195339 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.024395871 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.023322901 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.021956634 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.027605736 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.027516636 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.028655869 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.024749648 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.025624137 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.031697246 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.045108235 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.025250795 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.021205198 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.024376805 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.021189915 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.026530389 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.029461427 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.020990198 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.020958002 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.018299203 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.025571836 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.035550198 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.022176798 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.021006732 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.021818984 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.021357799 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.021391837 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.021579539 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.019342669 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.019298889 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.026332045 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.020073828 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.025835404 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.035244052 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.023324406 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.022216139 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.023630528 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.023641773 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.018155916 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.02460329 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.024299177 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.023762797 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.029452067 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.024891034 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.02360329 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.022596027 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.033358325 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.02644552 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.020680488 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.020251608 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.019747982 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.02279545 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.027498312 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.037839947 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.022744513 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.019662424 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.021363659 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.022782561 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.035109532 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.020607917 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.026689323 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.018323638 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.021306966 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.023469907 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.024223585 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.022726975 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.019766236 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.021027266 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.02141522 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.021429278 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.021043158 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.020775164 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.024040126 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.019157114 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.019744174 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.021852413 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.022467334 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.026594124 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.02014678 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.02391119 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.0226019 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.023675796 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.023944153 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.026403391 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.024177605 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.040994567 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.028814751 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.021853211 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.019194496 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.035897699 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.023090172 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.02062879 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.023179383 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.025780827 seconds)
  done (took 3.620726951 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.045176957 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.023302589 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.040983701 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.047029831 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.030987956 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.027018516 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.034922254 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.022431077 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.03689132 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.020606203 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.030381941 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.019743614 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.033915987 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.029847736 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.02301044 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.030978414 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.02395699 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.041436936 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.035341011 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.020178726 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.029837957 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.03292379 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.033270236 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.038772126 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.038397575 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.039397142 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.032987646 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.024124997 seconds)
  done (took 1.873433752 seconds)
done (took 17.460081183 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.004419684 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.228855443 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 5.986562985 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.528000195 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.062449371 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.028199391 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.201993835 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 5.968066452 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.457921204 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.083541195 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.802697671 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 4.806517475 seconds)
done (took 58.204386828 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.064230744 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.133146597 seconds)
    (2/2) benchmarking "String"...
    done (took 1.22831236 seconds)
  done (took 3.345591423 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.423538845 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.983521781 seconds)
    (3/3) benchmarking "different"...
    done (took 1.024204663 seconds)
  done (took 4.39483352 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.364428154 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.963943724 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.346436249 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 5.963900351 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 5.976544929 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.91434316 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.164688017 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.660222453 seconds)
  done (took 26.963579201 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.96976918 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.346444312 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.344242694 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.458369311 seconds)
  done (took 17.172475455 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.434817288 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.382416261 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.381495295 seconds)
    (4/4) benchmarking "different"...
    done (took 1.700835403 seconds)
  done (took 7.007699559 seconds)
done (took 68.289627959 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 5.962540805 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.332891818 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.000924687 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.166116754 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.034446351 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.043152638 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 5.977545398 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 5.990814301 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 5.972793718 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 5.976602579 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 5.974837423 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 5.97369662 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 5.970959728 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.026680386 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 5.980228521 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.008577311 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.327421314 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 5.979793912 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 5.98754654 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.028970098 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.294309828 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 5.97637003 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 5.985414314 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.054188951 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.484612508 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.019127215 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.488688793 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 5.989805191 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.575214323 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 5.980450049 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 5.980984273 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 5.974221791 seconds)
  done (took 178.483872561 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 5.963018388 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.83789804 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.878377066 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 5.988306593 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.359189748 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.332085362 seconds)
    (7/36) benchmarking "scal!"...
    done (took 1.826301143 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.376010682 seconds)
    (9/36) benchmarking "syr!"...
    done (took 5.974129628 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.004879516 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 2.957149693 seconds)
    (12/36) benchmarking "her!"...
    done (took 5.970909488 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.028523064 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.707128339 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.02018748 seconds)
    (16/36) benchmarking "herk!"...
    done (took 5.981703725 seconds)
    (17/36) benchmarking "trmv"...
    done (took 2.877546374 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.828145596 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.026447154 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 1.892177571 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 5.972986661 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.574727853 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.539592916 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.825953917 seconds)
    (25/36) benchmarking "symm"...
    done (took 5.993997548 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.015665722 seconds)
    (27/36) benchmarking "syrk"...
    done (took 5.988445585 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.024210444 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.33366957 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 2.827924572 seconds)
    (31/36) benchmarking "gemm"...
    done (took 5.978436644 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.000003384 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.167669215 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.215773056 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 5.966201526 seconds)
    (36/36) benchmarking "trmm"...
    done (took 5.981128534 seconds)
  done (took 149.210675165 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.234464186 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.972401192 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.008556035 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.08294106 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.039196191 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 3.931685656 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.974817122 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.963266137 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.962053805 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.968739467 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.965571766 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.033208764 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.972704102 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.011766842 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.004851154 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.964750489 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.962997848 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.004106148 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.984088047 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.964408048 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.9628484 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.069245855 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.315757792 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.076304022 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.972494224 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.972814478 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.073010225 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.979307476 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.965132482 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.962874649 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.072699261 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.973158722 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.093983404 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.082347217 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.980160359 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.021982808 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.980440359 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.244190105 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.975929501 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.963316032 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.965816491 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.013182076 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.97254769 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.049498156 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.081346924 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.978395497 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.982160603 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.439338077 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.551070154 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.975362766 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.964496301 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.963552163 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.967414414 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.96549744 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.041171323 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.97712063 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.997104992 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.641031835 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.982706809 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.963892458 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.962921725 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.963032027 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.962977318 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.969984572 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.001751082 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.617716864 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.800330039 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.326500519 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.719390893 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.974951524 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.966105646 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.964606154 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.852614125 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.037812313 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.966377603 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.964064047 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.13615453 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.974111805 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.963167836 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 2.880552725 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 2.882589054 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.975222472 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.073334885 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.975345502 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.962696788 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 20.967978168 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.01183798 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.98460999 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.982921106 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.02065462 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.968143723 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.961911781 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.968765581 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 2.882264298 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.974883231 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.975881678 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.344175679 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.976473534 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.963334285 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 20.986725847 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.33396066 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.976234719 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.044894045 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.374735368 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.992363368 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.973925421 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.965357352 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.982883387 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.965718527 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.975472166 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.97683173 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.965603548 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.963257873 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.96884774 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.964657794 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.964951513 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.962135343 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.983306465 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.966551687 seconds)
  done (took 310.131926266 seconds)
done (took 640.168474139 seconds)
(4/20) benchmarking "parallel"...
done (took 0.963111757 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.376159286 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.09355091 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.082933426 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.770778352 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.226577691 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.113143409 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.260482394 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.47190546 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.281527535 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.106097242 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.73328841 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.132247924 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.385723556 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.348578778 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.127100827 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.407790959 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.146702841 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.614089489 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.841833804 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.134011425 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.16367268 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.150599995 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.089702944 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.792645426 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.148579867 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.192151284 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.355876074 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.721913397 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.225979697 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.712446443 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.457837909 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.421536877 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.243732106 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.131352542 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.950094005 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.189999983 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.168951542 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.785825245 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.144102237 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.573076608 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.788854975 seconds)
  done (took 68.028879946 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.327886512 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.167648602 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.280915882 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.299546397 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.038499662 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.282048731 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.372830049 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.164011385 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.170756 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.293116108 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.305054618 seconds)
  done (took 16.718946265 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.214977842 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.166491012 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.290564824 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.313884887 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.404770477 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.280599807 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.340102847 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.163400739 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.184315423 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.294186571 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.314848928 seconds)
  done (took 15.958029071 seconds)
done (took 101.6695527 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.518403861 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.04587577 seconds)
  done (took 3.526953711 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.986888351 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.983619202 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.981388735 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.981824569 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.981662378 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.981080571 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.0198176 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.984795254 seconds)
  done (took 8.864961362 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.98162069 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.982781472 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.98189522 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.981011424 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.983102732 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.980616136 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.981358353 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.980437113 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.982888603 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.983245374 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.981379389 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.982026999 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.982464458 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.980859979 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.982056221 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.983150676 seconds)
  done (took 16.675990939 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.981687288 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.982584604 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.981371226 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.980111341 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.982650183 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.980607854 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.980441355 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.992524555 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.983662687 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.982886705 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.981467703 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.98470229 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.983542626 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.982433582 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.983960265 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.980738518 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.983155159 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.983541858 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.982032617 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.982388975 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.982607161 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.98115042 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.981926933 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.983863722 seconds)
  done (took 24.55058857 seconds)
done (took 54.609100196 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.589705358 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.019197047 seconds)
  done (took 6.572829961 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.986375462 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.98186299 seconds)
  done (took 3.050309966 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.982094111 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.982641734 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.981637992 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.983071903 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.981844535 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.982583627 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.982984187 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.982525657 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.982333786 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.981372915 seconds)
  done (took 10.787983588 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.981849512 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.981909239 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.984555723 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.982496535 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.982346624 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.982264874 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.983366532 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.983483183 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.98219301 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.982876581 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.980305131 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.173957911 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.985050946 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.208065528 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.982521952 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.982772576 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.982117747 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.983298367 seconds)
  done (took 19.072689335 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.982089565 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.98334031 seconds)
  done (took 2.930062147 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.982407233 seconds)
    (2/7) benchmarking "second"...
    done (took 0.98222012 seconds)
    (3/7) benchmarking "month"...
    done (took 0.983556727 seconds)
    (4/7) benchmarking "year"...
    done (took 0.985028992 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.984288273 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.9838514 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.983608565 seconds)
  done (took 7.85083423 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.648453212 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.131488961 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.173513152 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.673676901 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.950591249 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.042905773 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.955819473 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.03983751 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.86083556 seconds)
  done (took 16.442157767 seconds)
done (took 67.671492584 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.68738328 seconds)
  (2/8) benchmarking "printfd"...
  done (took 5.974969089 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.650996181 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.144728905 seconds)
  (5/8) benchmarking "pisum"...
  done (took 5.981446896 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.358783631 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 5.974157071 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.585818794 seconds)
done (took 36.351353417 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 5.972873133 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 5.96309056 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.011105653 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.012327823 seconds)
  done (took 18.95877255 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 5.963483554 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.655167776 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.014095915 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.111354947 seconds)
  done (took 18.816574926 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.493379836 seconds)
    (2/2) benchmarking "read"...
    done (took 1.411029762 seconds)
  done (took 3.888266978 seconds)
done (took 48.61137647 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.980480352 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.981384561 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.980406242 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.980881727 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.981004225 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.980757514 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.9828109 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.981392319 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.981891751 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.983324148 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.983785091 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.981577142 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.980829918 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.982441019 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.980782097 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.98142848 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.982387044 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.981779112 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.981848777 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.983350511 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.981961528 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.980225589 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.9827013 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.980881175 seconds)
  done (took 24.527311039 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.059033973 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.046883925 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.057165042 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.048088062 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.077818998 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.05465224 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.053334108 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.024005691 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.056219504 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.036234327 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.01892502 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.076252254 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.018203017 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.076615012 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.018237973 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.076743976 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.056420304 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.020904613 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.018578544 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.081146222 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.048335077 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.021497951 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.075883061 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.014573253 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.069362638 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.022085156 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.035880478 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.048748247 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.014284669 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.068040207 seconds)
  done (took 32.358010841 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.015425317 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.98052186 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.983769771 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.061111393 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.98044289 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.980952066 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.980981159 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.980710925 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.981074337 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.983043698 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.982529797 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.982506264 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.981931376 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.984293665 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.982455661 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.980663167 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.013138093 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.160978686 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.982788618 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.982311617 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.026075277 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.983023402 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.98345292 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.982171691 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.982101813 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.981314488 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.980631569 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.982192011 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.981669268 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.981437779 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.984031366 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.024416567 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.0151042 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.982326811 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.104711019 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.041576361 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.981829597 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.012111236 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.981355369 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.982580489 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.982490805 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.982920915 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.983320817 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.982429034 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.038469688 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.982510474 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.982825846 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.982925153 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.981626009 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.981296352 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.981617713 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.981013015 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.996872704 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.982365661 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.982327066 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.982769237 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.982179532 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.98308871 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.981799915 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.981585633 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.981580628 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.050840163 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.983464485 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.982462216 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.357833632 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.982360043 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.045484718 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.981562009 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.981016457 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.193886426 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.982153656 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.192029509 seconds)
  done (took 73.332772266 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.983275323 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.981318972 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.063843158 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.062940388 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.982383182 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.982619758 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.981456117 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.98070176 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.651506663 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.983996866 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.982944096 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.981878283 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.645880539 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.98381878 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.981820913 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.063742278 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.982192852 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.982412759 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.982224703 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.982402404 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.981881704 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.981579008 seconds)
  done (took 24.154056531 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.017679761 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.997052922 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.02496334 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.997074234 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.997003255 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.997267149 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.018214301 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.995965546 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.026032619 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.02911894 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.028821664 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.023155742 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.997487349 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.024738386 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.023608099 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.072252743 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.02449457 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.07439816 seconds)
  done (took 19.333967097 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.173126549 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.142772143 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.06114905 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.021422365 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.213916732 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.197619074 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.082448111 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.171144828 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.022941818 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.141765867 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.170719041 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.023705509 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.19522969 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.023850644 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.023149834 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.219102996 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.06037375 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.025344694 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.095599291 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.082669184 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.174554944 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.095854331 seconds)
  done (took 25.383359726 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.019854618 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.027804862 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.057176783 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.056602857 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.981251347 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.982197083 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.037992911 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.017774222 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.998037688 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.018243632 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.018093437 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.981482878 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.068052263 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.036101006 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.067014219 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.018637413 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.028315946 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.036501471 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.02244893 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.980958917 seconds)
  done (took 21.422272991 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.983003555 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.982173533 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.986046935 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.982927013 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.982265411 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.982062256 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.982530058 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.982991035 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.981914427 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.22110542 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.98227756 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.982356252 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.983182476 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.982959995 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.982143848 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.982285763 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.982351526 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.982899129 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.983547734 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.983745177 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.220827138 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.983708476 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.982534311 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.981984286 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.981875806 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.982261277 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.981764215 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.982772271 seconds)
  done (took 28.958382632 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.045977566 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.025879588 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.027607342 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.101892492 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.101411993 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.018421802 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.102486587 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.100201801 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.016259442 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.021896059 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.068793534 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.021810746 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.02292766 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.015239723 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.016197908 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.0685865 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.016570541 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.101163352 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.059724967 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.019306119 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.06954949 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.016158915 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.068039685 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.018603729 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.017747238 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.068689718 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.058328067 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.144313844 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.041940324 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.022883202 seconds)
  done (took 32.464481165 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.004673303 seconds)
    (2/2) benchmarking "in"...
    done (took 1.008060213 seconds)
  done (took 2.976827913 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.981322862 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.078507607 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.982578628 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.173774352 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.135400422 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.157547839 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.144221657 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.068532858 seconds)
  done (took 9.686767722 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.983695002 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.370863296 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.006227459 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.982977201 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.982646 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.447173628 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.927588127 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.881743066 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.758249171 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.977602768 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.083723665 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.520887022 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.953696114 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.295016463 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.106382993 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.813972477 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.237193503 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.550434551 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.041833339 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.119826622 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.723306288 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.096460481 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.984182123 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.982190813 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.982106836 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.892899667 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.858285384 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.403892824 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.142112066 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.118727838 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.750575575 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.074827267 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.982395766 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.249259658 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.111062344 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.984186816 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.161733668 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.102135929 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.983391883 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.982129332 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.689224379 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.841123866 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.13435163 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.229514725 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.077680126 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.983739012 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.983255136 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.982783525 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.24530427 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.623730982 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.956418153 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.968110195 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.131942461 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.98309039 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.670633906 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.999273926 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.981844745 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.896728626 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.570708507 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.266338127 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.345682889 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.088294208 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.014115881 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.123624847 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.983900971 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.176853063 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.802456463 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.760081543 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.768029576 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.106075529 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.497840654 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.006606117 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.985397954 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.982838185 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.955168265 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.298500112 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.983010614 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.98241261 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.982512703 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.983117804 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.236269021 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.111286276 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.816876549 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.130999097 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.166355672 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.435891941 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.122346794 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.983127781 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.636181399 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.851318681 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.09160604 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.618543539 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.208569961 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.132348018 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.968243409 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.257294887 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.025347784 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.98244116 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.838202058 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.615755434 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.997951973 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.982662293 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.326673587 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.014567909 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.988515338 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.982912266 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.68559576 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.122574049 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.13651423 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.032849175 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.982676855 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.983707871 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.577152989 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.095166062 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.989842105 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.462915828 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.961577365 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.514649738 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.217544069 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.204135589 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.336457982 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 4.953822611 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.25820595 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.817605583 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.994828994 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.503750971 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.858442152 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.570294446 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.225465536 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.12020904 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.887906623 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.062447937 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.98411461 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.127739673 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.07249281 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.983172671 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.98341479 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.984981471 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.983990669 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.983481242 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.116242652 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.385613671 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.794339102 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.998832963 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.231844282 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.116494759 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.847454943 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.234183252 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.69416265 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.131285979 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.983299983 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.68812534 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.225398008 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.71289381 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.123431325 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.984163815 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.98271531 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.810046024 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.989611379 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.094014318 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.984189116 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.608194417 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.093894316 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.988335405 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.982522175 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.449348878 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.131786825 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.986140607 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.096306871 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.785288172 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 4.850790708 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.001188555 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.30327823 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.11136565 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.983934367 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.983280718 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.983587736 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.785308923 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.637293955 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.119534628 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.607613748 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.746226567 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.087856 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.161804533 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.088212074 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.272454637 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.228101751 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.135019016 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.984326121 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.983525472 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.983150352 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.467664033 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.848572452 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.000477595 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.848557904 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.017173661 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.955961158 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.084576347 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.779748891 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.003166923 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.707038529 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 3.956353029 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.096944265 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.983833852 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.98391157 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.146223981 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.181842965 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.134819389 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.538609417 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.00180603 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.984442171 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.667900479 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.12546811 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.642383773 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.102040389 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.822789189 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.11634536 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.122557971 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.13841694 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.658636299 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.128314638 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.984179508 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.859809342 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.999506573 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.983666223 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.029866646 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.690034706 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.799893091 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.733091113 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.636672076 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.935619986 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.556230849 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.246999692 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.134496512 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 3.797664579 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.095343128 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.218950723 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.033995947 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.47565028 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.010133932 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.733365707 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.032675433 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.748684216 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.00197191 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.005369952 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.12562274 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.47602692 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.116268497 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.987370666 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.180692074 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.092148233 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.6561588 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.123470514 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.115937036 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.288371667 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 3.88322867 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.096599809 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.232163468 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.036624772 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.923998821 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.961506526 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.339898413 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 3.897554911 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.999297123 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.085314239 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.766839541 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.187842273 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.222624077 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.131332015 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.986132549 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.985997471 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.151349285 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.081911632 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.984433176 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.346035209 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.953321835 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.039854961 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.084951427 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.98827502 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.984059177 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.2120869 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.131565964 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.281790174 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.487879559 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.578593325 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.813528407 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.123078954 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.662144558 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.132314086 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.672478736 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.09387701 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.988634131 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.665590979 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.12260861 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.273824956 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.14326204 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.109859545 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.655104539 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.120506638 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.29005079 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.123350162 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.118754129 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.76913404 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.548343679 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.25222282 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.379274116 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.034142535 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.518837632 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.003766003 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.521198897 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.979898768 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.6847886 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.100520026 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.050427349 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.98622636 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.9846761 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.494288141 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.953729846 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.989184651 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.773082908 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.688351153 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.894622616 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.727546876 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.09631644 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.988472888 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.984254369 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.984005623 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.89865399 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.075364407 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.341382483 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.13460397 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.984906034 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.984826815 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.969396176 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.323301587 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.806649957 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.876635521 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.950056205 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.132370677 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.985258892 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.984576323 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.98690352 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.98562118 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.986080208 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.984671061 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.495667099 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.000739924 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.591840589 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.096940232 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.990629768 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.208336362 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.05821937 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.986138071 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.151107127 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.080632903 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.102114523 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.061216497 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.986697275 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.391593031 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.137019563 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.960640652 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.284709933 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.293792939 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.234045898 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.569933258 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.048002983 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.410027913 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.306298144 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.758124111 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.989217332 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.901827204 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.086272858 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.785764895 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.986449699 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.438001712 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.598938031 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.976435699 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.275590919 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.920053312 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.375126175 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.113765438 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.063082989 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.988711107 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.985372768 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.048479316 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.249304562 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.036532584 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.232764889 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.209332697 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.979270943 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.294436335 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.091780849 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.179795692 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.024493507 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.001084478 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.017603646 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.991454599 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.439409116 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.883308855 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.086878435 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.98650688 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.894147161 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.864614154 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.916037165 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.630563034 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 4.877435894 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.132864866 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.986537133 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.192587786 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.043801989 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 4.727356125 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.015481483 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.776340959 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.333851482 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.03832152 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.169022546 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.396928945 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.693268247 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.386729357 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.112317441 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.987441959 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.353170277 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.004789976 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.138725475 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.890015528 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.336782654 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.549994918 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.430239343 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.238889019 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.112173641 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.892416605 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.548084268 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.977481326 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.990249068 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.843093166 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.141334145 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.288454732 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.964907766 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.266115908 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.136379806 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.628237965 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.693456219 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.133970701 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.592772244 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.134264502 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.987527894 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.770252587 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.912443775 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.154359563 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.118093902 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.986679819 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.004134329 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.673619835 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.597909443 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.201361688 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.071872254 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.986113242 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.719841325 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.704685156 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.095436418 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.989415296 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.984869041 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.433471945 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.047346341 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.986500146 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.391231697 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.598823005 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.134009771 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.483740147 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.089556629 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.135677412 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.250107461 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.374335907 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.20457611 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.054910744 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.987413089 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.98770321 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.985605868 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.556051086 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.003312912 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.986584047 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.580079902 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.135163042 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.739044559 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.908929822 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.233526008 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.068764497 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.403940745 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.136821584 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.47929583 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 3.866914157 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.084321813 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.243638634 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.039340988 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.088379912 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.735199396 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.102765777 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.986748199 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.925122602 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.302467572 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.350983628 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.438814894 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.29623318 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.083699524 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.648151103 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.108052674 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.727921115 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.011084569 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.986103128 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.467117882 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.103900944 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.442277568 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.148799805 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.464200337 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.11171769 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.307354539 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.222320012 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.086074665 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.986673202 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.986547755 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.981539938 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.031696408 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.547805582 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 4.884703839 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.446445429 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.129048022 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.812275436 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.527068909 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 4.847078817 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.184438219 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.271063849 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.266758529 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.030225604 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.973466289 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.342475488 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.080271492 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.157852428 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.088510654 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.779076328 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.070168126 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.987571938 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.554511918 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.001884969 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.987842735 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.986146264 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.894680298 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.749313477 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.101400103 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.211014106 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.092427345 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.987221695 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.607367552 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.271353668 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.031043309 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.987471317 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.986311604 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.847210438 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.106875958 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.98703418 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.342869521 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.150597621 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.315630334 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.842998138 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.434328821 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.084657488 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.986308337 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.98589097 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.691498902 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.550515823 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.027673159 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.324406209 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.020196197 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.494970633 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.964581783 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.474389711 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.518882751 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.001502855 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.120405941 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.986650269 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.013427934 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 4.875287206 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.909756129 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.742508464 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.416441436 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.087827634 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.788626075 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.016044072 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.057730039 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.134703228 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.067668767 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.987972426 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.988448271 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.987098582 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.470781449 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.972114429 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.991262852 seconds)
  done (took 1361.439637704 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.254462044 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.986954107 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.986629259 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.98662855 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.986585339 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.986564942 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.987498315 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.986939412 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.987084659 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.987885002 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.987017544 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.988693005 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.987042364 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.259755823 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.989686884 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.987584331 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.986200738 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.986391459 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.985857022 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.987509109 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.986614502 seconds)
  done (took 22.241313093 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.98739444 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.988377455 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.987462507 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.992329097 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.987182666 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.986632479 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.986959923 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.987257045 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.987352078 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.987299756 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.986051538 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.987035715 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.98823852 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.986842432 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.988087877 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.987891441 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.98694707 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.989487915 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.9874654 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.987425491 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.9863788 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.990787008 seconds)
  done (took 22.700272679 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.988419208 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.987438968 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.715145108 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.121274761 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.991601014 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.986619065 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.987608194 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.198480263 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.029055489 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.889583402 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.394943359 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.02462644 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.990804704 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.17491976 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.089878478 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.9893387 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.10792937 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.987079752 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.987823167 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.988677255 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.988945718 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.239614614 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.144941648 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.988768112 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.840885589 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.153299218 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.996594363 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.995799729 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.994087129 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.972692516 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.087548067 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.995490892 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.862134343 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.772231631 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.337103782 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.894676212 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.096342655 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.990871292 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.988256703 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.987422575 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.191010143 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.761855393 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.991424107 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.988101545 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.316164987 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.116430753 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.987709731 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.338824476 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.023036029 seconds)
  done (took 82.644065462 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.987145538 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.116813159 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.044602038 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.989208524 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.111472239 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.987778513 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.042331803 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.987629228 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.987673847 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.987622843 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.121785913 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.148894056 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.99227503 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.988053328 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.085081046 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.989751391 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.988408359 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.988719281 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.988762108 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.987415585 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.98781825 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.045140048 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.105402664 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.149718559 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.988274843 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.988321616 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.9871098 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.986545812 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.14820409 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.988948432 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.988983138 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.990680162 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.119838313 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.101283841 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.988316753 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.988725631 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.117070209 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.989500923 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.988486175 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.98752299 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.988451104 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.987785247 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.039242073 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.122193808 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.988790159 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.091324096 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.987782668 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.987283029 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.144578444 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.987576244 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.987704899 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.153283998 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.988495463 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.987142547 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.987402089 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.110043119 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.989480245 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.989074026 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.987721272 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.140499385 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.987646864 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.987110287 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.148020981 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.987020081 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.988448667 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.1553672 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.088964506 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.987520387 seconds)
  done (took 71.110429507 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.986536843 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.124743375 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.164246224 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.164183383 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.126448755 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.109463716 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.127620939 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.124352372 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.125139327 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.127422785 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.128528815 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.086210879 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.093924044 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.084266759 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.128690444 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.108215318 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.109212529 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.108526042 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.129175954 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.131180999 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.111608726 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.165947474 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.126312021 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.163784134 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.345123027 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.09478623 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.12518356 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.128192955 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.168248123 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.126913034 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.343571979 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.127602718 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.126865801 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.167381253 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.340835785 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.122079808 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.98856093 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.124141299 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.128541817 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.124776321 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.095733523 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.167675676 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.123483897 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.093766878 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.110679247 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.122095766 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.165568967 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.340722274 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.084617807 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.128978651 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.12606763 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.166360623 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.12107722 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.109733946 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.166396001 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.087092751 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.163825814 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.167673925 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.128873506 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.163125027 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.164785683 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.086352155 seconds)
  done (took 71.495360781 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.986834236 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.987289514 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.069323198 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.98718307 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.989634884 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.070631665 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.987521162 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.987172507 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.987223684 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.987175759 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.992928388 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.070558487 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.345755783 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.990622539 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.071961857 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.346048641 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.072459444 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.070763992 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.988347489 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.071274357 seconds)
  done (took 24.0313751 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.030557243 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.146016274 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.025907863 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.16435435 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.021742945 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.145693375 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.033169378 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.022071912 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.026748081 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.021710854 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.1622136 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.16189799 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.026319525 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.165714043 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.147310585 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.144690666 seconds)
  done (took 18.417581273 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.987376034 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.988591764 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.987729967 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.988936555 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.987738299 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.988930698 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.987370392 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.987617879 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.987205736 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.44281528 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.99020677 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.988190013 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.989644584 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.988390929 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.989247606 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.987117151 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.987920547 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.987915593 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.987713705 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.988037177 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.561003682 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.99113408 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.988304864 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.989297936 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.987847638 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.559878202 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.99074728 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.988421341 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.988997582 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.987852635 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.988090221 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.474174124 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.989269894 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.987059787 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.987555402 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.988194001 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.989606515 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.988425946 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.987889016 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.986741503 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.987572322 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.989591443 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.988393322 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.988049089 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.987073497 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.988582971 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.989036532 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.452786564 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.990544577 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.987334092 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.987566103 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.988323245 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.990189318 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.465553473 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.989720281 seconds)
  done (took 58.361966199 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.03259546 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.040570028 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.988460784 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.987964805 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.042616725 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.028547964 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.038061114 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.00268337 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.02824563 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.988731712 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.054622477 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.005099349 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.027015611 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.041817467 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.053659294 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.032568486 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.987191759 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.056285 seconds)
  done (took 19.407706482 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.987374566 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.98748854 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.986468709 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.987776525 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.987556761 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.989054506 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.989360995 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.989024333 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.98764322 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.987545877 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.989728422 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.987445173 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.988078972 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.987700241 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.986970309 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.988066635 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.988998161 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.98821057 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.98825669 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.988672476 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.989012473 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.989483314 seconds)
  done (took 22.711676668 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.02137019 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.034083783 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.990433982 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.989576148 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.989415313 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.012086046 seconds)
  done (took 7.007514547 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.046810411 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.054635341 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.026298395 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.035863677 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.062526454 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.077083651 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.066649487 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.070495801 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.062977469 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.284602647 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.072931605 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.067373743 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.063565759 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.120342189 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.056477662 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.059914646 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.072752699 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.072726332 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.041600143 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.076148367 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.079636722 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.065154824 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.074186619 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.066502302 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.073676578 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.119210471 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.062348629 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.287373603 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.073643821 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.063800618 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.060446889 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.071503055 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.06629906 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.279967619 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.035890844 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.064027486 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.071706353 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.07518874 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.062128719 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.115737286 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.034281841 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.054889547 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.06434455 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.081668154 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.061923662 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.07952274 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.081906581 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.073301508 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.074535325 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.287392726 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.06136749 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.113555774 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.054698813 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.064904825 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.065407188 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.278567375 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.285048642 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.112283464 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.055428921 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.284616573 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.11511003 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.062255774 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.111950845 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.2871214 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.054076684 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.116447813 seconds)
  done (took 73.371265924 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.114188558 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.024651184 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.073923959 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.291107371 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.112016126 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.072709156 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.075908166 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.066741237 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.066344459 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.043522188 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.074741005 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.075795022 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.112460272 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.117682862 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.076108128 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.065875472 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.074815266 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.110715485 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.041623106 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.280720157 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.072605324 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.115104136 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.114662636 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.114156217 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.278210178 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.060182151 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.073895168 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.07375421 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.065849135 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.072195021 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.077843629 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.078350585 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.11318077 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.027277282 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.112114885 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.075735103 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.073293078 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.078466321 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.073849876 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.05677597 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.117613654 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.078216469 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.075032796 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.065238746 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.279096821 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.066360035 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.06710194 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.042294801 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.076342653 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.042401504 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.279839897 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.278882833 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.291396304 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.114820677 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.076615785 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.076179523 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.076169585 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.073185301 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.07477778 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.065001177 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.113264688 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.065920443 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.282852511 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.074862004 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.074204124 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.111921133 seconds)
  done (took 73.791911688 seconds)
done (took 2224.296258452 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.100818645 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.012091573 seconds)
  done (took 13.082123389 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.992235011 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.990168988 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.138060393 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.989693985 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 5.973611202 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.077531982 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.039297299 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.000695254 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.989560146 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.077224136 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.991981545 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.125468863 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.089043743 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.988953788 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 5.997158746 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.999693979 seconds)
  done (took 37.445320138 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.017491127 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.540020439 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.934910505 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.814669254 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.021763091 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 1.779637348 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.331556779 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.664518582 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.304408048 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.442987887 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.253051232 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 4.855607302 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 5.773022239 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.093289522 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.450771681 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.519970413 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.600854487 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.672883208 seconds)
  done (took 58.043221567 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 5.970906302 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.146028406 seconds)
  done (took 8.117065397 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 5.979041632 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.014224197 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 5.992810461 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 5.989638864 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 5.995425973 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.010705631 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.012784515 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.032231688 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.018194526 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.007415405 seconds)
  done (took 61.041459207 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 5.983771105 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.467963813 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.325414112 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.428620738 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.601857301 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.488720257 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.154681873 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.40902537 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.088120831 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 5.972054454 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 5.259004005 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.405602359 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.831137504 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.255031435 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.626070796 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.233571302 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.720315182 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.427633284 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.327546681 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.40368109 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.227757252 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 5.323516992 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.259368969 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 1.897484608 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 5.997818034 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.605497784 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.283415404 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.183562395 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.081098087 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.123780319 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 5.344798326 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.006769936 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.295148946 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 5.994322563 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.042675181 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.659560544 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.726428901 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.191359678 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.438304306 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.340884937 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.38449955 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.661725678 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.056362668 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.651286256 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.147705419 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.355166831 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.076323313 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.222387521 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.073477756 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.108088161 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.521533243 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.174567671 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.118029977 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.108780027 seconds)
  done (took 148.090640017 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 5.970120697 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.381452912 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.130708645 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 5.972237747 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.375154188 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.192247513 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 4.771559158 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.544204449 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 5.998398798 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.206720743 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.15712979 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.114256449 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 5.974289986 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 5.979932236 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 5.982873832 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 5.981275126 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.176818992 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.556602448 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 5.990126904 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 5.979807635 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.20254214 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.2272296 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.117714431 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 5.974404039 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.165313475 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.243739425 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.390232497 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.113671564 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.391448564 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 5.989263949 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.434558442 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 5.993307479 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 5.982159399 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 5.882316713 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.367407849 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.318236578 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.44533754 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 5.980469021 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.731518454 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 5.979011334 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.62099756 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.188546289 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.30047231 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.133065833 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.237094831 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.219801737 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.586837985 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 5.973250431 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.740891644 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.156997427 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.202177994 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.206743412 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.264322206 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 5.979780263 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.446858558 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 5.984065634 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.977700326 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.25001408 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.14609925 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.115074094 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.973928701 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 5.979490056 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 5.981844424 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.237581916 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 5.975446433 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.109974936 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 5.97423176 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 5.983112174 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.112653452 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.113951155 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.144833765 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.228692298 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.228407817 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.230292523 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 3.98618268 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.227249946 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.36336956 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.22176023 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 5.974743372 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 5.979279317 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.399894561 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.435818465 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.142640278 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.230764617 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.298639221 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.276935398 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.534875661 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 5.97233481 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.215150415 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.15590932 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.211211746 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.248010748 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.343823079 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 1.862291061 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 5.973335302 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 5.97917698 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.005615416 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.131039608 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.974304166 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.504784132 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.259123455 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.581277761 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.164242955 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.429169268 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.093091125 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 5.97652612 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.545953451 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 5.97462762 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.206696128 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.286873691 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 5.982001128 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 5.979426208 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.147844891 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 1.72686131 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.973696841 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.02691433 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.398367395 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 5.991855838 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.153699765 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 5.977622016 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.240758429 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.921771781 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.227323176 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.974236269 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.263990223 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.170445845 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.261696849 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 5.976259598 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.340538293 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.254418577 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.388285247 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.216691105 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 5.543466004 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 5.98057587 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.295548432 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.976221081 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 5.981173926 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.170571393 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 4.951654938 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.165779091 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 5.97540504 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.256101455 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.144064113 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.357300491 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 5.975732752 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.245471888 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.232094093 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.381592556 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 5.984376532 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.131654765 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 5.97235685 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.073041058 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.155248653 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 5.974025353 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 5.982383364 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.867618368 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 5.982292832 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.144911386 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.216354001 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.677691365 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.389837625 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.351059518 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.973146317 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.441168392 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.193216548 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.414557427 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.630009833 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.159339156 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 5.692824299 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 5.207020621 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 5.975885926 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.236852283 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.168715024 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 5.975056597 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 5.983101769 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.696625532 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.103023886 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.979518877 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.154963242 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.227865496 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.437104698 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.200252883 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 5.976232483 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.351736156 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 5.976300862 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.191107135 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.494807138 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.270339639 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 5.980819106 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 5.982196553 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 5.981150736 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 5.983216272 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.202035601 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.231740232 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.545390155 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.134932127 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.282938878 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.205275713 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.306882947 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.444298149 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 5.983934187 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.312637483 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 5.976509268 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.419791991 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 5.985615223 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.148578615 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.239720356 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 5.978240261 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.209474923 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.344608098 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.066231041 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.374221762 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 5.97752752 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 5.981434738 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 5.602792536 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.171446227 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.440050751 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 5.97565698 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.088707158 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.352187748 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.112986792 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.17993374 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.233389349 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 1.996044993 seconds)
  done (took 699.193262204 seconds)
done (took 1025.985174391 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 5.972946942 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 5.983049676 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 5.981997418 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 5.983005334 seconds)
  done (took 24.893924238 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.970849033 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.065428379 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.170516975 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.98985673 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.365902492 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.04841181 seconds)
  done (took 10.593953468 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 5.972409842 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 5.981701634 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 5.982141352 seconds)
  done (took 18.908344156 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.262878594 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.362180458 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.141587176 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.077382002 seconds)
  done (took 5.827434804 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.017835792 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.017275202 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.993400821 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.016422802 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.98985343 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.991349173 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.026732731 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.008965577 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.994131743 seconds)
  done (took 10.032988812 seconds)
  (6/6) benchmarking "26942"...
  done (took 5.455675505 seconds)
done (took 76.686309092 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.309448762 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.290168932 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.123014224 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.18007452 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.129646035 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.31712872 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.104183451 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.00378943 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.299342766 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.400178956 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.430835661 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.110580412 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.423332827 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.393355647 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.208630934 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.016783606 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.006831017 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.052757432 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.818494851 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.168243284 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.654828996 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.198632858 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 5.651547857 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.020059804 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 1.980496942 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.128356821 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.25093685 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 6.795508821 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 1.943495238 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.016269294 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.088612927 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.453840634 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.217777353 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.330560342 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.086194532 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 1.931886635 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.412021892 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.081892588 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.151031162 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.504083971 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.313251155 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.084964233 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 5.972463156 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.161328011 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.402544897 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.009120719 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.037229252 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.151412035 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.586978058 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.15440215 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.512838853 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.992959031 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.599182239 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.068133106 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.073611923 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 5.973191643 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 1.917366109 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.478912334 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.147657719 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.30981277 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.006011003 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 5.972103296 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.000802332 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.019547285 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.479871408 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 1.283944794 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.412597308 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.079287189 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.45473367 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.016042584 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.000839938 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.021553879 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.720274292 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.136858281 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 5.971293628 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.137278599 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.310917989 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.128042746 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 5.983561599 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.124384859 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.229035103 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 5.974746116 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.121021017 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.320937987 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.153336754 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.360100131 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.439543412 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.329428726 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.377907052 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 6.816545215 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.515931458 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 6.826680212 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 6.09557271 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 5.987809462 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 7.298145974 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 6.098419163 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 3.190481633 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.502309533 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.115518601 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.488874564 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.019998952 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.005364031 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.456610797 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.292667435 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.901417693 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.025372132 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.148236013 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 5.973004829 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.290449712 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 6.680844103 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 6.085578018 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.560271078 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 5.986939219 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.051293451 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.457148925 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 5.984269443 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.345131708 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.427011519 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.070465185 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 5.981529202 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.289152986 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.993029672 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.109380846 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.567315155 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.384038936 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.211327736 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 5.97721125 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 3.306283848 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 5.985753674 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.180429625 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 5.989527889 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.514873826 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.533977561 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.022620607 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.252163308 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.113554077 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 5.972455644 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.357941184 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.039654943 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.198271395 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.393284387 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.310962413 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.116385985 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 5.972989208 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.413231057 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 5.987447187 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.232414942 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.328810575 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.154612894 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.303413233 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.088781252 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.004678073 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.025709283 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.389223158 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.621293499 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.526785852 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.24264363 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.121712263 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.529096671 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.281400248 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.813532507 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.087289679 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.038860438 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 5.986641185 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.007345684 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.053007342 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 5.975246135 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 5.982870596 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.295787383 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.380601716 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.526938833 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.888207298 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 5.72463463 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.310887627 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.142705138 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 1.859959367 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.515533777 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 5.989203946 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.367919791 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.466038252 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.247221974 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.016704108 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 5.974452201 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.04787938 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.731005004 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.026176134 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.294814268 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.592368365 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.539228968 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.420789107 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.161504714 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.03037008 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.306769108 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.245346247 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.308427812 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.210637585 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.371964051 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.13279428 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.357357947 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.031162738 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.301057721 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 5.986732178 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 3.095166211 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.232364089 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.476540738 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.344056498 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.234775918 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.159013695 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.326218333 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 5.985265172 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.247104614 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 6.084017795 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.379610377 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.022042404 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.225650297 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.082428988 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.514424217 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 1.883296916 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.111053402 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.44539501 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.15376364 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.119294652 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.452791193 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.005165024 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.318391711 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.152916252 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.153628526 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.251687152 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.021861001 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.118954446 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.253285193 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.125473656 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.227475891 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 1.792367332 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.417211443 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.559306962 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 1.119972102 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 5.973606092 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.417784551 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.01784159 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.000774686 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.245733453 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.154919514 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.304664889 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.092442419 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.158399787 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 5.991318413 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.024333541 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.472015233 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 1.815250615 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.578322069 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 1.884135697 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.021021183 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 5.972564485 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.410549021 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.407150292 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.055999443 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.126418586 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.508989075 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.025635706 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.150210275 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 5.98980065 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 5.987233633 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.960262611 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.121759975 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.232922134 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.528847803 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 5.987286939 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 3.261526879 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.150625753 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.406396459 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.522025988 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.043489409 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.103038883 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.200380254 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.062339769 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.392788407 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.015271956 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.176312218 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.341101999 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.110673514 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.111979981 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 5.975502364 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.02876252 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.616428952 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.377334985 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.468790575 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.022615241 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.324937726 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 6.989627306 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 1.234957511 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.006908397 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.088053865 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.383581977 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.156433791 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.403147317 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 5.988405366 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.16210602 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.25356359 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.013861557 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 5.972367146 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.124080667 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 7.532114393 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.334243232 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 1.274263201 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.173646532 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.015591017 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.234796485 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 5.983804713 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.638297671 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.13285369 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.109171512 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.600859992 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.473548727 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 5.985785379 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.217711134 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 5.979130833 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.350579096 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.019451374 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.004944276 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.144574752 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.074821446 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 5.973138438 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.667988278 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.188746753 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.470329687 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.161668637 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 1.948092313 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 7.013704195 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 1.169278506 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.104260887 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.268672496 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 5.690810254 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.006957891 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.128661653 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.600218675 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.178085776 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.024658031 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.259414584 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 5.986951214 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.540496822 seconds)
  done (took 827.517459449 seconds)
done (took 828.670709747 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.180734719 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.362813509 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.230897851 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 1.952242468 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.792778608 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.631855313 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.246759668 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.22256706 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.095703903 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.245668469 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 1.882996344 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.79007197 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.084776206 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.14216593 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.067476993 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.093494982 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.19759571 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.23330643 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.14354802 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 1.804208369 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.381185938 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 1.808810765 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.408245178 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.285371986 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.363751569 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.088887193 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.192145465 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.38017153 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.380461174 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 1.96119602 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.201341482 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.216548163 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.83182182 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.232486666 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.069674779 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.073247091 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 1.895226208 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.085616482 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.238097657 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.075586603 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.366983102 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.115447857 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.709852539 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 1.934620308 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.772439447 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.402680258 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 1.832260295 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.093254577 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.090277722 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.195661198 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.187134105 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.239267244 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.379382813 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 1.984086785 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 1.884093001 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 1.924587117 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.382030636 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 1.885489839 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.723730263 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.19707007 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.513273501 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.094853106 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.19591728 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.220299981 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.112089039 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.285015953 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.402394928 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.239751857 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.213758762 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.251318112 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.23489332 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.216385852 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.109225305 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.189049999 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.111276829 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.24497007 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.718313748 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.229666086 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.780473095 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.087293534 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 1.946047081 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 1.909147604 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 1.947722336 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.098689822 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.180129965 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.764757824 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.083062768 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 1.946153879 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.11132141 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.214710526 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 1.895634959 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.232827476 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.453198744 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.194557802 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.180001762 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.231686753 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.095393671 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.181223376 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 1.953764949 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.217252178 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.77587806 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.194650082 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.023273241 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.0804978 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.092046332 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.238260918 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.193045746 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.407968513 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.214666014 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.148207252 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.365389962 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.113350221 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.214482702 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.142459006 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.087740375 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.768631102 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.275514409 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.876738087 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.181047112 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.670027524 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.289009609 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.079917996 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.36464778 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.290169357 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.179581269 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.089592339 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.090995595 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 1.938443025 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.098560503 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.094068929 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.172276155 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.448677422 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.196545597 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 1.953178942 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.216689973 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.776580964 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.229112445 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.214843695 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.089870698 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 1.836737874 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.091544952 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 1.942114951 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.286939154 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.367632556 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.232001115 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.285365254 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.109359298 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.242102379 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.181292832 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.142806596 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.215211945 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.105904544 seconds)
done (took 227.073583106 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.359099528 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 3.345616881 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.343637438 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.275015442 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.341571065 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.348795452 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.06247868 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.424318443 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.106530394 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.407013073 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.235732327 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.144981314 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 3.359505872 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.196229168 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.339540709 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.234612038 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.106441383 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.251769657 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.444312007 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.343676251 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.041744682 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.237523508 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.161159386 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.40985061 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 5.973616144 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.017185775 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.349120646 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.120602242 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.253525771 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.010658877 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.058821078 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.278587754 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.345968039 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 3.126903005 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.428969353 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.009312748 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.354658717 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.084519898 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.362747733 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.366399842 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.344076328 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 3.787433059 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.010842107 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.034265985 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.147313109 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.338302774 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.056380748 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 3.245143925 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 5.980110145 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.000002867 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.254706849 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.091782952 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.138463148 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.321534206 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.19186518 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 3.113540249 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.469791971 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.483183218 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.343539607 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.286969467 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.359170253 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.410553078 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.406010762 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.194976311 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.029501162 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.273078542 seconds)
  done (took 118.951036484 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.419416727 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.312573676 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.392698366 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.436806694 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.57920311 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.449861293 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.476528668 seconds)
  done (took 13.042314498 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.049855012 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.039610851 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.238598911 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.242563197 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.043686318 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.169115225 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.126188977 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.004803523 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.266309955 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.084634357 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.352779173 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.257311373 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 1.959718747 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.001338809 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.127061044 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.379034004 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.007371236 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.109940703 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.100217554 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.295483956 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.007048563 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.0058743 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.22765778 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.125987995 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.047803738 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.080899528 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.037465176 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.00899193 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.084446826 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.019347608 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.046415697 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.151796798 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.036332085 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.02309313 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.065335558 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.35327672 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.046382814 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.090936854 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.172608726 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 5.976404583 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.027148526 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.043912684 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.178675219 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.05104661 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.020792789 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.230558493 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.023753763 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.049642317 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.019206721 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.034857841 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.225610663 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.043812055 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.064617886 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 1.959215494 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.251287176 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 1.992654349 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.108736277 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.035069973 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.033056488 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.093213262 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.034927076 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.299992996 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.280442684 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.019707426 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.255212595 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.322387637 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.037373848 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.017225435 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.019162173 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.260129413 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.035695604 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.253702082 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.038978253 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.086010823 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.091715972 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.166314975 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.229687651 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.826569662 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.811671189 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 1.969297507 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.011001557 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.025528659 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.338939385 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 1.973734343 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 1.960676808 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.027243654 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.09095988 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.698738365 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 1.946999694 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.040831047 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.352482484 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.02666046 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.097012857 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.087969941 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.067178828 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.101039117 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.271746116 seconds)
  done (took 133.285878548 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.375723238 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.605258516 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.256455663 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.285703958 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.436730629 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.540217875 seconds)
  done (took 15.477054922 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.334947005 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.846798199 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.064112742 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.057975282 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.091738738 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.032573482 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.031656015 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.196547837 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.185760313 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.04641357 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.03245334 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.053321962 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.033573151 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.175146083 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.030506798 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.040974214 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.033033073 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.059916647 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.043049027 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.101783172 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.192705096 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.094055905 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.101348788 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.933375039 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.09176311 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.047642023 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.980026729 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.04531016 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.046305142 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.378549917 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.230512625 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.033866306 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.881205437 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.365035175 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.804446027 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 1.931487145 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.180466405 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.059045692 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.091634447 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.03239817 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.052336879 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.101509457 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.058079186 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.06369376 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.362908202 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.856852278 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.113212451 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.293763794 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.032862805 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.054112771 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.059611033 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.060490655 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.031983219 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.054279266 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.390709196 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.450044188 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.01719251 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.039332756 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.091335822 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.931566195 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.121399157 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.035201389 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.350804599 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 1.981233975 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 1.996236599 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.055872844 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.936321456 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.17031941 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.108248 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.06090503 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.060396636 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.062265452 seconds)
  done (took 108.143673285 seconds)
done (took 389.875829342 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.319150532 seconds)
  done (took 7.293966995 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.155852508 seconds)
  done (took 7.2793506 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 5.977978091 seconds)
  done (took 6.964227156 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 5.992694709 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 5.997800489 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.000265955 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.000994856 seconds)
  done (took 25.007194515 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.146695187 seconds)
  done (took 7.132192019 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 5.976997661 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 5.998108132 seconds)
  done (took 13.062603414 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.130381063 seconds)
  done (took 7.128222358 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.233326867 seconds)
  done (took 7.221422909 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 5.996201358 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.017472933 seconds)
  done (took 13.026312741 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 5.974078405 seconds)
  done (took 6.95491376 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.321356316 seconds)
  done (took 8.399827913 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 5.981477535 seconds)
  done (took 7.003814118 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.023498564 seconds)
  done (took 7.007195671 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.007410524 seconds)
  done (took 6.988721016 seconds)
done (took 131.444132908 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 5.973718934 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 5.984053773 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 5.984680355 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 5.984397581 seconds)
  done (took 24.901925575 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.316182032 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.318570053 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.29831778 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.370948593 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.260846329 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.260221202 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.316846269 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.319245374 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.260458011 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.364326378 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.313314957 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.467477032 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.367817286 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.301172766 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.295815326 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.365584858 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.466833531 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.317195243 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.260409999 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.295285276 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.46892585 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.468549738 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.75077183 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.740555991 seconds)
  done (took 33.950100907 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.20353595 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.356683368 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.160536943 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.310992362 seconds)
  done (took 6.006769956 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.022582213 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.367457098 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.350626315 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.309451679 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.348838953 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.163216324 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.350266022 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.202695032 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.171962904 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.172267247 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.616748221 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.144101576 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.156609758 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.409278164 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.163372175 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.992203301 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.991372859 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.17202256 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.36929903 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.19513923 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.251759071 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.350158362 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.350660687 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.35222697 seconds)
  done (took 30.951119539 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.805767745 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 1.924800329 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.351205483 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 1.902098078 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.701386387 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 1.786031485 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.27257017 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.496621205 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.259526058 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.23234772 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.724000115 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.314507355 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.139156655 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 1.883554754 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.753013382 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.172261006 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.16962673 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 1.83137525 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.604072233 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.292434271 seconds)
  done (took 36.592604879 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 5.974622016 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.983877112 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.231543056 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.159396151 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 5.974589688 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 5.986973869 seconds)
  done (took 27.288106249 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.019550227 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.150878286 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.306951917 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.287199153 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.156308385 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.136602106 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.614150146 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.228035316 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.794254652 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.776058863 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.611510699 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.459635636 seconds)
  done (took 20.525464049 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 5.974528156 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.018942037 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 5.985960539 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.158703668 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 1.794726717 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 1.858401533 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.309146919 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 5.97743412 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.044921347 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.185706512 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 1.908139529 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.158209412 seconds)
  done (took 38.371411555 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.270141681 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.165015418 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.328601383 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.734368744 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.541304247 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.082256095 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.40563363 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.502864183 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 4.032233176 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.087477448 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.531083085 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.048969691 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.526886074 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.962978978 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.982363207 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.296262908 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.81419427 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.486932353 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.427808868 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.059951814 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.950912047 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.136790839 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.98405513 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.536124439 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.314506898 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.976138087 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.259078098 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.232925516 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.975707123 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.19593485 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.976003055 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.476724497 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.267212281 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.29590627 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.512186521 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.062259318 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.091758837 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.034520853 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.57492465 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.282395686 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.127653299 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.146713295 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 5.974325012 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.215493049 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.244561459 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.769256606 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 5.995686051 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.645821252 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.974554535 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.086793748 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.888509409 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.647206632 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.316922113 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.945130074 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.129896009 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.288979524 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.153295608 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.038811247 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.291739488 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.014069047 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.185430585 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.103787358 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.276225715 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.958218076 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.456662666 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.340239848 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.308683942 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.326709081 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.301961603 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.280318664 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.377391062 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.091550051 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.780180042 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.134565727 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.514676406 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.056155333 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.346323447 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 5.977339963 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.729302044 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.526095153 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.974448311 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.103811683 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.750036552 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.946419146 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.978269243 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.171195933 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.592827191 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.963822169 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.082015908 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.024547002 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.456661644 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.119287833 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.13556233 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.248760077 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.683365991 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.004357732 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.705052935 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.299877856 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.957622475 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.553091181 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.975240085 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.979279678 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.980523523 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.542590669 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.405692788 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.031220398 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.778298033 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.595089171 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.281620145 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.567543935 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.157384346 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.823866814 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.351658521 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.315011329 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.974987244 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.764671796 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.038737395 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.066423187 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.352740523 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.979270775 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.965131223 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.438993843 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.267245832 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.978019403 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.229046557 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.978447974 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.147601208 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.98065458 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.81784474 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.042750343 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.230286951 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.507925742 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.205205338 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.073917043 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.959821055 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.141186406 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.488105636 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.072428908 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.342689456 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.424196079 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.590573866 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.467487918 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.984907879 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.839282038 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.463440532 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.265870697 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.323177723 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.129827136 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.163366291 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.078007686 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.978640573 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.115960683 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.987824051 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.503163153 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 5.675028461 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.802659439 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.67900723 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.293175479 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.976035138 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.977630499 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.657692503 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.315433849 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.631825044 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.035948297 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.157609492 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.292033245 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.163826391 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 5.977467237 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.961879029 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.364798329 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.314797853 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.518325388 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.385172235 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.637828128 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.339146494 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.502295409 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.25291681 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.371357043 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.737024672 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.422815085 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.338367157 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.130117878 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.015339855 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.525104467 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.042775083 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.420684203 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.212130108 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.727504467 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 4.65065102 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.158731454 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.03573805 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.57066611 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 3.961980434 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.141342466 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.469201919 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.028224847 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.565284705 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.145970119 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.197491065 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.291717725 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.015551265 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.326274316 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.27760679 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.427435804 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.374742525 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.29699932 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.969366104 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.11172762 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.505700286 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.465422657 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.124743299 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.357314781 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.231335368 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.04953895 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.981531813 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.341789045 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.086891376 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.623255042 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.293396402 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.795128072 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 3.61198298 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.203541804 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.531164358 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 5.989553196 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.166022052 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.159132439 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.015031517 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.901365868 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.531449751 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.293346772 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.31404777 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.976659464 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.985557803 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.266817444 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.296672871 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.260152531 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.494898892 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.604542335 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.681509316 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.090918824 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.604958561 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.154742601 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.026475155 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.536643282 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.284205082 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.93748755 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.258850825 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.736737136 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.093605931 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.063878669 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.282881208 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.976148734 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.468110355 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.612907825 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.938771808 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.006020455 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.135511615 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.981870851 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.195033155 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.883792481 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.221036924 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.15810168 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.461034473 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.308299748 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.256386743 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.388998031 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.522491807 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.782306099 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.964083434 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.159235434 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.094767415 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.276465262 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.976265917 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.304969059 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.719425971 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.642074659 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 1.827551361 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.531207785 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.212415124 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.654788107 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.471809247 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.238924068 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.302904007 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 1.952125796 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.600931662 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.972294308 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.127247452 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 3.955663526 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.773246468 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.318964444 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.359729831 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.465638129 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.061913352 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.521036904 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.366643297 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.009292244 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.152485448 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.259880564 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.976641575 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.345411484 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.976736103 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.810965783 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.4000289 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.978711468 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.271016741 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.18945349 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.320256982 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.143493986 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.643057628 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.025253646 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.114334385 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.455082887 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.187557259 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.123554789 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.32426273 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.804669319 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.024624855 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.011826165 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.533050972 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.579155406 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.461887958 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.604230826 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.58243063 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.385764046 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.769145987 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.980083151 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.259399238 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.156560053 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.524630863 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.184753043 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.394949215 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.03085906 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.277729532 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.311666098 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.146020428 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.520739302 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.97355252 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.596504122 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.182581965 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.500108696 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.531588894 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.77794744 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.452702827 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.910920072 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.516072655 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.001959662 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.151732107 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.217031691 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.726784732 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.566149169 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.837975533 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.781525653 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.123095206 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.433069204 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.058618709 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.750858608 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.153109451 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.223089253 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.253965186 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.123175778 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.959368216 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.576040088 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.766564881 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.265422911 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.151598962 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.254572598 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.103597545 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.044582893 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.547979649 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.307498683 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.776814473 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.465746072 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.277219253 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.962695999 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.985297082 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.695148317 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.441451919 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.089102748 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.281737084 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.43138973 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 5.987059275 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.011617149 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.008509228 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.522034644 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.797850066 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.719544099 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.333970797 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.528701863 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.463246307 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.97935991 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.778036716 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.257783387 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.343009234 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.395040235 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.899396045 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.364770183 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.276544252 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.149100844 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.960653762 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.264935309 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 5.992526678 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 5.853298727 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.878047676 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.331593567 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.035205393 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.132605699 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.621925393 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.877256833 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.029335718 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.234317895 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.229969383 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.189787965 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.976994057 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.573294582 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.419929965 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.137979908 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.974409614 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.754095379 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.964355769 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.260693375 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.862455159 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.203066192 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.835032198 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.052612401 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.659115893 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.533140947 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.938409966 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.204556919 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.960682581 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.053262059 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.011178977 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.638564584 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 1.825075629 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.23576679 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.506999724 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.259652236 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.98919491 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.313262685 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.192304591 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.314603913 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.712881823 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.465950068 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.408248769 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.361091149 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.285006427 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.898146213 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.141508201 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.232031667 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.958374635 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.982918875 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.029027522 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.366611717 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.361229717 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.97703744 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.528533061 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.23470941 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.102976012 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.168741481 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.087446747 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.525080163 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.198833162 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.091526132 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.153136034 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.222862536 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.352957412 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.979839227 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.293525483 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.976938664 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.989099607 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.262180761 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.238725054 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.360769002 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.305317214 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 1.589148532 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.148651979 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.654718317 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.983427962 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.524752631 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.981700005 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.108568192 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.364306306 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.977255921 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.470941903 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.645128706 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.259089207 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.264311511 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.063846655 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.888743078 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.204422885 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.498614812 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 5.987914903 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.65089173 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.388463338 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.979483175 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.47097014 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.062009318 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.164333977 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.748483557 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.483922444 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 5.983367022 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.048356939 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.108090586 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.480422715 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.267386249 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.148761117 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.991632119 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.83620263 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 3.969992535 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.983606843 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.085730763 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.53237265 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.000658684 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.579874315 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.148299882 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.15209198 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.994867041 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.131584921 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.978109178 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.259715319 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 1.588079353 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.232306106 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.260594166 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.258907502 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.983259107 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.593088371 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.686330983 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.001423015 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.205745379 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.85671931 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.381990647 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.704467089 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.86328251 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.574515837 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.174615012 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.1806345 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.422857139 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.246655699 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.027645356 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.270383566 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.979063189 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.272154145 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.303579119 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.569535257 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.254149409 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.924372941 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.264499529 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.003600853 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.55193583 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.475518178 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.871315294 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.978805657 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.303443763 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.979632895 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.048979452 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.640618435 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.180798992 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.085094571 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.214612492 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.590180361 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.281599988 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.125684343 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.986068627 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.207439956 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.493523934 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.958286353 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.044572376 seconds)
    (567/608) benchmarking "2d"...
    done (took 1.875604718 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.173856807 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.323038077 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.956275481 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.261280204 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.010710366 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 3.974960732 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.489028085 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.978948815 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.318983567 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.958027848 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.52407905 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.974345477 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.079386536 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.164179498 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.282520969 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.976236136 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.715949555 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.167439516 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 5.983237333 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 5.983060671 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.367881421 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.075181052 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.239621446 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.466395651 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.230538954 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.340442065 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.89495523 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.065063805 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.010717985 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.301650699 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.825821266 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.550535128 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.078337526 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.534815206 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.788702864 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.014269787 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.550976333 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.233227491 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.713308622 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.133341712 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.48156903 seconds)
  done (took 1876.780527709 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.038721983 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.031213145 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.058536703 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.034576966 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.013146239 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.021332368 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.061512688 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.003240701 seconds)
  done (took 49.241206014 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 5.976795288 seconds)
    (2/17) benchmarking "4467"...
    done (took 3.960060389 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.43851174 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.173593304 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.009195073 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.188681605 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.14915465 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.487149076 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.187282634 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.025596461 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.047283823 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.03376143 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.002812134 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.022210807 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 5.869091833 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.084092778 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 5.982479039 seconds)
  done (took 88.62731845 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.012643926 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 9.742430564 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.006262718 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.481886505 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.041667893 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.398109945 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 5.997293797 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 5.985472978 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.032026427 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.6282051 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.034796652 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.129866969 seconds)
  done (took 81.52479912 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.025366771 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.02239158 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.021153697 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.020633543 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.021272648 seconds)
  done (took 6.093452643 seconds)
done (took 2321.870168323 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.245848428 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.462447547 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.546413957 seconds)
  done (took 3.988107241 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.051486683 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.127951394 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.188526656 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.134969639 seconds)
  done (took 5.504191351 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.308522851 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.48234702 seconds)
  done (took 3.767575364 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.419203718 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.001271792 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.538487862 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 5.979985187 seconds)
    (2/3) benchmarking "Float64"...
    done (took 5.990398493 seconds)
    (3/3) benchmarking "Float16"...
    done (took 5.989827511 seconds)
  done (took 18.954369908 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.020621241 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.019767654 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.020329019 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.012001988 seconds)
  done (took 5.060294917 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 5.976118999 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.023717248 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 5.986727443 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 1.961111352 seconds)
  done (took 17.926436381 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.298831852 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.239196948 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.748706335 seconds)
  done (took 5.277737797 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.801285994 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.37236866 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.788921485 seconds)
  done (took 5.948293647 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.275537204 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 1.917370391 seconds)
  done (took 5.173007332 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.149914421 seconds)
  done (took 2.127261658 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.476218062 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.473195065 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.841280249 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 1.877053073 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.015140845 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.315586017 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.304776431 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.27595302 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.682104719 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.497905231 seconds)
  done (took 16.738511929 seconds)
done (took 101.64668615 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 2.959180321 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.401712504 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.150302163 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.080027961 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.083604867 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.146969533 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.603219233 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.866831396 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.619427282 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.626384662 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 2.727808577 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.085297484 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.014064061 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.391430797 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.01618742 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.361673358 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.394559872 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 2.966796032 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.291653653 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.952978244 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.615420571 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.608753527 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.440152653 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.626748684 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.402727178 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.141756959 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.188802321 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.373045753 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 3.539324275 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.18711533 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.153319218 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.224241846 seconds)
  done (took 150.219115327 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 5.975417656 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 5.996018425 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 5.997246281 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 5.987886248 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.005626948 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 5.995676115 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 5.987427393 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 5.989102281 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 4.871137189 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 4.875533388 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 5.995013738 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 4.995316303 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 5.996472298 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 5.986655327 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 5.996877858 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 5.986954304 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.004491201 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 5.996319508 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 5.99593932 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 5.995771433 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.000414914 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 4.86837194 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 5.995623074 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 4.878176314 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.00478826 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 5.997065279 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 5.98800081 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 5.994240355 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 5.994981493 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 5.995145844 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 5.996202436 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 5.988637361 seconds)
  done (took 184.328827899 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 5.978739186 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 5.995733911 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 5.994804843 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 5.987703145 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.994576389 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 5.997588165 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 5.992218741 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 5.987574708 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.993994077 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.99711185 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 5.996797247 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.995016207 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 5.997044983 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 5.987287195 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 5.998165646 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 5.987496005 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.994924516 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 5.994977149 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 5.994900773 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 5.996336371 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 5.996118198 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.988313523 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 5.994228981 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.994750049 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.996147902 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 5.998400626 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 5.987911216 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 5.994949694 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 5.995316179 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 5.995377307 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 5.996801259 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 5.988235563 seconds)
  done (took 192.787729964 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.292420165 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.043668824 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.05730386 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 2.376793018 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.033401967 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.020047682 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 2.353456039 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.296176152 seconds)
  done (took 14.466770874 seconds)
done (took 542.802476063 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.67158564 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 1.924039591 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.177128029 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.214015956 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.606792069 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.299104371 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.210980302 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.458691406 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.831889566 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.479807624 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.486382264 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.219452585 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 1.820773806 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.219434922 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.189004591 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.444904974 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.394043424 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.689755479 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.202712956 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 1.875672813 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.209925683 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 1.949421439 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.482232647 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.89394148 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.485228665 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 1.99843586 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.193406516 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.3947163 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.208354207 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.214051014 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 2.994514154 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.455455933 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.244270923 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.240629878 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.462410769 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.503118487 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.420916196 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.408009074 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.177424085 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.735499642 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 1.877497626 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.683988639 seconds)
  done (took 70.627865719 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.01443184 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.044317108 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.195326585 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.090328503 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.644278747 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.096294944 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.259366475 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.238352056 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.116536316 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.233467737 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.286562156 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.686289982 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.277801377 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.645752476 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.258997951 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.284144591 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.096340167 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.620996152 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.257059645 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.245372348 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.062636775 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.187186253 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.05602353 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.222642455 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.054919575 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.065141703 seconds)
  done (took 33.248926002 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.074167235 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.203089543 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.279986427 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.390691186 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.251640854 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.061316405 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.35328201 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.182635349 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.963368282 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.344593128 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.101827111 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.122825566 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.196570606 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.308621169 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.587860411 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.18848596 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.178336961 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.177017699 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.211055694 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.262817515 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.164010646 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.099994685 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.354727259 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.203113333 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.708774791 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.364290262 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.415789791 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.604831466 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.56813714 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.164011264 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.154369573 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.334648904 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.429784069 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.299919851 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.186553968 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.045261087 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.064444733 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.104744752 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.089090994 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.203400905 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.361117125 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.22254233 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.435191424 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.565650638 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.110995791 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.286220771 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.463596492 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.110358292 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.152576272 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.861679794 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.329777312 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 4.044904426 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.187127024 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.224614245 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.150852472 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.554968092 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.226352123 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.31039116 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.224771594 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.598221167 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.101341326 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.412149149 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.215340141 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.307717554 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.217104245 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.22588013 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.22528171 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.435390618 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.430459996 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.533022354 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.585125836 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.106712339 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.057403565 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.098186307 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.206475312 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.494310183 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.529195701 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.309548462 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.441972237 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.344651658 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.591618722 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.467340569 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.022277263 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.762915138 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.089670516 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.034902542 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.113355802 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.370260825 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.333217704 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.490937226 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.567492012 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.329336153 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.510073391 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.462682099 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.461245187 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.453197813 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.02666004 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.044026984 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.267082323 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.569042506 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.105965626 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.291570564 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.690826833 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.561308512 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.347388491 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.325135588 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.436092962 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.111669908 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.484465327 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.015911356 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.218576897 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.353448001 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.303267815 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.382665163 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.031328445 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.544847904 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.120486202 seconds)
  done (took 215.972880975 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 5.977968972 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 5.996613881 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 5.990752005 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 5.99779449 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 5.984540076 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.621996168 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.060521626 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 5.988404524 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.623360857 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.061595397 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 5.988444568 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 5.989281188 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 5.988215931 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 5.991080056 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.588655557 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.573384244 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.645246309 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 5.980815448 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 5.987326847 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 5.989561978 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.703921932 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 5.983359919 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 5.986330061 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 5.990016854 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 5.986551204 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 5.986744886 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 5.997201763 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.02444703 seconds)
  done (took 148.669345876 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.04944136 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.463462927 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.081693495 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.14446568 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.086368586 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.058477281 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.620809751 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.202095572 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.119693965 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.060862077 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.054642234 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.277992458 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.307559957 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.716299701 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.17690374 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.23131624 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.788243907 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.211916334 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.057633275 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.05221673 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.20742244 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.401624745 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.343064818 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.384660643 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.217762252 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.369994897 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.128348869 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.050000239 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.199840518 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.553369844 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.070885569 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.43226881 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.198426719 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.056481814 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.587847345 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.459266244 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.700360151 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.672419492 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.275266588 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.016779323 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.015077302 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.30032706 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.406512865 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.101231763 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.050012079 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.703525397 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.073531005 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.46895165 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.089937132 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.011772231 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.1444462 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.172460776 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.324865595 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.785496221 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.230383949 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.174038933 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.617292821 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.027625156 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.062578296 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.420681302 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.030716153 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.556305088 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.540959551 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.117604089 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.058676976 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.202540788 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.147841159 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.641831384 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.736992283 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.101074641 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.443724624 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.241408921 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.029631517 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.335652702 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.238249369 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.525590664 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.694895147 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.191021062 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.150259304 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.130566391 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.342380829 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.044644883 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.609780321 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.15456242 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.030706667 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.557398242 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.496686878 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.026644998 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.044603648 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.173348467 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.234382102 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.251705175 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.398805112 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.119637159 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.006646659 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.337179535 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.365057076 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.067314753 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.182045676 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.042724929 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 3.130863014 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.251431357 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.035309957 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.47492487 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.473745557 seconds)
  done (took 147.227929818 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.75908674 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.099505624 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.229397294 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.735908877 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.4305201 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.108691901 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.266600924 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.123096539 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.404234304 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.258709681 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.239666712 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.136774326 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.729279588 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.802329623 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.098314635 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.275282938 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.114070648 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.65705059 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.365182901 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.105602651 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.454929277 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.82582848 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.403235528 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.45700158 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.426517224 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.539442715 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.767163617 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.190915986 seconds)
  done (took 46.995710653 seconds)
done (took 663.720176242 seconds)
SAVING RESULT...
DONE!
