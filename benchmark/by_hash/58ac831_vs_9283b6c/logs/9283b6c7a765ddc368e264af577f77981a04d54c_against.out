cset: moving following pidspec: 3839137
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.774118966 seconds)
loading group "shootout"... done (took 0.801223087 seconds)
loading group "string"... done (took 0.20009425 seconds)
loading group "linalg"... done (took 3.072374066 seconds)
loading group "parallel"... done (took 0.021262452 seconds)
loading group "find"... done (took 1.478933744 seconds)
loading group "tuple"... done (took 0.728397275 seconds)
loading group "union"... done (took 3.126885507 seconds)
loading group "dates"... done (took 0.154333107 seconds)
loading group "micro"... done (took 0.056433604 seconds)
loading group "simd"... done (took 0.363768939 seconds)
loading group "io"... done (took 1.367680004 seconds)
loading group "random"... done (took 2.313745873 seconds)
loading group "problem"... done (took 1.186564141 seconds)
loading group "array"... done (took 4.697795478 seconds)
loading group "misc"... done (took 0.940717247 seconds)
loading group "scalar"... done (took 3.434282372 seconds)
loading group "sort"... done (took 0.305854404 seconds)
loading group "sparse"... done (took 3.582644946 seconds)
loading group "collection"... done (took 6.282482251 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.417048937 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.070783522 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.079755553 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.076020383 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.158674911 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.080551891 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.08598988 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.067685229 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.164231342 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.070146293 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.069800186 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.382320921 seconds)
done (took 4.608280331 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.262863042 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.031892702 seconds)
    (2/2) benchmarking "String"...
    done (took 0.027290963 seconds)
  done (took 0.664322218 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.027031714 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.014997455 seconds)
    (3/3) benchmarking "different"...
    done (took 0.021641213 seconds)
  done (took 0.655855117 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020072698 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.094403488 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.020988299 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.021572199 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.021576354 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.020876914 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.020639117 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.020681643 seconds)
  done (took 0.813660036 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.028069247 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.022112763 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.020253515 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.021841269 seconds)
  done (took 0.687688631 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.021999532 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.081841563 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.019634305 seconds)
    (4/4) benchmarking "different"...
    done (took 0.019496056 seconds)
  done (took 0.734953136 seconds)
done (took 4.451227646 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.096399069 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.682364714 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.724185282 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.076309019 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.245860714 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.323325532 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.07505809 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.13613116 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.043069111 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.030241453 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.077378245 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.035486607 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.353910379 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.328325116 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.025881944 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.140601971 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.582418817 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.039059289 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.070644341 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.272419927 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.036045963 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.038416683 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.043353002 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.025709235 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.149541856 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.135883465 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.59100133 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.057056791 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.023706811 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.052467219 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.026332221 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.031606314 seconds)
  done (took 8.204180303 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.048645398 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.043266691 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.022722413 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.058816228 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.048376813 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.023970355 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.029280449 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.022265306 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.041745584 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.087574551 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.044790518 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.052683489 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.020681469 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.02340755 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.025619543 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.114178955 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.036440042 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.035862739 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.021656683 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.035669034 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.049587865 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.033643328 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.032375608 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.032010709 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.067541189 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.089263312 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.045047745 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.064018427 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.02188922 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.033972605 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.052324797 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.063076136 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.022376981 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.020660086 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.064301151 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.041583833 seconds)
  done (took 2.204992973 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.982687518 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.049801004 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.037225372 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.028223901 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.06355596 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.05126898 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.076733159 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.076247775 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.054038616 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.023278713 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.102396037 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.635225849 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.062419559 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 1.980785375 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.02796665 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.074123945 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.3130882 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.858317916 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.023922462 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022874052 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.024879592 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024795939 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.067609195 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.021385274 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.131890789 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.567729757 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.028944036 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024448026 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.052230151 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.038750674 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.023650946 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.101886971 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.050959727 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.028550072 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.528793181 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.021915391 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.019978277 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.046010976 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.050419489 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022487002 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.023601772 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.034420242 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.021698166 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.079253664 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.036291017 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.633760224 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.024733211 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.569933318 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.175454711 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.026880855 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.025467604 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.056204129 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.01887064 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.022231697 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.635266364 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.097904061 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.021710973 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.242238689 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.024463891 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.023049703 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.023261641 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.053957036 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.022153668 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.023413161 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.025241694 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.040399857 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.96939411 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.040524166 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.042085205 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.020449499 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.021622782 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.020118448 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.378178317 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.028820407 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.024355164 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.019932409 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.025764384 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.02198249 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.021509649 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.063088878 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.047903276 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.04539494 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.025294331 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.022454983 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.021589125 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.541258032 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.957051313 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.024506619 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.023747845 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.458369053 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.020088098 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.02202976 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.023646202 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.043267223 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.022705796 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.019416151 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.05866984 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.024310662 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.023732857 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.55028347 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.024080251 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.019836209 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.477648229 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.024411836 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.059175165 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.077603717 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022300678 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.062763741 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.022890728 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.019863116 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.026246744 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.019763141 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.024052318 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.020910265 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.021827685 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.020645127 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.022677098 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.169269093 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.021978964 seconds)
  done (took 17.025230157 seconds)
done (took 29.016437418 seconds)
(4/20) benchmarking "parallel"...
done (took 0.669627614 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.085970604 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.047927806 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.107055823 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.055562767 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.023004234 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.055930438 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.061516102 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.058816875 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.023054976 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.022932314 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.023020955 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.056925613 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.059375625 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.023007868 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.052437614 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.057889855 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.02293699 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.018894192 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.022976114 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.022912075 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.022929515 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.018870008 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.022883522 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.023012837 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.054141661 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.023097877 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.018911878 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.053414032 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.023170983 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.052913537 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.023173574 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.023084364 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.023076565 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.054524303 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.023223514 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.05408013 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.018975088 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.023173904 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.023093556 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.023090182 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.023804544 seconds)
  done (took 2.215246618 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.039871122 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.036262204 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.038429354 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.017292411 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.026423068 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.036458756 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.017264273 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.035950324 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.038968187 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.03646085 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.036454331 seconds)
  done (took 1.02183042 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.03886301 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.037625291 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.038182486 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.017301454 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.02829948 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.037482711 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.017280342 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.036840575 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.039000947 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.037497786 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.037461141 seconds)
  done (took 1.019917045 seconds)
done (took 4.900051504 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.04425143 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.019555333 seconds)
  done (took 0.711188782 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.513066943 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.118761069 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.025753272 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.148339159 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.021662863 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.045483533 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 5.790801514 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.042199144 seconds)
  done (took 7.402067688 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.072727355 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.025875203 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.022956936 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.021707046 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.021995856 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.02200282 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.023568081 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.022174821 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.021640546 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.024112834 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.023596927 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.021972353 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.022615524 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.02394642 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.02204147 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.022218764 seconds)
  done (took 1.178401935 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.027810643 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.024724908 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.025974791 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.01648911 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.026762885 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.025139511 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.026363746 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.026825182 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.025741184 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.025795982 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.023643776 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.026520444 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.025425296 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.024098106 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.026336813 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.016486263 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.02675983 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.026114709 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.027780619 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.026905122 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.026065263 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.02376889 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.027594485 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.024942858 seconds)
  done (took 1.263679435 seconds)
done (took 11.213231446 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.136747029 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.028891049 seconds)
  done (took 0.814217261 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.023905327 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.023041947 seconds)
  done (took 0.703933617 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.027553809 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.015328337 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.030830876 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.023225224 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.015406124 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.015192669 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.029825345 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.015557213 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.01541168 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.015518032 seconds)
  done (took 0.85788574 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.018725216 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.022118852 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.020235936 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.018466178 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.02004244 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.016217066 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.018363537 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.016499859 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.022063197 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.015682801 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.019245189 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.036189809 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.018788084 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.03677027 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.018710543 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.019258407 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.020695753 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.018579687 seconds)
  done (took 1.037697805 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.017130444 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.016277965 seconds)
  done (took 0.695873027 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.019873173 seconds)
    (2/7) benchmarking "second"...
    done (took 0.016353316 seconds)
    (3/7) benchmarking "month"...
    done (took 0.017912688 seconds)
    (4/7) benchmarking "year"...
    done (took 0.017765512 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.01591204 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.015326762 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.015837428 seconds)
  done (took 0.773123558 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.371660527 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.076872952 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.289913233 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.023465506 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.030903669 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.215809737 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.01881549 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.023198933 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.023085535 seconds)
  done (took 1.735058125 seconds)
done (took 7.280561058 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.038965128 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.137537808 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.04229985 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.374631047 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.032838948 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.021664254 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.052377173 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.130705069 seconds)
done (took 1.502758733 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.256124437 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.328577875 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.307335705 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.101270456 seconds)
  done (took 2.401531691 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.293179896 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.034839982 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.029328077 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.021706503 seconds)
  done (took 1.055662469 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.021287592 seconds)
    (2/2) benchmarking "read"...
    done (took 0.026084116 seconds)
  done (took 0.717622289 seconds)
done (took 5.106849282 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.026695223 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.016210824 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.020906583 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.017651001 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.017319833 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.016798496 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.016761682 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.017563283 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.015633301 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.017658866 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.017795225 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.017813095 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.017478339 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.01749029 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.017000262 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.017799788 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.015879985 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.017455543 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017503619 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.017455945 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.015839002 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.017832177 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.017026458 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.017505264 seconds)
  done (took 1.08408066 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.03518238 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.02020205 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.020823248 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.020631 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.021142119 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.020597633 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.020595127 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.019743693 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.021387781 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.019547942 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.021011554 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.021234586 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.019613369 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.021397415 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.019709159 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.021334854 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.021006629 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020121199 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.019713057 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.021334198 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.020828062 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020034384 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.021320439 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.020814985 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.021224337 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.021236807 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.019779034 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.020060514 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.020861785 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.021235474 seconds)
  done (took 1.305533997 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.022160139 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.014589998 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.014799355 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.024474166 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.014403515 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.014687281 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.014853758 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.014181545 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.014562273 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.015430477 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.014881817 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.014362435 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.015113534 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.014306677 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.014435937 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.015067998 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.019690014 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.033731028 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.014728939 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.014501618 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.019017037 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.014646303 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.014508812 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.014480003 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.014988099 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.014540528 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.014312572 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.014804619 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.014495989 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.015045717 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.014453474 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.018883767 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.019695084 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.014472771 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.024572473 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.019482078 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.014512313 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.018868305 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.015400632 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.014360416 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.014350814 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.014319379 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.014504867 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.014441274 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.024768836 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.014729692 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.015446538 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.014956736 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.014693877 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.014307587 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.014522447 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.016016479 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.020122456 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.015808898 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.014426576 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.015577899 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.014445619 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.015246233 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.014619116 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.014426743 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.014463927 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.018414011 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.015982598 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.015188479 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.034637648 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.015848445 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.024884426 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.014630092 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.015233429 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.018573453 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.015320765 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.032716846 seconds)
  done (took 1.881026608 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.025956237 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.02559374 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.033308024 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.023999246 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.017932494 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.015332438 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.018296306 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015318134 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.024226178 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.018894458 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015418128 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.018466268 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.024304509 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.018905611 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016453938 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.024230704 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.018874829 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.018124667 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.015434921 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.018850729 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.016470855 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.018496273 seconds)
  done (took 1.120596374 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.093645012 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.020599794 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.060124897 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.023779788 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.022409799 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.023547703 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.020427853 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.020567119 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020687046 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.021219224 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.021238951 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.02066344 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.02257162 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.021149181 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.021151383 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.021090586 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020786924 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.02101514 seconds)
  done (took 1.170046535 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.03234128 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.020333002 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.043819565 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.020030087 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.020118669 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.019987413 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.023108776 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.023420359 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.019819543 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.020234639 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.023777238 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020087603 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.02004553 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020355688 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020061177 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.020360114 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.0199943 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020320351 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.023699504 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.02333981 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.023366429 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.023706921 seconds)
  done (took 1.175968998 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.033568861 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.019528316 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.034906665 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.020987534 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.014991623 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.014857064 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.020563473 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.019701953 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.020388928 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.019261133 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.019726835 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.014873272 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.021122198 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.019862734 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.021573265 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.019870294 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.019500788 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.019865888 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.019431469 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.015090668 seconds)
  done (took 1.08195434 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.026891602 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.017255134 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.017073674 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.021342111 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.016991619 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.016982413 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.021307305 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.016876207 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.01687774 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.0382006 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.016949168 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017125057 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.021577948 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.019906389 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.017057174 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.021541812 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.021470948 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.02161219 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.017151041 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.017018769 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.038575982 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.017073673 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.021554592 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.017272643 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.017223199 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.017185622 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.017206573 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.020222919 seconds)
  done (took 1.240462874 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.020664115 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.018296856 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.018323611 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.01827593 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.018292387 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.018158739 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.018276105 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.0181944 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.017891679 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.018273305 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.017902124 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.017884243 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.01794116 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.017833609 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.018003622 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.017903368 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.017953163 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.018262254 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.018274101 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018324246 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.017968608 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.017984506 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.01808312 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.018368191 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018376612 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.018107041 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.018372068 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.018350139 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018035619 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.018441742 seconds)
  done (took 1.222069691 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.028972804 seconds)
    (2/2) benchmarking "in"...
    done (took 0.025684694 seconds)
  done (took 0.728892511 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.017839526 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.031968085 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.014427248 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.027153164 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.022453011 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.018515386 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.0226705 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.02234674 seconds)
  done (took 0.846805643 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.022055083 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.044392818 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.016054362 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.016352939 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.018595636 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.081083769 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.028140869 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.027432359 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.029539027 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.019048617 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.016068828 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.027425125 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.015504552 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.029148729 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.017337554 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.025524471 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023208566 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.033752155 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.028992083 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.014903148 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.028575868 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.01655762 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.015016173 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.016595415 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.016345635 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.02278517 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.031676015 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.028265063 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.024288605 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.014236249 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.034406023 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.015041783 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.015711462 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.024175532 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.01844796 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.014925003 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.052124607 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.015159418 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.019531993 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.014945056 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.027029151 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.036000566 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.0294463 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.032902444 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.016502325 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.016857717 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.014887446 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.01658095 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.019140629 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.024372936 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.015271513 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.02256009 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.014936395 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.016565331 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.025696466 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.015314581 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.019913078 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.024430894 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.028852026 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.025464672 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.027552361 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.030677517 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.024027735 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.02230891 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.015955078 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.034915799 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.01675549 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.028446754 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.030066479 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.016415272 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.028157621 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.015168495 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.014404311 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.015235912 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.048885091 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.016549467 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.01606391 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.015309772 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.01543801 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.016500235 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.024776647 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020014835 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.022687057 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.01841599 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.031274181 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.024571094 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.015154035 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.021365361 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.033557752 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.019490761 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.015392755 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.032575667 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.019900557 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.015220944 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.033398093 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.025840442 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.016892633 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.016054469 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.019338953 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.02877902 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.016711065 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.014517547 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.023793742 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.016872314 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.017292781 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.019478173 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.0235153 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.015132324 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.025405766 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.019719971 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.016756113 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.014521182 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.020160518 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.016089067 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.014548804 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.02482106 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.015423555 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.030049017 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.022247838 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.02990796 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.030443607 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.025862443 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.031355825 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.015200439 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.01452508 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.033602231 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.024684963 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.016712191 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.034015129 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.015593265 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.026263658 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.015779406 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.017251558 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.025116925 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.015195893 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.017450734 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.015989213 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.020862516 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.017228997 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.017477357 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.021912461 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.024292447 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.028117591 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.016801936 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.024480466 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.016024966 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.031781195 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.02550362 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.020687218 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.019082472 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.016511164 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.027948551 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.022739256 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.025027219 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.015604599 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.016473211 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.015761378 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.026937708 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.025404019 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.017485865 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.023457419 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.020732511 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.016484067 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.015784243 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.016760201 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.019756136 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019157064 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.016330048 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023542891 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.02462622 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.029977174 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.023334827 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.024782507 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.015279125 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.01581374 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.017817669 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.015698758 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.020728286 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.025176142 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.031591599 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.027868159 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.037340145 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.016139746 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.025585621 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.017538079 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.033015759 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.029205872 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.016781605 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020851379 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.014964901 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.01762187 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.025229774 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.027381044 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.029972541 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.030853727 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.020830695 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.020718859 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.015699154 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.031071344 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.016232926 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.024397834 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.025268967 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.02080164 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.015768125 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.017774871 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.025084022 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.020779055 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.016183387 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.031723447 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.022567154 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.015848728 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.030376859 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.016206922 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.026755378 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.015833978 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.019858011 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.021443099 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.017948136 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.025335454 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.031503624 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.015057437 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.016292129 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.03181842 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.017964495 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.017804998 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.024150461 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.031473621 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.0210426 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.023990242 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.026840505 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.026630848 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.020926978 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.026330654 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.017192554 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.025458553 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.01962371 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.02812853 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.016079166 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.034850745 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.015190281 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.03148069 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.016801202 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.027349309 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.016515446 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.025639085 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.016999063 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.033669924 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.017792972 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.017156684 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.028303578 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.015135367 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.025309458 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.015936527 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.021415925 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.023082104 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.025522778 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.018057844 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.025779131 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.017899503 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.024844898 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.021104704 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.02514878 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.025327988 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.020972221 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.015971412 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.02427208 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.027362538 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.024272473 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.017803855 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.017854239 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.016506024 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.025563524 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.017850429 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.160296916 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.023482903 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.020321328 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.021279045 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.016456141 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.01647823 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.016355486 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.023632416 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.024547118 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.03303853 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.02372267 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.022527085 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.024211999 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.014913719 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.030514641 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.014909199 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.022415829 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.014258768 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.019826673 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.02409394 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.01506246 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033741938 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.016289105 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.022729795 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.026718105 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.023442832 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.019148273 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.032566426 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.017596004 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.02320817 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.022665291 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.019864355 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.021898164 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.016301319 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.02322641 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.024266636 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.025149373 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.015513173 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.022377229 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023829121 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.016309784 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.021201101 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.016165982 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.023316384 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.016331195 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.014257754 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.019888596 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.025943539 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.020065352 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.020297604 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.015054969 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.014111744 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.015035674 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.02029583 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.019882845 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.023362652 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.029972674 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.014198133 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.015448601 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.014721024 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.018928841 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.032520299 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.024273838 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.022808659 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.019953956 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.014332003 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.016049206 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.016135353 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.014901732 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.017471623 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.014478565 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.014728266 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.025248767 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.016258218 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.01966776 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.01497128 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.015786404 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.0243322 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.018690172 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.015127028 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.021771258 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.014602891 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.020403733 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.014279986 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.016030054 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.019723969 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.014513481 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.018942022 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.025045032 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.031117264 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.021805513 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.023699829 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.015637943 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.022742159 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.030057476 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021308226 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.015912212 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.024345771 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.014739525 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.033607598 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.024402594 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.023673087 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.024891405 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.01597725 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.032095449 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.020226563 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.02516601 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.030728565 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.016100811 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.021465776 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.015233031 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.031105037 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.020289042 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.015183107 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.023919572 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023170903 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.0215848 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.027113177 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.016041299 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.023913748 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020069023 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.019294409 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.016869033 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.016791216 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.024173183 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.031554876 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.016119905 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.019229996 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.023332842 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.023703596 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.020343912 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.027444354 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.023438423 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.016242827 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.016900506 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.019363789 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.016053343 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.027453021 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.015674514 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.020320983 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.020286228 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.015203033 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.022350407 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.032307338 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.025108784 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.025258591 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.015633657 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.01504901 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.033927084 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.01977381 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.019129917 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.023805654 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.025409044 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028662468 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.025262746 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.033027554 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.016211233 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.021975346 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.027985767 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.01663887 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.015543514 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.019842649 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.017311588 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.024927625 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.025681351 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.02317538 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.017641345 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.02300305 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.029308867 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.0171253 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.020807739 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.020587397 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.016585343 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.026297857 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.023719726 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.024371061 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.017282153 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.015624138 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.019515668 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.024654421 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.023177235 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.024849997 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.016741189 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.022723435 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.029966563 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.02326459 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.019155547 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.015596662 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.019332515 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.025024084 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.021042386 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.015873958 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.020998474 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.019904449 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.023572364 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.02538226 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.020835299 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.015765516 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.033359626 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.024584986 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.025081749 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.017672021 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.017797564 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.016216943 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.015805516 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.027327982 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.015882165 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.017591718 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.02102055 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.017762411 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.034121197 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.024141741 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.032051854 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.016881186 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.020918858 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.015844986 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.025532018 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.020844388 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.015864501 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.02635638 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.015279575 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.031655104 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.028067169 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.022132303 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.015904256 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.021469151 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.02465557 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.031235952 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.02587398 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.024986266 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.019680736 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.025754221 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.017789535 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.027069824 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.015883894 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.015035364 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.026179861 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.024558798 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.028661814 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.015976098 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.026185007 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.018020081 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.024175766 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.024930974 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.017825218 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.017915442 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.017757035 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.025662394 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.021000697 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.025397796 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.021174515 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.033440938 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.017036108 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.0272938 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.025192017 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.027118746 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.029990452 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.02876327 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.02471792 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.016454817 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023399913 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.024697358 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.017205809 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.02124971 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.019691796 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.039075646 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.017915974 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.017891845 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.03137561 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.023626538 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.016177962 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.023302089 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.021218573 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.026299915 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.017007163 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.026463635 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.163812347 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.015932305 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.020207356 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.020226517 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.014349084 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.014885144 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.015214169 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.024700475 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.019964398 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.015136329 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.033848956 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.016221013 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.023643908 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.025670774 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.021992545 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.016148449 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.014226209 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.015604222 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.028274193 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.030346453 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.019057898 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.023507964 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.016338182 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.024070913 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.014214471 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.023576801 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.022809061 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.023451917 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.014794241 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.015040484 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.029772529 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.030207895 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.020053474 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.024634534 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.02382906 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.016195425 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.036319909 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.023587001 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.01566167 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.02557983 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016671759 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.014482242 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.014392029 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.016238062 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.0260842 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.014750486 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.016780469 seconds)
  done (took 13.995127768 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.055420185 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.015945069 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.01473869 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.014698985 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.02156742 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.015725102 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.014695561 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.015706071 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.015725672 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.016697243 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.014672089 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.014719795 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.020219851 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.027151466 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.022361242 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.018319516 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.014852974 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.015927556 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.014989768 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.015920665 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.020668365 seconds)
  done (took 1.12777844 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.020098528 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.019054299 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.018483715 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.018697475 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.017897181 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.014975918 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.01825098 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.014987607 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.018633183 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.015352202 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.018624698 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015126811 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.015470296 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.015459808 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.015410608 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016449136 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.018854677 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.018113709 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.015121461 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.018518765 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.016507705 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.018522496 seconds)
  done (took 1.090388368 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.01766305 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.015554532 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.02351547 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.014479562 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.014349234 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.017114736 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.014376688 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.019221912 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.019260494 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.019224598 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.023394578 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.01514896 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.014303574 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.020554704 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.014297379 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.015030922 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.057173406 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.015282496 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.015275794 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.014575954 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.016770396 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.023627971 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.014612 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.014820255 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.019279292 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.017202443 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.014661843 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.016834585 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.01514207 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.019316121 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.015281301 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.014391414 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.023455074 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.022785928 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.019332214 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.019304684 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.015805512 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.015291884 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.014602446 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.014511483 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.022909736 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.015857669 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.015004104 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.015710424 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.023520662 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.01479523 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.014573422 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.023694612 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.014602956 seconds)
  done (took 1.600589416 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.025578369 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.067217948 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.020802771 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.050305039 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.026249864 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.019680842 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.020647281 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.053165567 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.015844159 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.016257682 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.027359718 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.027462267 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.017328236 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.018430895 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.021810117 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.017166314 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.017850476 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.016528369 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.019449806 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.016814477 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.019709609 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.022013314 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.026873546 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.027312878 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.018337712 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.016819908 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.016958922 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.018607596 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.026952924 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.020171632 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.018788283 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.019226976 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.027394209 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.022518434 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.017083758 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.017232236 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.027899508 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.01765316 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.017448985 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.015969795 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.017116256 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.01850852 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.022010584 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.028010779 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.017558251 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.022387151 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.017609565 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.015723544 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.02760127 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.017452795 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.020935611 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.028536012 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.018601883 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.017829383 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.018926481 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.027703441 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.017694329 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.016496659 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.017856816 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.027327988 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.016019005 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.018313389 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.028025993 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.017115238 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.020470098 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.028205923 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.022603209 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.018417325 seconds)
  done (took 2.358697052 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.024569789 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.049398621 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.028241116 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.028265848 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.023915177 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.023921929 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.02391903 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.024106789 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.024113349 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.026903989 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.024259639 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.059256083 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.021226859 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.025715287 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.024260968 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.024269522 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.024275462 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.024281069 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.024172375 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.024322348 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.024585271 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.02917442 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.024590968 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.029225049 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.026835101 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.021392723 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.024365727 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.024539409 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.029308448 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.024491038 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.026889172 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.024528284 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.024585082 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.029338386 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.026861608 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.024450533 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.015385059 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.024484624 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.024633992 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.024529705 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.021405813 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.02930417 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.024434904 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.021460079 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.024860024 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.025137364 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.029814951 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.02735506 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.026608391 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.027856109 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.024993041 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.02972023 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.024675305 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.024859735 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.029704267 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.031996445 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.029815516 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.029985377 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.025083897 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.029869801 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.030070519 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.032311929 seconds)
  done (took 2.386615523 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.027907045 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.020370468 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.032826081 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.014516553 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.014437951 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.02300405 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.014496355 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.014501889 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.020051039 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.020328539 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021779359 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.023254208 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025063187 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021888807 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.02329137 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.025071554 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.023252492 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.02322454 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020441719 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.023204233 seconds)
  done (took 1.162101168 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.031776228 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.033033756 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.020246726 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.023338057 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.019903056 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.023252478 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.019457881 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020041316 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.0203195 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.019978744 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.024284911 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.024382755 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020483627 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.023490764 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.024244626 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.023455298 seconds)
  done (took 1.087727607 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.019762138 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.022323539 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.020752836 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.015713207 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.01748698 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.015191175 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.015849089 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.014537679 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.017054188 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.028898998 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.015506507 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.01790813 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.016046187 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.01485632 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.015364349 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.018009096 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.017212322 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.015729541 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.016040495 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.019887529 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.023665936 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.016566677 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.01801191 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.015697357 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.017654971 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.023640338 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.016900287 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.017697848 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.015677476 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.018021446 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.017698558 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.022310729 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.017902731 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.016286411 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.014944168 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.015787178 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.01623998 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.018294958 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.018275505 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.016250303 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.014756244 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.017936755 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.016299455 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.016580647 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.017387716 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.018251617 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.01736626 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.021513277 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.016044378 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.017926969 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.016212903 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.017329659 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.01616025 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.022840933 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.017707414 seconds)
  done (took 1.691717669 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.033432938 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.020095541 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.014567038 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.01441122 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.019680218 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.02029555 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.01982594 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.01985593 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.020235375 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.014433548 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.020317026 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.01939462 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.020316517 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.019860779 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.020361957 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020066123 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.014527139 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.020231103 seconds)
  done (took 1.074600045 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.02241927 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.020133816 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.019006998 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.01646803 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.016595147 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.020478964 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.014879856 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.015988048 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015952954 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.016302469 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.016295244 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.016030714 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016076383 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.016143957 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.019958332 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.016450961 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.016126095 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.015066551 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.016466776 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.014895615 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.020421432 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.015025612 seconds)
  done (took 1.094327949 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.077313113 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.040825975 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.037274915 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.033752053 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.025847893 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.048771594 seconds)
  done (took 0.982393114 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.050609078 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.052288633 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.019792058 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.01978492 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02368308 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022046959 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022069343 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022211395 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025004772 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.025856504 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02257984 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025651572 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025492451 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027098165 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023996439 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023994603 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02254241 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022485466 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.020002605 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029111147 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022633283 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026068351 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022863128 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022671455 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022761377 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027534823 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026099289 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026327673 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022655851 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026021417 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024406626 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022828287 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026207315 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026411063 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.020196185 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025935898 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022906759 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.029738678 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024402936 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027549315 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.020031039 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024440089 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025909892 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.025602727 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026088206 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02310268 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02593127 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023000025 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023134176 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.031424763 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024823724 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027835289 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02469835 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026512436 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026289141 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.031426419 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026658417 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.0279168 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024719254 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02677554 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028122785 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025119759 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028098378 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027064093 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02490835 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028267413 seconds)
  done (took 2.418907343 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.058907913 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.020255979 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.022392014 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.025692516 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026565626 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022249474 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02226888 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022290952 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022430726 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.020267779 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.057390078 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02277807 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02695035 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027034848 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022620269 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022435031 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022524053 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026953756 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.020272583 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.030533421 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022724245 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.027383869 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027405165 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027424383 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026369198 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02442024 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022804662 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02271693 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022742427 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02269 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.025617181 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022819693 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02743843 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.020402434 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027408302 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022933836 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022714547 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.025579825 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022775635 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024436284 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027519999 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.029671531 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02285741 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022669585 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026767764 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023021734 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022945192 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02057084 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023000153 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.020593797 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026693852 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026631725 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026716173 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027892663 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023214518 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023187486 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023030067 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023058501 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023106329 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024734567 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027784113 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023015598 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.031675831 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023179941 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02323349 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028232294 seconds)
  done (took 2.409416818 seconds)
done (took 48.006369937 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.210142498 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.175379324 seconds)
  done (took 1.091634296 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.028782096 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.026749465 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.047899288 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.02293791 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.081077441 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.175608332 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.124587383 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.025754819 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.023513869 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.025443666 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.02314626 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.025181353 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.025269298 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.023008081 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.085830789 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.025905624 seconds)
  done (took 1.517647836 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.073334644 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.132905308 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.057918133 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.022227657 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.103163187 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.028144043 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.024241254 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.028186961 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.028062256 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.022406148 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.069380893 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.035545045 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.026918485 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.027829991 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.023791816 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.026984518 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.027855861 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.028248483 seconds)
  done (took 1.508497287 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.092457574 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.03359066 seconds)
  done (took 0.847764666 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.111808412 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.063221649 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.102139034 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.30054884 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.091686288 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.096523617 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.100529796 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.095975573 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.067724908 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.093666496 seconds)
  done (took 1.843209856 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.060052522 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.056785346 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.280056257 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.054050227 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.033852922 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.028804144 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.028441477 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.03112482 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.028816691 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.028693833 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.074139745 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.027432838 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.024036558 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.075877241 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.049765062 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.05899847 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.023182795 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.029493322 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.031970574 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.023077214 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.027800345 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.031306122 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.1302829 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.029931472 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.052064252 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.027278799 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.028951159 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.028085326 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.027918984 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.030217108 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.03064633 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.052779568 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.029788688 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.036496689 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.028371412 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.048771352 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.023952551 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.050496388 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.026637034 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.024088021 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.02718339 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.030941723 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.02463986 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.030202381 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.029170312 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.029650882 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.031714792 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.023289834 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.029120371 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.026889293 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.02423038 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.028249226 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.028024851 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.029116102 seconds)
  done (took 2.941574474 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.075313494 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.06357382 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023630083 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.071141528 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.062816189 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023672077 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.077004742 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.058411476 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.075822789 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.02336173 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.022841451 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.022856204 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.02981875 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.03385379 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.072831899 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.066217392 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.024823609 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.02349035 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.06532922 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.0655095 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.022499719 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.077677432 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.068508759 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.064773243 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.022239535 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.023760538 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.022462786 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.022978788 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.030666025 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.02984645 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.022879496 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.032609573 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.033647937 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.029173371 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022209574 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.02255869 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022517266 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.030195413 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.032010167 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.031789396 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.028548972 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022194611 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.02245914 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.022993183 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023416674 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.022048593 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.03154164 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.030078825 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.031446183 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023307113 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.023595229 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.022732549 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023297958 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.029271686 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.028404464 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.031152323 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.03232651 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.022736615 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.02265393 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.023966777 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.033464196 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.030370323 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.030248783 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.02380387 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.031664378 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.022760558 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.032813839 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.035571077 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.022746251 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.02327994 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.022868137 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.022864394 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.023155146 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.028879779 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.029000187 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023264439 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.023127645 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022670907 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.030364354 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.028955099 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022659115 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.031214164 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.022327577 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.022914476 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023218733 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023762124 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.031951954 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.030471423 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023319894 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022950407 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.022977015 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.022929223 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.022289398 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.031596145 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.030201805 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.030681796 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.033435776 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023755311 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.033808479 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.031766981 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024148611 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.030523725 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.023396256 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023746818 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.02368325 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.030514098 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.029966023 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.031937817 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023356153 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.02313683 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.031130774 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.034375434 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.023231321 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.029976558 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.03236536 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.030603496 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.022768013 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.033549391 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023366875 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.033625504 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023526833 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.033120438 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023583002 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.030615878 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.023482421 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.022744157 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.023375411 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.034142134 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024432893 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023572123 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023955717 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023500314 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.03122935 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.035632794 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024174178 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.031346961 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.031103756 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.024109629 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.033435491 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023766272 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.033958446 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023809518 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.024049171 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.022899991 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.036178974 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023481899 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.023858497 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.023532653 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.033172807 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023491449 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.033199332 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.030651255 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023106922 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.034845021 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.033212647 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.030647122 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.033632326 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024388243 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.02378467 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023450648 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.023688059 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.033840226 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.035297285 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.024595118 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.02375062 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.14719065 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.034849636 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.023253084 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.030763946 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.030549248 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.031024263 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.023847892 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.023942598 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.03448029 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.036786714 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.031156315 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.034117014 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.031876156 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.023683459 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.030742839 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.171544599 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022756353 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.035247558 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.022681103 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.031228431 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.031115137 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.027558978 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.03065066 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.032008174 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.029951221 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.030256469 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.032135257 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022200904 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.022361399 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.028042828 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.022445265 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.022581219 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.027691716 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.022949329 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.023168266 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.033975844 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022654444 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.031244693 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.022247285 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.028867334 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.022054292 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022968193 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.032725387 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022543427 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.022993056 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.028388298 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.022507996 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.027946955 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.030703854 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.028009996 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.022433286 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.02287449 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.031295004 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.030682953 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.02243949 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.022292207 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.022833526 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.030331271 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.030303069 seconds)
  done (took 7.683352163 seconds)
done (took 18.167041956 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.15006609 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.072589207 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.159358722 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.093239461 seconds)
  done (took 1.19576317 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.055699878 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.019126929 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.032761639 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.040924256 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.018919971 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.028100837 seconds)
  done (took 0.937263203 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.211556202 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.137679381 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.141555664 seconds)
  done (took 1.227294802 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.13086523 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.267698648 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.480388519 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.126685817 seconds)
  done (took 1.757201711 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.062392016 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.052831532 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.029103745 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.062484443 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.036469084 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.015465778 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.085258044 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.021803053 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.049938424 seconds)
  done (took 1.219857943 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.095075476 seconds)
done (took 7.196079191 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.198889369 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.029934326 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.032418731 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.028747158 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.125994085 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.021295168 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.134653871 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.028586157 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.134152253 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.193377425 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.150586507 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.045457783 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.043859488 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.041825219 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.143839928 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.032614358 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.028203052 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.023548049 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.150387955 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.125838619 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.126510535 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.030335181 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.091710215 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.029702525 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.109638034 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.077327601 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.159430131 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.201369126 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.164082261 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.029891767 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.117783685 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.041656759 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.128372081 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.123548458 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.02213897 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.046329877 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.019839843 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.13889473 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.098143993 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.192229562 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.154046098 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.027988875 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.144182744 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.024209207 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.018788589 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.031871278 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.032038267 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.027868573 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.041701466 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.027539492 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.039867648 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.025669732 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.132259473 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.022899008 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.090238401 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.022539615 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.154644513 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.081337206 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.02435677 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.036806689 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.028103401 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.181451319 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.037616304 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.028902937 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.030714348 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.019092171 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.021551018 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.03609209 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.019413089 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.029081413 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.027363074 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.104597868 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.037277976 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.061891483 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.030505936 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.115687195 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.095416059 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.044220075 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.046491359 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.028363062 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.018989181 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.1904684 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.023242044 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.036748551 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.019144639 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.049977579 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.019251411 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.034675205 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.15770786 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.153435553 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.077775025 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.020290547 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.220530056 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.021685518 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.045377911 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.020625667 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.019995128 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.156590657 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.019809428 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.01992422 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.02966051 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.028181409 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.021608916 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.15901453 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.110741838 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.027705824 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.028889512 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.020943105 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.018934623 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.021134717 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.02074479 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.020215636 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.087287166 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.035343075 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.019439036 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.107876593 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.12064246 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.030787536 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.038923528 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.080472277 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.022894212 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.028817577 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.027736401 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.128065105 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.027852621 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.138911059 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.021482252 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.043836671 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.11851042 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.096489629 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.106876211 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.01985862 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.184169908 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.032474339 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.019490225 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.02725992 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.04889944 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.031934144 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.035125905 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.019774914 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.184071759 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.030374342 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.018886729 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.118367809 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.173324723 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.113128281 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.096794352 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.119718715 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.026575583 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.029394672 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.091707242 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.042684765 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.046175011 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.041791918 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.022258448 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.019392646 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.019050205 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.034056755 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.01846006 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.01930711 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.033333501 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.027556069 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.019069606 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.12609149 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.03036476 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.023071358 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.14648135 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.031029095 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.08589516 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.039517912 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.01947613 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.108822579 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.021150285 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.037212107 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.08062648 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.019589648 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.095918675 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.019433134 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.019224179 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.026506931 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.020729308 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.027807739 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.031780279 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.019556796 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.033009642 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.018192858 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.019335655 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.108257123 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.020904051 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.157566488 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.105934339 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.105129985 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.019524149 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.03634496 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.018974641 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.134232341 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.019282837 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.066359121 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.119329133 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.035905147 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.03746987 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.020684818 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.095336981 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.034002167 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.019031441 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.09468029 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.117603019 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.085410095 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.026586966 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.126413209 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.028239639 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.019449202 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.026579321 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.02806272 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.020121742 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.098170271 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.019143165 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.018680593 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.019014019 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.020928225 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.01831841 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.042707615 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.018577027 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.026677982 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.019104044 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.021720171 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.02112562 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.018533339 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.02695413 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.097205411 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.119294083 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.018438343 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.036591611 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.031555385 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.029912744 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.065796414 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.025803537 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.173005927 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.018657572 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.02821883 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.040583923 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.018775928 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.022469433 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.019237139 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.036855525 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.018641871 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.020342996 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.027671215 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.019512668 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.019685728 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.033457867 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.01949169 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.027459691 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.020373647 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.01866568 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.018709245 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.019161809 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.023633476 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.022734194 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.029213712 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.036469162 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.133347423 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.020115799 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.021136848 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.019170837 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.019159949 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.019451588 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.020734277 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.019062984 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.021053692 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.019373423 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.018813046 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.046921189 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.022567983 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.019941521 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.040144791 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.019285876 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.028174693 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.117330612 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.034734999 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.022649359 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.018530508 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.146204384 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.100989482 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.040434723 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.038832084 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.019579663 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.029020535 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.019553255 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.019744551 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.01856988 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.04544185 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.022674237 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.019609834 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.018493162 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.018743579 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.065165736 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.026826702 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.018835975 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.02679928 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.019172447 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.019181575 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.045833632 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.019784065 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.019079723 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.037960625 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.032514192 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.098293438 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.0311798 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.018750117 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.068964049 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.018953446 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.019573979 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.020003711 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.110506196 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.031600944 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.020943613 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.019548254 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.026820177 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.027992268 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.070697003 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.019031569 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.02287513 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.018535175 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.018864993 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.019903133 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.044733446 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.045988755 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.020818299 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.023143427 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.019523354 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.020065996 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.092411196 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.019065399 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.024050428 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.105370455 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.021671426 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.027378547 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.019043191 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.132797064 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.02357484 seconds)
  done (took 18.770010621 seconds)
done (took 19.530735786 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.052467685 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.032810363 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.032283836 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.027693927 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.031417716 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.03073191 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.032602404 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.028368411 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.033281621 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.030725672 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.029107958 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.018459328 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.026127303 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.035353968 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.027621542 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.034628872 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.03114733 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.03406723 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.019738479 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.034297903 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.029171702 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.032160561 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.027909561 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.033636288 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.019648148 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.027669828 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.041763392 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.03672758 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.022693405 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.028678399 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.026730455 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.032609576 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.026706252 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.026353936 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.028360268 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.024369339 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.028878012 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.025507372 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.041840283 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.0244403 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.019735019 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.031061304 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.026296874 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.027103466 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.027766029 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.031041703 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.02449766 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.034617038 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.01900982 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.032083535 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.041913924 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.02359838 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.022748305 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.027695849 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.024559126 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.028604674 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.022724484 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.030629033 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.024408576 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.03140466 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.027402188 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.027146316 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.019223232 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.027802193 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.026529984 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.02743508 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.018628273 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024112537 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.019301505 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.019244778 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.018547375 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.027828382 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.02608823 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.024253343 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.018637015 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.019185817 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.018665095 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.031403352 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.026299109 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.027844898 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.019545968 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.024550857 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.024164135 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.019681886 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.023987949 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.030983977 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.018679259 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.019700283 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.018558148 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.030814047 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.025804605 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.019225223 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.031035361 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.023879049 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.023581785 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.01925205 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.018728648 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.023690877 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.027257484 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.019191318 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.01825676 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.02370974 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.024313311 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.027885045 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.019549868 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.023605169 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.023482703 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.018291593 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.027783926 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.026403796 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.028121158 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.03207511 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.027717343 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.03241357 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.019680593 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.018196528 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.028853828 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.019611686 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.02412028 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.027338249 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.024540598 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.027209159 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.019850869 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.018761666 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.023854752 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.025262099 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.019732541 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.019761891 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.019630112 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.028061985 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.026579083 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.01837099 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.019307936 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.027972356 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.027810836 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.018782394 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.01856637 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.027877204 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.019763845 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.025298812 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.024553461 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.027999535 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.018975748 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.01957412 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.01857797 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.018976465 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.018668981 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.024516398 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.023971099 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.019854345 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.027896417 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.026604181 seconds)
done (took 4.820602357 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.033948013 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.061254664 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.057567822 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.035048588 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.031993954 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.020346296 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.023880911 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.038090892 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.022995542 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.043845522 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.044786739 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.041469187 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.047603339 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.018327581 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.019628066 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.020415739 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.018070671 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.031573211 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.041323598 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.042944028 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.054979371 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.019149828 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.037233315 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.039007362 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.030962387 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.037130212 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.020817951 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.020346729 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.022488166 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.036119028 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.045508343 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.019443423 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.020788284 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.037930228 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.034992009 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.02782112 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.020432794 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.025847339 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.020526745 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.019641955 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.021644115 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.037064203 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.025907317 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.026131903 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.020834 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.020377669 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.020062988 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.026872837 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.032742403 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.025275782 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.031548704 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.038432181 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.021571927 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.020023569 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.018292509 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.02634747 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.019943347 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.020126872 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.020406687 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.019277642 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.020365669 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.02247334 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.025257988 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.025912821 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.023613127 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.026147718 seconds)
  done (took 2.718579735 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.038775077 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.046141847 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.033559163 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.033837086 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.019323149 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.019891648 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.019851246 seconds)
  done (took 1.034159278 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.065106085 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.026983755 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.031101802 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.031159305 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.040419771 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.028546812 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.031911901 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.051156971 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.01913555 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.043769383 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.037615326 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.031975054 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.023100772 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.031810243 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.050016726 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.034162831 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.032122323 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.026589887 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.026787342 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.032273029 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.024095016 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.051815505 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.033494804 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.020792661 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.032970116 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.026318984 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.022868082 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.020654202 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.022505918 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.019860786 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.019765469 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.041885863 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.025527192 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.025977846 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020805077 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.01888554 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.023427965 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020752514 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.023276933 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.027024892 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.022721146 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.022001551 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.022347585 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.020062472 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.021173939 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.024109903 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.020961243 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.019982095 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.019662447 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.026627118 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.01924477 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.025575465 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.022333897 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.024980308 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.027017881 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.025948056 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.026818805 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.020467329 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.027490468 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.029678605 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.02170195 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.031839552 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.030733218 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.022745055 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.030703185 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.028444951 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.025638873 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.022743668 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.019641412 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.027666708 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.020465498 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.030845279 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.023042806 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.022262657 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.025100523 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.027084853 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.034535696 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.034666487 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.034522043 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.033336506 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.022639625 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.020102963 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.033999295 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.034514456 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.024846594 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.019978187 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.021021238 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.034250681 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.043849537 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.022203258 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.02492082 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.020136651 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.030161498 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.022637639 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.022495858 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.027239014 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.020263556 seconds)
  done (took 3.491430828 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.024274191 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.022321896 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.020936931 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.020869769 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.02114639 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.020893042 seconds)
  done (took 0.963003883 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.044936142 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.020318151 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.03166054 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.020195926 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.041659731 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.025764654 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.026228155 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.021908602 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.035718029 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.030838385 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.025631977 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.027656825 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.028375363 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.021523316 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.025740765 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.030239071 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.025920728 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.024342792 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.029831844 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.021946822 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.033256261 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.021604837 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.021921082 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.030067145 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.022505728 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.030190867 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.029781095 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.03033588 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.029819726 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.02195659 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.021497643 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.022496556 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.026689726 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.021973607 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.026271085 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.026609143 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.020339944 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.024787631 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.022983373 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.022675507 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.027892548 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022064694 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.023106625 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.024692768 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.022109009 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.026857551 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.024968067 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.024043197 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.025900228 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.024716744 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.02462738 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.020948625 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.022655806 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.024693511 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.026917113 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022191653 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.02471909 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.026204116 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.021662483 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.026899424 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.020456288 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.022672385 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.022134125 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.022720823 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.025196352 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.024690429 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.026929684 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.022123291 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022188318 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.020389529 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.024842184 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.020365333 seconds)
  done (took 2.646464734 seconds)
done (took 11.681676504 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.529096201 seconds)
  done (took 1.338741574 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.578782378 seconds)
  done (took 1.41843172 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.049788035 seconds)
  done (took 0.876111734 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.293068658 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.375545203 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.708362322 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.092247072 seconds)
  done (took 2.285966081 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.835710187 seconds)
  done (took 1.675477995 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.217718143 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.179670414 seconds)
  done (took 1.26476878 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.353507801 seconds)
  done (took 1.182409427 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.176913046 seconds)
  done (took 2.010540899 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.189367136 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.115044698 seconds)
  done (took 1.138218887 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.477245427 seconds)
  done (took 1.309777991 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.532791144 seconds)
  done (took 5.364629436 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.197650855 seconds)
  done (took 1.096271909 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.189925469 seconds)
  done (took 1.025761277 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.702347899 seconds)
  done (took 1.536486219 seconds)
done (took 24.357151126 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.042867811 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.038225596 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.037915633 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.033517149 seconds)
  done (took 0.978389334 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.02905554 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.023269788 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.026217807 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.026403343 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.024076046 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.025736092 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.025635443 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.022732058 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.023919801 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.022919901 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.021609816 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.022864799 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.025454203 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.022792098 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.025265099 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.026315875 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.022839145 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.022899037 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.02507292 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.022875172 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.025512325 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.023027352 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.02293424 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.024647096 seconds)
  done (took 1.422108828 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.033315475 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.025205753 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.028060491 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.023907496 seconds)
  done (took 0.951495146 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.031935957 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.02972833 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.037995086 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.042855087 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.029069373 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.029948659 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.036310178 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.036498449 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.042228809 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.039241727 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.020972227 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.020629293 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.019743453 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.038382974 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.03607316 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.015430828 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.016851824 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.030113562 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.029222172 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.031993826 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.022959081 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.018686795 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.029311039 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.029949559 seconds)
  done (took 1.55364088 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.037002767 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.018864242 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.033897355 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.04444497 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.044947903 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.01865697 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.032025424 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.044648829 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.080181516 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.018569213 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.024561133 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.018642719 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.056197813 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.018740855 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.033601629 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.061806543 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.064671637 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.022661117 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.051194282 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.018750627 seconds)
  done (took 1.59075985 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.028021011 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.023830097 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.023489509 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.018849438 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.029546916 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.025805143 seconds)
  done (took 0.997118448 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.023739112 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.021614913 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.020377708 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.025556473 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.021258505 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.021189407 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.020579199 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.01945222 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.019402263 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.02010737 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.020026264 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.020512924 seconds)
  done (took 1.095505639 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.113410651 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.025769789 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.023564942 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.019367176 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.021088979 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.020081041 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.034799354 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.021781008 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.037261126 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.02010937 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.020241344 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.022123494 seconds)
  done (took 1.222285998 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.059996585 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.064149327 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.097289879 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068803937 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.06991434 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048611307 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.080808987 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.031223004 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.117161869 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090693883 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069946369 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047351155 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039408438 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.022807823 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053300649 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072709254 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090734528 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.025997155 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.066979205 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118877585 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085613976 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.089568127 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101710981 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07072778 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.044846494 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102057042 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050252145 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.056840471 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.078584714 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.082220565 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073279756 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.051702745 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.024765121 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.024079745 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1065252 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.061302931 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077300215 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.047018651 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.059795377 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.042190865 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062252646 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.022867827 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.047701786 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.065496417 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038933495 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089212143 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.047477458 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072530807 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035404603 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096643138 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087242864 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.055978876 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.041228916 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061857963 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.09947665 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072183951 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098849695 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.064601357 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038574089 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.077793848 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.066465841 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058295967 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.214610535 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033535429 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130630358 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.041761807 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.064732765 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064477784 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.046702059 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.048367576 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.059514826 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088525966 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077724086 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.077602922 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089809321 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.047543853 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071741618 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.052516827 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.079929637 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05597607 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.025941781 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.073831719 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080680382 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.050961564 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.052791706 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081282208 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.045052064 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.031012998 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.054221956 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.073368304 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033761011 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.067789556 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.033829399 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.063368689 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093400929 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052432787 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065710993 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.072524036 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.031633441 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111246223 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.062670954 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026381481 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.071548395 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068305194 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112620637 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050886449 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.029898808 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055319961 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060821667 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.107464039 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067023721 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034720102 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067406026 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101918854 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051190837 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.130453037 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.05234973 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10328491 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071819497 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.042189659 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.030036517 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.045963655 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073800917 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066455679 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071488396 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05096301 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.040438049 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.041839961 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.225363257 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.045928384 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033865977 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.066338863 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.056340059 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.027732442 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040752082 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.029613638 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093675697 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.031086592 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.086868943 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077137321 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.028340941 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058798954 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.050228112 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.060264892 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.050279482 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.069667558 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.090351386 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.131932113 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.042875267 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.046823409 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059877445 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.095786273 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078586219 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.044478748 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.02951271 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.052793518 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063536682 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.050422731 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.079297234 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.050330757 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061653355 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.057388128 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096357153 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100812879 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054283239 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.055802214 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062672799 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.077334857 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.03034941 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113097007 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059438408 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.073109056 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.038012686 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098239059 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.066193812 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.04425919 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041082835 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.054703308 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.059233032 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061841191 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100913357 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.050883522 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.026774487 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049752747 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105512279 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.031272917 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068388772 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.046562399 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.048753587 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076320286 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.052142208 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.036894151 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.02244576 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091060842 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123818531 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.024387022 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.072888325 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.075232728 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.214201025 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.074249339 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.022770386 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.070692204 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091164462 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068737283 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091602433 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116827641 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069306216 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.070032669 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.065065177 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.057967317 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.032275436 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.07750272 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.086324226 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047773775 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.043886441 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.085447386 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.070168308 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.087370301 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.068444232 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071147862 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.058148907 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.062849351 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057155949 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.06018255 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100684025 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.076463293 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.080521092 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.039697987 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060798597 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.074522166 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091989432 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.035824454 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097964594 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.038101018 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.075539863 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.030994125 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.080084227 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.029674188 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.119174113 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033266288 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.055085356 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.023304212 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.02786331 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098619015 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.06777207 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.062238262 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057080809 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.096971626 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096749035 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.031716495 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.065459338 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.074599054 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.058155952 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07767739 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.066030953 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.044894859 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053839879 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.066463626 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.041431428 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.038544378 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075568427 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053212476 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.230212017 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.037690661 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.028244689 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091801326 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057017298 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047483704 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.031461754 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06025351 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.076288326 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.045995383 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.039971351 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066987997 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057329398 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092953696 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.043584291 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.050240725 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076904467 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.033136183 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.044834368 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.022525232 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.038433128 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.02908759 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07890858 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.028710404 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.067217444 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.021902337 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082598458 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038096193 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.04562796 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.05455204 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06173588 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.079723886 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.04724581 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094895365 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04276507 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.07389871 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061590034 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048630009 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.04265783 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057299323 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.054779269 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.07709783 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.049976611 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078656145 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.099337147 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058336077 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097957333 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044844158 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.077088228 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061400129 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.081168759 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.067111082 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124290222 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096396893 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066974066 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.068538611 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.02925574 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.050835685 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062108558 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071584424 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139718532 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087993477 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.026641202 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.066696679 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.050064955 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.068562517 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063695243 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038039795 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108819175 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.20903077 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.041527762 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.064870905 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.043288134 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.056958297 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029040055 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.05232142 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.056641831 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.047080877 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050386756 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.068852108 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080087207 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064878865 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094894262 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.053490224 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.044688368 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.070509801 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062292579 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061578552 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03818474 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038654998 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089465949 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.072132659 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.078008711 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.052896214 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060402443 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.064657812 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052059391 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.076489168 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060910506 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.080432389 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033474891 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.029149456 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.021743767 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.025504928 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078678646 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062368521 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066684947 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053116027 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.025834801 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.057847466 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.060885892 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.025562671 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041860885 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048737619 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.049808438 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.046662523 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062532672 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.065243863 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.050295185 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.058660382 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.053887007 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105098519 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.055610808 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043206557 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101194052 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109512309 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042382552 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04908488 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.025488831 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033377852 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071155214 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111721651 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116048882 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.032869596 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.04217152 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.042611235 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043868899 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.02585864 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.04537924 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.045317669 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063255495 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059057661 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.072321154 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.20957011 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028919877 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.056716091 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051692075 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.04532094 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.059670467 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.071607384 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.077706267 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.09328558 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065492441 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059311711 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028948038 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.032974202 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.02875003 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.03233395 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.05417946 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.032667945 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028981422 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095289667 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.044609963 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056810477 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060160395 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.040636742 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028032789 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085676138 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.022484024 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086362675 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.024246926 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034425798 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.035502394 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031513707 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.045737792 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.088896526 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.064480694 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.066040053 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060437042 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058093744 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115524098 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113278461 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.034195748 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.09929443 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02935782 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.029099533 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.029580757 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065771819 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044057455 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.069847196 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097473745 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044461748 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057098109 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.030638534 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100773723 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.054847532 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.059030184 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.040926632 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.032838437 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100688535 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033005988 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.034598096 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.04429891 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.065882886 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.026484934 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.059819457 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.039134329 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033999316 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124798891 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.664883218 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.047058916 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.030746914 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.052913753 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.104090833 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095835909 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05457856 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067604228 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.078177293 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.202202241 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.048406566 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060424025 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.143250441 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027440627 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.046866295 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.056304646 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050439997 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05430764 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.051578268 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.040116933 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.045071045 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.039843847 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.032237049 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059656118 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040796258 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.049569401 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.062958883 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.035468146 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.040473972 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082837413 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.055400506 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.034158303 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040329478 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.056212511 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040333088 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055947569 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.022483168 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.06521739 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.043306944 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070043477 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.052586246 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.060934658 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081913813 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047150562 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090780263 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.060915588 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.076380388 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.040921927 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.031706245 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080957821 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.04227257 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031125038 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100182968 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.049857703 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.057725443 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058495761 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.050635994 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.068132068 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.072830434 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067224784 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.051637473 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032733971 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056190141 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.057832373 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.039888135 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.032210003 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.028290375 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.030197376 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064457279 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041499496 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.037442273 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.071160721 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.044850536 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.059216064 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.060530331 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081567973 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.041865449 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.057896005 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.067467415 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048274568 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067792953 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.057834212 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.089733057 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141492081 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.22501962 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082750979 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086676507 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.029748333 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.028402828 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.02208929 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.068178656 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.032655956 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.042218616 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.034495168 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085830699 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.035678119 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063829595 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.194708525 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.033702611 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.046700771 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048382044 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.022850673 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.03580918 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059263432 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.039919503 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03276794 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070536303 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.035546833 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.080143893 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06267925 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051371866 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.047147417 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033459677 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065851536 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.056123371 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.081829739 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.047512697 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.028233065 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.075775045 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.056835992 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092651654 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.02647515 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034202124 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084818396 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05754436 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.08650261 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033702474 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107000647 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100448546 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.055817984 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091033866 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.024746804 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.041166764 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044221325 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.080460917 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038909591 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067611464 seconds)
  done (took 39.356923769 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.135305835 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.127487635 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.075199468 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.086924294 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.2428176 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.251030874 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.105079541 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.080196438 seconds)
  done (took 2.088159327 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.027595947 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.036661372 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.034440426 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.161442422 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.06914311 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.02056717 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.025214126 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.034940099 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.024119635 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.020008399 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.058811158 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.020304284 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.024294286 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.428896799 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.019725978 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.025384314 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.024420344 seconds)
  done (took 2.060825263 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.30738689 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.829258277 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.267452947 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.927766767 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.095074683 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.475454849 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.029016608 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.034111705 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.578787319 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.341698407 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.088362463 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.18000284 seconds)
  done (took 16.114944179 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.031196535 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.030434555 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.029871084 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.027010825 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.026772967 seconds)
  done (took 1.16598344 seconds)
done (took 71.511063768 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.040682313 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.120894395 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.020205288 seconds)
  done (took 1.134451628 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.037054844 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.033302366 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.032815637 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.033545671 seconds)
  done (took 1.094412113 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.029927366 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.029847245 seconds)
  done (took 1.016296021 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.181200087 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.127887215 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.042777386 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.039028222 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.033029402 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.033779175 seconds)
  done (took 1.067902059 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.026451014 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.024279518 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.024222494 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.024585398 seconds)
  done (took 1.053996768 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.02589223 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.019058033 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.021628473 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.023227786 seconds)
  done (took 1.044766269 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.040108259 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.039244982 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.06764415 seconds)
  done (took 1.105401646 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.037757706 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.037841665 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.031507391 seconds)
  done (took 1.06760563 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.064441342 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.04956318 seconds)
  done (took 1.071719202 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.034926615 seconds)
  done (took 0.996913568 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.046423689 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.050473888 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.093170806 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.058479889 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.093634605 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.079423762 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.029321029 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.029944205 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.025807064 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.024868992 seconds)
  done (took 1.488748739 seconds)
done (took 13.49303931 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.039179322 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.147356772 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.269351038 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.041068381 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.607802846 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.267311389 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.674948409 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.043352988 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.052124465 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021316904 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.037555029 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.585872228 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.680274138 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.107168984 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.666871058 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.092571886 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.515406457 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.021983205 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.020895973 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021419952 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.659840701 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021494324 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021412186 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.021829937 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.513007978 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.28609151 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022347438 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.089384256 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022294671 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025330341 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.268779003 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022891169 seconds)
  done (took 11.838633557 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.030158968 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.07904816 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.02649315 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.036546811 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.023144375 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.023425015 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.025022437 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.021768867 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.06279886 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021384027 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.039955357 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.020795289 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.025808912 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.022211115 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.041102939 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.021114944 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.023251746 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.021933138 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021043936 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022441376 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.039748263 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.020883586 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021636827 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.021759071 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.021509909 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.034956117 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022361195 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021296055 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021482001 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.02530741 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.026653381 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022899941 seconds)
  done (took 1.879356989 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.082042855 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.081998409 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.026988935 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.061136825 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.068621405 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.024192832 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.102180967 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.043355713 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.066395123 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021830815 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.038172065 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.021868188 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.056358473 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.022704156 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.04153825 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.021389058 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.023885035 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022148385 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021225048 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021827805 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.040090257 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021417438 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021912338 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022319743 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022232964 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.036950165 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022542297 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021535583 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021659956 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025552116 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.027175284 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.02291355 seconds)
  done (took 2.148047361 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.024876325 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.02493185 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.03085512 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.033762339 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.019914836 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.022031636 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.022966893 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.019884928 seconds)
  done (took 1.169888898 seconds)
done (took 18.007177453 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.035407089 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.021834621 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.024606896 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.041529301 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.027774278 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.022726045 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.018464387 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.028252259 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.024905506 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.025040236 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.026342125 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.019926108 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.023574384 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.01843298 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.025326033 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.019535446 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.025329816 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.023482674 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.023017228 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.025322992 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.021810285 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.025070623 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.028067004 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.023025547 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.023041918 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.023048763 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.028294975 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.025378952 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.019899313 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.022584485 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.022882498 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.022686527 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.022302257 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.024757561 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.019578884 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.019595189 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.023907927 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.021347428 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.025381148 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.02827024 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.021774147 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.028240482 seconds)
  done (took 1.975181136 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.029504124 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.03314313 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.024924017 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.031543874 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.028335883 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.031223394 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.028894486 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.028220279 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.026883689 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.028004684 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.02247288 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.02701037 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.02924833 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.020276373 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.027024898 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.023261201 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.028771055 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.021406992 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.026999932 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.026951025 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.028918357 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.020428255 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.027814547 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.028431185 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.022844073 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.028613223 seconds)
  done (took 1.671749252 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.029822037 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.042796361 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.045416227 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.098851686 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.062781015 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.035723731 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.03611781 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.046629249 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.054198197 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.021040393 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.04249785 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.047225788 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.049028029 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.027617238 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.059777987 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.039107663 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.033301347 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.022525664 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.027212101 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.055016206 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.306821416 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.040107759 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.053586874 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.040718887 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.020032039 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.030078597 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.028005004 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.036971395 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.027956645 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.032856386 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.024852218 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.024306656 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.021594423 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.032222267 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.024704317 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.018941778 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.043278157 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.033017493 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.035422821 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.059758853 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.030705105 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.022200807 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.04768391 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.085436527 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.02041395 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.023297263 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.025022669 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.033022144 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.022258938 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.051036291 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.035815951 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.020540605 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.039711366 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.022238197 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.022176197 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.036390674 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.022373422 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.022756213 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.032204304 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.026764209 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.041792124 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.026029341 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.041077935 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.020517806 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.03180578 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.022261291 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.022422548 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.01954504 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.054826197 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.028072261 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.069962308 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.021924484 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.018922397 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.032765567 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.031978386 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.027955459 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.020600481 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.039530586 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.03315516 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.02467264 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.031562575 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.023699583 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.02410329 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.057170708 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.019851334 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.0190059 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.018872067 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.023185214 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.02398446 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.021353572 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.033201109 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.020292709 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.023968715 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.035107479 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.020777784 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.021502796 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.023172016 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.022034846 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.020265208 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.030713777 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.024674234 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.022486338 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.033304522 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.021838778 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.02398956 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.035573686 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.029854229 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.020356851 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.021818914 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.023061593 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.022455337 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.025193592 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.024091838 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.022735543 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.027961422 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.028336257 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.026900368 seconds)
  done (took 5.003664651 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.115810136 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.106051078 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.021647166 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.099100817 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.028835887 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.024283031 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.101586893 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.101594472 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.021199067 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.022127458 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.020583034 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.048138129 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.043027154 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.054269609 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.034238214 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.023162302 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.046497197 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.052694965 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.105138237 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.098205563 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.044154287 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.028823457 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.023483877 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.022428063 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.022609635 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.030450519 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.037297646 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.029416689 seconds)
  done (took 2.395330389 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.029003668 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.064799608 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.024538901 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.045086231 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.038015708 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.021749149 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.023276394 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.022221484 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.037863077 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.026438345 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.020956282 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.025258605 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.024465444 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.023372192 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.021982376 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.027675974 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.027790899 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.028819796 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.024977971 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.025784025 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.031944739 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.045604601 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.025348827 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.021367675 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.024610591 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.021317364 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.026694411 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.029531864 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.021193504 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.0212535 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.018552835 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.025923516 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.035854316 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.022383037 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.021241834 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.022135352 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.021664888 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.02141885 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.021632187 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.019439835 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.01933362 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.026386552 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.020085527 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.025903055 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.035319613 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.023433635 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.022273399 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.023660083 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.023658742 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.018228398 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.024714246 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.024334483 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.023882756 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.029599724 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.025095093 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.023616443 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.022630611 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.033533029 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.026557286 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.020759703 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.020264464 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.019783531 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.022895896 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.02762917 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.038104178 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.022875611 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.019739061 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.021555772 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.023025241 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.035412096 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.020739068 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.026747968 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.018395148 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.021502299 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.02367896 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.024290539 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.022888499 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.019953796 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.021160032 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.021518311 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.021475878 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.021097803 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.020795823 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.024002902 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.01923042 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.019888384 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.021984909 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.022457102 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.026615318 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.020205662 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.023970077 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.022642232 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.020238173 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.027668481 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.026406063 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.024204162 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.041132432 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.028935656 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.021885851 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.019316183 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.036112975 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.023172877 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.020602931 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.023198047 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.025796224 seconds)
  done (took 3.636125022 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.045203643 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.023347588 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.040940514 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.047085759 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.030878649 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.027006834 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.034955703 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.022488519 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.036887612 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.020644176 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.030460902 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.019797383 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.034081456 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.029895962 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.02303588 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.031052178 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.024062564 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.041547066 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.035322708 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.020274276 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.030029841 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.033008409 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.033250896 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.038872515 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.038578232 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.039438274 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.03304255 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.024180458 seconds)
  done (took 1.878343419 seconds)
done (took 17.528685003 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.01208238 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.232545811 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 5.99323613 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.602183138 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.065524912 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.27054277 seconds)
  (7/12) benchmarking "nbody"...
  done (took 1.993139772 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 5.971190009 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.096147907 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.090967188 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.755759965 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 4.944807492 seconds)
done (took 58.075712913 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.057884982 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.152033833 seconds)
    (2/2) benchmarking "String"...
    done (took 1.246076935 seconds)
  done (took 3.386500031 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.422089073 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.985312869 seconds)
    (3/3) benchmarking "different"...
    done (took 1.022709961 seconds)
  done (took 4.395360038 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.325689621 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.965940316 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.35048721 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 5.966167185 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 5.98098113 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.918277888 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.175975896 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.658790971 seconds)
  done (took 26.993923144 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.028022581 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.234141199 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.329385083 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.458882816 seconds)
  done (took 17.105575235 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.429094705 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.400204918 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.401531501 seconds)
    (4/4) benchmarking "different"...
    done (took 1.693041379 seconds)
  done (took 7.029236165 seconds)
done (took 68.27476629 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 5.966122145 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.332408587 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.003994173 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.16536254 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.067795651 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.058912157 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 5.982080387 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 5.994499244 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 5.97882917 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 5.977610795 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 5.97773005 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 5.976448156 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 5.991597967 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.034596674 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 5.979131897 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 5.980735408 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.333683518 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 5.986633005 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.015696542 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.030804339 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.308988399 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 5.979385766 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 5.993160739 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.06602883 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.451100889 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.039759802 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.470611611 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 5.980547598 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.585907354 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 5.969241508 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 5.993085123 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 5.975890564 seconds)
  done (took 178.615017448 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 5.96647057 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.803124834 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.789399198 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 5.988669486 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.39102649 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.336516864 seconds)
    (7/36) benchmarking "scal!"...
    done (took 1.83909252 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.416575721 seconds)
    (9/36) benchmarking "syr!"...
    done (took 5.977906116 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 5.988836763 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.017268029 seconds)
    (12/36) benchmarking "her!"...
    done (took 5.974584427 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.064838428 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.69963843 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.021565788 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.00391041 seconds)
    (17/36) benchmarking "trmv"...
    done (took 2.872873476 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.890739586 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.029949604 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 1.892236027 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 5.974052902 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.490104622 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.51732125 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.950070792 seconds)
    (25/36) benchmarking "symm"...
    done (took 5.97258853 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.027886958 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.001087607 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.013245115 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.345395669 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 2.843652573 seconds)
    (31/36) benchmarking "gemm"...
    done (took 5.97566357 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.005399907 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.171244862 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.219201267 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 5.970889513 seconds)
    (36/36) benchmarking "trmm"...
    done (took 5.986551482 seconds)
  done (took 149.407717745 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.249438135 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.975188716 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.017183225 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.142673395 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.096368772 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 3.954222494 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.981771814 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.965294955 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.965895848 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.973257506 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.967329462 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.036941191 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.976457303 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.043384714 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.011246752 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.967060798 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.966445153 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.045934383 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.99280562 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.965821984 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.96603007 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.0761837 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.317960739 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.135790377 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.980061065 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.974660129 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.123307109 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.98797617 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.967020165 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.967710735 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.123177698 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.981152326 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.098528599 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.136173772 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.9868921 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.025551179 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.984506155 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.291057876 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.982590806 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.966073106 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.970952954 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.014499604 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.976560536 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.122675681 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.088726419 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.979693073 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.985528452 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.433486361 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.562461028 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.979480752 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.967119261 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.966770911 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.969509633 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.967779034 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.088178824 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.979300488 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.001137163 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.697361365 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.991928743 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.965878912 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.965133834 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.965448243 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.967876596 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.973921332 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.004218299 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.707486796 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.74330755 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.330500892 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.791814741 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.981908082 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.967786135 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.977697299 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.886171618 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.051795643 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.969192645 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.967312137 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.142991679 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.976084792 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.96489005 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 2.882757642 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 2.882876108 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.977494865 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.132285346 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.982174673 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.965327399 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.410438335 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.046037404 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.992665018 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.985566148 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.033572939 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.981658887 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.981762697 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.972747521 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 2.886002529 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.978860982 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.987346182 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.450926233 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.986979283 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.968891279 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.429412188 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.33803342 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.977911883 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.046268808 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.375468116 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.062607867 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.984177671 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.96645019 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.985356108 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.966933574 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.97694647 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.978645178 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.968188256 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.96688065 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.971616359 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.965985875 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.964830214 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.965653346 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.984787288 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.968270116 seconds)
  done (took 312.495283535 seconds)
done (took 642.877537518 seconds)
(4/20) benchmarking "parallel"...
done (took 0.967420945 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.410651373 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.391058657 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.086146407 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.826469141 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.269086318 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.117008347 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.236510819 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.448904697 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.261870518 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.131308891 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.733140315 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.137272108 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.407196865 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.325854353 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.126295284 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.435489167 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.155682132 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.645836975 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.747779376 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.138573821 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.200797465 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.170371796 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.093568814 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.768207055 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.194479977 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.190777822 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.367417908 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.728259706 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.260889024 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.706843962 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.431694193 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.421689969 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.230743078 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.089486995 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.870426132 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.173693607 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.214666639 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.779748688 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.174469249 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.54719875 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.826056428 seconds)
  done (took 68.439919006 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.396828626 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.192241271 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.298044325 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.284006651 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.819919905 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.309589479 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.369823249 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.165736184 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.182817539 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.307346931 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.309996197 seconds)
  done (took 16.655590449 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.247883178 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.173485718 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.293774416 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.303381672 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.513652888 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.291489315 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.340334307 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.176971312 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.17643435 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.301092436 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.313720872 seconds)
  done (took 16.121288286 seconds)
done (took 102.184201223 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.524265628 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.051384453 seconds)
  done (took 3.542447768 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.993794127 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.987681718 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.984943548 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.98712126 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.984320369 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.985404695 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.018269737 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.989724098 seconds)
  done (took 8.898265763 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.986061226 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.985296038 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.986723797 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.98609544 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.986682395 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.98720612 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.985876282 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.984592294 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.984189289 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.984452166 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.988946918 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.98436879 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.985924158 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.985313076 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.98487636 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.985579967 seconds)
  done (took 16.737785684 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.98580922 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.986186986 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.988544304 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.986378108 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.98590265 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.984416467 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.985267285 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.993772386 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.985325179 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.989593721 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.986620354 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.986288556 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.985394569 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.984743785 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.985019839 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.984500508 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.98899516 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.987324974 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.985300862 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.987021336 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.985144333 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.986037493 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.987941422 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.990491898 seconds)
  done (took 24.648738393 seconds)
done (took 54.818018893 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.633199597 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.0420201 seconds)
  done (took 6.640911666 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.992654773 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.985776869 seconds)
  done (took 3.062264345 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.986256866 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.986251492 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.986603346 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.985172456 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.984844767 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.985832053 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.984984493 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.984456154 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.984128576 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.98484484 seconds)
  done (took 10.821781733 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.985498273 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.985234763 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.986260833 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.985467118 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.983788787 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.986230516 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.988092711 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.984805352 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.985275053 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.987403789 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.986031278 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.177491126 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.985107394 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.212744265 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.984855668 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.985404709 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.991451643 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.986823532 seconds)
  done (took 19.13466002 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.98495114 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.985364465 seconds)
  done (took 2.936005053 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.988153749 seconds)
    (2/7) benchmarking "second"...
    done (took 0.986672031 seconds)
    (3/7) benchmarking "month"...
    done (took 0.985729808 seconds)
    (4/7) benchmarking "year"...
    done (took 0.98639464 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.986742803 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.985729071 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.986381671 seconds)
  done (took 7.87126803 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.591156577 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.135955347 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.179589467 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.606237314 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.93665035 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.037895829 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.943154648 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.042968178 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.990356341 seconds)
  done (took 16.430447672 seconds)
done (took 67.864271071 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.689435783 seconds)
  (2/8) benchmarking "printfd"...
  done (took 5.979621524 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.620969246 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.096166686 seconds)
  (5/8) benchmarking "pisum"...
  done (took 5.986458738 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.313961452 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 5.974741235 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.543595134 seconds)
done (took 36.20093463 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.053488504 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 5.966240567 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.015375963 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.016828402 seconds)
  done (took 18.969532647 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 5.968304874 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.655525462 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.021156393 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.085484975 seconds)
  done (took 18.811652802 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.511169098 seconds)
    (2/2) benchmarking "read"...
    done (took 1.414695626 seconds)
  done (took 3.914305141 seconds)
done (took 48.721739354 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.984787418 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.98455725 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.985571311 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.984291256 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.98827147 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.985194602 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.985296024 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.984351226 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.985972066 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.985363445 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.989048832 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.985274631 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.986659306 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.985587309 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.985202446 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.983503579 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.984741766 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.984907014 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.985191505 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.986761637 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.984566663 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.987248707 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.985083771 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.98578112 seconds)
  done (took 24.620137404 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.06235567 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.046811812 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.06119094 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.052395169 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.086947852 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.059219055 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.058049896 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.02866262 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.059799879 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.039509878 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.024469861 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.083939044 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.022216617 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.083794133 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.022518803 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.083308413 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.060320244 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.028512056 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.021040974 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.086429154 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.050766534 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.027719968 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.079765208 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.019456524 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.08247426 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.025659605 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.038558628 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.047524113 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.017435164 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.079374986 seconds)
  done (took 32.507553444 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.019581477 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.985708867 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.985748463 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.064719635 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.984682472 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.984475811 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.986026759 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.985705893 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.983967682 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.984666882 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.985372186 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.986208387 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.985776838 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.98711308 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.985175118 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.986187729 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.015679929 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.170807794 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.984670281 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.984873666 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.03010531 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.986161309 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.985770086 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.987322393 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.986331622 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.986195796 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.985830444 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.986502756 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.984631205 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.98600891 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.984978791 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.028295138 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.017530367 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.985029817 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.109071577 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.046291125 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.986579513 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.019870578 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.986432452 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.989941454 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.986962074 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.986153021 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.986868566 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.985566563 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.042144284 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.985129884 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.98500421 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.985435782 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.985206641 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.985507931 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.988383154 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.986123098 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.000192803 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.987395288 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.984850064 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.985315766 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.986074335 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.989354584 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.985428269 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.98472329 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.985381717 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.054555149 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.98562212 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.984322915 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.365051097 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.98648662 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.049677639 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.98619502 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.984852937 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.195647761 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.985345453 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.204104637 seconds)
  done (took 73.623648288 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.985817915 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.986187942 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.06667693 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.067536637 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.985611271 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.98646214 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.986315802 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.986863294 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.655081763 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.987164164 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.986286121 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.985821265 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.648461589 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.987868693 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.985656919 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.066264239 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.987584106 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.986242313 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.985455584 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.987426888 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.98556897 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.985412432 seconds)
  done (took 24.239960079 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.022774503 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.000973872 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.0342103 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.00091852 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.002318256 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.000732289 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.022183869 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.000257198 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.029020513 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.030213314 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.031691403 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.026816941 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.001561893 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.027042963 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.026969481 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.076189203 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.027828391 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.078113058 seconds)
  done (took 19.408616352 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.176568188 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.145409264 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.0641955 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.026423145 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.214620194 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.198467946 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.086457944 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.174584049 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.028692377 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.14696362 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.174532563 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.026992965 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.199391392 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.028772107 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.027573169 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.214650817 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.064129579 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.027738515 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.098196834 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.087717915 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.177220053 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.100468255 seconds)
  done (took 25.460005448 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.023034271 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.031197746 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.059312287 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.059702505 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.988817913 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.985954044 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.042721811 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.02244949 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.00188176 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.021653813 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.022113386 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.988243626 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.072667202 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.041634558 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.076610791 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.022200851 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.031176915 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.042859852 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.026362067 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.98787782 seconds)
  done (took 21.516765009 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.985685318 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.986071029 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.98610097 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.985210365 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.985299536 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.985745078 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.986039285 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.986711164 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.986212525 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.22389279 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.98571826 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.984865333 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.985633562 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.987184166 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.984194821 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.986152948 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.987450923 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.985962744 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.986347287 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.985548548 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.223600014 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.985815359 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.986708812 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.986456496 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.984814083 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.985077165 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.98583492 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.987310194 seconds)
  done (took 29.049017337 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.051945345 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.025718711 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.032198484 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.106125472 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.105087776 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.022284647 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.105381978 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.105509729 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.019438714 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.027043966 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.072098141 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.025691341 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.025419245 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.019672681 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.019506962 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.072222524 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.019452398 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.105746137 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.061859079 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.022923922 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.073809319 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.018720533 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.072038547 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.023973892 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.022953896 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.076558573 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.062856139 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.147467523 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.046150817 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.025097078 seconds)
  done (took 32.583171808 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.009546523 seconds)
    (2/2) benchmarking "in"...
    done (took 1.009236046 seconds)
  done (took 2.985086922 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.986395925 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.083006249 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.986515618 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.176871608 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.140625876 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.162156858 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.148147061 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.07209283 seconds)
  done (took 9.722714732 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.984896854 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.342400974 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.009032205 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.986461813 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.984884576 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.462992388 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.941293894 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.877021045 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.760330567 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.952423403 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.075818754 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.527308804 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.949598258 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.305873274 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.110473485 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.839367256 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.228143843 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.562075049 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.063505167 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.122162378 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.723957181 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.100431696 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.98863154 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.987098857 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.985283423 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.900694869 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.883097173 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.435049448 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.144554952 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.125580726 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.75891406 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.079596268 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.98826078 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.257935624 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.113754446 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.985620583 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.197663087 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.104194004 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.987713614 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.987267313 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.728413961 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.86850212 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.137115422 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.246175774 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.085013907 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.98735738 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.986751532 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.986480081 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.24902988 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.630470738 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.953105969 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.965303331 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.137774669 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.987192718 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.693771157 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.002249748 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.986591379 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.894755019 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.576703919 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.300161458 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.33942583 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.113282301 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.020161274 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.127275489 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.987517597 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.193465206 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.798947414 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.78634578 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.740555513 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.110564787 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.516935058 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.00975178 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.988398444 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.985972536 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.937358061 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.305556818 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.98706993 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.987899493 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.986573942 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.986622699 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.279802034 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.116260167 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.827681401 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.137984464 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.178956885 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.446480091 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.130226769 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.987398447 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.660908118 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.834269923 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.082014571 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.687443464 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.231615308 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.137130997 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.999190871 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.260697066 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.029375097 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.988639136 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.842869757 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.646797594 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.002728121 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.987408961 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.345509734 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.013768809 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.990486792 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.98821452 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.699601964 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.126487183 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.138474046 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.050668791 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.986984799 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.994329489 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.58810953 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.094793717 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.003724351 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.487108104 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.962588421 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.535696287 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.255005359 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.215780593 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.355755681 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.020539506 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.271247748 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.798374756 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.991513494 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.494775017 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.853342093 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.570987378 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.230343192 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.125090478 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.909281073 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.066558317 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.987033471 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.15281822 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.079538713 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.989455003 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.987299424 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.987026666 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.987416723 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.987204303 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.113892794 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.401202454 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.889111541 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.006236144 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.234338363 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.11932446 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.891032275 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.276729487 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.704785975 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.138241755 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.988047659 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.735490626 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.248848882 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.72462935 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.129034378 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.987551566 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.986857704 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.842129691 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.01416959 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.097965919 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.990189964 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.620026162 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.090072262 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.989939367 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.987128821 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.484923512 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.136870997 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.988338154 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.096721691 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.804541235 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 4.874160724 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.003940416 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.32000062 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.11490559 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.987982246 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.986845531 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.991373266 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.78665227 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.637588663 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.131967678 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.602664477 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.761387195 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.095136588 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.191526081 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.092220338 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.288245503 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.238265003 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.140956965 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.989685304 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.988345709 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.986735416 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.450859786 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.828470235 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.031501664 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.862881601 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.028085965 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.952254372 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.078014125 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.788917778 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.008261283 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.721798949 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 3.97428847 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.103794297 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.992654185 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.988554602 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.147793992 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.186692002 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.141841341 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.529473791 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.00486638 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.991120739 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.690228059 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.127266717 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.672241767 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.107939616 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.831588499 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.104649216 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.128815124 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.269052229 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.700449841 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.133904615 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.992547019 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.899005953 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.003362158 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.987986961 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.05921308 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.663812949 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.801643064 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.749589792 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.675358165 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.94113167 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.579412398 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.263149355 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.139678844 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 3.823698771 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.101174971 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.217909525 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.033975127 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.489833364 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.014801447 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.744875868 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.008265626 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.839543317 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.003346735 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.98425652 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.124674884 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.434715121 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.118748861 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.991278673 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.189186045 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.0959547 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.683579853 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.128473131 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.116999893 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.314857128 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 3.889412306 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.10186168 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.221442527 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.03801733 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.936477786 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.999768323 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.347203868 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 3.920167094 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.007467517 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.079476497 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.789909139 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.164398092 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.274990224 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.134309197 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.9889831 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.987776012 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.183821915 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.086371398 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.988347272 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.353973656 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.978770257 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.044341916 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.079538483 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.992788045 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.988667645 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.235396985 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.153510026 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.31358991 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.487118926 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.607700015 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.824724482 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.127740959 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.680964291 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.13678344 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.67044643 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.088744462 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.993403697 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.679675878 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.128567629 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.296405189 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.147306029 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.115269468 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.684457827 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.105251035 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.305585075 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.150563222 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.122478695 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.767095444 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.572778952 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.255316349 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.374312947 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.036185459 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.500004035 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.079576887 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.555781288 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.978799646 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.679405198 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.075813089 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.056129193 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.988810942 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.991706601 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.526606356 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.952958339 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.993414442 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.786365665 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.713370682 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.950052629 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.740652879 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.089903945 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.992217871 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.989274311 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.989706273 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.907353998 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.084118722 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.378171787 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.140662096 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.990330606 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.989484454 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.96858579 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.360068606 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.789311381 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.906158112 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.986171322 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.136943051 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.988702999 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.989896834 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.989269003 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.989071326 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.990998757 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.98945502 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.529411846 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.004658921 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.600889307 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.091759569 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.992721628 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.281267667 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.064985417 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.989575593 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.189098969 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.085011543 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.106453614 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.064702881 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.988288859 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.415215877 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.140773892 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.955323786 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.288657463 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.316360789 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.242663063 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.533729662 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.051007594 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.44049658 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.319330174 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.757808623 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.992735987 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.906744542 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.081350462 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.78853532 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.990837875 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.443893135 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.605445847 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.970685964 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.280253315 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.916219992 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.373213791 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.107694344 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.065728484 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.989597735 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.989539641 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.055153524 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.243061003 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.039880197 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.279408777 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.205256212 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.97950868 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.298230946 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.097041949 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.189756331 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.027221157 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.007752136 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.990539556 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.990430623 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.439381746 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.906975355 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.091428772 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.989389936 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.89848733 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.870356535 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.92000036 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.629505822 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 4.897404982 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.136016748 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.989664525 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.193307927 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.046656155 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 4.764038635 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.019319834 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.785326714 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.32743774 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.042812267 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.174119685 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.387276875 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.707923792 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.421033823 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.117091341 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.989336034 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.341519919 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.012765541 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.143206181 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.932107779 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.360875094 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.549538148 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.425811645 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.236083015 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.116537291 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.896929275 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.542328926 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.97378285 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.994838287 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.848057955 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.142556013 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.303812346 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.987574795 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.286475197 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.140538491 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.651019644 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.686261566 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.141633686 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.583617491 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.140589623 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.992266644 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.792502502 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.917454175 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.144016325 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.122759828 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.99012346 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.006282379 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.681474447 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.629516281 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.21082711 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.076028846 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.988932468 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.753665744 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.690089946 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.09008969 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.993822593 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.990604572 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.449112353 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.051583536 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.990753401 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.419479933 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.640717245 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.139534651 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.484774876 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.092897971 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.142212071 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.272263391 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.372696616 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.207435126 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.062041973 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.989113907 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.990126688 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.99020536 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.567513475 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.007157991 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.989122429 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.595329556 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.139927435 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.754205249 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.940486603 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.250789169 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.069217111 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.436707485 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.140670179 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.486888875 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 3.864007801 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.080177108 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.258243533 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.039315741 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.085511232 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.762037629 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.106901359 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.990092638 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.945185649 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.333377288 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.361754636 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.423251316 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.331781991 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.092308752 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.690224896 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.112896011 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.773188142 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.015469617 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.991918751 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.466920889 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.112818005 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.47337174 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.153926061 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.44011632 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.116991943 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.306392746 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.224298335 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.090593411 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.991104784 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.988478636 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.995246645 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.034377982 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.542493181 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 4.889321528 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.458254561 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.133976352 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.828314032 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.537440705 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 4.855339079 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.198963827 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.292644597 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.274045927 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.032687614 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.970211847 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.375873966 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.086855905 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.164229899 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.092774626 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.797903466 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.072459341 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.99172653 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.580616789 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.004854809 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.989379162 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.99098246 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.899401563 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.77060264 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.106500855 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.243161047 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.097739007 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.990227309 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.59499817 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.278881798 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.032845106 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.991177994 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.990530297 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.880651741 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.110974933 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.98994549 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.365999804 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.155300003 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.310981846 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.837283919 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.447625478 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.089268528 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.992903519 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.990011596 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.695974093 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.5658564 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.035740852 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.337916543 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.018809537 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.511161026 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.963300003 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.454064148 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.555940863 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.017233644 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.127671927 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.991823483 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.038599163 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 4.906883092 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.930045185 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.750173682 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.447506723 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.093112509 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.788221391 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.027568781 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.060357692 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.163149418 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.071406369 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.992225959 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.990833398 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.991350345 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.462413656 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.971936561 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.995496569 seconds)
  done (took 1366.729646486 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.260204764 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.990602273 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.990537171 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.990504952 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.9912872 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.992441567 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.991380175 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.991899111 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.992644725 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.989600445 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.992255023 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.990918709 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.991405475 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.265558094 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.992252865 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.990254252 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.990552235 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.990937627 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.990999632 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.99191112 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.991595226 seconds)
  done (took 22.33221114 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.99338172 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.991820466 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.99131052 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.989844926 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.990186402 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.990763026 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.991106959 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.990559763 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.990768618 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.98998304 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.99056563 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.990880094 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.991599883 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.991331077 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.993300868 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.990929867 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.991866956 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.990347351 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.994743874 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.989867221 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.990318885 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.990392784 seconds)
  done (took 22.779004057 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.99021025 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.997985075 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.731033174 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.126601442 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.991613594 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.992186086 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.990871545 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.187806909 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.025808118 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.877752079 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.405628985 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.023298088 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.996418669 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.178834157 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.096675642 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.991220686 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.1111722 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.990990546 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.990088556 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.993056437 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.992006823 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.242401591 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.140821776 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.992062918 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.847333894 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.143529572 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.993726452 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.990963543 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.992246655 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.968651117 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.078143541 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.994397032 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.857274283 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.781783045 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.340481683 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.888113361 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.091246717 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.9956195 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.99253622 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.990935474 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.207012322 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.766399234 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.995827279 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.992155704 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.311951988 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.123222181 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.992642342 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.361369944 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.024698005 seconds)
  done (took 82.751443572 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.992542742 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.122141394 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.051620192 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.993844993 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.115913817 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.991706169 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.046132637 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.991249603 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.992429464 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.992983076 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.135343445 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.149849559 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.99152239 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.99260907 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.078140088 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.992160492 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.991695895 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.992424277 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.99217935 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.99702158 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.991931667 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.043810877 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.10780353 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.155199764 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.99153193 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.991676914 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.991631131 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.991845563 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.148360354 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.991835696 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.990381323 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.99285481 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.12194634 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.112702246 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.991717468 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.991595547 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.126748771 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.992155941 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.990181686 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.990633759 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.990963572 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.991005512 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.042318434 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.134741175 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.991408461 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.104007459 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.99412672 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.991462937 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.150444216 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.992375061 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.991362551 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.160294745 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.991527339 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.99103645 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.990808959 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.111758706 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.993694007 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.992582351 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.992363502 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.144824956 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.991977948 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.990238532 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.155328298 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.99195101 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.991812634 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.161330618 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.104527147 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.990918723 seconds)
  done (took 71.408805113 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.99172644 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.126904798 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.167736336 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.170814576 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.128184492 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.125522104 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.130995456 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.129034696 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.128014898 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.130278205 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.128789311 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.081440361 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.098598969 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.080685908 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.130481243 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.117233518 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.117465325 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.114333551 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.130855405 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.134357318 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.117547263 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.166228661 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.12761028 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.168445919 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.345622755 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.098232864 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.127588736 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.131025854 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.169585509 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.130835852 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.343788216 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.129769193 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.129508274 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.171556682 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.343508022 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.125495984 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.994568981 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.130301242 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.131487302 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.127885629 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.098052745 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.170334402 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.125801317 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.100170018 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.11941484 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.127079109 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.167976354 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.341975927 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.081392779 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.131659698 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.129440943 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.169065078 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.127142446 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.123541179 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.16928885 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.090126256 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.167060514 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.168786549 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.130633727 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.166528216 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.170782859 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.086469306 seconds)
  done (took 71.711158953 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.990767247 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.993509302 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.072764763 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.991484032 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.990361778 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.07503547 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.990701357 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.992074853 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.991455412 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.994448324 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.990975744 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.073639466 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.348621083 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.994491582 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.073982828 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.352014369 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.075900297 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.073342754 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.995673068 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.074628638 seconds)
  done (took 24.108672965 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.03858808 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.149879618 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.026098702 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.169550733 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.030393483 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.153416141 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.04041688 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.031682625 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.030397715 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.030035165 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.164114345 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.165836975 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.032788843 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.170249601 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.152942208 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.148534904 seconds)
  done (took 18.508717325 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.991702479 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.991949021 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.990917911 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.991851299 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.991736463 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.993751678 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.9934334 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.991991635 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.994269105 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.452937622 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.991742187 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.993416167 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.991764773 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.991771502 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.993362901 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.991205813 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.992337766 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.994318546 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.991739465 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.991663852 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.565810992 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.993722516 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.992702698 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.993505386 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.992468973 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.565801995 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.992852342 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.992578284 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.993736761 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.991854266 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.994042264 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.480588323 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.992769518 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.992449739 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.992675878 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.991494503 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.992178886 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.991701987 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.991041262 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.99111811 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.995143987 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.991948543 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.993763655 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.992709033 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.992554164 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.993741528 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.992792937 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.45708114 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.993990251 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.996362689 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.991964704 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.991896683 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.993205241 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.464088399 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.993034816 seconds)
  done (took 58.601365142 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.033527973 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.045829066 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.992516758 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.992055402 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.047039637 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.031392347 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.027649011 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.007617573 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.037219437 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.991748873 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.06744735 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.005932595 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.036982683 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.04719915 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.064722839 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.034841262 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.992381493 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.056582436 seconds)
  done (took 19.488824121 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.992330447 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.991902792 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.992910596 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.99214819 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.994742939 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.992201519 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.992995007 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.99188652 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.992938575 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.9927113 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.991583693 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.990785499 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.991852823 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.993152423 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.991733513 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.991972938 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.991471154 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.992615433 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.992784813 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.992384222 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.994991748 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.992854613 seconds)
  done (took 22.808653779 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.023239135 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.04171625 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.993946594 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.992323789 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.992501356 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.016073562 seconds)
  done (took 7.032255544 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.049781257 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.054551699 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.035453393 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.046545864 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.060053176 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.069853141 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.072104071 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.073453557 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.058010399 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.292030672 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.076838394 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.060377201 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.054248605 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.122965999 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.056834975 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.059827055 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.079534939 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.075819831 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.039787252 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.082011004 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.085422009 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.059151614 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.084133621 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.071502214 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.080353309 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.122467217 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.054598241 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.293583688 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.071426382 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.058736542 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.053833364 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.085304116 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.064507847 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.284561676 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.044033199 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.057070516 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.074805014 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.077171192 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.05338228 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.116913712 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.030973052 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.056931701 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.054344536 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.07843762 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.061096143 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.082785581 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.080194476 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.089673032 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.082935202 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.287608352 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.060884872 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.116758046 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.05881369 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.06081324 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.057248404 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.287015944 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.28863966 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.1163047 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.054905493 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.292011461 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.119159214 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.057357161 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.117043105 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.29475573 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.058680949 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.118976488 seconds)
  done (took 73.475385876 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.117638736 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.034190406 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.083990811 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.295847938 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.118002532 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.075769724 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.08741898 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.086475609 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.084780122 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.056182726 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.081320526 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.086209774 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.117705022 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.122303792 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.084925405 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.077428547 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.081153982 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.115199909 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.056450406 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.285608391 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.078687979 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.119536014 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.120548332 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.120211867 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.283136459 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.062570556 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.086557377 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.0791456 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.07695141 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.077461542 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.087898766 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.0883713 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.119833024 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.035553197 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.115761342 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.084163904 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.076905212 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.087710187 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.076574174 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.061547855 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.123150007 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.077848791 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.081781751 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.075789509 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.28410284 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.086115154 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.090034208 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.054815125 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.083683692 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.055576705 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.289099973 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.283689646 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.296958528 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.118871026 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.085990085 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.084521659 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.081782387 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.084870458 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.085133555 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.059243703 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.1214699 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.077217139 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.286529743 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.077678429 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.084872624 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.120493726 seconds)
  done (took 74.31455146 seconds)
done (took 2232.73731968 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.053008827 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.144549024 seconds)
  done (took 13.170766341 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.99188062 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.992999473 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.144502429 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.99420846 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 5.985772011 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.119575207 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.065765831 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.002719214 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.992698273 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.082215589 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.993245127 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.129466986 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.093043737 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.997452341 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 5.99962287 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.006762358 seconds)
  done (took 37.58622326 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.0077935 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.54031704 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.9519079 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.812220212 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.025440419 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 1.780376509 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.345646594 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.681724714 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.309081735 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.446869248 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.255017477 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 4.845756843 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 5.779355429 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.089361691 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.461292027 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.543520426 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.622659379 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.693203218 seconds)
  done (took 58.168577769 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 5.991075176 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.155097711 seconds)
  done (took 8.155465892 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 5.99910805 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 5.992862242 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.009384167 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.010861162 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.01729918 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 5.995842326 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.013757525 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.015291863 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 5.993486137 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.027612833 seconds)
  done (took 61.067080798 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 6.028682585 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.455105567 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.370872007 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.446069143 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.606776726 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.480241337 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.175498765 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.357759976 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.083678519 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 5.974706246 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 5.248003201 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.450665374 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.833195295 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.261902062 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.644427177 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.256541247 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.760164589 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.37766124 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.339507141 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.400836715 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.247013148 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 5.298224313 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.264153453 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 1.826808798 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 5.996951974 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.594277276 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.186449191 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.127999861 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.065338283 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.129140128 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 5.346338238 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.009950865 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.271126079 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.003001019 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.118726475 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.677667567 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.704538263 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.193406407 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.570838238 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.352646139 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.43361199 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.669919019 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.057529594 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.654205965 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.162668525 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.35991654 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.030119578 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.259092418 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.074086691 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.107265811 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.608605642 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.177815481 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.131717899 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.108887794 seconds)
  done (took 148.361460123 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 5.975441571 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.461190742 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.158277909 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 5.977242444 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.43096114 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.196868373 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 4.801181422 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.4910344 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 5.998158531 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.214584697 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.16604115 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.127217371 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 5.979635848 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 5.983001295 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 5.985822916 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 5.984340467 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.175751809 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.507482734 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 5.993094136 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 5.9831039 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.209784686 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.235993363 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.119647985 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 5.97788683 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.157118979 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.23751143 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.382556537 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.128612873 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.377054412 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 5.97736936 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.434998107 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 5.993199209 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 5.984511645 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 5.877061483 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.366733628 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.339148662 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.438237564 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 5.983303579 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.690920777 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 5.98353466 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.646003337 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.190685443 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.32307634 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.130012351 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.140853415 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.221538696 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.587090931 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 5.977639236 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.769200426 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.158429045 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.214895336 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.211532532 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.266928322 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 5.982026825 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.535642721 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 5.98476567 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.983067719 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.287357974 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.137325595 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.116576764 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.97877631 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 5.983933488 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 5.985580904 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.240601443 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 5.978234011 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.116513168 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 5.978245719 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 5.986779105 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.118180442 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.114719672 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.135219292 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.233620514 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.233142014 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.92834338 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 3.339480211 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.232233954 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.368611815 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.250309374 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 5.981508893 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 5.983400138 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.44559519 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.43714591 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.148330097 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.234002847 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.30175195 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.276388592 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.534408534 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 5.97628773 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.219917705 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.15974276 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.337412742 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.139915484 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.350495589 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 1.876657645 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 5.978677175 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 5.983218663 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 2.890654966 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.123480781 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.978953915 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.504774802 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.264762818 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.125918474 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.165382583 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.485154365 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.097425404 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 5.97943478 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.547148514 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 5.979495755 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.216036675 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.283502386 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 5.985916807 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 5.986492098 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.15282852 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.005901508 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.978575781 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.262507647 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.405174944 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 5.988861733 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.15959951 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 5.977375683 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.248499178 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.79567052 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.22766142 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.867744729 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.269112193 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.177440635 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.139754918 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 5.979112482 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.247950423 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.257163002 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.394280781 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.316920489 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 5.979202331 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 5.982799611 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.318563311 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.978112086 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 5.981761257 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.170281524 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 4.95250756 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.169747586 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 5.979551885 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.364982406 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.142648261 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.36468162 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 5.977378296 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.250906431 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.238877166 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.354785314 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 5.977278204 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.139721896 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.000194936 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.06311848 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.164316316 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 5.978209352 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 5.984287853 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.833788132 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 5.986703508 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.142669033 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.217429548 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.675045412 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.362510741 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.345335098 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.97632086 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.436435547 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.181743292 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.51512042 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.517653736 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.163332192 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 5.979382058 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 5.983647028 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 5.984668834 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.237290057 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.289115176 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 5.977692618 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 5.983042727 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.695747966 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.101925253 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.979710858 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.182882335 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.696945087 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.438865016 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.206171965 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 5.978372895 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.359869945 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 5.978723092 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.22110063 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.494488882 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.317084566 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 5.984214711 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 5.983187648 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 5.982923007 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 5.980509267 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.215800097 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.24115936 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.673696961 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.139972342 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.288465557 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.211948783 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.310810768 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.450511286 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 5.986952582 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.253818141 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 5.980150895 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.386472672 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 5.985153449 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.149012675 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.245532186 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 5.981198718 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.302068613 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.350252778 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.181131231 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.383236051 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 5.980583635 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 5.981078114 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 5.98643125 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.175499515 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.419389002 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 5.988564186 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.102539863 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.360216661 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.113505689 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.215188509 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.242833411 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 1.983951033 seconds)
  done (took 702.520182447 seconds)
done (took 1030.005164576 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 5.975997991 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 5.985471522 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 5.984919111 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 5.985138687 seconds)
  done (took 24.906790942 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.959911448 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.061277832 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.172741249 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.995414443 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.341234084 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.053563566 seconds)
  done (took 10.568352652 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 5.975471812 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 5.985905506 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 5.986021328 seconds)
  done (took 18.921404498 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.270043458 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.437562273 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.146739996 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.081736644 seconds)
  done (took 5.921753269 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.014825349 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.014136223 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.993113877 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.016497249 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.994241686 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.993693459 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.027880285 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.014061894 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.993784269 seconds)
  done (took 10.040696951 seconds)
  (6/6) benchmarking "26942"...
  done (took 5.514580766 seconds)
done (took 76.855488216 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.256339092 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.283287243 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.13746651 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.163040866 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.132856455 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.342112422 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.097892335 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.015351507 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.372113201 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.441295064 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.502087856 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.178722028 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.54503806 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.411674476 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.235109924 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.022548104 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.004953776 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.055780511 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.741962176 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.170458078 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.792605658 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.204247716 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 5.977340755 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.02294404 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 1.904073707 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.132953481 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.252271329 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 7.043539234 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 2.029438493 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.017024753 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.090283373 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.478988544 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.198499759 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.340719364 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.10765573 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 1.937747337 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.420921783 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.127429922 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.155885605 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.514668419 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.315248261 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.090172496 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 5.976175428 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.165645011 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.357029022 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.01291799 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.038304849 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.155710518 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.619498274 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.160489806 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.508997794 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.99820736 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.609752674 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.071486247 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.076284187 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 5.978264056 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 1.926799981 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.515663357 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.150574328 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.310990199 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.009483312 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 5.975882641 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 1.997266011 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.025706796 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 5.976660719 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 3.47960342 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.417343672 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.083702154 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.771678612 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.022054476 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.005339121 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.026281277 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.727224351 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.138933482 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 5.975786099 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.142469572 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.318036125 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.135525314 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 5.985385165 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.144757638 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.23487885 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 5.97812379 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.135038262 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.377757173 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.158904814 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.365982879 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.497163057 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.346889701 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.375697273 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 7.070658645 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.531217286 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 6.841540049 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 6.100216723 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 5.988722525 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 7.325203021 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 6.103083316 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 3.080907455 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.461495376 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.129096924 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.519932097 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.025807836 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.005560359 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.575245336 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.356784813 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.876472147 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.029733062 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.144956459 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 5.975425835 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.293442835 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 6.717575625 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 6.089823007 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.582861006 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 5.991457762 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.05761222 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.467811296 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 5.991506271 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.339398063 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.406789073 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.021449628 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 5.986512425 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.292181094 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.997464611 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.114575216 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.567936766 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.369973948 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.217034921 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 5.98114889 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 3.018454307 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 5.989952366 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.190315355 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 5.991657675 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.523131861 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.55202181 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.026636421 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.258060609 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.118751397 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 5.976585026 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.377360797 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.046401004 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.204038656 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.308136377 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.329777991 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.118325356 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 5.975401453 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.338497247 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 5.989455066 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.238056883 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.3457375 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.158029394 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.311543441 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.079785781 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.008346282 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 1.949060079 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.413196192 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.575975232 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.529570892 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.299485205 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.128190533 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.539072554 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.285061534 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.900401793 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.097286375 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.044231899 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 5.990119356 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.014913076 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.057283853 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 5.979145741 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 5.986827886 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.299192348 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.305441426 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.484119152 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.900229744 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 5.994475774 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.319110562 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.147410154 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 1.866728721 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.468633334 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 5.992760291 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.37151783 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.49072248 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.178819158 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.014595307 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 5.978044238 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.047465831 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.732357868 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.029709883 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.270017167 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.710164075 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.438613253 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.365614098 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.204402861 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.033857521 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.34271335 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.255714497 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.341976976 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.2172878 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.371766371 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.136378058 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.392337055 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.103459868 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.33661402 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 5.988854066 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 2.863890576 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.266328572 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.493266381 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.403722204 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.234079152 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.160954233 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.309437516 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 5.988776057 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.465411496 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 6.088122126 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.387903395 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.019615278 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.458006353 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.087490789 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.319351258 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 1.891389035 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.114005994 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.536366284 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.156308574 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.108447578 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.631214073 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.012607868 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.299918813 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.157381528 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.137547091 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.254032086 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.025443647 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.124852375 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.206130631 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.13747492 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.28502452 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 1.915478554 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.316914112 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.792793317 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 1.121414859 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 5.977684778 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.266323233 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.029066161 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.006387976 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.252494398 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.157087156 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.301285268 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.132675077 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.164003109 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 5.976975715 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.022943962 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.486711686 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 1.83127661 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.568728984 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 1.97428278 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.021569476 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 5.975221105 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.44616337 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.369219446 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.061003405 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.129706579 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.46058361 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.031537139 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.154883328 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 5.993027289 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 5.990723702 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.8581598 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.12878199 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.245291188 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.481912247 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 5.993016183 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 3.056942589 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.051009484 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.41417994 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.482836429 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.046441014 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.117495699 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.207745173 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.103131236 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.377279 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.023727543 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.182673598 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.403782795 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.103260263 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.11688093 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 5.978975184 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.029613726 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.639993343 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.355947606 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.477836521 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.026670084 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.334576154 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.041722643 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 1.246639063 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.020077446 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.078634796 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.331848121 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.162137553 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.354741053 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 5.991176476 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.16191466 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.258524465 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.015939438 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 5.9780595 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.133612324 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 5.979734926 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 9.677305558 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 1.279293388 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.128326425 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 1.992334569 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.236076969 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 5.986914191 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.31740717 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.137445951 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.131615601 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.573032652 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.486364291 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 5.99108588 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.195774651 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 5.983155999 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.35681678 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.024211432 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.010757234 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.130324971 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.079333861 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 5.976024709 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.654251007 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.19572269 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.500485427 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.093442979 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 1.943637531 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 7.09918887 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 1.177808091 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.113640851 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.27805337 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 5.993262073 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.011334871 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.133104717 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.613029789 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.158364921 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.03061436 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.27150641 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 5.991845492 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.55478727 seconds)
  done (took 831.792759536 seconds)
done (took 832.950302663 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.184511285 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.371179428 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.237461188 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 1.927005704 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.801173578 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.638696538 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.250646583 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.225649795 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.104081151 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.2489636 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 1.907772058 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.795324273 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.097066093 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.145336408 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.089676916 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.129969914 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.174415805 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.235448384 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.150273601 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.062108918 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.511844291 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.059452199 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.426680326 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.288753568 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.36958316 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.100190185 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.197496722 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.426715598 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.426434301 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.18206836 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.200740659 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.222942772 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.838520851 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.238496622 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.09143712 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.077475658 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 1.87411702 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.09060213 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.188813827 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.078065716 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.370927299 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.122303711 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.71099678 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 1.841594421 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.774750694 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.407655024 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 1.877056211 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.097486526 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.117739124 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.199647219 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.248613362 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.189743484 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.42861008 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.205083129 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 1.845400732 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 1.836979717 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.428267019 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 1.867305616 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.727379339 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.201172321 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.392597511 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.090950857 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.199517217 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.225634226 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.111022917 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.28399857 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.42132037 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.190540283 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.217794266 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.258323446 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.238478329 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.220261007 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.111477054 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.127735686 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.136297551 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.250976926 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.837541983 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.235853583 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.78430522 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.09972499 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 1.896078406 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 1.858578622 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 1.949136806 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.106240116 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.183539923 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.795813312 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 1.81479009 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 1.890080203 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.114596012 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.21698931 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 1.873770542 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.236938955 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.461136679 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.198842868 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.183755958 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.234760043 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 1.817946543 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.244530324 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.016221994 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.220235566 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.786579655 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.198616709 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.02935876 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.084469326 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.096883776 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.189959093 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.200934376 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.422213496 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.218823748 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.150317036 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.372183226 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.13936937 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.218943121 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.147842997 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.091749862 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.782933472 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.272113491 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.877271511 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.243873839 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.675256022 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.291745922 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.085348913 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.37077953 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.290018492 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.184990421 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.087982552 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.097860282 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 1.881881942 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.097560653 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.090822978 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.17903043 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.445756589 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.199242292 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 1.934740005 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.221117632 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.780499376 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.231086425 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.219759268 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.09468046 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 1.874885492 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.090133789 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 1.989742147 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.292106067 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.373543681 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.238212906 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.2897916 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.117518172 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.26726854 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.243987923 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.151782708 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.21865927 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.121767736 seconds)
done (took 228.169850162 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.337358795 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 3.365654564 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.336586337 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.285014256 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.374189413 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.35624671 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.061771908 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.43962419 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.107291174 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.414765807 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.285944196 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.162277673 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 3.361197072 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.20688263 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.344895673 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.23541216 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.108187137 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.254826656 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.43814407 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.348573359 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.037484582 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.264673299 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.177920378 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.4377695 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 5.979431324 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.012198152 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.352257462 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.13311165 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.259159831 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.009566486 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.022747568 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.260686074 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.348010578 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 3.144043959 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.44186406 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.001054291 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.375086804 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.087884411 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.338876341 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.337079645 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.332471391 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 3.818151428 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.015634159 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.037801116 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.166114049 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.345994591 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.061050135 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 3.251405067 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 5.980258736 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.006851633 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.255706013 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.122566245 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.163671945 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.32865479 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.204257604 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 3.141851595 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.487965509 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.487157264 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.349124637 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.299430119 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.341612113 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.411634039 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.413679914 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.211036905 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.01667477 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.285902824 seconds)
  done (took 119.360695763 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.436488923 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.297430532 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.431842802 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.38224517 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.581921917 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.393878111 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.521524506 seconds)
  done (took 13.022269063 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.055351624 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.044798408 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.284427682 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.285629576 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.048832387 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.171498349 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.130540266 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.020099837 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.266683762 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.083949459 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.357305802 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.23546351 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 1.960623687 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.020425643 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.13212357 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.314721955 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.009690219 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.11303816 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.104540808 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.301586487 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.021804419 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.009078042 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.319992486 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.130091244 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.045790347 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.084964781 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.039183214 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.017227076 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.083512134 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.02610621 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.05362997 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.153136066 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.040495053 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.040040894 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.067235985 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.357954573 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.048511165 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.092218751 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.183567736 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 5.979781238 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.027623197 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.046393148 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.179259425 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.052450453 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.022120365 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.231705906 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.028487389 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.05374662 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.022571268 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.040978956 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.316075568 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.035368266 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.064200637 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 1.963786927 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.253252255 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.00035289 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.113467368 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.03984493 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.04197664 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.095186596 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.039757721 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.300840507 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.259497844 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.028811696 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.286098489 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.321763257 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.038477841 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.025350627 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.021619444 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.285336603 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.035927399 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.285562328 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.045519048 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.090766772 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.090065412 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.174695255 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.231029999 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.83463797 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.801743175 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 1.958508783 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.011861444 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.027400272 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.347342766 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 1.998271808 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 1.966408866 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.026945155 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.090972338 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.699746378 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 1.954715585 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.040114857 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.356618482 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.025760725 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.095719031 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.089111497 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.071402325 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.103993279 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.265593708 seconds)
  done (took 133.856347448 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.36865275 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.615579722 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.262368336 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.294466844 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.445104119 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.532704165 seconds)
  done (took 15.495129156 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.356981554 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.846356636 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.06584287 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.061073318 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.096446635 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.037696047 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.033423858 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.226138036 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.173900248 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.048415658 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.036469677 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.059792606 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.039935491 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.180817319 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.035322596 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.047266077 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.043633126 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.064932978 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.045893932 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.105584157 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.196328182 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.096458963 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.106265831 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.9434306 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.093836302 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.050844687 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.086247013 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.048095312 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.045477974 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.379105912 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.235035602 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.036305399 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.883909504 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.377761008 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.80763804 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 1.94791849 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.185077305 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.06299372 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.095422589 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.037305406 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.058403762 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.106795892 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.061948669 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.058653844 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.386311612 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.863446262 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.122774704 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.31638392 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.036180778 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.057864645 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.059912483 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.063575444 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.037243986 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.059468117 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.445434552 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.479282948 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.024163189 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.038552991 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.096037839 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.935386456 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.112020145 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.038899727 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.387754316 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 1.982098292 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 1.999738078 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.061360433 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.947295128 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.17385469 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.109825887 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.061465599 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.057629411 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.056698813 seconds)
  done (took 108.695366065 seconds)
done (took 391.410562096 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.305791841 seconds)
  done (took 7.282483552 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.145650303 seconds)
  done (took 7.272370892 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 5.978125026 seconds)
  done (took 6.968625931 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 5.991858413 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.02994254 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.006789631 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.009410562 seconds)
  done (took 25.062224839 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.10612415 seconds)
  done (took 7.093116091 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 5.977635933 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.000773414 seconds)
  done (took 13.070742588 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.160724685 seconds)
  done (took 7.163040321 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.240712393 seconds)
  done (took 7.23143487 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 5.998243066 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.017166339 seconds)
  done (took 13.030639064 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 5.977738432 seconds)
  done (took 6.962490458 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.352042681 seconds)
  done (took 8.436867322 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 5.978674139 seconds)
  done (took 7.003198182 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 5.979848737 seconds)
  done (took 6.964496132 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.074855665 seconds)
  done (took 7.061214529 seconds)
done (took 131.582710156 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 5.979010255 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 5.987850729 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 5.987642231 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 5.989125068 seconds)
  done (took 24.920315465 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.320397066 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.321417983 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.299050486 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.373528156 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.265154551 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.265141449 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.321548127 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.320705273 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.265392172 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.471719786 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.321545338 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.470673259 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.373583496 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.298486876 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.298212339 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.472275775 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.385761069 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.32254939 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.265215191 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.298181407 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.470817447 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.472462078 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.75509055 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.733360749 seconds)
  done (took 34.14949202 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.206607204 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.361147954 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.165765945 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.412737286 seconds)
  done (took 6.126449858 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.025267392 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.371654876 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.354358739 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.412124374 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.354220827 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.167580826 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.354063324 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.206585342 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.17495602 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.177283322 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.621914609 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.147937871 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.158885393 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.412655873 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.168149089 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.995915776 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.997302599 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.17690941 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.370655882 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.196947925 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.248335392 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.356239121 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.353135972 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.354388983 seconds)
  done (took 31.135775265 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.757568703 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 1.928582968 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.356098679 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 1.909505506 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.705480256 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 1.808027798 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.308806777 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.509466684 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.270679703 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.245373139 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.751942891 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.327599604 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.151085004 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 1.898431811 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.763500782 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.182238999 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.173983823 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 1.847572336 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.609261319 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.297289142 seconds)
  done (took 36.781915509 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 5.978924094 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.987426167 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.218620078 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.161511843 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 5.978370929 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 5.9883484 seconds)
  done (took 27.293168336 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.033637427 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.150774529 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.311876556 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.291675234 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.161586358 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.143187002 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.645622209 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.233664622 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.796879338 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.788268265 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.628206729 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.461241349 seconds)
  done (took 20.63358989 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 5.978606816 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.027337264 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 5.988976888 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.168113767 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 1.809431757 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 1.86171747 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.315185378 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 5.981393937 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.065233936 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.192528414 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 1.915718718 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.163481262 seconds)
  done (took 38.466153931 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.245031755 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.182813327 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.336068082 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.806556663 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.545988422 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.087114306 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.414723143 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.505916288 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.747400428 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.821229838 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.532153084 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.051666145 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.529816942 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.968675303 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.985260982 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.307172896 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.816617123 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.04535615 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.434710188 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.063582804 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.947743335 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.136861356 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.986594567 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.538170001 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.318030092 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.984403255 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.253274894 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.235466487 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.978710712 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.247924676 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.980683396 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.473242688 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.238438931 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.29996195 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.52605578 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.07791126 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.106947617 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.099253811 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.55887089 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.286695537 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.132917605 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.151842686 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 5.979735793 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.111211038 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.246511807 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.771802715 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 5.990219599 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.649349494 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.979429261 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.101038081 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.890291542 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.676707467 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.321202497 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.949588677 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.133776556 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.300134846 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.150131653 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.097407868 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.29702 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.019564525 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.175509848 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.102442043 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.250711713 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.959481936 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.216528603 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.342141343 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.309008415 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.318177179 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.305795222 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.28994887 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.351504512 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.107747726 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.778255994 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.131265075 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.52329943 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.4499062 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.345637125 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 5.982492799 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.729960722 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.528433305 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.976006102 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.106530473 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.746600422 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.952891886 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.981192798 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.161997009 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.859293281 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.961712996 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.088626405 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.028112677 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.446796778 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.12717084 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.138444284 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.257179984 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.688197641 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.973938023 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.714868116 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.302483364 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.959529788 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.556202501 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.978863926 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.97586431 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.985781199 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.570588239 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.400131195 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.036013334 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.769584043 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.599259479 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.285496504 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.573196723 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.159249078 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.983557829 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.357162913 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.319473475 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.979373437 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.710175392 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.097105179 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.095023504 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.354640531 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.98053362 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.968210181 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.411726962 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.241031558 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.980608346 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.222534715 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.982450265 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.146329976 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.979935684 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.789152639 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.043908401 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.234861076 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.513655679 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.210974521 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.080444712 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.960858943 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.13787535 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.492455394 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.074899235 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.338594715 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.432264679 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.596448473 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.481183649 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.986159367 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.841812522 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.47221496 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.273191812 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.332948638 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.135675383 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.169597924 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.083559631 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.979561446 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.163338552 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.98622408 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.548876835 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 5.982312404 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.739123011 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.76674015 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.339796958 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.978988783 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.981395068 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.104913403 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.290539828 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.668338935 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.038635382 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.162129797 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.267248987 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.182918584 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 5.980253324 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.967082131 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.366833246 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.304862033 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.518897457 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.380798921 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.659583553 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.347294863 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.471603228 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.243076159 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.344748133 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.792754495 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.239237756 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.34228925 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.590579016 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.021809141 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.98652953 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.055858174 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.42532529 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.215065734 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.775364328 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.092213317 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.797907553 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.041159426 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.98980675 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 3.964745267 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.13556176 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.464180437 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.033983715 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.564947336 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.137059803 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.236748862 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.28341732 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.020536549 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.702112086 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.012797789 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.400180027 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.363122069 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.305111728 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.971857579 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.987084448 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.52893064 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.479939745 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.129189873 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.290006688 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.950649748 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.0545604 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.986341576 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.341476558 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.870103365 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.799754853 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.313523298 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.800292323 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 3.714301826 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.223782701 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.980007812 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 5.996640376 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.908930539 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.157239012 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.034846755 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.172957422 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.537216664 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.306401358 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.317810858 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.979746489 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.993104141 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.271414303 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.301607012 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.267156577 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.494841012 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.609499693 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.683285777 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.095346825 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.606059197 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.16127466 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.029269222 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.560843891 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.294566126 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.939247828 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.229129229 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.8194247 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.131007142 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.068727642 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.268255908 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.98124782 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.492901948 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.616430342 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.017138411 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 1.95723436 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.14494866 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.992441599 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.193873764 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.885281278 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.228359787 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.732219613 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.278795525 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.284932967 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.228954664 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.394284875 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.525733237 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.356622782 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.964290845 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.155987462 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.089548851 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.279814036 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.980882942 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.290571076 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.677932123 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.671257665 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 1.819781136 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.536793512 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.216415095 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.660538897 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.470323164 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.245504637 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.312925516 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 1.952680328 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.646398193 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.981153044 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.133151712 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 3.958859087 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.773246509 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.322337698 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.363377197 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.468899814 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.066937687 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.522442092 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.370386574 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.038136346 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.157221095 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.265857905 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.980424507 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.305726293 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.979822081 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.251644666 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.40151875 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.988033947 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.703157043 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.192161348 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.318750224 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.152999557 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.642191627 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.029524701 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.114016593 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.471122202 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.18907655 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.126452735 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.32828121 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.806095242 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.029502788 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.053675735 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.51676996 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.580166515 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.46672752 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.585455316 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.582785241 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.383644212 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.760141444 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.984051956 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.25324017 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.155752083 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.759035802 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.188423087 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.389660095 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.033930266 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.252766424 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.318340547 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.198409853 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.555282455 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.977888668 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.597309226 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.234786364 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.509762902 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.555718527 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.779359714 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.45569168 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.162568107 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.53048698 seconds)
    (346/608) benchmarking "3d"...
    done (took 1.974353577 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.144978906 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.298344977 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.72274359 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.807519888 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.838213217 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.782398166 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.136006857 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.467720959 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.058009243 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.772916472 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.161038682 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.28800284 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.24493666 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.131627673 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.960646916 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.631007401 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.77291709 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.270942731 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.155211948 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.227908532 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.105754155 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.310136005 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.530755105 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.302146848 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.75953615 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.465208034 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.267598054 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.96003042 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.985737593 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.699601547 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.747347167 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.089038625 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.286682367 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.456210473 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.044329062 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.057603525 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.986288916 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.240839628 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.769543711 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.710249667 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.337177244 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.533614762 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.470089078 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.98290618 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.766649058 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.251167241 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.342682699 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.401377335 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.903084808 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.42166394 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.283641929 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.148697011 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.961730354 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.235723677 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 5.985886565 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.082856893 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.859503055 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.319240361 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.04694728 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.143212637 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.639119569 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.760061431 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.031464884 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.598849097 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.283335804 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.194933891 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.979980518 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.570247456 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.415474402 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.144620117 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.978189043 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.757147637 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.962760655 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.250842545 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.749367647 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.202620986 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.835373364 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.057349916 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.670878039 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.535223536 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.837406417 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.209669037 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.962861829 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.761450935 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.01619713 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.675784216 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 1.815295717 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.23862475 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.492545254 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.233442681 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.997487741 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.322105766 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.206277268 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.317689785 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.277186955 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.477012959 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.412584975 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.362605258 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.292933032 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.665281237 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.14756871 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.237768348 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.961396614 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.983982755 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.046781117 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.371312994 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.370607004 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.979194717 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.547535193 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.239739485 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.101669058 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.167975732 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.063833572 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.585791449 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.201525424 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.109583002 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.155959297 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.238388584 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.353435005 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.970378436 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.282484909 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.981615263 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.989889837 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.252640101 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.239149454 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.338871137 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.307371192 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 1.885186739 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.15442566 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.909200227 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.987934014 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.528221741 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.986678623 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.836187344 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.358142417 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.984049483 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.480412168 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.663705211 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.231484611 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.694954715 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.066907288 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.786016294 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.196254395 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.492806724 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.002331259 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.641121216 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.392826917 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.981446003 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.474316958 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.064331064 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.163615257 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.778293654 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.493009661 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 5.987822293 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.770743396 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.117541524 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.543496158 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.685537799 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.116888392 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.994019851 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.804664983 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 3.972950941 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.987189936 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.075230466 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.534776313 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.006757566 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.558372169 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.133559956 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.15728617 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.996498262 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.133490311 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.985429301 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.252042199 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.18157052 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.236721895 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.261015245 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.231138048 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.982009957 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.573433205 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.681691508 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.874010921 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.20711103 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.743357781 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.385673156 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.946984802 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.747266593 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.5773107 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.189027124 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.214924647 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.428677724 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.250677015 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.02427368 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.245366242 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.980862583 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.293214242 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.2789148 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.567041097 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.256647933 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.718844662 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.285356926 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.004134809 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.553272393 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.476360788 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.893933521 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.98700865 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.314327111 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.992268601 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.763685826 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.626513237 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.186492079 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.105878234 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.211026423 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.593741029 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.289148977 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.129514643 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.989669153 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.207597418 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.468392995 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.962247867 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.042047897 seconds)
    (567/608) benchmarking "2d"...
    done (took 1.879158106 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.22813367 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.323506079 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.959580133 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.235868802 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.009969935 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 3.978679079 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.495744381 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.983189054 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.352284502 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.962645166 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.53062166 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.975924308 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.072951036 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.153939905 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.325684348 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.981447872 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.719223639 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.164662824 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 5.982703561 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 5.988748806 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.350660142 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.078250206 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.243509562 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.465157156 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.219408107 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.341009241 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.899688049 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.042042141 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.014847213 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.30358097 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.822199003 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.555022245 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.082335179 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.544012067 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.054625966 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.015659022 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.552219679 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.236953867 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.733966859 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.137423546 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.468638439 seconds)
  done (took 1880.865889599 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.00570323 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.065892552 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.02146467 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.040612576 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.0529326 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.054256728 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.025207945 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.052773745 seconds)
  done (took 49.300738369 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 5.981110579 seconds)
    (2/17) benchmarking "4467"...
    done (took 3.911866105 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.411222301 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.172577382 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.011649826 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.184111816 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.15433101 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.473415234 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.191031542 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.021414682 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.052489223 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.039099006 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.009344363 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.027334056 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 5.850417614 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.088443552 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 5.985354766 seconds)
  done (took 88.577664925 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.031559073 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 9.869558647 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 5.994097103 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.651217356 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.056899104 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.375565986 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 5.99805854 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 5.990607896 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.12715665 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.633144268 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.018771132 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.135982812 seconds)
  done (took 81.907020243 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.026035143 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.026218249 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.025786918 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.028660131 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.026137698 seconds)
  done (took 6.116983972 seconds)
done (took 2327.295092584 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.221639211 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.497092741 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.533191999 seconds)
  done (took 4.010109468 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.056468863 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.119699681 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.191121604 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.137259354 seconds)
  done (took 5.508162497 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.306159621 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.480340957 seconds)
  done (took 3.766138616 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.423036744 seconds)
  (6/15) benchmarking "18129"...
  done (took 5.998400807 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.5342457 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 5.983586937 seconds)
    (2/3) benchmarking "Float64"...
    done (took 5.991448853 seconds)
    (3/3) benchmarking "Float16"...
    done (took 5.991162365 seconds)
  done (took 18.961665907 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.02414994 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.025592494 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.024441516 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.01598745 seconds)
  done (took 5.079854972 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 5.979219142 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.028273315 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 5.989794948 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 1.974773975 seconds)
  done (took 17.951905325 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.362715333 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.265107757 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.754898688 seconds)
  done (took 5.376589673 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.811120752 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.37746098 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.792243336 seconds)
  done (took 5.962095638 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 1.945266652 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 1.933055182 seconds)
  done (took 4.859961777 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.150805431 seconds)
  done (took 2.133278371 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.499013249 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.479643786 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.841796088 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 1.880781913 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.537614078 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.318245687 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.312479397 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.357140592 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.682908627 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.510422182 seconds)
  done (took 17.400740495 seconds)
done (took 102.169048111 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 2.830140502 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.421663902 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.149874912 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.703734796 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.084938807 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.141551214 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.613152675 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.470852343 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.289034667 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.288892059 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.18697877 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.083910549 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.025595043 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.415323216 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.02952848 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.358202403 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.398266792 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 2.838731974 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.530077008 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.919551273 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 5.998067597 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.581979011 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.888562154 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.590182725 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.405097592 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.144178223 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.05788282 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.371439857 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 3.77944148 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.065369854 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.147015353 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.18361687 seconds)
  done (took 148.973318191 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 5.982707078 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 5.995649359 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 5.996738045 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 5.992425261 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.102415822 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 5.997654453 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 5.995125965 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 5.991773908 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 4.740537904 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 4.742971754 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 5.995831325 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.102146435 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 5.998145296 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 5.991460012 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 5.998763967 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 5.990427231 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 4.949496425 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 5.996728658 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 5.99613873 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 5.996784651 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 5.995965084 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 4.889540697 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 5.996397787 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 4.896901693 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 4.95965686 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 5.998631696 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 5.991802665 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 5.99697277 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 5.995916009 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 5.99617005 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 5.996499597 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 5.99138673 seconds)
  done (took 184.256788492 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 5.980137259 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 5.995508106 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 5.996746201 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 5.991003345 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.99526749 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 5.994799839 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 5.994359581 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 5.991939132 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.994799418 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.001084666 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 5.996776192 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.994738553 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 5.997882273 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 5.991629005 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 5.996587509 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 5.992650652 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.994526129 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 5.994912469 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 5.995307854 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 5.995877489 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 5.996667225 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.99156075 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 5.995698634 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.995353033 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.994724657 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 5.996854272 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 5.992715508 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 5.994595508 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 5.99390136 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 5.994761252 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 5.997172077 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 5.991326121 seconds)
  done (took 192.817438269 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.296764909 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.038282252 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.025242432 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 2.332129466 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.030252889 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.025267017 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 2.329341455 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.300560412 seconds)
  done (took 14.373193298 seconds)
done (took 541.419321805 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.711432256 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 1.973729544 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.182911225 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.257970371 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.619749154 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.303384864 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.253712006 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.483060637 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.825768125 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.478048877 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.516305297 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.223966475 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 1.900580633 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.266526677 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.19025849 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.463208217 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.420111656 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.708960371 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.212008428 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 1.891783348 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.219662149 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 1.931311927 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.476742516 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.878420969 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.517266978 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 1.979176567 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.214553531 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.420368142 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.257258811 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.219624649 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.025587878 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.484211967 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.249969466 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.244522003 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.44324668 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.493557656 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.444359581 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.418136233 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.180968324 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.727919391 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 1.89484662 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.685123341 seconds)
  done (took 71.271803628 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.019478386 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.037156855 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.20140833 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.09730559 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.718358302 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.099166522 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.269727305 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.245504964 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.120211175 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.240861413 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.277127046 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.741323606 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.279266584 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.713699765 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.266981846 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.291414638 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.10482833 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.69094431 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.262588412 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.245863642 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.065373988 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.213959477 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.068880514 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.219406663 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.055480825 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.077868941 seconds)
  done (took 33.633534516 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.067702291 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.205455911 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.285376041 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.396458409 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.254745472 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.056966688 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.35922438 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.146161291 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.906675486 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.237819704 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.129612709 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.140907643 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.199025063 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.31206002 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.58562439 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.195629592 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.182996744 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.186148318 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.213767375 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.378008191 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.196599057 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.134191962 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.364326357 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.201289089 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.709370675 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.406634371 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.365239385 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.618039915 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.544788583 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.195090964 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.154929705 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.343267638 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.422199241 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.288445971 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.16807859 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.050740752 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.050757519 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.13333946 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.087772688 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.19676461 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.355158887 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.253842956 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.437754777 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.569391112 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.321898669 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.146730813 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.471934692 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.141449534 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.160919437 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.847752389 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.3396277 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 3.999103703 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.198698245 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.226771106 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.153558938 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.559773015 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.235447107 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.300009937 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.216437243 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.763097027 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.126242282 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.416326407 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.220362725 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.335086416 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.220890185 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.239129905 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.228117675 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.464112054 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.436222792 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.493291722 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.593105412 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.113909397 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.061339402 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.125402675 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.21098096 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.511142545 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.529158557 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.315752428 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.44176593 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.346934257 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.559089617 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.47350644 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.019852 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.713807159 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.093462217 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.036276583 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.159365834 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.350617215 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.33976235 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.499040166 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.577447931 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.322301586 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.447906345 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.442814956 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.471408264 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.444732324 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.026450665 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.047039947 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.271936004 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.579401363 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.111989675 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.290019145 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.699049929 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.571941778 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.457622951 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.304706039 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.447057971 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.126442905 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.469824777 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.020788997 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.263987058 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.338690305 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.306808875 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.544454299 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.037590665 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.547362809 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.152362718 seconds)
  done (took 216.752422671 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 5.982384782 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 5.996398174 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 5.990598966 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 5.996549506 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 5.990189229 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.62523546 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.067249069 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 5.989108936 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.626701455 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.066557036 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 5.987252479 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 5.990946452 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 5.988536767 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.000053169 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.606917471 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.588496251 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.828600899 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 5.987217507 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 5.986033913 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 5.992935257 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.831715963 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 5.987105245 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 5.987720243 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 5.993533508 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 5.988431595 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 5.992276278 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 5.994584985 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.034052279 seconds)
  done (took 149.084870196 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.050577862 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.477044637 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.094624864 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.143245286 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.092509311 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.063971107 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.628245384 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.192985985 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.130398691 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.063526979 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.053915316 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.281659906 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.310582977 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.759660314 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.181978715 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.243767611 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.793931032 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.197438093 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.065709199 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.057098364 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.210649962 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.409020772 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.345945463 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.40287464 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.228208529 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.365166996 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.132092458 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.056165868 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.207017899 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.558319442 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.07787691 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.446321738 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.203327078 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.06394608 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.574344579 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.471849051 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.728381771 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.690639753 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.280485205 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.020495015 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.01614172 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.308769983 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.396525762 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.105347255 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.065189615 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.71706417 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.079081277 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.485895267 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.102011488 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.016628032 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.141563983 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.162435812 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.328006773 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.792985644 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.235375298 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.23778807 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.625940159 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.033458808 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.053351176 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.432322882 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.037989895 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.549922298 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.542938815 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.12614423 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.071488119 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 1.918548465 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.148984678 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.65885192 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.750986226 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.117571219 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.467633663 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.239336095 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.033632638 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.346621399 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.240367199 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.542768479 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.705039252 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.197765039 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.159812621 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.134846157 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.351946553 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.047989431 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.64397894 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.163429546 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.032137996 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.554561248 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.510391313 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.028755748 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.052187016 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.173700607 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.229008042 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.26489258 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.425602954 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.127658551 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.030392772 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.337815339 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.370178093 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.072028319 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.185535247 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.047576192 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 3.144592211 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.256597083 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.035924853 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.49484444 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.475096862 seconds)
  done (took 147.733279329 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.758873617 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.107451924 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.272248339 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.778911731 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.464387833 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.107627849 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.325727606 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.127086907 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.340288439 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.271589671 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.289325202 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.146469464 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.01219889 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.773969615 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.117576445 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.286854539 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.120819299 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.644942841 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.366274648 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.074845135 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.326389852 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.795665272 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.39895161 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.478104802 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.432062603 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.56405207 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.749743927 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.194210755 seconds)
  done (took 47.321520376 seconds)
done (took 666.778729811 seconds)
SAVING RESULT...
DONE!
