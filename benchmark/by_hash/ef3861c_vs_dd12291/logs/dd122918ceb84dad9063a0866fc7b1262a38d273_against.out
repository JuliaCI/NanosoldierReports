cset: moving following pidspec: 570716
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.740272308 seconds)
loading group "shootout"... done (took 0.835833926 seconds)
loading group "string"... done (took 0.200216962 seconds)
loading group "linalg"... done (took 3.092704625 seconds)
loading group "parallel"... done (took 0.021715744 seconds)
loading group "find"... done (took 1.440930351 seconds)
loading group "tuple"... done (took 0.717667913 seconds)
loading group "union"... done (took 3.005171689 seconds)
loading group "dates"... done (took 0.176677179 seconds)
loading group "micro"... done (took 0.056439663 seconds)
loading group "simd"... done (took 0.363226806 seconds)
loading group "io"... done (took 1.334826828 seconds)
loading group "random"... done (took 2.306207354 seconds)
loading group "problem"... done (took 1.196505528 seconds)
loading group "array"... done (took 4.689713148 seconds)
loading group "misc"... done (took 0.94186265 seconds)
loading group "scalar"... done (took 3.434142496 seconds)
loading group "sort"... done (took 0.305078736 seconds)
loading group "sparse"... done (took 3.569501287 seconds)
loading group "collection"... done (took 6.262294686 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.416268189 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.070712902 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.079434749 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.07606605 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.157749213 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.081168457 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.086001706 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.067550186 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.209002249 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.069927084 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.069762581 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.381203611 seconds)
done (took 4.643327696 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.261714409 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.031701727 seconds)
    (2/2) benchmarking "String"...
    done (took 0.027325254 seconds)
  done (took 0.661500887 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.027043521 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.014980792 seconds)
    (3/3) benchmarking "different"...
    done (took 0.021736807 seconds)
  done (took 0.654438637 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020027444 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.094586529 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.020978261 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.021608665 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.021528703 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.02095288 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.020795013 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.02072732 seconds)
  done (took 0.812943861 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.027980784 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.02214501 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.020181779 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.021902393 seconds)
  done (took 0.686990607 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.02202764 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.08196444 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.019673402 seconds)
    (4/4) benchmarking "different"...
    done (took 0.019521186 seconds)
  done (took 0.734702062 seconds)
done (took 4.440968185 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.09620425 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.672164906 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.716419823 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.075878173 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.240315546 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.327109202 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.074944625 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.133077813 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.042920399 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.030100386 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.077303515 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.035464866 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.354058759 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.327046134 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.025967282 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.139935514 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.570164036 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.038534119 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.068465048 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.219954016 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.036004915 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.037792682 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.042621126 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.025702959 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.1267346 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.129326467 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.577766023 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.057805349 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.023760955 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.048849933 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.028790038 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.031453506 seconds)
  done (took 8.065746812 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.048466706 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.043111565 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.022619737 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.057356108 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.048048485 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.023938849 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.029288716 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.02215705 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.041655728 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.084999207 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.044479907 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.052406742 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.020613748 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.023367816 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.025535114 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.111114704 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.036480826 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.03582139 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.02161942 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.035547138 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.048220486 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.033483253 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.032145026 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.031674398 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.066289692 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.08685178 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.044506684 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.061792853 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.021883113 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.033745734 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.050993833 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.06150567 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.022106573 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.020690577 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.063237549 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.040536601 seconds)
  done (took 2.181671058 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.978179693 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.049933136 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.037061178 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.028199997 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.061941821 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.050000333 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.076633364 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.076011317 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.053830063 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.023361694 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.102295889 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.626984387 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.062066506 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.003529517 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.027878628 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.073868083 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.312900227 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.836413956 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.023942507 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022843316 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.024917461 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024735748 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.067346107 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.021326814 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.131668028 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.568703693 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.028784765 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024411927 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.05237805 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.038890278 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.02396026 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.101783189 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.051093771 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.028382552 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.527199136 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.021931796 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.019946457 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.044739223 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.050581727 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.02241164 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.023511739 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.034374331 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.021658185 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.077038041 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.036422414 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.646016214 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.024683019 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.585242114 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.174750232 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.026787473 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.025325834 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.05618808 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.018880698 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.022210383 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.609731364 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.096416037 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.021677221 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.237217747 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.024347664 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.022916001 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.023251872 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.05423485 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.022286088 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.023392156 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.025431568 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.039838722 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.968225741 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.040170313 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.041424174 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.020660707 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.021691081 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.02008608 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.373815072 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.028752267 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.024372081 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.019971762 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.025750071 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.021905935 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.021467227 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.061899501 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.047105049 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.045243761 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.025217433 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.022402502 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.021592976 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.542158512 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.935141177 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.024441649 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.023763243 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.457345518 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.020077677 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.021946696 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.023586649 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.042314103 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.022653544 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.019367935 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.056824363 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.024174367 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.023620325 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.550972574 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.023512167 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.019599645 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.474582232 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.024101052 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.057444859 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.079182669 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022550666 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.062137021 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.02283639 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.019910769 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.026210316 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.019701417 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.024003315 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.165005979 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.021139273 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.020061066 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.021810478 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.022955075 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.021615944 seconds)
  done (took 16.959595707 seconds)
done (took 28.780335887 seconds)
(4/20) benchmarking "parallel"...
done (took 0.663509857 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.085874651 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.047814279 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.106599366 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.055418462 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.02291427 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.055988604 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.061466534 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.058591271 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.023016672 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.022972017 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.022946825 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.056706746 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.059031326 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.02294198 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.052332162 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.057892897 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.022927167 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.018858431 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.022924833 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.022958052 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.022910938 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.018878507 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.022951115 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.023060278 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.054077428 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.023141788 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.018958977 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.053446451 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.023122914 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.05287268 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.023159746 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.023097649 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.023061542 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.05435633 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.023172174 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.053893955 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.01898794 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.023108585 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.023782114 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.023052997 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.023041699 seconds)
  done (took 2.21011917 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.039869283 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.036366995 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.038500784 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.017274323 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.026464767 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.036679557 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.017269589 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.03594691 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.039052875 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.092415918 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.036731792 seconds)
  done (took 1.078536307 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.038834985 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.037618436 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.038171697 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.017337902 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.028311481 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.037491722 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.01722574 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.03690287 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.038951581 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.037525559 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.037420019 seconds)
  done (took 1.020071471 seconds)
done (took 4.947008723 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.044105303 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.019503794 seconds)
  done (took 0.707756152 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.454812378 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.118393705 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.025728151 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.145792877 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.02157452 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.04706395 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 5.714182616 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.042046986 seconds)
  done (took 7.265234782 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.072836251 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.025725997 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.022883403 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.0216901 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.021969171 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.021861326 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.023544607 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.022128647 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.021473981 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.023993573 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.023619253 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.021843367 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.022582863 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.023974765 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.021959839 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.0221697 seconds)
  done (took 1.17558894 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.027702609 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.024718388 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.025762806 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.0163495 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.02657496 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.02524565 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.026250395 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.026767361 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.025544543 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.025659151 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.023595446 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.026492156 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.025430429 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.024097983 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.026506402 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.01642204 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.026667473 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.026059077 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.027924329 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.026852791 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.025875347 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.023662843 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.027430121 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.024832225 seconds)
  done (took 1.26103316 seconds)
done (took 11.063502022 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.136221351 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.028744095 seconds)
  done (took 0.812240922 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.02390939 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.02290875 seconds)
  done (took 0.703496752 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.027384593 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.015384383 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.030569575 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.023008123 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.015454335 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.015186982 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.029581654 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.015605025 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.015398991 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.015562496 seconds)
  done (took 0.857184577 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.018619193 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.022139004 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.020149921 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.018393336 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.020005707 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.016252062 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.018391414 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.016389316 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.021944349 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.015678925 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.019221837 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.036179624 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.018817358 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.03664848 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.018710653 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.019180229 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.020636035 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.018472113 seconds)
  done (took 1.033295988 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.017125422 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.01626111 seconds)
  done (took 0.693393775 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.019900698 seconds)
    (2/7) benchmarking "second"...
    done (took 0.016284055 seconds)
    (3/7) benchmarking "month"...
    done (took 0.017921906 seconds)
    (4/7) benchmarking "year"...
    done (took 0.017752576 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.015866312 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.015307339 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.015892883 seconds)
  done (took 0.772879447 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.370488398 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.077101747 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.289425901 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.023404643 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.0307824 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.215002179 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.018829369 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.023220223 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.02315337 seconds)
  done (took 1.728197323 seconds)
done (took 7.260231317 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.039104888 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.137127147 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.042364272 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.380901194 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.032839537 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.0216794 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.050998752 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.130150119 seconds)
done (took 1.504156664 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.255217106 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.323063799 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.305440764 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.101235212 seconds)
  done (took 2.392175072 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.291393857 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.034899194 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.02929572 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.021830425 seconds)
  done (took 1.053121934 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.021411237 seconds)
    (2/2) benchmarking "read"...
    done (took 0.02628608 seconds)
  done (took 0.716603395 seconds)
done (took 5.087208627 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.026409442 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.016207344 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.02086444 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.017639782 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.017299079 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.016820484 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.016745215 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.017511099 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.015623616 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.017592833 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.017791356 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.017731395 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.017485075 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.01740992 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.016922362 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.017734076 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.015878454 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.017431232 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017431491 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.017396217 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.015794881 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.017769562 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.016932075 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.017474883 seconds)
  done (took 1.080909709 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.035012514 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.020144527 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.020728201 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.020568543 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.021084679 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.020598161 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.02057593 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.019813455 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.020714337 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.019486807 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.020939391 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.021177908 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.019594986 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.021359897 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.019684042 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.022008943 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.020933546 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020031988 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.019654709 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.021304918 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.020810509 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020067322 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.021212735 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.020848524 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.021251518 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.021225306 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.019731651 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.020095853 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.020816876 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.0212065 seconds)
  done (took 1.301946007 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.022355471 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.014561622 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.014793372 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.024488121 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.014430788 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.014746425 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.014886142 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.014217565 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.014563436 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.015433547 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.014843008 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.014342624 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.015104606 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.014388309 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.014405122 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.014861084 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.01943508 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.033655888 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.014667517 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.014516135 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.019025774 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.01463509 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.014549874 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.014486452 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.014982727 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.014529402 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.014353252 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.014829878 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.014517929 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.015074697 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.014529989 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.018984851 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.019818044 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.014493758 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.024572086 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.019491339 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.014536616 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.018950155 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.015399068 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.014377608 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.014376576 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.014343509 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.014527212 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.014497436 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.024783743 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.014804504 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.015366208 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.014952818 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.014716256 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.014368652 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.014521333 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.016152721 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.020191537 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.015823193 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.014480547 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.015522045 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.014505419 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.015310489 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.014642517 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.014480925 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.014451686 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.018489854 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.015938296 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.015253568 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.034778135 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.0158741 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.024990767 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.0146493 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.015336875 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.018640665 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.015213611 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.03307157 seconds)
  done (took 1.881274243 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.025804533 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.025367837 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.033275177 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.023883963 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.017817869 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.015267527 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.018165536 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015257035 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.023994997 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.018870142 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015469805 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.018439323 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.024457472 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.018781221 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016380358 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.024179521 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.018762167 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.017987068 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.015442247 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.018708747 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.016355526 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.018422345 seconds)
  done (took 1.117259884 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.093380798 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.020529104 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.059848186 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.023588567 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.022328764 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.023397329 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.020423975 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.020555016 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020701951 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.021181641 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.021198066 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020644959 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.022527637 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.02119132 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.021137302 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.020946696 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020728549 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.020987017 seconds)
  done (took 1.167241296 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.0322325 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.020364475 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.043788348 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.019958829 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.020077817 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.01976114 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.022901669 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.023237716 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.019652155 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.020092646 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.02357907 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.019956695 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.019983138 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020296417 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.019954953 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.020342788 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.019927914 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020240063 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.023465511 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.023198638 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.023166892 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.023492068 seconds)
  done (took 1.172486918 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.033538012 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.019507131 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.034896996 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.020877072 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.014876968 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.014852715 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.020449112 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.019559251 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.02037293 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.019140862 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.01963331 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.014871644 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.021084451 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.019763907 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.021509408 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.019779948 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.01937611 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.0198343 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.019394671 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.014975222 seconds)
  done (took 1.079876351 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.026682125 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.017121864 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.016926714 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.02126886 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.016906497 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.016870682 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.021063915 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.016788471 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.01676516 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.038129672 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.016828131 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.016955306 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.021415357 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.019750617 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.016972764 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.021416825 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.021401322 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.021338079 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.016874646 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.016925426 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.038377286 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.016896155 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.021373042 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.017110568 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.017100653 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.017106185 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.017133533 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.020085735 seconds)
  done (took 1.235434789 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.020612505 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.018343055 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.018351767 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.018250117 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.018274967 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.018175535 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.01825976 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.018216491 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.017979385 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.018239774 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.017940408 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.017944534 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.017953852 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.017856374 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.017968762 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.017930166 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.017950528 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.018264679 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.018279645 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018268104 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.017931254 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.01795283 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.018079724 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.018431811 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018389346 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.01806443 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.018355812 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.018418761 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018066622 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.018446036 seconds)
  done (took 1.221100264 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.028800201 seconds)
    (2/2) benchmarking "in"...
    done (took 0.025708376 seconds)
  done (took 0.726581263 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.017791306 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.031967343 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.014375739 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.027166464 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.022382023 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.018551964 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.022634881 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.022295842 seconds)
  done (took 0.84515622 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.022067104 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.044251277 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.016104632 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.016416335 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.018618213 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.081025521 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.028213426 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.027465356 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.029525013 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.019112782 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.016068695 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.027362808 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.015555097 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.029204374 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.017321619 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.025561939 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023204368 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.033823145 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.0289876 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.014884075 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.028660932 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.01653309 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.015090227 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.016649938 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.01623182 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.022763489 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.0316347 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.02829508 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.024270433 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.014263904 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.034467929 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.015106702 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.015702889 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.024289209 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.018477445 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.015017965 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.052188751 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.015245008 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.019450746 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.014937957 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.02707198 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.035922898 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.029347611 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.032803782 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.016420093 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.016822691 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.014992132 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.016637776 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.019274247 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.02437264 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.015282338 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.022546347 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.014924126 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.016570404 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.025630433 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.01535183 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.019844013 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.024415617 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.028924387 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.025531961 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.027466102 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.030605026 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.024014203 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.022188443 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.015883145 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.03484197 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.016732695 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.028486407 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.030005997 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.016351865 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.02815852 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.01513779 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.014363203 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.015276796 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.048827822 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.01648503 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.016027794 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.015263372 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.015454318 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.016591271 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.024806415 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020062641 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.022679115 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.018292332 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.031260761 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.024511491 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.015116141 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.021142863 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.03348367 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.019866583 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.015630952 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.032309854 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.01941676 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.015172343 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.033183803 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.025776808 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.01684869 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.016066126 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.019384351 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.028891123 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.016687987 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.014506724 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.023855849 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.016788559 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.017285045 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.019421577 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023451857 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.015156575 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.025463822 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.019681714 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.016748313 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.014528632 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.020217511 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.016097262 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.014523839 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.024805383 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.015364371 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.030040419 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.02233718 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.029900348 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.030376057 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.025915849 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.031357789 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.01521341 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.014527237 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.033921231 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.025196805 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.017001545 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.034080984 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.015621559 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.026352903 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.015755588 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.017286217 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.025130845 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.01511531 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.017413974 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.015977591 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.020757881 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.017251154 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.017474797 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.021941971 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.024339616 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.028108257 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.016780559 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.024532907 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.016093366 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.031735146 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.025556102 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.020740742 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.019028199 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.01653083 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.027858728 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.022706137 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.024975618 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.015642308 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.016539079 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.01575849 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.026913593 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.025294028 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.017431437 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.023348826 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.020764879 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.016525388 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.01586871 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.016710949 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.019803587 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019133357 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.016340259 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.02363245 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.024558531 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.030029044 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.023661799 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.025004126 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.015308225 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.015814286 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.01771989 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.015751116 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.020773759 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.025322348 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.031667073 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.027983347 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.037582567 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.016154006 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.025659838 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.017647685 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.033155152 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.029342605 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.016921917 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020877151 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.015051301 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.017712387 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.025331223 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.027538457 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.030227435 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.031050147 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.020951784 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.020815246 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.015824316 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.03116776 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.016349799 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.024409587 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.02536795 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.020747429 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.015850357 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.017829793 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.025201837 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.020959412 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.016224259 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.031971897 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.022527963 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.015889945 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.030545713 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.016275909 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.026899698 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.015885791 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.019939749 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.021581033 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.018020313 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.025461112 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.031679334 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.015124596 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.016331889 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.032011596 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.018058833 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.017948334 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.024346071 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.031615462 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.021143609 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.024077577 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.026993574 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.026741896 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.021027751 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.026374189 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.017312924 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.025559834 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.019736479 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.028313177 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.016188932 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.035063253 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.015257456 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.031657052 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.016878358 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.027455963 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.016558984 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.025679805 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.017020368 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.033773034 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.017867083 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.017110396 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.028395311 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.015230151 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.025407825 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.016008916 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.021542279 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.023236298 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.025605741 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.018067901 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.025787399 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.017901262 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.024871239 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.021216437 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.025248919 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.025446504 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.021067688 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.015947335 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.024389882 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.027436037 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.024421197 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.017778651 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.159243987 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.015776263 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.024552118 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.016359259 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.015986691 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.023269228 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.02033155 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.021442302 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.016400985 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.016465289 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.016352852 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.023484194 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.024413872 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.032975596 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.023671172 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.022507368 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.024242136 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.014879724 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.030457783 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.014898235 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.022394627 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.014298949 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.019705744 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.024077998 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.015096447 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033697915 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.016218523 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.022782258 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.02664766 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.023511883 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.019159631 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.032520727 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.017556428 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.023219955 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.022744953 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.019919916 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.021967786 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.016214851 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.023263834 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.024203485 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.02518686 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.015466293 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.022271808 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023816821 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.016280407 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.021195587 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.016157924 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.023182277 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.016417664 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.014288469 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.019927567 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.025935206 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.020123941 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.020297792 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.015063976 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.014104684 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.015012476 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.020176935 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.019940611 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.023392223 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.030115298 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.01417669 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.015482314 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.014702142 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.01902052 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.032614195 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.024311793 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.022810647 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.020028425 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.014341172 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.016002411 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.016176675 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.014874269 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.017517522 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.014294153 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.014719981 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.02515055 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.016197166 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.019700773 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.015032167 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.015773198 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.024390294 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.018612027 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.015160606 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.021837949 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.014642927 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.020404383 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.01431656 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.016130928 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.019881476 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.014602822 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.019055292 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.024955784 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.031151435 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.021921406 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.02381005 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.015793895 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.022993979 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.030624303 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021521167 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.015926438 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.024287546 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.014740898 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.033759747 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.024405286 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.023752266 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.024896089 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.016011014 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.032111033 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.020204403 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.025096243 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.03089532 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.016207378 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.02152136 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.015221382 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.03116087 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.020302865 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.015245695 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.023881594 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023149859 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.021723025 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.027147548 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.016071183 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.023841324 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020055761 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.019343174 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.016919568 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.016878394 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.024179069 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.03155564 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.016123633 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.01916081 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.023339129 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.023780479 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.020356424 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.027529074 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.023537675 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.016246135 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.016911712 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.019462244 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.016146812 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.027957706 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016104711 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.020684099 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.020709213 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.015671305 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.022874479 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.032398901 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.025112144 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.02530595 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.015711606 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.015108937 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.034091018 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.019860642 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.019136605 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.023835207 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.025326506 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028181612 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.025125901 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.032829474 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.016221367 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.022023646 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.0279913 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.016640012 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.015562703 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.019828722 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.017347534 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.024901952 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.025681436 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.023173308 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.017589754 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.023014525 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.029349563 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.017208759 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.020886994 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.020502501 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.016578181 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.02632313 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.023853276 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.024426884 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.01724239 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.01565451 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.019541907 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.024613224 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.023263643 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.024807891 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.016639501 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.022790027 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.030169613 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.023423161 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.019479044 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.015804198 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.019373209 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.025078787 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.020980597 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.015829547 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.021067458 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.019963717 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.023415696 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.025479742 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.020979515 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.015892867 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.033320437 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.024566985 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.02511459 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.017673319 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.017896282 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.016294986 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.015869907 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.027319672 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.015873151 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.017644289 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.021083043 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.017938022 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.034160561 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.024154726 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.031999797 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.016945988 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.020816272 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.015851049 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.02566625 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.021170404 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.015936157 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.026548729 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.015362966 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.031757279 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.028184123 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.022088498 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.015939693 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.021516966 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.024740525 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.031325686 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.025759707 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.025041698 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.019613752 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.025724637 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.017774673 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.027240454 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.01606332 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.015177631 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.02645774 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.024770789 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.028897592 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.016039741 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.0263691 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.0181063 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.024389306 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.02484718 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.017849838 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.017971489 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.017831541 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.025901913 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.021157494 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.025549259 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.021278793 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.033612767 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.017088868 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.027479785 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.025087786 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.02727764 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.03011565 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.028961575 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.024834483 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.016496141 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023538253 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.02487495 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.017283829 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.021396765 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.019663058 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.039169648 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.017835359 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.017860757 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.031260394 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.023536244 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.158932361 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.020580697 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.020325849 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.02515234 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.015805013 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.025488395 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.018327935 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.015750557 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.020228482 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.020228976 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.014305954 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.014941066 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.01516764 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.024643733 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.019974111 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.015068637 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.033745726 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.016114895 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.023669744 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.025675986 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.021945928 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.016102388 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.014245534 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.015657035 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.028349465 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.030264324 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.019064623 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.0235095 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.01633475 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.024095404 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.014263057 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.023597056 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.022779922 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.023425874 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.014822034 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.015068347 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.029804345 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.030204669 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.020008703 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.024645183 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.023819791 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.016211886 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.036173704 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.023705806 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.015653559 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.025427766 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.01661886 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.014483617 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.014272549 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.016176087 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.02628327 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.01477443 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.016721094 seconds)
  done (took 13.999593008 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.055419463 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.015978509 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.014765 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.01476431 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.021638417 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.015743873 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.014688742 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.015764039 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.01574462 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.01667374 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.014693264 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.014683182 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.020123009 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.027106789 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.022212844 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.018260487 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.014880967 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.016098484 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.014874652 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.015879985 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.020531685 seconds)
  done (took 1.125193862 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.020057065 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.01903273 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.018425554 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.018588785 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.017845952 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.014951704 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.018180532 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.014941729 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.018503243 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.015190844 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.018496566 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015060131 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.015446846 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.015425366 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.015391732 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016434657 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.018822408 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.018012103 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.015064852 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.018437349 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.016361364 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.018346649 seconds)
  done (took 1.087744413 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.017589829 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.0155772 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.023507404 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.014450759 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.014363699 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.017045945 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.014380889 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.019258525 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.019219973 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.019218911 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.023367296 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.015159342 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.014334086 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.020550923 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.014323613 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.015032757 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.057067275 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.015254525 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.015323259 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.01461605 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.016756834 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.02368308 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.014688518 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.014796429 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.019304289 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.017224431 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.014597984 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.016795809 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.01513757 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.019360984 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.015281102 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.014404416 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.023493207 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.022773554 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.019384666 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.019375363 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.01575008 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.015181852 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.014595717 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.014604642 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.022951356 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.015961271 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.014955787 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.015685756 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.023473138 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.01478851 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.014481195 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.023613407 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.014654739 seconds)
  done (took 1.598694721 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.025350414 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.067101361 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.020709526 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.050084078 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.025913675 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.019475336 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.020544279 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.053169065 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.015773736 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.016195465 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.027092068 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.027247855 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.017147538 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.01831755 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.020572461 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.017133321 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.017749712 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.016459269 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.019316343 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.016742333 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.019590235 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.021865719 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.02664471 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.027123877 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.018131331 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.016715048 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.016957039 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.01845737 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.02685641 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.019999487 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.018588516 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.019072942 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.027132302 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.021017786 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.016931963 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.017091321 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.027677048 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.017513389 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.017294004 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.01589548 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.017000979 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.018365247 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.02189674 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.02774082 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.017401354 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.022248652 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.017319151 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.015690931 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.027430291 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.017391757 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.020716483 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.028228532 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.018342358 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.017691261 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.018725203 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.027536231 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.017501113 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.016434705 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.017701234 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.027097033 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.015920204 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.018148435 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.027854677 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.017070928 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.020329343 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.027962894 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.022432863 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.018285923 seconds)
  done (took 2.343686944 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.024636195 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.04926014 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.028231153 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.028084066 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.023790263 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.02378098 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.02380242 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.024007927 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.024020717 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.026801076 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.02420246 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.058996653 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.021198644 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.025586391 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.024180461 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.024185612 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.024157732 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.024167697 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.024195162 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.02432855 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.024496685 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.028987399 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.02445902 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.029010893 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.026752255 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.021434351 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.024369983 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.024467762 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.029151845 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.024446365 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.02674988 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.024492909 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.024582241 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.029161071 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.026723793 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.024354891 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.015405286 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.024366407 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.024461571 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.024490897 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.021378406 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.029153711 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.0243678 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.021396752 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.024576709 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.024561036 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.029631269 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.027071255 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.026455193 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.027544734 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.024809365 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.029591951 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.024675482 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.024759851 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.029551836 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.031936958 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.029763292 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.029938383 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.025014176 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.029813388 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.029794992 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.032014051 seconds)
  done (took 2.377945562 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.027825575 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.020342995 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.032702809 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.01452807 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.014411275 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.022865545 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.01442475 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.014473134 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.019886217 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.020205023 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021629605 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.023232823 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.024912902 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021647358 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.023195994 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.024910513 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.023189644 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.023167974 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020239098 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.023197705 seconds)
  done (took 1.157372513 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.031588468 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.032876919 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.02015779 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.023098917 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.019887488 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.023124989 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.019384051 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.019941432 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020243823 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.01989398 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.024133371 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.024205712 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020406266 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.023443539 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.024095791 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.023417902 seconds)
  done (took 1.085014762 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.019681797 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.022275143 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.02073246 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.015733664 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.017471832 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.015161805 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.015877569 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.014553765 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.01697545 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.028683085 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.01545916 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.017895836 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.016122141 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.014838846 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.015421768 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.017997657 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.017136277 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.015713934 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.016048951 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.01987994 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.023608589 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.016478327 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.018004567 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.015768496 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.017651848 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.023647614 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.016855422 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.017636277 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.015672203 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.018000941 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.017713127 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.022226823 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.017895444 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.016269816 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.015003332 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.015754846 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.016252353 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.018252627 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.018260787 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.016219821 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.014813689 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.017964879 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.016301188 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.016612312 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.01734521 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.01825377 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.017414249 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.021554364 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.016094612 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.017920155 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.016173954 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.017378655 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.016198357 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.02273048 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.017780037 seconds)
  done (took 1.690385346 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.033360332 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.020134917 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.014518047 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.014397987 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.019669898 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.020218297 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.019723267 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.019825315 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.020220927 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.014378199 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.020218685 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.019318212 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.020312952 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.019856515 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.020266995 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020011375 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.014473883 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.020122697 seconds)
  done (took 1.072558888 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.022326571 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.019937881 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.019004634 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.01627791 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.016272486 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.019981129 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.014757873 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.015958246 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015883709 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.01623164 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.016226689 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.015983329 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016040343 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.016023446 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.019750425 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.016361577 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.016010572 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.015003934 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.01640091 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.014844553 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.020372367 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.015027313 seconds)
  done (took 1.090400977 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.077556762 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.040798354 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.037380718 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.033790983 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.025839405 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.048899563 seconds)
  done (took 0.980380476 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.050579436 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.052081351 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.019822236 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.019804882 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023779827 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02200006 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022034987 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022068139 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024848348 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.025714348 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022526019 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02559876 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025314477 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026995561 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023831397 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023923869 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022456035 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022445559 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.020015263 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.028976286 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022687505 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025855094 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022826018 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022565443 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022786438 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027356518 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025762614 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026399322 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022602204 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.025963658 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024316656 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022807818 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026014876 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026356036 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.020153212 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025837952 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022826137 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.029528745 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024257519 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027387627 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.020036071 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024290009 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025842608 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.025478765 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026064083 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023050055 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.025769202 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022980498 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023027861 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.031275476 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024676257 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027688263 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024636063 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026309982 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026178886 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.031270157 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026713271 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027842926 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024710776 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026687905 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028092823 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024863166 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02793376 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026962134 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024776058 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028130809 seconds)
  done (took 2.411275434 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.058759933 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.020217802 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.022276307 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.025587683 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026400117 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022136404 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022161471 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022233788 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022416915 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.020275443 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.057160196 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022565687 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026920477 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027001677 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022594077 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022367624 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022457886 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026760886 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.020259937 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.030435055 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022698399 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.027334563 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027310466 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027252142 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026307596 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024422543 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022776354 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022704837 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022729866 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022678504 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.025538284 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022847792 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027327737 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.020347888 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027268183 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022798164 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022628511 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.025613042 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022769707 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024384945 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027465541 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.029527476 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022755391 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022751338 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026595589 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022899846 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022934715 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.020598009 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022963401 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02056705 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026696381 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026531458 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026628544 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027811273 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023104239 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02310831 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02294267 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022972099 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023147964 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024730266 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.027816966 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.02296678 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.03165553 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023171378 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023231857 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028134001 seconds)
  done (took 2.404128096 seconds)
done (took 47.91773385 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.211062126 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.173502047 seconds)
  done (took 1.09090596 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.028851587 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.026687983 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.047841525 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.022883628 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.081139397 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.174022263 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.1261783 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.025623054 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.023422182 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.025479318 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.023095305 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.025134315 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.025232774 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.023035357 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.086017213 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.025853256 seconds)
  done (took 1.516674512 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.073188632 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.1327951 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.057950943 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.022227694 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.102988914 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.028008791 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.023681802 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.027542603 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.027961247 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.02227017 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.069419232 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.035310196 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.026781134 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.027749768 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.023856904 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.026873125 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.027808187 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.028471973 seconds)
  done (took 1.504590765 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.095796203 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.033860557 seconds)
  done (took 0.850593843 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.112303932 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.061891738 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.100482916 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.299308275 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.090847309 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.094286305 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.097970389 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.096266732 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.067791664 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.091333521 seconds)
  done (took 1.831582631 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.060022707 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.056612918 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.279301686 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.053778323 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.03373299 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.028718107 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.028452795 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.030954386 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.028840003 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.028665349 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.073888327 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.027307851 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.024003814 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.075612116 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.049334086 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.059074127 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.023178101 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.029325939 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.032012593 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.023106841 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.027789075 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.031151594 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.129865137 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.029892992 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.051470209 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.027265353 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.02899021 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.028167414 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.02802218 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.030152226 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.03052054 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.052140608 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.029752305 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.036683924 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.028289985 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.048481535 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.024073217 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.05020068 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.026756022 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.024104205 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.027176274 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.030966236 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.02472438 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.030216299 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.029209946 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.029692284 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.031704685 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.023390847 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.029168506 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.02685939 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.024262845 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.028252067 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.027954875 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.029044964 seconds)
  done (took 2.935218463 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.07504668 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.063536128 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.02361926 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.068354013 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.062726076 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023640944 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.07659212 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.058069805 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.075626631 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023229644 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.022837311 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.02281851 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.02969089 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.033506949 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.072940045 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.066168404 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.024829352 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.023507575 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.06519783 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.065351954 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.022512789 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.077494815 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.068281749 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.064787819 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.022198886 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.023682276 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.022380142 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.022991869 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.030457685 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.030052879 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.022763859 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.032394638 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.033527111 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.028981901 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022190969 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.02249793 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.02241904 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.030019403 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.031736649 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.031611098 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.028452842 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.02219458 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.022477295 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.022984989 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023442515 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.022012723 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.031261615 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.029510246 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.031213884 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023252674 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.023235648 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.022346326 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023569018 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.030869586 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.028158567 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.029513264 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.032216324 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.02306602 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.022926021 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.024029985 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.033249484 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.030189627 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.030030295 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.02379001 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.031512305 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.022757819 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.032607415 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.034774368 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.022639603 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023166324 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.022834985 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.022834595 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.02316068 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.028751111 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.028874862 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.02326526 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.023095528 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022644862 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.030733942 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.028981939 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022647868 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.030967555 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.022274226 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.022809488 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023178234 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023443539 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.031724073 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.030155505 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023332587 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022887113 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.022885333 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.022897851 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.022209257 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.031310452 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.029864723 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.030750556 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.033181799 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023693488 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.033607974 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.031328636 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.023808625 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.030323495 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.023330708 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023701962 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023605951 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.030214922 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.02966913 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.031674067 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023273793 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.023044098 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.03119759 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.034138752 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.023241813 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.029916796 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.032898581 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.03050053 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.022772876 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.033335732 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023232881 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.033264015 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023514667 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.032878946 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023507551 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.03065519 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.023436903 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.022667731 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.023351457 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.033806706 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024223491 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023463826 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023874218 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023434762 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.030988434 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.035433307 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024164879 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.03116548 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.030961936 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.024027668 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.033290039 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.0236637 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.033780915 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.140280156 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.024577881 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.022923698 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.036189232 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023458167 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.023836465 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.02347422 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.033128711 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023447152 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.032987099 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.030354618 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023141073 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.034565009 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.032781914 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.030509768 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.033548892 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024286085 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.023754366 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023393424 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.023739396 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.033510521 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.034945785 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.024521275 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.023653729 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.030176467 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.034206816 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.023156148 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.030461429 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.030368721 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.030834019 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.023805928 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.023742195 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.033956584 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.036168429 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.030804478 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.033789477 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.031593549 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.023642231 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.030496938 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.169159192 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022677573 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.034197019 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.022672675 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.031343287 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.03087548 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.027277432 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.030460533 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.031749902 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.030496141 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.030173102 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.032026644 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022123241 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.022460233 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.027901943 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.022448304 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.022534093 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.027649529 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.022918955 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.022958783 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.034348242 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022639307 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.030979273 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.022086875 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.028579659 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.022019746 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022902552 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.032959043 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022383842 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.022921207 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.02816663 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.022512003 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.027834851 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.030780021 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.02771348 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.022369417 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022826661 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.030958131 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.030901112 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022420106 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.022251259 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.022792165 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.030012717 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.029641913 seconds)
  done (took 7.649977096 seconds)
done (took 18.109603272 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.149379372 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.071057709 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.155017944 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.089881132 seconds)
  done (took 1.183475089 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.055534948 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.019073797 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.032257173 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.040481068 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.018945249 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.027737041 seconds)
  done (took 0.931542936 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.210596977 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.136657614 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.140296599 seconds)
  done (took 1.223140718 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.130329543 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.266897875 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.478118351 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.12432706 seconds)
  done (took 1.746019039 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.06214428 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.052666317 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.028897921 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.061953148 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.036277775 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.01546354 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.084249049 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.021746553 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.049379712 seconds)
  done (took 1.207809151 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.094394434 seconds)
done (took 7.126083521 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.198502727 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.029857521 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.032266955 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.028655174 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.125333402 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.021191161 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.133718836 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.028405236 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.133494073 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.193055574 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.149731932 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.045028742 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.043522755 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.041589045 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.143450736 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.032457097 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.028043286 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.023550512 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.149932113 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.125330798 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.125915622 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.030193554 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.091484965 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.029563303 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.109036527 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.077013291 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.159004152 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.200800048 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.163182415 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.029700832 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.117514917 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.041434751 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.12812654 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.123502296 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.022255907 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.046048255 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.01955148 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.138520394 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.097555243 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.191495673 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.153731319 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.027962575 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.143777931 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.023987251 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.018799304 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.031842801 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.032014673 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.027843918 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.0415293 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.027462608 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.039849952 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.025722729 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.131631009 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.022690294 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.089920746 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.022327723 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.154391406 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.081236509 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.024256323 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.036625485 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.028198556 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.181411791 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.037557302 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.024229536 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.035385879 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.019145554 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.021567645 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.036084747 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.019448578 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.029024721 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.027356866 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.104333192 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.037022052 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.061625227 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.030539819 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.115685266 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.095063202 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.043973615 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.046458879 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.028029242 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.018851027 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.190424737 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.023035163 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.03664404 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.019176301 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.049398919 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.019318339 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.034638133 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.157076652 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.152432431 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.077582089 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.020371006 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.224612813 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.02163858 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.045120842 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.020506301 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.019944055 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.155806608 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.019711607 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.019993044 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.029703767 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.028067907 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.021651279 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.158364761 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.110400976 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.027645329 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.028764334 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.020772461 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.018936321 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.021081417 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.020749074 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.020159117 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.087122939 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.035194192 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.019423517 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.107782339 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.120046216 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.030727107 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.038848862 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.080159208 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.022921617 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.028809375 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.027255209 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.127703401 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.027837473 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.138973594 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.021397459 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.043932716 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.118568715 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.096264048 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.106698602 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.019891537 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.183852732 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.032465334 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.019551156 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.027340583 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.048940639 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.031956056 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.03525892 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.019849665 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.184128787 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.030312494 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.018931602 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.271294907 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.019176058 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.111631205 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.096803042 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.119649941 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.026651168 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.029314944 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.091651188 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.042437818 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.045968618 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.041748893 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.022298635 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.019408983 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.019054948 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.033958063 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.018475792 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.019333612 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.033267353 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.027549845 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.019081941 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.1253784 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.030354001 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.023089134 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.145683317 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.030948112 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.085743426 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.039585004 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.01948792 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.108375143 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.021102651 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.037218112 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.080542254 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.019641687 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.0959511 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.019589384 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.019289201 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.026605333 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.020823825 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.027976233 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.03178837 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.019433879 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.032658179 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.018003425 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.019381207 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.107899822 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.020963576 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.157634938 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.105650132 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.104993481 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.019538289 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.036335247 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.018963016 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.134159267 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.019268526 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.066362707 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.118324679 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.035118528 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.036961901 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.020388153 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.094719638 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.033893783 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.019054189 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.094418327 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.117691724 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.085238404 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.026579302 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.126045361 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.028121524 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.019459783 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.026479844 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.027548926 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.019782785 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.098311103 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.019220768 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.018779079 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.019072754 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.021022178 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.018438499 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.042441897 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.018518437 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.026780434 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.019186064 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.021874627 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.021051516 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.018502799 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.02700051 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.097460243 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.118955398 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.018464928 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.036540387 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.031590077 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.030047209 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.065330693 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.025876424 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.172902445 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.018665774 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.028247038 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.040581523 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.018850342 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.022461538 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.019350783 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.036926249 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.018698586 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.020428644 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.027695901 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.019497138 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.019657123 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.033379424 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.019503726 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.027407346 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.020429739 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.018783554 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.018804085 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.019255378 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.023671583 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.022752462 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.0291913 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.036584534 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.133043526 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.020300017 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.021199657 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.019291884 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.019245227 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.019542267 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.020719464 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.019115433 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.021113961 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.019465073 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.018869427 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.04701164 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.022571269 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.019935105 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.040235409 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.01935174 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.028280806 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.117028453 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.034737545 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.022495925 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.018579262 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.146284416 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.101042187 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.040577517 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.038766795 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.019633255 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.02903796 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.019665259 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.019805492 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.018588764 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.045590458 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.022768584 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.019719725 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.018642797 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.018890418 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.065101269 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.027015392 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.018811631 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.027041564 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.019569492 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.01957152 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.046491145 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.020270817 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.019438363 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.037975631 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.032520336 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.097806807 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.03103717 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.018634653 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.068727345 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.018899214 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.019558938 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.020013862 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.11041402 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.031799084 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.020988561 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.019615163 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.026834748 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.028083311 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.070844471 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.019097164 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.022911451 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.018571692 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.018990028 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.020056824 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.044949759 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.046089428 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.020878168 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.023221197 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.019621671 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.020113961 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.092453855 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.019218483 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.024122196 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.105397196 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.021760854 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.0274956 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.019225048 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.133212003 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.023646232 seconds)
  done (took 18.732456243 seconds)
done (took 19.480646584 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.052444208 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.032779451 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.03236812 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.027770112 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.031537269 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.030772844 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.032802049 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.028422944 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.033224699 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.030805591 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.029117588 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.018550517 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.026150455 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.035396162 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.027655856 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.034634137 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.03118108 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.033985433 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.019765124 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.034255185 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.029262123 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.03212604 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.027959274 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.033670194 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.019768047 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.027699569 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.041868557 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.036746418 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.022711301 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.028625531 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.026796216 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.032534282 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.026789978 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.026390881 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.028406912 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.024447342 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.028948094 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.025600761 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.041881439 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.024496757 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.01982419 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.031145311 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.026297803 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.027177945 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.027865854 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.031099091 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.024598766 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.034667966 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.019124208 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.032107427 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.041966825 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.023693421 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.022867875 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.027800728 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.024604932 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.028527753 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.022703085 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.030640949 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.024485906 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.031415154 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.027470771 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.027259854 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.019208542 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.027830104 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.026601032 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.026779149 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.018280675 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.023896982 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.019246585 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.019243183 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.018572929 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.027790365 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.026058287 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.024273843 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.018695127 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.019259615 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.018692022 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.031443508 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.026380613 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.027907952 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.019653756 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.024539832 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.024184102 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.019792539 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.024020842 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.030900091 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.018680379 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.019769371 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.018654195 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.031001153 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.025737544 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.019191542 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.030932937 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.023765686 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.023485075 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.019233915 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.018753966 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.023646075 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.027294543 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.019231457 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.018271281 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.023766904 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.024319289 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.027812631 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.019626313 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.023633871 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.023534809 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.01832004 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.027729591 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.026484903 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.028091974 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.032042099 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.027787316 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.032446084 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.019769976 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.018268525 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.02898445 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.019660548 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024067007 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.027380243 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.024657849 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.02731921 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.019892059 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.01866924 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.023891999 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.025287342 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.019649155 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.01979362 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.019664596 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.027989772 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.026590441 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.018414975 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.019253409 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.027995708 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.027931935 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.018789293 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.018682878 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.027895551 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.019841499 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.025271599 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.024606831 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.028034394 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.018963218 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.019623656 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.018632955 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.018957673 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.018686797 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.024592139 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.023948658 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.019858759 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.027922047 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.026526599 seconds)
done (took 4.824337489 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.034000143 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.061274099 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.057405396 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.035026073 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.03195896 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.020385501 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.023890803 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.037859279 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.023044445 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.043720586 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.044598508 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.041149559 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.047373805 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.018285706 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.01956868 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.020427096 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.018100776 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.031496599 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.035979979 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.048130315 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.054821788 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.019238709 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.037157857 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.039042344 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.030966536 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.037204147 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.020831594 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.020505802 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.022531928 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.036205401 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.045568435 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.019444663 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.020784904 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.037864041 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.035005949 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.027680073 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.020494055 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.025773054 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.020593201 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.019702301 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.021674994 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.037004562 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.025886596 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.026111045 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.020830053 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.020321754 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.020132119 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.026731713 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.032726558 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.025298534 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.03146621 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.038276385 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.021572785 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.020109398 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.018433134 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.026354475 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.019995394 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.020210863 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.020421244 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.019310688 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.020481078 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.022530074 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.025232937 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.025887355 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.023680762 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.02618932 seconds)
  done (took 2.719187646 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.03858962 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.046287641 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.03355967 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.033812995 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.019309779 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.019928324 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.019857173 seconds)
  done (took 1.032144877 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.064903818 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.027108276 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.031247311 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.031186455 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.040418617 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.028695435 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.031976264 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.048271913 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.019212264 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.043690819 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.037619505 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.03199727 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.023143525 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.031854763 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.050016079 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.034244215 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.032264675 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.026580212 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.02674943 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.032301578 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.024068242 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.05173657 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.031734151 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.020878715 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.032950757 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.026370117 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.022876862 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.020721188 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.022534337 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.01994436 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.019886542 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.041928271 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.025629784 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.026027142 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020891657 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.018896598 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.023556436 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020847115 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.02331347 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.026985137 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.022813684 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.022030962 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.02243281 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.020138133 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.021264325 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.024196935 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.020949618 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.020008406 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.019704231 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.026727349 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.019321679 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.025691256 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.022384657 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.024968954 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.027104622 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.025981314 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.026832481 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.020483176 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.027457365 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.029609438 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021780663 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.03182747 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.030853089 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.022827234 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.030792903 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.028494561 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.025679866 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.022863429 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.019708325 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.027717108 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.020520643 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.030869203 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.023140846 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.022375791 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.025129295 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.027150763 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.034624148 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.034702782 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.034529341 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.03339348 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.022702142 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.020155797 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.034066426 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.034545342 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.024887154 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020055479 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.021055181 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.034213826 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.043880072 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.022238879 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.024939764 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.020191078 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.030091893 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.02266197 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.022525936 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.027140464 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.020181319 seconds)
  done (took 3.491369896 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.024309136 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.022341895 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.020974465 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.020964727 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.021165642 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.02094933 seconds)
  done (took 0.96284653 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.044975482 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.020380347 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.031697344 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.020158389 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.041581176 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.025825416 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.026187652 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.021903118 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.035690345 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.030908318 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.025748798 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.027771161 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.028542202 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.021581797 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.025859081 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.030362761 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.026024919 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.024365887 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.029994995 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022058256 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.033356421 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.021631237 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.021916979 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.030131201 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.022533179 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.030271323 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.029774398 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.030372486 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.029895371 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.022019548 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.021575382 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.022540298 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.026697594 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.021916446 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.026314543 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.026655866 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.020482015 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.024746892 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.022987078 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.022629457 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.027943493 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022154975 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.023178087 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.024735517 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.02209764 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.026854369 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.024796793 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.024013506 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.025925134 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.024648827 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.024698264 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.020994933 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.022690098 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.024653207 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.026984483 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022186929 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.024695831 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.026095457 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.021711321 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.026830405 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.020413298 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.022628185 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.022091506 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.022673259 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.025166734 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.024730722 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.026892527 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.022108897 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022147537 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.020450648 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.024766485 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.020426019 seconds)
  done (took 2.64835616 seconds)
done (took 11.677854516 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.528323519 seconds)
  done (took 1.336135939 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.570297254 seconds)
  done (took 1.408490544 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.049423606 seconds)
  done (took 0.875920675 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.291057885 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.369634524 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.70696702 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.092104788 seconds)
  done (took 2.276783864 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.843786771 seconds)
  done (took 1.682594172 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.216697556 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.179086253 seconds)
  done (took 1.262752551 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.344617808 seconds)
  done (took 1.173042088 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.177084976 seconds)
  done (took 2.010442298 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.188526264 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.114567113 seconds)
  done (took 1.136211944 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.47784785 seconds)
  done (took 1.309089298 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.523078609 seconds)
  done (took 5.354766361 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.197453273 seconds)
  done (took 1.094734655 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.18905835 seconds)
  done (took 1.024466167 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.696507092 seconds)
  done (took 1.528724737 seconds)
done (took 24.302040171 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.038922925 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.03830585 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.038005964 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.033430156 seconds)
  done (took 0.973215545 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.02914288 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.023308548 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.026286264 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.026405839 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.024074826 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.025685573 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.025658291 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.022691866 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.023935267 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.022925555 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.021588469 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.022824447 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.025404592 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.022741689 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.025241266 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.02627625 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.022914283 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.022855533 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.025061953 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.022847966 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.025543088 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.022981411 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.022909127 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.024601546 seconds)
  done (took 1.420922722 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.033237949 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.025234595 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.028102092 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.023893487 seconds)
  done (took 0.950088327 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.031998463 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.0298045 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.038002193 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.042670022 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.029088332 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.029949899 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.03619953 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.036521439 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.041954182 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.039122542 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.020881371 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.020701412 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.019916018 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.038326313 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.035966208 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.015394211 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.016896827 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.030207848 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.029284487 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.032012512 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.022930664 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.01866112 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.029260711 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.029973785 seconds)
  done (took 1.550947152 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.036869461 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.018974619 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.033779091 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.043900924 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.044838295 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.018619704 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.031642463 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.044590095 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.079968731 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.018625215 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.024615611 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.018618009 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.056135688 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.018767455 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.033513926 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.061794761 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.064877119 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.022647841 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.051176724 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.018821403 seconds)
  done (took 1.587058791 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.027996942 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.023725689 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.023453461 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.018817133 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.029828829 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.025861156 seconds)
  done (took 0.994978748 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.023802799 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.02161367 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.020263857 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.025529802 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.021236839 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.021185328 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.020515779 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.019438636 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.019329078 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.020095823 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.020082902 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.020500549 seconds)
  done (took 1.094265229 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.113185988 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.025746453 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.023630531 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.019433659 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.02112431 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.020097317 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.034881026 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.02187137 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.037286112 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.020049095 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.020145449 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.022107066 seconds)
  done (took 1.220496965 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.060018906 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.063839209 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.096921324 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068596885 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.069680435 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048388908 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.080440657 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.031252537 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.116292625 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090125463 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069488737 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.046958821 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039326965 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.022850769 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053071538 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072632749 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090609753 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.025930493 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.066942987 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118692739 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085586696 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.089200526 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101668712 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070439295 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.044665502 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10173782 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050096781 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.056595933 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.078472673 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.082357907 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073107913 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.051718979 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.024763279 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.024071914 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105333844 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.061210681 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07735124 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.047005331 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.059766415 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.042116991 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06216918 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.022948173 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.047509196 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.065204783 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038809198 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08877729 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.047582738 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072991426 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035458163 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096345704 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087474958 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.054919908 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.041058799 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061540975 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.098526118 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.071807564 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09817321 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.06440424 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038592674 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.077777211 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.066409368 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058506216 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.212292803 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03350559 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.129764962 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.041533426 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.064387073 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06408094 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.046481082 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.048312966 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.059138361 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.087863836 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077359775 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.077276476 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.08915845 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.047234782 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071578195 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.05220023 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.079533821 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055844592 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.025914183 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.073519949 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08062195 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.050845363 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.052960439 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081036098 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.044823406 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030951989 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.05406432 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.073176318 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033681831 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.067656114 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.033629327 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.063355917 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093249655 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052265599 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065558899 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.072316061 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.031675482 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110831028 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.062596709 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026280513 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.071413637 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06789974 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111820244 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050668525 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.029973332 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.054866126 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06093161 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.107646338 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066616906 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034807018 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067051277 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101302416 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051002699 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.130386999 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.052277531 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102939116 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071399647 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.042233946 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.029969311 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.04603731 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073113675 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066397966 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07145741 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050954222 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.040500284 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.041857484 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.223352699 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.045631672 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033700862 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.066145954 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.055992211 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.027499492 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040684633 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.029535002 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09294907 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.030894615 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.086542309 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.076745739 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.028285797 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058678245 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.049894745 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059921193 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.049784809 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.069229816 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.089912815 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.131688303 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.04273801 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.046497922 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059379176 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.095198614 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.0783884 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.044518079 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.029620071 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.052567293 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063393588 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.050173775 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.078590054 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.04918886 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061346544 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.057069595 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095994226 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09964378 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054351381 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.055268983 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062543169 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.077001791 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030336985 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112296422 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058941961 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.072962648 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.03785938 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098029249 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.065935654 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044135105 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041276912 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.054687417 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.058947465 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061177667 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100518995 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.050737049 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.026671173 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049672733 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105261541 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.031285766 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068382599 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.046589582 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.048660978 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076288087 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.051775492 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.036868354 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.022483233 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090609694 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123371071 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.024361855 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.072624494 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.075173167 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.211578276 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.073898667 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.022781257 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.070447371 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.090911581 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068473904 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091013635 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116532124 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06909787 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.069583204 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.064715752 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.057861739 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.032144288 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.077235664 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.085990545 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047662937 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.043713645 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.08498824 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.070039581 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.087079892 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.067964431 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071011641 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.057913116 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.062629303 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.056965029 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.060171541 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100277776 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.075998994 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.079841443 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.039437201 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060556893 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.07429541 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091339439 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.035559077 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097695838 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.037835561 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.075070683 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.030922079 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.07992207 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.029590053 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.119221763 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.03319524 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.054795528 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.023193944 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.027754837 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097973462 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.067464634 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.061918304 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056626171 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.096691143 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096623067 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.031782975 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.065026358 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.074435852 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.058138155 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076748047 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.06582031 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.044772005 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053019661 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.066147585 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.04127118 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.038131918 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075812177 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05323563 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.228809452 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.03774092 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.028221993 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091495989 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056727357 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04714681 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.031320962 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059892035 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.076060623 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.045722675 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.039653436 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066549138 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05708226 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092329745 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.043555359 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.050167963 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076589738 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.0331352 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.044793887 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.022586519 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.038345928 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.029064453 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078489615 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.028693735 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.06692386 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.021940917 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082126264 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.037966236 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.045630149 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.054310537 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061235193 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.079313603 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.047066986 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094483409 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042775894 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.07378484 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061423797 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048348222 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042352583 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.056968279 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.054386842 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077144061 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.049470566 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078458555 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.098983285 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057994682 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097506807 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044733586 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.077009925 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061022943 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.080858695 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.066658733 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123655948 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095473354 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066717984 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.068190348 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.029300923 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.050721306 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062337691 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.070927052 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139437441 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088306781 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.026686154 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.065922104 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.050002703 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.068244747 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063424092 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.037929262 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108117993 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.208004577 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.041459748 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.064372077 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.042748761 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.05671432 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028863594 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052173279 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.056110446 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.046901626 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050243436 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.068421503 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079585399 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064302883 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094335223 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.053215839 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.044612381 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.070306487 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062172708 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061425998 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038145512 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038589907 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088673437 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.071818619 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.077710373 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.052876415 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060316076 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.064404543 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051842098 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.075951068 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060857549 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.080109171 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033474556 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.029149213 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.021706622 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.025769846 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.07833927 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061949369 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066062871 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.052398697 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.025820149 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.057576081 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.060862852 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.025684692 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041866948 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.04873315 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.049659663 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.046518535 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062299626 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.065129611 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.05031501 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.058567192 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.053816712 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104516386 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.05520751 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043126293 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100328515 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107290206 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042304122 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048770384 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.025543542 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.03327366 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070879126 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110397221 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115594336 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.032680368 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.042246037 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.042440743 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043495047 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.025692205 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.04536259 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.045451057 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063141606 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058993659 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.072053574 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.208758029 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028820258 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.056072528 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051168526 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.045056192 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.059441284 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.071191574 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.077328226 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.092059075 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065380128 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059485828 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02891781 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.032940874 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.028833315 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.032505108 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.054412707 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.032183527 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029414435 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094160847 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.044579983 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056618275 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060045378 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.040592982 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028060338 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085297921 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.02253493 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085842267 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.024319072 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034493458 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.035613164 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031479154 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.045506138 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.088311095 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.064189297 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.065611502 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060045524 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057927313 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115385899 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113103078 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.034002999 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098826368 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029367085 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.028990491 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.029635205 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06555191 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044089816 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.069793238 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097014854 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044439136 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057151166 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.030604806 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10026939 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.054961886 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.058972398 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.040924555 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.032884965 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100122314 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033126566 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.034300953 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.044212004 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.06602093 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.026389541 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.059768474 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.038952924 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033937955 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124582562 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.666958846 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.046425046 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.030524528 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.052911412 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103932664 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095237967 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0542887 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067291111 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.077887615 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.200851229 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.048216081 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060221226 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.143312425 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027210791 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.046654858 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.055813235 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050357659 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053893207 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.051032365 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.040092841 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.044874944 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.039769219 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.03212979 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.05937541 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040670446 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.049149138 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.062227165 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.035341922 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.03983127 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082099524 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.054867029 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.033953981 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040093767 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.055862247 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040087109 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055797584 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.022392913 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.065086597 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.043170752 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069800258 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.05245533 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.061164894 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081734783 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046982497 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090276589 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.060546446 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.076060443 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.040859526 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.031494129 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080391977 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.042113284 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031079167 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100047808 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.049339571 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.057492734 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058328363 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.050549823 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06786156 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.072584026 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066772482 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.051360115 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032464917 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055506117 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.057638428 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.039624011 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.032064312 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.028147276 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.030039276 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063937904 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041364446 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.037476841 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.070821153 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.044815554 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.059201943 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.060081076 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080769732 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.041858542 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.05768137 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.067201154 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048339297 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067333328 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.057446003 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.089113363 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140975147 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.224054377 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082496695 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086152393 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.029530778 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.028228004 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.022050693 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.067871929 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.032534292 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.042056182 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.034422154 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085225848 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.035506441 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063516031 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.193568743 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.033562071 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.046354444 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048164069 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.022724482 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.03553509 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058983706 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.039792789 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032552354 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070027599 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.035462181 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.079648754 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06238176 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051128682 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.046895923 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033373145 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065349625 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.055925893 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.081608534 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.04747608 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.028039721 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.075210424 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.056650433 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092423668 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.026534619 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034120953 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084460636 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057433151 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.086226187 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033566023 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106134144 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099382378 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.054794992 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090555343 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.024739951 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.041191644 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044032282 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.080391046 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038728978 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067309502 seconds)
  done (took 39.202002713 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.145338588 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.13763938 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.076015431 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.086657227 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.243356372 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.251839784 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.104755984 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.079693965 seconds)
  done (took 2.109313313 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.027585653 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.036626905 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.034355011 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.161185149 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.072541968 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.020683814 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.025245383 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.034966691 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.024014822 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.020066705 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.058577742 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.020366178 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.024217346 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.42699592 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.01969679 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.025394493 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.024329925 seconds)
  done (took 2.058906579 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.30174412 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.819726427 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.303934926 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.660810811 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.09426623 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.47532274 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.028651831 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.034146034 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.545919376 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.154795046 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.086701408 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.173840307 seconds)
  done (took 15.639471172 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.031000273 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.030185125 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.029768382 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.026868326 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.026674899 seconds)
  done (took 1.101814349 seconds)
done (took 70.814070886 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.039965577 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.12038773 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.020125365 seconds)
  done (took 1.132795141 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.036965074 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.033291502 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.032770356 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.033315615 seconds)
  done (took 1.093086649 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.02983976 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.029542334 seconds)
  done (took 1.014382061 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.179593983 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.124906999 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.042421412 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.0384773 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.033659243 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.033698575 seconds)
  done (took 1.06859126 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.026378984 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.024257888 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.02424162 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.024545609 seconds)
  done (took 1.055166409 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.025907087 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.01908128 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.021704043 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.023121021 seconds)
  done (took 1.046290204 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.04001284 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.039143782 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.067439328 seconds)
  done (took 1.102667948 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.037719951 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.037752407 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.031308107 seconds)
  done (took 1.067357846 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.063903574 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.049202102 seconds)
  done (took 1.070399636 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.034958203 seconds)
  done (took 0.993932652 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.045968555 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.050198547 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.092162804 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.058183261 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.092911985 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.078636952 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.029072664 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.0297314 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.025716348 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.024818349 seconds)
  done (took 1.481999865 seconds)
done (took 13.466460247 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.038882556 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.149154876 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.270084591 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.039166969 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.778581333 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.266707401 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.674180558 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.042424275 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.051478401 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.0211044 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.037068609 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.757320456 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.678991018 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.097256679 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.665217015 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.088280745 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.514617663 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.021464187 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.020493357 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021150149 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.659721142 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.020717432 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021011681 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.021520531 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.512668841 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.284894963 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.021860305 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.093235015 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.020707307 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.024605873 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.269220118 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.021962102 seconds)
  done (took 12.155450626 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.030094453 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.078999589 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.025870134 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.03662129 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.023097148 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.023154356 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.024934304 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.021960529 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.062560227 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021325327 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.039840407 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.020730641 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.025635845 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.022242037 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.040989712 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.021170117 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.023241349 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.021901711 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021154606 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021935341 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.039730059 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.020960533 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021595155 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.021697953 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.02145595 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.034703408 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022276772 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021134055 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.02129863 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.024969971 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.026009079 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.02268288 seconds)
  done (took 1.874100537 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.081607689 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.081806549 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.026530572 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.061169546 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.068167557 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.02369142 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.102125862 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.043045874 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.06579799 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021560252 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.037909743 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.021218613 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.056582573 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.022806796 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.041763328 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.021536222 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.02373386 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.02185464 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021204744 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021870376 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.040255208 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021101514 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021730042 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.021930639 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.02187578 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.036850831 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022473014 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021414959 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021386879 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025170127 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.027033752 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.02257851 seconds)
  done (took 2.138497704 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.024802107 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.02475831 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.030620454 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.033553793 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.019828942 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.02187059 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.02287496 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.019785421 seconds)
  done (took 1.168140293 seconds)
done (took 18.303149018 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.035093086 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.021713266 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.024514355 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.041197264 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.027670756 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.022768281 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.01846114 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.028145315 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.024874048 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.024953799 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.026287454 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.019860074 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.023503864 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.018385475 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.02515241 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.019381358 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.025155485 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.023436308 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.022959428 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.025256743 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.02181283 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.024991676 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.027947851 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.023023911 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.023061 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.022944761 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.028156539 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.025249932 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.019888079 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.022533212 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.022771505 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.022560008 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.022218153 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.024845424 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.019473924 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.019480945 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.023890157 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.021252275 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.025337639 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.028100852 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.021721547 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.028136686 seconds)
  done (took 1.970938666 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.02939723 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.033045511 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.024910856 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.031498795 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.028197114 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.031225121 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.028822742 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.02811682 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.026786198 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.027919435 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.022438944 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.026959828 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.029222641 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.020294834 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.026941067 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.023199595 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.028694282 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.02134248 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.026882604 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.027047936 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.028863243 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.02039557 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.027818848 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.02832104 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.022875372 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.028611333 seconds)
  done (took 1.669091108 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.029698996 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.042655611 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.045413979 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.098133748 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.062469734 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.28501401 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.03654464 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.046651508 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.053906823 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.020900659 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.042262488 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.046884549 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.048872258 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.027524364 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.059629611 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.039047713 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.033430623 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.022472747 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.027233317 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.054971888 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.043552202 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.039572323 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.053619168 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.040715139 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.020048948 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.030131088 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.02802959 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.036921342 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.028004335 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.032657308 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.024744807 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.024275369 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.021681406 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.032149669 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.024651097 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.018913531 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.043140094 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.033028584 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.035381864 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.059375976 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.03063086 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.022219356 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.04743891 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.085049083 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.020432843 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.023198002 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.024926133 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.032888042 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.022209248 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.05100254 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.035641666 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.020500759 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.039434994 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.022131922 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.022098405 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.036067766 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.022358299 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.022711433 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.032185258 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.026698486 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.041800741 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.025965102 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.041029917 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.020531395 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.031886316 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.022313164 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.022479975 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.019565124 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.054808795 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.028260127 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.069829186 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.022003755 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.019030713 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.032806098 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.031978726 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.027938689 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.02058235 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.039462576 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.033062697 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.0246561 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.03155801 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.023621434 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.023968123 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.056896233 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.01980278 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.01894638 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.018940664 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.023060789 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.024035735 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.021549231 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.033121646 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.02032611 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.024043703 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.034946857 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.02077144 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.021451002 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.023097762 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.021974241 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.020287302 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.030560221 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.024546786 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.022462282 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.033230772 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.021803873 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.02397871 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.035583723 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.029751295 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.020225117 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.021851615 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.023032085 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.022391213 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.02528864 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.024205734 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.022675575 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.027955302 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.028326095 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.026873591 seconds)
  done (took 4.981607933 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.115142489 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.104994678 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.02146671 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.099060112 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.028663512 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.024393993 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.101190532 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.100764545 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.021259115 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.0222585 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.020518114 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.047781994 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.04281606 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.053663113 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.034204903 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.023124412 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.046345141 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.052680394 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.104535928 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.097903318 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.043981721 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.028855044 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.023463964 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.02251728 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.022639017 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.030490352 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.036898236 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.029339061 seconds)
  done (took 2.388508438 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.028897435 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.064895216 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.024562757 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.04507088 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.037932291 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.021314111 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.023043226 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.022185358 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.037867005 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.026429707 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.021117658 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.025224886 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.024469106 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.023390374 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.021984673 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.027578594 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.027518187 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.028718916 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.024815895 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.025656964 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.031610483 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.045089434 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.025205058 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.021233752 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.024483109 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.021249483 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.026363078 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.02933249 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.021031506 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.0210701 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.018419789 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.025592182 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.035489942 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.022224368 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.021046985 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.021792713 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.021417437 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.021423365 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.02157193 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.019435034 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.019315859 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.026363096 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.020002894 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.025846507 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.035344867 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.023350149 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.022334438 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.023735652 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.0237148 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.018302211 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.024790443 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.02432438 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.023843754 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.029526763 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.024976634 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.023707941 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.022669761 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.033411755 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.026502768 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.020650753 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.02027566 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.019766461 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.022872893 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.027524334 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.037899662 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.022844915 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.019698391 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.021433853 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.022809696 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.035336263 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.020656913 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.026795655 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.018382363 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.021398483 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.023622325 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.024258572 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.022755487 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.019764495 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.021111405 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.021437648 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.021359156 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.021080143 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.020671428 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.023961672 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.019175198 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.019791987 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.021861441 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.022421669 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.026419485 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.020170164 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.023892012 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.022637079 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.023717968 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.023911113 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.026381843 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.024189503 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.041067051 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.028791779 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.021852058 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.019248344 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.035880261 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.023088081 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.020582732 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.02312428 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.025775305 seconds)
  done (took 3.625451466 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.045052151 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.023388265 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.041064794 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.047141089 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.031046179 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.027086529 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.035073481 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.022507845 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.036925558 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.020687464 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.030493931 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.019859466 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.034104573 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.029875323 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.02306824 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.031112393 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.02408296 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.041459002 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.03531586 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.020238284 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.029907351 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.032937616 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.033218521 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.038905681 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.038553787 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.039451146 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.033061456 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.024189488 seconds)
  done (took 1.876753007 seconds)
done (took 17.475510817 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.002726371 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.232437376 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 5.987813884 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.470917328 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.062617483 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.015956852 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.186202539 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 5.964794736 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.31849883 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.083385287 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.748477127 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 4.798077554 seconds)
done (took 57.916067058 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.05429045 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.139948783 seconds)
    (2/2) benchmarking "String"...
    done (took 1.227437159 seconds)
  done (took 3.356755442 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.418868134 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.980716221 seconds)
    (3/3) benchmarking "different"...
    done (took 1.015530534 seconds)
  done (took 4.378842655 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.336703263 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.96268346 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.344633001 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 5.963153946 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 5.977864299 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.913499225 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.183735825 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.65268362 seconds)
  done (took 26.971105279 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.009268043 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.236512633 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.315156982 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.438167923 seconds)
  done (took 17.053161307 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.426219447 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.397122665 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.397609387 seconds)
    (4/4) benchmarking "different"...
    done (took 1.696995518 seconds)
  done (took 7.019040192 seconds)
done (took 68.146295766 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 5.963535116 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.169208171 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 5.976271891 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.161335304 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 5.984545306 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.03353494 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 5.978983098 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 5.977793303 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 5.973241249 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 5.976756604 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 5.823516158 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 5.985414603 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 5.968170065 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.026763901 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 5.977600545 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 5.990390769 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.163067516 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 5.978408823 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.01205949 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 6.780917588 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.290526502 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 5.976627003 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 5.979921077 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.04999078 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.250276704 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.00491258 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.321084676 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 5.974730112 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.565660293 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 5.981499693 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 5.977738701 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 5.973431579 seconds)
  done (took 177.212086408 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 5.963181186 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.727887637 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.746480383 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 5.992555579 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.310643526 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.327503387 seconds)
    (7/36) benchmarking "scal!"...
    done (took 1.771175367 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.330229346 seconds)
    (9/36) benchmarking "syr!"...
    done (took 5.974816015 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.001771975 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.00970184 seconds)
    (12/36) benchmarking "her!"...
    done (took 5.965440327 seconds)
    (13/36) benchmarking "trsv"...
    done (took 2.994696932 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.65081645 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.03176499 seconds)
    (16/36) benchmarking "herk!"...
    done (took 5.993861466 seconds)
    (17/36) benchmarking "trmv"...
    done (took 2.857614133 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.788146383 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.04371854 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 1.853813277 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 5.964577479 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.483153942 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.44577617 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.781023426 seconds)
    (25/36) benchmarking "symm"...
    done (took 5.991552047 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.036648249 seconds)
    (27/36) benchmarking "syrk"...
    done (took 5.982679911 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.018508965 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.33233822 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 2.803868497 seconds)
    (31/36) benchmarking "gemm"...
    done (took 5.989330941 seconds)
    (32/36) benchmarking "symm!"...
    done (took 5.996243244 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.161667807 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.216501608 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 5.973909696 seconds)
    (36/36) benchmarking "trmm"...
    done (took 5.97762303 seconds)
  done (took 148.465747817 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.242725022 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.971901065 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.008199161 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.081599992 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.881094403 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 3.75174414 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.973622175 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.962971825 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.963077368 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.969534394 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.964448714 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.029317224 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.97327577 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.227438333 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.999994124 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.964950629 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.963457131 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.215793182 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.98110797 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.963337579 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.963263993 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.065078774 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.314883768 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.0737749 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.973086407 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.972589885 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.071047569 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.979747736 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.964909088 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.962907691 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.07121029 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.973411713 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.089071467 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.081534016 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.978739577 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.020011556 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.980505967 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.115415698 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.975123908 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.963121382 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.964808519 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.008433742 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.972234678 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.841892813 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.075525418 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.976690086 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.982089773 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.429714713 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.552932572 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.975801849 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.963450723 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.962528408 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.966080631 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.964085084 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.310869975 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.977578985 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.99682483 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.049616286 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.977329373 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.963433181 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.96318188 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.962507905 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.963572591 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.969590257 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.000454791 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.560938506 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.668523324 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.324563815 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.65745159 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.973344901 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.963495902 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.96256631 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.314426033 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.034484129 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.965007601 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.963162107 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.129374577 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.973199802 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.96315689 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 2.815969043 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 2.81840687 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.973847965 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.070948094 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.973435537 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.963508269 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.423328645 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.24532261 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.981607643 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.982138691 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.020739138 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.966579416 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.962797181 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.970151072 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 2.818055298 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.974608918 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.975086188 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.195927157 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.973768907 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.962744506 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.440389481 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.315154882 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.973634827 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.042540254 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.352109252 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.853467366 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.973908098 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.963231324 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.980756523 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.963790038 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.974833774 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.975918865 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.964426072 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.963495429 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.967627691 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.962824217 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.962473479 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.96281848 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.981341044 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.963880249 seconds)
  done (took 309.269834028 seconds)
done (took 637.297544714 seconds)
(4/20) benchmarking "parallel"...
done (took 0.963865472 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.376567828 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.113558064 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.085073812 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.761290732 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.231375252 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.112379641 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.254645563 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.470104249 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.281846025 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.103601368 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.752977539 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.132436312 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.401842086 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.353101834 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.127335124 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.400435757 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.145283343 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.6036725 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.778460664 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.133563966 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.172103565 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.148169632 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.089315477 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.748231461 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.145440721 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.191816546 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.354221529 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.74040535 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.221780537 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.715086534 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.447300878 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.426885196 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.242623146 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.127816024 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.904747649 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.192632507 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.169502774 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.819809042 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.141700511 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.557399492 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.783704668 seconds)
  done (took 67.924068217 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.345867479 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.165612059 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.28673823 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.283207504 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.040354145 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.280488534 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.371694188 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.163714445 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.174216952 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.294359203 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.303173539 seconds)
  done (took 16.726732068 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.240370609 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.165325412 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.293258571 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.303097477 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.390676496 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.27933908 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.340529251 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.166384675 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.18727658 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.293648758 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.314577398 seconds)
  done (took 15.966075567 seconds)
done (took 101.580749409 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.518171248 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.045513687 seconds)
  done (took 3.526537975 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.988081879 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.984465389 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.98185688 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.981599606 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.981482485 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.981507031 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.011079413 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.985094672 seconds)
  done (took 8.858760231 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.982063424 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.981683412 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.982273318 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.981474576 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.981628313 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.981182675 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.981488041 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.98119427 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.981101513 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.981686608 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.981913896 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.981134124 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.982097481 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.981671297 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.981660002 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.981471157 seconds)
  done (took 16.669885691 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.981496077 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.982448023 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.981500493 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.981528355 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.981958933 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.981618439 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.981208178 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.990415108 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.982236312 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.98204035 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.98170292 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.982133231 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.9821431 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.981390229 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.98205155 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.98179628 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.983885839 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.981528373 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.981861985 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.982144229 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.981841529 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.981813516 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.982338084 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.985062384 seconds)
  done (took 24.541755882 seconds)
done (took 54.589413482 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.597723857 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.045266747 seconds)
  done (took 6.605921334 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.987319355 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.981791224 seconds)
  done (took 3.05091287 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.9819357 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.981434517 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.981803482 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.982381075 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.981039336 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.981546844 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.981581466 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.98159226 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.981366913 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.981565891 seconds)
  done (took 10.779542145 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.982045589 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.981454667 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.983200187 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.981286604 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.981936139 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.982805265 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.98158515 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.982167107 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.981640621 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.982897188 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.981266715 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.17244293 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.981871772 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.208207731 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.981622671 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.982649347 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.982691904 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.983182239 seconds)
  done (took 19.058433126 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.981570352 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.982052578 seconds)
  done (took 2.927477683 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.983035142 seconds)
    (2/7) benchmarking "second"...
    done (took 0.982363685 seconds)
    (3/7) benchmarking "month"...
    done (took 0.983197045 seconds)
    (4/7) benchmarking "year"...
    done (took 0.983142356 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.982524672 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.982542831 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.983417476 seconds)
  done (took 7.843713384 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.638934169 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.134265136 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.18687557 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.669855893 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.951895034 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.1160546 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.952499125 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.113341618 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.895988528 seconds)
  done (took 16.623272467 seconds)
done (took 67.853478911 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.690160195 seconds)
  (2/8) benchmarking "printfd"...
  done (took 5.968258992 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.698967827 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.092017178 seconds)
  (5/8) benchmarking "pisum"...
  done (took 5.994605218 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.341391139 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 5.990892302 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.579575019 seconds)
done (took 36.351732605 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.004168058 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 5.964000865 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.012911764 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.012894553 seconds)
  done (took 18.953781664 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 5.96345599 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.633373947 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.016982608 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.11134345 seconds)
  done (took 18.800675561 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.504159932 seconds)
    (2/2) benchmarking "read"...
    done (took 1.410299072 seconds)
  done (took 3.897095874 seconds)
done (took 48.62219226 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.981657684 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.981899001 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.981805565 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.981600275 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.982071373 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.981887516 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.982170389 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.981868909 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.981240814 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.981882647 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.982326573 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.981439427 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.98210803 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.981900763 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.981943833 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.981762126 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.981810448 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.982173085 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.982023357 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.982205949 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.981673397 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.982108589 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.982300194 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.98243891 seconds)
  done (took 24.530959697 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.05673377 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.042636469 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.057210638 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.048168178 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.082667434 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.055329064 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.05396178 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.02391579 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.057338698 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.035918314 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.020360999 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.077179709 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.01901781 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.08008358 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.018616626 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.080398013 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.057346259 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.023726633 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.019020354 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.083737084 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.048078024 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.023963526 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.07763826 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.015972078 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.077829231 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.020772473 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.03617946 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.042185368 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.015308909 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.07649736 seconds)
  done (took 32.391834513 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.016449904 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.98253295 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.981590411 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.062571317 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.982063245 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.982055716 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.982303082 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.982154268 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.981916042 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.981978566 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.982609491 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.982358044 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.981900614 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.982078094 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.982008297 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.981942727 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.012679529 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.16160974 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.981710616 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.982120355 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.026808581 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.982179751 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.982052805 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.98212833 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.982494856 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.982505239 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.981850792 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.982637076 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.98269565 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.982358837 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.982261728 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.024760628 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.014958667 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.982533331 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.104396459 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.042789118 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.981939269 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.013354988 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.982088947 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.982281687 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.982536627 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.982462553 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.982086586 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.981694514 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.038888147 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.982087235 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.982146706 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.982671207 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.982022376 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.982480525 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.982561812 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.983079655 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.997425262 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.982401979 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.982292666 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.982111153 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.982220361 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.982319922 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.982239863 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.98179893 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.982118498 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.051306768 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.982481707 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.982468293 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.35975098 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.982195572 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.045125997 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.982571346 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.982119297 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.193808914 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.982284327 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.194456835 seconds)
  done (took 73.349730817 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.981819068 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.981801507 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.063185516 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.062837631 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.982654675 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.981904501 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.981498369 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.981848287 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.646130633 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.982107352 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.982400593 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.982265022 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.645529197 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.982277415 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.982005094 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.062848982 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.981123512 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.982091076 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.982317058 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.982146605 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.981825039 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.983165921 seconds)
  done (took 24.140170159 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.019037622 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.996964075 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.024061143 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.997493691 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.997196488 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.997319249 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.018483986 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.997219835 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.024048047 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.026609401 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.029142723 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.024101406 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.997354588 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.024816057 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.023888851 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.073472163 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.023897949 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.074698147 seconds)
  done (took 19.334186943 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.173497795 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.142515763 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.061195853 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.021477958 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.212903415 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.195782854 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.083129813 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.170900709 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.022688564 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.14223626 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.171472393 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.023933691 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.195889903 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.024972943 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.023913531 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.21342404 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.061715205 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.023867387 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.095354048 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.083387389 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.173351216 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.095316238 seconds)
  done (took 25.377850607 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.018292244 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.027180721 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.056676648 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.056735204 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.982704651 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.982113154 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.037983536 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.019346249 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.997109217 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.018634247 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.018598781 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.982191327 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.068997101 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.037385769 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.068018438 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.017999181 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.027655317 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.036481915 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.022493241 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.982249187 seconds)
  done (took 21.423880536 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.982885844 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.982690115 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.982740277 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.982849293 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.982788923 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.982835467 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.982526962 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.982957017 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.982849857 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.221097229 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.983103388 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.982453133 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.982952181 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.983133134 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.983466094 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.983342036 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.982952023 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.982900279 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.983213626 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.983053955 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.220982607 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.982701398 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.982592393 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.982851314 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.98287367 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.983390528 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.9831885 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.982903309 seconds)
  done (took 28.963355984 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.045660026 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.022714866 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.027626778 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.101070938 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.101150315 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.018773134 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.101162549 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.101378182 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.015716565 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.021684863 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.068259322 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.021757616 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.022477772 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.016021379 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.015953111 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.068017141 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.015805485 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.100730632 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.059739456 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.018455817 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.068658566 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.015567488 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.068558489 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.019559562 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.018560246 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.068654436 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.057599791 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.143634184 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.041300748 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.021468827 seconds)
  done (took 32.452785466 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.005479678 seconds)
    (2/2) benchmarking "in"...
    done (took 1.005431134 seconds)
  done (took 2.975198009 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.983134625 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.079149855 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.982373541 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.174607213 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.136043449 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.157447156 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.144648701 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.069226413 seconds)
  done (took 9.691224557 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.983216761 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.401964689 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.0074659 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.982363206 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.982784238 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.453367244 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.933693855 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.895979564 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.769846349 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.895990368 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.088957493 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.631951937 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.014296291 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.298293288 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.102204894 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.807582311 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.214759888 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.503579624 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.025213037 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.112752164 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.700040465 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.091755542 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.984607403 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.983199399 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.983298351 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.875656983 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.786081425 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.401160083 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.125644234 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.113557614 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.750637437 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.071043294 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.983578437 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.234668568 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.105018891 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.983765155 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.151660103 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.095664087 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.983179964 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.982954772 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.728278381 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.813873433 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.131455429 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.221607991 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.07489828 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.98342351 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.983128964 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.982831714 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.241089661 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.611533362 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.016390106 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.964230545 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.125958524 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.983803475 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.685786703 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.997923553 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.983075057 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.887431268 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.480698654 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.24857613 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.333016912 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.175614306 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.985422838 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.117406875 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.983892533 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.158731123 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.860479099 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.769714042 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.752246321 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.101326978 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.493762351 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.004811493 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.984798024 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.982705744 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.945970862 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.294938164 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.983762553 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.98360728 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.983444769 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.983200902 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.223717066 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.107056736 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.81689581 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.126435916 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.150773775 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.48838335 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.117022038 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.983580948 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.644848786 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.830937226 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.016131285 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.599680093 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.203078464 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.125301955 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.964501377 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.241158997 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.021350061 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.98355659 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.837768255 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.595942154 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.998204887 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.983604452 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.269372825 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.076858302 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.986949569 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.983887966 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.668417884 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.116734944 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.104723227 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.028585317 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.98352608 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.983443942 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.566320725 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.01940157 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.984737563 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.425994832 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.020687235 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.506387083 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.246169557 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.192721379 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.345717981 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 4.941053933 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.242440587 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.862156242 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.986097742 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.505337917 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.831098482 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.625195232 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.244131517 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.114267344 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.850716745 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.057496609 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.983813083 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.109594995 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.068662532 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.984327339 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.983663603 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.983571962 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.983652953 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.98344568 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.116747596 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.361706008 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.814194333 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.998479664 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.229985481 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.109643565 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.839350173 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.217025 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.676122565 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.126626318 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.984344741 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.706952387 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.236795152 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.692071046 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.118496197 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.984367076 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.983923744 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.802604853 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.979669564 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.088246971 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.984359165 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.593517273 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.020379023 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.984211947 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.983818649 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.444086424 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.125900937 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.984927509 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.087519299 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.771250709 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 4.86882207 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.998716508 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.304957581 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.105934381 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.984806767 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.983529944 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.983671275 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.782585561 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.619608329 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.186473121 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.574890176 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.795349053 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.085307962 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.148453624 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.083499092 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.249919858 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.224531497 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.128482016 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.984981526 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.984712889 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.984128255 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.463677775 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.902710776 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.016375438 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.842885477 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.999989365 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.886957037 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.008603485 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.7764828 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.002263535 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.698067459 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 3.929153456 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.092992821 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.984479844 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.984233418 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.142916716 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.169872359 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.12906745 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.545270753 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.998576431 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.984093618 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.645564297 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.118801996 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.652530365 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.097096242 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.825282539 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.060009302 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.117488988 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.121322154 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.618318724 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.123554228 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.984461348 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.814530535 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.998938233 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.984525639 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.021874573 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.680759741 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.790951939 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.716032724 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.609616368 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.936035938 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.538165897 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.235674673 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.128534471 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 3.775186356 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.092001189 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.195286364 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.095485267 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.478419291 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.008278682 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.75764789 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.002468313 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.736884391 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.9993866 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.992507917 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.114414898 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.455267711 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.108443034 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.985274771 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.168807994 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.087663395 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.64420795 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.117736847 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.109174189 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.306808028 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 3.851937116 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.092012748 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.220323359 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.095956717 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.913554259 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.951191675 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.336461023 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 3.868989221 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.983560777 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.010438144 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.747523566 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.169114984 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.215004059 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.125375762 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.985255274 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.984877688 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.137389518 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.078216405 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.984928674 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.320805669 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.93664232 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.022807204 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.010791045 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.984388609 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.98453028 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.219300881 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.121173473 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.289887445 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.480575755 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.567405976 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.78838982 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.118425373 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.60831063 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.126450665 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.642085103 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.019305353 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.985218864 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.646850689 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.118572726 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.272624379 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.136161636 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.107192262 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.629869255 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.120224745 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.281842256 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.117233204 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.113966693 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.755088501 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.534791341 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.239614822 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.364839833 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.02773857 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.515443738 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.040607153 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.540438803 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.038149867 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.655385868 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 3.999031196 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.045139031 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.985421075 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.986033327 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.475682866 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.013657282 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.988431298 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.770572997 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.697207683 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.892647569 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.710510818 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.020823009 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.985051014 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.985649452 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.984649919 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.887034963 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 3.974020325 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.346543972 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.129630612 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.985572385 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.984895903 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.971839605 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.325070062 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.793115066 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.859504005 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.938799017 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.126974906 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.985670096 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.985213945 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.984739996 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.98500393 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.986587888 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.984781885 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.470149839 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.000356081 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.579940468 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.021530321 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.986292857 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.194206454 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.053973394 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.985616022 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.175008276 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.076214823 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.104169244 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.056598514 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.985733667 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.383482645 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.128323029 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.951799961 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.204065156 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.282643361 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.23044045 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.49438946 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.043330056 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.413398382 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.268724184 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.819995738 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.988979674 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.87892188 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.011513041 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.776180747 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.961051713 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.358183124 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.585454946 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.034850148 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.263038107 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.898432721 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.352172549 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.156047285 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.05769644 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.986400506 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.985482356 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.017824572 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.228664469 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.032433115 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.255951855 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.197081068 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.964669852 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.212780509 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.088073702 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.182690483 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.021593586 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.001413856 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.98571966 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.985775222 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.419874707 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.857995453 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.083755767 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.987117672 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.884972869 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.77774173 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.902348179 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.612924029 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 4.933031627 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.131030344 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.987369722 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.182723911 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.043119402 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 4.773305925 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.01856234 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.794221242 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.338948537 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.070781746 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.228879919 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.430447677 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.774420458 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.369720592 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.109724205 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.986877463 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.361705153 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.045928668 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.143167012 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.910215801 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.315505964 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.509916545 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.470852257 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.318609497 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.14503436 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.925356495 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.482014517 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.059990253 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.015838828 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.867699156 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.145658403 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.320045924 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.979580057 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.267187949 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.170406489 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.640389944 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.638431392 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.154440733 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.637245424 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.146724053 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.021956025 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.852471091 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.936606716 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.122253838 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.143934246 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.996238766 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.010673637 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.660267696 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.596728159 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.189252721 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.114016512 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.025422872 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.810865734 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.710118975 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.082259818 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.063241271 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.041425483 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.445667223 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.091274339 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.036872001 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.446787103 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.635316754 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.178077007 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.501383755 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.189632227 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.134752445 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.246449646 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.398973499 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.21425055 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.079880845 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.015331585 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.012471515 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.030679121 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.586126975 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.03278543 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.023667167 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.604946113 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.169897111 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.779691514 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.932847505 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.236347391 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.120463877 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.453524731 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.139431475 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.452793826 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 3.926065327 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.049899455 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.267302605 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.148645673 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.120471051 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.79518585 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.155461825 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.049438775 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.98626446 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.348128024 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.391233864 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.394637605 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.281230755 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.124776067 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.639554915 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.106746389 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.800275668 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.026563896 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.008050764 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.491416237 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.190303755 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.443139251 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.180880583 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.506853245 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.143711424 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.307036226 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.298669821 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.085018073 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.997860167 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.987574178 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.985405969 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.015923103 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.483795366 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 4.944445724 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.507243988 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.12774311 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.820965 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.578628987 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 4.881333135 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.158643537 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.342703731 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.270420533 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.073837981 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.987417937 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.392000479 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.081697715 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.164945008 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.107761782 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.792332159 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.082296036 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.020291152 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.557807421 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.012244371 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.002719699 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.021664029 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.904107516 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.722006072 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.121638753 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.208411583 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.09714299 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.013865347 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.629534189 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.267681711 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.060506002 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.047247205 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.012304282 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.872860639 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.113327541 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.038278894 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.397563663 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.187334573 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.349853507 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.840877225 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.469655708 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.119361394 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.04177189 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.015402221 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.725275227 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.596978578 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.03664198 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.309457818 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.116853919 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.481237445 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.074715332 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.497173279 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.566684942 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.042002256 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.168044303 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.047870987 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.10516718 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 4.94417759 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.900558793 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.727631646 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.320623053 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.09961879 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.799964855 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.999238123 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.051999547 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.113650393 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.063086976 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.987284706 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.98658785 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.986396898 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.42547279 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.033444824 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.990752859 seconds)
  done (took 1362.862927606 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.253675126 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.986920451 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.987108772 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.987388849 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.987162397 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.986476075 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.986747644 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.987042368 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.98687297 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.986352367 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.986476605 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.986481376 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.986147726 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.260334772 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.986501461 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.986652909 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.986870842 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.986746207 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.986915493 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.986701165 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.986832721 seconds)
  done (took 22.231826335 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.98636102 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.986909479 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.986552511 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.986870269 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.986652244 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.986695476 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.987723477 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.987068214 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.986245663 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.98673812 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.985961222 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.9868089 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.98720427 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.986866155 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.986228021 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.986129768 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.986535119 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.986385913 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.986247354 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.986908694 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.986343856 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.986874113 seconds)
  done (took 22.675244309 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.986069529 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.986538616 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.700398698 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.116513484 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.987171495 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.986694744 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.987456632 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.188429981 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.018742679 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.868194424 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.288545048 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.083345873 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.990103172 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.17040719 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.085164264 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.987613468 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.107256252 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.986752457 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.986759614 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.98834751 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.986671535 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.216579075 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.130538478 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.987584092 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.823769399 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.13280253 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.987740515 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.987608448 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.987610034 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.955953547 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.009434594 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.986789601 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.845128132 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.73588111 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.324368824 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.871165998 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.020094354 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.98725274 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.98810111 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.98715619 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.156027867 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.821627598 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.991055173 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.987375389 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.286838966 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.109998384 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.987409199 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.279078289 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.081875022 seconds)
  done (took 82.124205102 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.986518721 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.115404957 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.044415261 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.986722489 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.111322336 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.986752974 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.041060281 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.986898709 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.98662442 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.987068903 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.121580359 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.147618134 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.986920108 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.986460695 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.059844463 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.986587549 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.987054622 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.986814648 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.986625387 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.986938778 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.986538591 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.043924978 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.103781543 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.149351544 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.986901548 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.987235038 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.987439582 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.986468319 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.145017494 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.986911008 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.987490198 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.987106824 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.118274705 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.064606248 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.986806609 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.987067445 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.117040554 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.98741981 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.987171884 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.987177196 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.987476062 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.986780926 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.037905639 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.122000219 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.987645462 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.103267926 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.987446672 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.987403437 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.144923034 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.986831636 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.987273215 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.153261764 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.987037011 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.986618998 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.986688815 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.108602846 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.987166281 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.987059921 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.987031344 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.139452037 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.987575117 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.987023976 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.150361441 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.986846422 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.98696548 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.156474804 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.100359921 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.986773059 seconds)
  done (took 71.001135196 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.987344744 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.123904964 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.162068779 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.163827577 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.124445388 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.109120233 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.1266956 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.123955614 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.124277918 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.127183428 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.125286568 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.084700182 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.093896261 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.082480515 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.129099467 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.108802058 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.110387746 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.109412408 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.12853597 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.127558665 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.109019751 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.162850489 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.124741153 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.163763779 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.343902306 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.094381058 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.12420008 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.127120101 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.166777281 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.123941107 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.341714726 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.12753687 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.125422754 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.166781658 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.340148027 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.120886171 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.98707501 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.123942693 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.127941885 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.124484933 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.094825808 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.165166539 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.120519916 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.094478705 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.111154294 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.12073945 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.16540723 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.340167377 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.081884199 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.126593145 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.12537479 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.165338716 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.121271192 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.108538807 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.165590453 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.085434953 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.162250803 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.165105291 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.128883337 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.162684585 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.163745068 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.086046115 seconds)
  done (took 71.43143217 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.986983757 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.987519308 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.069730629 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.98715354 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.987770635 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.070787808 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.987247527 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.987317781 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.986919516 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.987532309 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.986756356 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.071029518 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.34255098 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.019890773 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.121619656 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.399150038 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.093788919 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.080213283 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.032921664 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.112165714 seconds)
  done (took 24.269174448 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.071725433 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.190228486 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.060344183 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.210213087 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.052947457 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.168818721 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.057446774 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.0477799 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.050868295 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.037372168 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.205379616 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.189994103 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.066690746 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.177486239 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.213675751 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.267887971 seconds)
  done (took 19.081041411 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.049830868 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.050111268 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.023680964 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.989485107 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.00746658 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.00700413 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.011554504 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.029674868 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.051782029 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.51684933 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.058579987 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.036218974 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.039920006 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.040892705 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.040237084 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.03145521 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.042965451 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.041967689 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.044013696 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.062797658 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.627378705 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.031765561 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.012340635 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.019844847 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.026371323 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.595456272 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.023019234 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.019728933 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.026783582 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.009254064 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.029163218 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.514348702 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.030305691 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.039958103 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.026484428 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.02715704 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.023410523 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.028046696 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.021898843 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.040761024 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.020412421 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.028988275 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.023927094 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.02458576 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.040958898 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.023161375 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.024732218 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.496221903 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.025552389 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.021377559 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.001537781 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.014269825 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.024641991 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.527732708 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.053262519 seconds)
  done (took 60.730506546 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.092870596 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.102088842 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.048598765 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.045281779 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.098380231 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.081096733 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.093341325 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.06013277 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.084144599 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.048305358 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.094252628 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.055238314 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.07703233 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.117459869 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.130049646 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.108497901 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.010815829 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.110240836 seconds)
  done (took 20.489731242 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.045369312 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.057601514 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.048977181 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.0479948 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.061030223 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.051409121 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.0289862 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.003906815 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.000773401 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.03580555 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.008460298 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.00713636 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.01460099 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.030661908 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.997110009 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.028535366 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.021371529 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.000591503 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.050778432 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.002368921 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.030620549 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.015230398 seconds)
  done (took 23.627173819 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.060434411 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.049692848 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.016453229 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.034753801 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.998455081 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.049951831 seconds)
  done (took 7.206342744 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.075031972 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.067307659 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.037587983 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.077043508 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.072847667 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.100410686 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.112951908 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.119258437 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.091491414 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.299545135 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.130268396 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.126055223 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.121898358 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.179807127 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.113556831 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.119876718 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.111890861 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.112296114 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.059239462 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.104401806 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.123571639 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.082056961 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.101058479 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.111104535 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.095255274 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.137249366 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.107694259 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.31872693 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.109456208 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.075658454 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.07930493 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.101028489 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.109763438 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.298334028 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.057565634 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.113878563 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.092119886 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.099823218 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.105496786 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.132886794 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.053606635 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.102292312 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.088496625 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.098709694 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.10837374 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.109260804 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.094632549 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.113872137 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.106215347 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.297145263 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.087740682 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.154561066 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.074361089 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.08693696 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.112295245 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.302296617 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.300934636 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.138294851 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.100808151 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.311909635 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.132104367 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.090907696 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.154810584 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.30681566 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.068150133 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.156932457 seconds)
  done (took 75.440266452 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.126216227 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.062757856 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.106133306 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.307476171 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.138006358 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.118119701 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.104254871 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.081442113 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.109218347 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.072744136 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.08685122 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.11728384 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.146183426 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.135542539 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.105162706 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.108427009 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.094029199 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.136070799 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.087353402 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.306125148 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.090096687 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.145855936 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.155955195 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.133199322 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.295405539 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.091589332 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.115808636 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.093527298 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.091698042 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.1153014 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.10095848 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.093991806 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.156935106 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.05579455 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.123615309 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.111998444 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.114414001 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.096906855 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.100041547 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.098366008 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.138721323 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.093837085 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.115786553 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.098498519 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.293039417 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.092803881 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.10886202 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.065253198 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.095511194 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.088948544 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.308624784 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.307999938 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.3038018 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.155749327 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.108685314 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.089340488 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.115813665 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.105515944 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.09017848 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.102954269 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.144487326 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.079296975 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.317265666 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.119347192 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.102186739 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.128253805 seconds)
  done (took 75.70643491 seconds)
done (took 2234.474738673 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.005809196 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.059490057 seconds)
  done (took 13.066051657 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.045104548 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.046988995 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.192001683 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.044722428 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.033308659 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.113159858 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.075856419 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.017185053 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.015061328 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.122241926 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.002064022 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.18261663 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.109245511 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.034359394 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.03760143 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.005292352 seconds)
  done (took 38.09869551 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.012599821 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.559488636 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.958860857 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.78957792 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.175480054 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 1.515227701 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.306105754 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.626511564 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.328839303 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.458550306 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.287353528 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 4.816578939 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 5.778794319 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.060586979 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.464390747 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.480766141 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.531783211 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.633496372 seconds)
  done (took 57.776552583 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.053436036 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.161976036 seconds)
  done (took 8.21021083 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.010361996 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.011102549 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.019550168 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.0148937 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.010181807 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.011719306 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.003346445 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.004001491 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.018552788 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.01129297 seconds)
  done (took 61.114531383 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 5.983932656 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.466632321 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.369491844 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.421114251 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.59302552 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.473806548 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.152071545 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.323271385 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.077683087 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 5.970239929 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 5.194134003 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.447182089 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.810828659 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.24049502 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.617327902 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.228231549 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.705329837 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.343170913 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.317817018 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.380759392 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.216939798 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 5.270913105 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.259108987 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 1.77132059 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 5.978088396 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.556990949 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.264212973 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.138578243 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.074703334 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.113629359 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 5.297475516 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.00324395 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.266428883 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 5.996180962 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.006472877 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.650455777 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.719021185 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.185645928 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.428092357 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.327659591 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.375668161 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.644267135 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.051541165 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.615774363 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.142603498 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.404164907 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 1.935287391 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.19816457 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.074476568 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.104461738 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.3964287 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.155736055 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.115230585 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.109310032 seconds)
  done (took 146.948359765 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 5.970818674 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.379732234 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.130285707 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 5.973927598 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.369397407 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.191385169 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 4.898932142 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.417722591 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 5.985010936 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.199689989 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.15636781 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.114440136 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 5.973231793 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 5.971500747 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 5.977352497 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 5.975408642 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.169952484 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.430426136 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 5.989321599 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 5.974409847 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.199478796 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.227915056 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.117009865 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 5.976500893 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.148932625 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.232374823 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.373572092 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.113078648 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.381755573 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 5.972094113 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.419299658 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 5.987240736 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 5.975031061 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 5.881850785 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.361447577 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.314975969 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.442877207 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 5.979114263 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.740377393 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 5.975471807 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.599381076 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.186918654 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.300935208 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.132293949 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.235269684 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.239071435 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.646131408 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.020517635 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.773580445 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.199540564 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.248733067 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.237534528 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.295834983 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.00621429 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.509849059 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.024508229 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.997700424 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.292172864 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.194229184 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.176990345 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.018671682 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.034015751 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.006383241 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.268499348 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.015737535 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.145280813 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.01844491 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.009732623 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.171097053 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.188945464 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.219711501 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.300431409 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.290670069 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.284896167 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.042198872 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.266351236 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.40164884 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.250815865 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.013535805 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.056504115 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.47295256 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.482830019 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.193816147 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.266588716 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.350742747 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.314704725 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.574645418 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.010493235 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.239325968 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.198764656 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.251158904 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.288448054 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.384617701 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 1.896732507 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.014731436 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.005828061 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.378057093 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.161731695 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.026315586 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.522189262 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.29191024 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.634006734 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.206215263 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.46918871 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.138872203 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.012325621 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.584707931 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.014397653 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.24449672 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.326880217 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.021482122 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.028249475 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.207600927 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 1.772883137 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.023837447 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.068488666 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.42454353 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.045151738 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.182495942 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 5.976095708 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.256389163 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.954035242 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.230864181 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.03032698 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.318166218 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.184675564 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.276950614 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.036574397 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.345218119 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.295341209 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.430586793 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.241688803 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 5.564878433 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 5.984596925 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.326621829 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.992289592 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 5.996455196 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.183545756 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 4.927929979 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.189511077 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 5.983274055 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.262577552 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.190162606 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.366756147 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.019154393 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.263302346 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.244070974 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.418059108 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 5.986863775 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.144904099 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 5.98916328 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.111302768 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.167420437 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 5.97986928 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 5.990812197 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.873889897 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 5.993137396 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.168406482 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.22572832 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.688688113 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.399286816 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.356139076 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.048514028 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.506056508 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.245708819 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.462821223 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.623173226 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.208715241 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 5.752627342 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 5.272425552 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.028669651 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.295445828 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.218220441 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 5.994352378 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 5.981414829 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.713586365 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.112866872 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.977798443 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.151219047 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.222751485 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.432443746 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.195079025 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 5.975825725 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.344501482 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 5.973272307 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.2302024 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.528270632 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.345998381 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.017551049 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.000499263 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.000781688 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.032051166 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.234295606 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.264857903 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.607158297 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.210658608 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.334879648 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.254371017 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.363585808 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.489662039 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.042360557 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.342663283 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 5.995455052 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.446671117 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.006479319 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.2027394 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.282753085 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.01385243 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.263927456 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.383176585 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.094126772 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.427524074 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.048420389 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.011625593 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 5.629904377 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.191360073 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.522412017 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.052604176 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.318189429 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.387803998 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.152314642 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.219999687 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.283332502 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.026147689 seconds)
  done (took 705.667665809 seconds)
done (took 1031.894321595 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.008248769 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.005334339 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.012687257 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.026682775 seconds)
  done (took 25.069118759 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.0575619 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.141864237 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.223011794 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.07175158 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.468437729 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.083207705 seconds)
  done (took 11.064737088 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.006033148 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.012214288 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.010842573 seconds)
  done (took 19.036822162 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.296149188 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.486710229 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.201883942 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.162502756 seconds)
  done (took 6.159119462 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.08829621 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.089422209 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.057260273 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.095938586 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.068555667 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.058231381 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.095319375 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.078639442 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.051670973 seconds)
  done (took 10.737977992 seconds)
  (6/6) benchmarking "26942"...
  done (took 5.516314509 seconds)
done (took 78.594410809 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.306607411 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.341722289 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.035466503 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.346487351 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.12871737 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.374202324 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.094899291 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.034515835 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.412837082 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.470440268 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.553279776 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.204632187 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.455902579 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.42261444 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.26308856 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.019078708 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.029323067 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.112253365 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.771889605 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.217131364 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.574820254 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.218076434 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 5.982614614 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.048066615 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 1.913341573 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.151160151 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.279439592 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 6.769658879 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 2.043773443 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.015339238 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.120205262 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.4722835 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.27183432 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.388561083 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.143562762 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 1.932643084 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.418634264 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.171900207 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.151027725 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.56883903 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.320722135 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.111290522 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 5.986647651 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.172561285 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.36857481 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.059899475 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.048669229 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.175310415 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.588720361 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.175646562 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.525418955 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.024321965 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.620738618 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.134396375 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.139272053 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 5.983283456 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 1.926975341 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.511999047 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.16287632 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.352925415 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.015462507 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.009233248 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.006004984 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.057290921 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.44669141 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 1.331244501 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.458534434 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.101374776 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.570273812 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.036011622 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.040156961 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.039042199 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.740453274 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.138896158 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.035936692 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.158347965 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.330732035 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.137840742 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.007982521 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.101849836 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.243842738 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.015316747 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.153120638 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.433950646 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.167614103 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.369991348 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.522046998 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.379983038 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.385249175 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 6.754245507 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.514505657 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 6.80110001 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 6.128643235 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.033185022 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 7.240688298 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 6.094553451 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 3.30102538 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.503768001 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.123965184 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.498939778 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.019306525 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.005472442 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.559655498 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.292824397 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.898925805 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.065625699 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.200572756 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 5.995994017 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.287336913 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 6.608968932 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 6.106072799 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.589449816 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.005585504 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.076726547 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.474627519 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.003987007 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.378163805 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.451950509 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.107886577 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.034689329 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.322632402 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.015288276 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.114593287 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.555642108 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.383543569 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.23629384 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.020715298 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 3.443660431 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.108981675 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.311450577 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.0683347 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.607983684 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.604459446 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.145857298 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.360096977 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.218359781 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.093232623 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.428241285 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.135226163 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.284691471 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.489119901 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.382206383 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.208251921 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.064901581 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.496351043 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 6.068352242 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.314228602 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.415261824 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.235798158 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.393152598 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.18115135 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.092837399 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.119792772 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.472005205 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.64505481 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.607445694 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.360905499 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.18018967 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.583017399 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.331214501 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.878258747 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.143561215 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.102501214 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.036703706 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.060032295 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.11362503 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.032712075 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.03513822 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.334999895 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.42923873 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.566015798 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.934817991 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 5.920108406 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.380944545 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.181194246 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 1.911922583 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.566789799 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.041449874 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.423978395 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.543338894 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.258969996 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.092152488 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.029402696 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.103348219 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.766809173 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.064791233 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.341038785 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.653010518 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.563089314 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.441443105 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.183125386 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.086758688 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.407016839 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.313879354 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.363363525 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.25676652 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.420064562 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.16732141 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.386987399 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.035809509 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.312366462 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 5.998307907 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 3.128287642 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.248738754 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.494036371 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.361070423 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.258898655 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.186054436 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.369639782 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.013123214 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.276758224 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 6.200490615 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.502724801 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.114599713 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.328808868 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.172026715 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.557189217 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 1.980321535 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.181082079 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.52376338 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.239076992 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.208267537 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.541246068 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.099947028 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.407192911 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.236601692 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.25518963 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.329866315 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.106247295 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.211267083 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.343042737 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.210236952 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.372712436 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 1.878712488 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.504118576 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.614861973 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 1.203478112 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.066114482 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.481753385 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.070436326 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.062224884 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.308148017 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.214833488 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.355988743 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.140941939 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.207447799 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.07095626 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.070552818 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.532900327 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 1.865473201 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.621107105 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.010566247 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.078978637 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.022195718 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.472588629 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.412686537 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.109937929 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.1924995 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.560370067 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.067416384 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.198684202 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.029087463 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.056471847 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 3.021551163 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.154562423 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.267033099 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.566037766 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.026554774 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 3.29509539 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.222308973 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.455792066 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.540521385 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.064075447 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.132202648 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.271897857 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.091136984 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.428747014 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.058255811 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.221519049 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.402234982 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.156583123 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.185795554 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.049325025 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.087913236 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.682913168 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.436005758 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.536481383 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.096695457 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.377596671 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.071970311 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 1.275506955 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.05548368 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.135451846 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.432677216 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.19472606 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.453353702 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.030228575 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.206788584 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.320369716 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.079830302 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.039394826 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.172960033 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 7.627531455 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.411102535 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 1.317463799 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.221408361 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.051329428 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.274284992 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.02675848 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.674937547 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.16676276 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.151050275 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.601418826 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.503004597 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.014399235 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.268890202 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.042713643 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.411750713 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.08933073 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.047031649 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.188607107 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.123865518 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.019404877 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.652248875 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.190691668 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.469701256 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.167517743 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 1.948927995 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 7.087101055 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 1.170185194 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.104212144 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.268754332 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 5.692651288 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.014600649 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.141692737 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.674655785 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.18544444 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.025162366 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.259027408 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.006101112 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.572631491 seconds)
  done (took 843.344533192 seconds)
done (took 844.543504935 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.219694984 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.388688723 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.233161395 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 1.870641837 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.822062722 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.658570159 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.272318851 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.228394485 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.098668122 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.249291888 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 1.936540557 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.819735276 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.123620941 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.173601747 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.108257567 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.10848869 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.236839279 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.281029174 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.190580931 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 1.98582415 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.443229937 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 1.977750659 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.454781531 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.349386143 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.455079315 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.182707348 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.311421926 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.456120733 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.433499929 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.226166611 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.257975383 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.272935933 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.883533146 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.264133145 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.130265524 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.125205382 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 1.896992844 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.132550882 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.300333952 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.118704786 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.406264247 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.14761244 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.743345736 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 1.88432948 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.805134211 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.429333606 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 1.862515716 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.126992873 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.121329302 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.234857261 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.243917043 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.298463935 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.441584089 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.257061339 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 1.939251716 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 1.897406671 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.446534417 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 1.900437148 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.788604946 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.255174064 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.573367814 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.1438928 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.258322068 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.278744132 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.171924478 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.34827814 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.463360823 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.30135836 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.276641546 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.316800355 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.308195644 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.277143666 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.166997444 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.179727956 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.170023634 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.307989181 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.669709093 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.292789835 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.840886732 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.154491837 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 1.993353113 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 1.982795925 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.014372338 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.155643288 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.241994129 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.829016039 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 1.996664018 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 1.99862071 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.171818177 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.274086637 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.003479763 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.294426684 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.50577937 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.27153867 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.24797911 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.301760612 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.015845672 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.263331622 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.216824299 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.274813726 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.831907677 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.245364159 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.054658011 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.266819225 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.225326944 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.377013928 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.32932124 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.542002023 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.271116804 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.213156538 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.453534234 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.179394051 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.291404173 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.214539908 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.155371524 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.837509674 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.374215761 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.957064835 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.236096192 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.733504489 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.336209619 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.19995436 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.424415738 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.354296449 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.240956145 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.15546881 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.165539699 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 1.96445189 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.143697235 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.107248267 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.179508691 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.465725718 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.249855812 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 1.927124573 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.250334651 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.956955786 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.272717992 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.265836111 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.117636557 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 1.894249485 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.116176681 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.161446057 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.315655945 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.393627581 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.258794138 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.334903499 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.124197203 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.310825437 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.234222662 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.213602797 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.282706071 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.138227324 seconds)
done (took 235.835856731 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.364121188 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 3.434250559 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.389432048 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.329443401 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.422350253 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.389976868 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.120919162 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.472617533 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.173664578 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.496209542 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.285154736 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.152667993 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 3.400020539 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.234342072 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.375288082 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.281302375 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.14478512 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.292077734 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.495363498 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.38640554 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.075018104 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.285713031 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.207335334 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.448496949 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.018426052 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.056798351 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.407672258 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.193539994 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.29988351 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.055012656 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.058704828 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.292173418 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.382808093 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 3.183263937 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.466912565 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.034381658 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.397387725 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.149372175 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.401355416 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.401642867 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.398259107 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 3.881810067 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.071561893 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.075901744 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.190398269 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.385490259 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.106405054 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 3.2955477 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.029956416 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.051646121 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.308080018 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.15432444 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.186584786 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.37980597 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.263892071 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 3.196501164 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.515349345 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.503329864 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.392777267 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.324295688 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.35214779 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.460193509 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.457173946 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.210640325 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.033911836 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.344578128 seconds)
  done (took 122.027088458 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.430975704 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.361182497 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.430110128 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.452685891 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.62901213 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.484715671 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.502773465 seconds)
  done (took 13.297755852 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.086601599 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.078876581 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.252735274 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.292435527 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.057361128 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.219305344 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.16103493 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.030946512 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.303647826 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.116071204 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.385301641 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.291056915 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 1.985003137 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.018711056 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.15852793 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.395103077 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.024064321 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.138314585 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.119667803 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.333429791 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.058931597 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.065183901 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.286044709 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.177009587 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.078697029 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.142747972 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.098349609 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.063986026 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.136884286 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.026700908 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.088931769 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.173717455 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.059613458 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.051240231 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.085561353 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.394750212 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.074869201 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.132996164 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.180177141 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 5.998612477 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.040642592 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.101600731 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.204412297 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.056370876 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.05778703 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.237436948 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.040288737 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.065795775 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.057137536 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.045107475 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.250987817 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.050000623 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.064890685 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 1.971539775 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.259711346 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.007213779 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.127171106 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.046788355 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.055350836 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.130043401 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.045148475 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.349962923 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.288731658 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.053352578 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.270066912 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.334002734 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.075221232 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.028071091 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.041617179 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.270823461 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.069568746 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.279355771 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.058785566 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.143110971 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.100002417 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.174383022 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.23540355 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.829277496 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.823393391 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 1.968327057 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.019577467 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.035039562 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.338022369 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 1.995572527 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 1.969323061 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.044682045 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.091111988 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.706151372 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 1.953851702 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.041488354 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.379818094 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.027488239 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.105581529 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.117289273 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.110173644 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.125022079 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.307986793 seconds)
  done (took 135.685269932 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.339352569 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.634427413 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.269926804 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.279513109 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.43671943 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.541327584 seconds)
  done (took 15.498537715 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.338210742 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.866695864 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.091827846 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.07159297 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.152996701 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.04312351 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.044419301 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.206451495 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.216188952 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.047865666 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.034660562 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.080083338 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.038614718 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.208448779 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.043588311 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.044627651 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.032261836 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.090591241 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.062532842 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.136618343 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.201172821 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.139612667 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.116559699 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.935616673 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.129264792 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.054102013 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.034531961 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.068954443 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.072841596 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.399394551 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.241277825 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.065156639 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.885569052 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.385542419 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.810076156 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 1.944902751 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.212349608 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.066087771 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.115897351 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.037107206 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.064367643 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.114815097 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.086837035 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.062549639 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.37165834 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.863987232 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.167353398 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.361897165 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.074433008 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.066994356 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.058061391 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.060399177 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.033331124 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.054215635 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.428557805 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.448192184 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.030613221 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.063849968 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.09279011 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.92703764 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.10958774 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.035526451 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.355204997 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 1.977146877 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 1.998369549 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.05406542 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.923048452 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.17162363 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.105444578 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.062187801 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.057410923 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.051996054 seconds)
  done (took 109.192069719 seconds)
done (took 396.701062129 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.324409971 seconds)
  done (took 7.299367137 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.172705193 seconds)
  done (took 7.294547891 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 5.974252443 seconds)
  done (took 6.96031221 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 5.996412572 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.022886833 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.001176511 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 5.995803688 seconds)
  done (took 25.02811468 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.154342464 seconds)
  done (took 7.132344065 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 5.995141962 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.031504908 seconds)
  done (took 13.114778065 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.113912654 seconds)
  done (took 7.142253793 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.252798592 seconds)
  done (took 7.242061988 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 5.995665313 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 5.985054675 seconds)
  done (took 12.992581732 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 5.974345071 seconds)
  done (took 6.950048804 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.437782499 seconds)
  done (took 8.558046145 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.021250204 seconds)
  done (took 7.048228868 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.046957632 seconds)
  done (took 7.067366023 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.070770189 seconds)
  done (took 7.075907997 seconds)
done (took 131.880205069 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.019988043 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.010616379 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.028088649 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.030762766 seconds)
  done (took 25.137996368 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.350768151 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.35908716 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.329878661 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.403889802 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.302370578 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.289426547 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.362200714 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.357471761 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.311657363 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.407384863 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.356796145 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.508754012 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.408094988 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.340494449 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.333813893 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.418712282 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.506362653 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.357007617 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.32396133 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.323764623 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.481613446 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.490832693 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.821212932 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.811882025 seconds)
  done (took 34.957152657 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.267594702 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.422406599 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.19934656 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.341932047 seconds)
  done (took 6.273100284 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.058822688 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.404423276 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.379000666 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.360899296 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.392869666 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.197523152 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.362773874 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.228456886 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.21640119 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.205236674 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.621083965 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.174582121 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.202418842 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.477919197 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.192438128 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.07018339 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.051915716 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.241217084 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.438011682 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.233559582 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.323129867 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.425548148 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.416279311 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.416788092 seconds)
  done (took 32.094455056 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.88470473 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 1.983291936 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.38886432 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 1.930721985 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.736364763 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 1.822060315 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.304640132 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.548575076 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.290454964 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.248521504 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.786947137 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.341814835 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.181116517 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 1.903542744 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.787529141 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.197136167 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.224405304 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 1.856965973 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.61847719 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.357732425 seconds)
  done (took 37.436236568 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 5.977604967 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 6.020881845 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.236394033 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.175332956 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.027439756 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 5.985051828 seconds)
  done (took 27.450450221 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.003851726 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.157366952 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.350767872 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.306722051 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.178578417 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.153949392 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.628567393 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.245809829 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.795124226 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.810223756 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.611159628 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.491636939 seconds)
  done (took 20.72121387 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.017088828 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.016809054 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.031257255 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.157096461 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 1.809795035 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 1.865523734 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.364339761 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.016688495 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.095514585 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.198350174 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.31345404 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.198657083 seconds)
  done (took 39.087729328 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.258987508 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.177689412 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.343241772 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.798357298 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.547864461 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.113024696 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.443908862 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.517622438 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.771183892 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.843714883 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.539327477 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.054938645 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.534484276 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.979643887 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.993713627 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.335172448 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.827081689 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.035851544 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.459966672 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.086464299 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.957799547 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.152784828 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.996332705 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.556737296 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.343362365 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.990495998 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.302377033 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.302975776 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.028597818 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.211356387 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.994299025 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.520264652 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.268603118 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.301723174 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.514282427 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.073688731 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.098632399 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.070990238 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.5668658 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.279334206 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.128176169 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.147050355 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 5.512982628 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.097797304 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.241732722 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.765498589 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 5.982834444 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.629360729 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.970504796 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.090355523 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.885686582 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.868070706 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.43624437 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.736233714 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.126076733 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.31397708 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.151755368 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.076616207 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.290637824 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.003646367 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.178528013 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.097047407 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.242142355 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.95921235 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.209360044 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.336932205 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.290983208 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.314703008 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.300163704 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.277423693 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.356546168 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.084104382 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.777048197 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.120427143 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.533864374 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.497598981 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.374000301 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.022564134 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.750414939 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.549983508 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.99913432 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.16835643 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.074288026 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.994562046 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.994194464 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.217830158 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.916951018 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.013813937 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.128601999 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.089606114 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.494973572 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.160878964 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.170996641 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.28663398 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.723675289 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.991830626 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.750321953 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.35954564 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.998678577 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.590829627 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.015892498 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.047323011 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.045028337 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.593184413 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.421780764 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.068145236 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.783273256 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.670850865 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.327061215 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.573923449 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.17344903 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.97878257 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.371895123 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.358525072 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.036022937 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.89356418 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.111315991 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.105166118 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.369228008 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.00941606 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.976277381 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.453843501 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.248374193 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.001974988 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.293199973 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.051751618 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.209109 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.051972982 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.85497623 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.334741804 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.303079605 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.586933802 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.380247205 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.146038802 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.035623371 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.156982611 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.498545782 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.141633314 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.40602343 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.504329984 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.663001781 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.629532527 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.052077517 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.838051466 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.506612435 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.295592438 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.328743327 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.655812408 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.205621705 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.129021952 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.0359353 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.179141737 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.003617189 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.554989332 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.026926711 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.989957621 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.816246 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.345599019 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.023510647 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.984570063 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.146160646 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.312494323 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.674416793 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.057380715 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.171569456 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.287829225 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.175473618 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.010231549 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.002000595 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.376904581 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.331528348 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.524094221 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.399727925 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.650957962 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.387607844 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.481044051 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.275266733 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.376998222 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.761156468 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.250431179 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.341378444 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.60606091 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.02898494 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.987981225 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.050635219 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.435464191 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.2150482 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.733651396 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.084521098 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.782946502 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.03700803 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.035032617 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.016813781 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.190860705 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.514494965 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.046637272 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.591663321 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.202794536 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.26195701 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.278873079 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.037195075 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.701364933 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.053612036 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.439869682 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.375436621 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.318886345 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.988326655 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.016957548 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.511733976 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.508081825 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.129232315 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.277273032 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.996314352 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.09217643 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.027030661 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.377738913 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.923587151 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.784420179 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.279805591 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.812154306 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 3.672812764 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.256827317 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.014781901 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 5.988707714 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.918831396 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.141535367 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.021204214 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.170254466 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.530895825 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.274759969 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.313439301 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.975192408 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.981959167 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.264841794 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.292803054 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.259449066 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.494061658 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.606747776 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.700838131 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.093732096 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.655772903 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.150871218 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.018708401 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.635074764 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.281719351 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.936148783 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.228247457 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.701793003 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.111840034 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.163591226 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.27784845 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.97647813 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.462779383 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.613865127 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.978602486 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.023196016 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.139449142 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.977189811 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.181301304 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.881512304 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.221710544 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.157121804 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.456792936 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.281403878 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.227455409 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.389838158 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.535410283 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.781275922 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.959279288 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.13829083 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.089243655 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.310876758 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.976625388 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.282370951 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.703458409 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.639573178 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 1.826980371 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.534101812 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.202784608 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.654000498 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.467161237 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.242995274 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.29674085 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 1.952442561 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.602166917 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.970259726 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.125108182 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 3.958075571 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.768977031 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.319702493 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.366285438 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.477326166 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.06346721 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.520142701 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.406349315 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.023748856 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.150884447 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.256244106 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.975491521 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.339210222 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.976968663 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.862195307 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.418486068 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.983405135 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.323771698 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.188902457 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.317290545 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.145352923 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.64009901 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.025596002 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.107192752 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.453597882 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.181734048 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.123223801 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.323170535 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.80424717 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.026432779 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.008507901 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.528278139 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.576755953 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.469128973 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.587377666 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.572432075 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.368147898 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.765622215 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.977628972 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.265082533 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.145958102 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.547516161 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.183310232 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.386981284 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.028940327 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.244637136 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.31395609 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.151572399 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.513885839 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.969882059 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.592057787 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.174959634 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.504536041 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.517248615 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.775081487 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.443557392 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.973046792 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.504654232 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.001785526 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.13811439 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.214202248 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.721512329 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.595197491 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.834104101 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.776806716 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.12477222 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.432600972 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.055371462 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.764459172 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.153355127 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.220277044 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.262982776 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.121858077 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.956683722 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.576076202 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.765581142 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.259065667 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.148308332 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.226199886 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.097956531 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.100062838 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.518246255 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.296575592 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.764725288 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.468125529 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.264589733 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.960710426 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.983628387 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.687705031 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.451383348 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.080516068 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.279137919 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.430246672 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.041309282 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.002581264 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.0062931 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.256024974 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.783308426 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.712467719 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.331531149 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.520456746 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.46360469 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.977544285 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.770803617 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.264982166 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.341267717 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.397251843 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.916535076 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.36676067 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.311705794 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.138100576 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.957063989 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.2284143 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 5.984069556 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 5.980282977 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.092268886 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.315124827 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.032738118 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.13978549 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.616123214 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.943124128 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.029107831 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.226399641 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.212048272 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.190337746 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.975954024 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.576154207 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.415563628 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.131882944 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.97287256 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.748589813 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.956093146 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.263605459 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.912436655 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.192362262 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.839794886 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.056286353 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.661815715 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.530870043 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.990214482 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.201643883 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.959907263 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.066747628 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.017269984 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.677913464 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 1.823983692 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.232505724 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.487953991 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.227374248 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.992494719 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.308826024 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.193857625 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.314583983 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.709193723 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.48524168 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.428594893 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.369947046 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.287207209 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.924341379 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.147828237 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.225967871 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.956076237 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.976856357 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.025167344 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.362069579 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.359905732 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.975958403 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.535226874 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.232382674 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.111622428 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.162881937 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.085927219 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.558607545 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.193431312 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.1048307 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.153423814 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.225235779 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.346709215 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.977418117 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.260201179 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.976223594 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.982216605 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.266695667 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.23449399 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.35882916 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.298256329 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 1.586843129 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.14175058 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.651884481 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.862362696 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.521398836 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.978299905 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.109517361 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.354559251 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.977835342 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.474467413 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.674697793 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.227029902 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.260680215 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.0473071 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.94259995 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.193450718 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.503200424 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 5.984852144 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.64742869 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.387966283 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.977788324 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.463105855 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.06304535 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.149170044 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.748175048 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.486544622 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 5.976863355 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.037866122 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.09879253 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.536542375 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.260862502 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.135925485 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.990743427 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.74204995 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 3.966583893 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.97777902 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.116591154 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.521412278 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 5.995545262 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.587805695 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.131090729 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.152443898 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.978907305 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.125069364 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.981999073 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.262952598 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 1.587298542 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.230986473 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.262089044 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.227092267 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.981835208 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.550936175 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.70851476 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.882700023 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.201195168 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.745738148 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.381562042 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.709679488 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.752889454 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.570547756 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.160836125 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.186776647 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.422479418 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.24560041 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.025701047 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.242586931 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.977140509 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.29106646 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.287285451 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.562703199 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.250757472 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.796795767 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.226940212 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.001004443 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.542504002 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.472216584 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.874035352 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.976971052 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.29506512 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.976168592 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.053116033 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.634090914 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.183190926 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.096538422 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.226079779 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.596626978 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.27484433 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.125800366 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.978224149 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.197486472 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.47147986 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.957887356 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.039232639 seconds)
    (567/608) benchmarking "2d"...
    done (took 1.879413053 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.169757458 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.321665997 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.959408092 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.227772021 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.005601273 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 3.967465686 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.487608127 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.977056884 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.384588197 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.961773528 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.546055851 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.967206105 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.073513091 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.151088481 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.359490699 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.982532853 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.720503983 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.208517215 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 5.980821733 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.018938093 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.407628063 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.128861033 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.293088219 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.531308527 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.269057048 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.384138271 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.938111427 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.076685539 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.03169854 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.302837574 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.870599371 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.585462016 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.129490217 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.58319976 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.827454608 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.062265154 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.617692128 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.280026161 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.751754434 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.170604882 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.501696852 seconds)
  done (took 1885.554431025 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.061332156 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.040230006 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.150296455 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.041849717 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.089198769 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.09701853 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.05997383 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.081153919 seconds)
  done (took 49.641924288 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.01032339 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.089879481 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.60078294 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.238225318 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.015713697 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.208605639 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.155673479 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.497599364 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.202903198 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.023908561 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.067658139 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.110604998 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.008485305 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.031208755 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 5.891619027 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.110585983 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.001081138 seconds)
  done (took 89.322030154 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.023549071 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 9.589689703 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.069029527 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.513248389 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.103173042 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.427060427 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.053797309 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.017832263 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.130946355 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.670665154 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.032903023 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.159226208 seconds)
  done (took 81.817643636 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.077396229 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.086169061 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.056136545 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.053115736 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.061079675 seconds)
  done (took 6.388988692 seconds)
done (took 2337.003170341 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.255196791 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.426894998 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.532366303 seconds)
  done (took 3.95624927 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.08751713 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.131962426 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.211164215 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.192121143 seconds)
  done (took 5.659860513 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.356432806 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.524937326 seconds)
  done (took 3.911708504 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.503206499 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.044419011 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.585527642 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.038462226 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.012866615 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.048180907 seconds)
  done (took 19.120621578 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.049875716 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.042292406 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.05877774 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.050908064 seconds)
  done (took 5.215028001 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.005523884 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.082939814 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.032641904 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.006786569 seconds)
  done (took 18.112114479 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.340133774 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.2769537 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.787046016 seconds)
  done (took 5.411014584 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.850036803 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.394844008 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.829151634 seconds)
  done (took 6.118461267 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.313241062 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 1.959220795 seconds)
  done (took 5.285373356 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.186231091 seconds)
  done (took 2.198098223 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.528305418 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.497635358 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.88119807 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 1.927009874 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.045968374 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.348421398 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.384838775 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.312158308 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.712732162 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.583789707 seconds)
  done (took 17.229242891 seconds)
done (took 103.605831309 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 2.940974864 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.426868225 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.194726572 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.705251636 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.177981234 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.182949582 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.62227319 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.504977279 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.63489717 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.596092307 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 2.699088281 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.215569099 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.077547375 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.431827146 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.058505296 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.347030064 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.405338692 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 2.961127555 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.24548015 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.07812886 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.628006479 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.27982234 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.425048957 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.292120844 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.417547907 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.14815053 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.139281086 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.407762122 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 3.508431174 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.147646441 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.172249997 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.31649013 seconds)
  done (took 149.39808304 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.047327261 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.021602788 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.025729117 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 5.994267018 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 4.833726146 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 5.997879466 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 5.99631898 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 5.996516531 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 4.899365556 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 4.844488932 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.003257469 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 4.830040828 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.007858327 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.000056665 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.016499974 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.00206301 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.026858731 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.039944988 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.006958309 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.035105199 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 5.999411272 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 4.593882929 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 5.992384538 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 4.638707684 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 4.991993612 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 5.998301486 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 5.997147617 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 5.991826253 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 5.991357037 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 5.992159093 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 5.99312486 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 5.987940793 seconds)
  done (took 183.841468071 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 5.975865906 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 5.991495547 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 5.992147508 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 5.988408471 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.990708518 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 5.991814517 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 5.987781249 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 5.986731787 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.989992667 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.990817074 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 5.99047127 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.992344599 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 5.993097529 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 5.987187051 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 5.994672148 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 5.987307966 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.991671719 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.02078722 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 5.990714846 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 5.990601418 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 5.989145082 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.986895214 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 5.991377017 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.991372658 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.00859201 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 5.991499984 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 5.987984261 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 5.991968913 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 5.991496564 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 5.990883942 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 5.993120733 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 5.987938486 seconds)
  done (took 192.719596773 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.29259422 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.042856208 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.027470669 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 2.372832599 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.036092732 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.015379441 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 2.351936062 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.293424594 seconds)
  done (took 14.423301246 seconds)
done (took 541.427758144 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.701865834 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 1.941102867 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.176580106 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.214369235 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.649049677 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.300923105 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.209959819 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.462785787 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.831236178 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.483803225 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.492715794 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.219827256 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 1.842270736 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.218269498 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.182742573 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.445528059 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.38993935 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.68802441 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.202188056 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 1.897193866 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.212876188 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 1.948864593 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.485634929 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.887380891 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.497165882 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 1.994595196 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.193780373 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.393753216 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.208629534 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.216130458 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.090395864 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.490413097 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.245088761 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.23972026 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.463273636 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.501476196 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.417036952 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.406772441 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.17379972 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.744465251 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 1.920450062 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.692096703 seconds)
  done (took 70.951568246 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.016130991 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.03284992 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.189603214 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.096213796 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.645002184 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.097680984 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.258345994 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.242458603 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.116290243 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.230259674 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.275925144 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.678391274 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.282736638 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.645798127 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.261869807 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.282985908 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.102058519 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.61942483 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.264843515 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.234676465 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.061381776 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.189853401 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.065771411 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.219984935 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.053537955 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.063485771 seconds)
  done (took 33.235934222 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.063546627 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.165655422 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.299841736 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.396565988 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.248608333 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.03476349 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.351690946 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.141127104 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.93164773 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.231394376 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.122965209 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.144862853 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.198180108 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.329723355 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.593780193 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.191564523 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.178601656 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.177183665 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.171591003 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.224864951 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.180491495 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.099625043 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.356959847 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.167706259 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.705064749 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.428242053 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.38375745 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.67441875 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.574058331 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.190197277 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.148225994 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.336203864 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.412736744 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.304058211 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.160524664 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.045656275 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.045821249 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.125704903 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.08324664 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.188710294 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.349516658 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.254466106 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.451701747 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.620879459 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.329168648 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.14217507 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.52851895 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.133711838 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.146268645 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.861238422 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.355641333 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 4.076109949 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.208296683 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.219441993 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.139766459 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.558548172 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.22610519 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.346099962 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.214850144 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.558142148 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.100661736 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.412110838 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.176259878 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.323728704 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.1835244 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.232525508 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.18867511 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.470631519 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.450775259 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.519961928 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.645716142 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.101978741 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.056891735 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.121215546 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.171765729 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.565013723 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.548830502 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.275764311 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.429567574 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.340179703 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.570695336 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.532950681 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.025393473 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.712205946 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.090884666 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.031807963 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.109644523 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.335302415 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.334881108 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.548599156 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.630790519 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.369060944 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.338879691 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.447713808 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.442884412 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.490357998 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.021631522 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.043257909 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.287457831 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.635910723 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.104914544 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.272489249 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.746782082 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.580448431 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.312141726 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.297835443 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.457076875 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.130476403 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.456831222 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.017244087 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.219542011 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.366888518 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.30140856 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.38299048 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.029131957 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.597617439 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.146207543 seconds)
  done (took 216.246674444 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 5.977062149 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 5.992631983 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 5.979420844 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 5.99319641 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 5.977784958 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.617680814 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.062819227 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 5.97752327 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.620377139 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.063267716 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 5.977840368 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 5.978199926 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 5.978584357 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 5.986629697 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.634046712 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.620314937 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.825989743 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 5.977577896 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 5.979332752 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 5.989079762 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.82091614 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 5.98208662 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 5.978763563 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 5.989151076 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 5.978375725 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 5.978910584 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 5.979052049 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.028917922 seconds)
  done (took 148.929253066 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.042389605 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.454733689 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.089962347 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.137492052 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.088058887 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.060846462 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.733940389 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.189972574 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.119477474 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.057359431 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.048720088 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.277446633 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.30999055 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.720225629 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.180448091 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.235206482 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.76227646 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.191706952 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.056358145 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.053327397 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.206759204 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.405907377 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.344764783 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.354597293 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.21017683 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.342405015 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.127521511 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.047828214 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.174615693 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.560760469 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.073465869 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.436611966 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.198423526 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.059063326 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.577237085 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.460717638 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.699285344 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.679633742 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.257719122 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.015109552 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.012513797 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.302747529 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.379427153 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.101354165 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.048539444 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.706392794 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.076595112 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.480144009 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.094140111 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.012190393 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.139321211 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.157554254 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.32610733 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.766458905 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.226799773 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.199954026 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.617849474 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.031635981 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.057475564 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.411497284 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.030344508 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.562493044 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.5409482 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.113039895 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.06580314 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 1.978880643 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.141734323 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.645212581 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.739822157 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.103073561 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.445032583 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.235350811 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.027875595 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.330990896 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.232803189 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.526436972 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.696853642 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.193712328 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.154158744 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.130178657 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.346647 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.045123149 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.614058469 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.157800729 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.02668611 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.567579534 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.498023656 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.023577829 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.040010539 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.16525765 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.222199739 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.256913914 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.358549913 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.119223766 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.01032551 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.310403469 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.365323431 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.061940859 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.181570563 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.044511922 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 3.151636662 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.248163395 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.031105217 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.477640573 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.443815616 seconds)
  done (took 146.837587031 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.795572603 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.103193373 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.227896384 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.83326875 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.416288537 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.098439305 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.31952827 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.121580819 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.355306387 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.281320738 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.248954475 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.1401623 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.007572807 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.773005765 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.110667506 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.282958637 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.116580086 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.650756345 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.367689117 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.084167841 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.303262861 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.791999207 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.405021277 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.452886893 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.427425188 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.542549951 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.773349204 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.184565646 seconds)
  done (took 47.206811971 seconds)
done (took 664.385115659 seconds)
SAVING RESULT...
DONE!
