cset: moving following pidspec: 1786648
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.769241346 seconds)
loading group "shootout"... done (took 1.149239705 seconds)
loading group "string"... done (took 0.654666709 seconds)
loading group "linalg"... done (took 8.516524068 seconds)
loading group "parallel"... done (took 0.16237025 seconds)
loading group "find"... done (took 2.986820278 seconds)
loading group "tuple"... done (took 2.06058452 seconds)
loading group "union"... done (took 14.331543754 seconds)
loading group "dates"... done (took 1.418115011 seconds)
loading group "micro"... done (took 0.21079713 seconds)
loading group "simd"... done (took 4.63051088 seconds)
loading group "io"... done (took 1.371762022 seconds)
loading group "random"... done (took 9.519364492 seconds)
loading group "problem"... done (took 1.588807685 seconds)
loading group "array"... done (took 24.935830059 seconds)
loading group "misc"... done (took 1.813900118 seconds)
loading group "scalar"... done (took 42.140032076 seconds)
loading group "sort"... done (took 3.260740992 seconds)
loading group "sparse"... done (took 13.251087405 seconds)
loading group "collection"... done (took 18.272900305 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.439010194 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.113546934 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.161632013 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.10992975 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.229337245 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.125360368 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.128511474 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.085182777 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.036198476 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.144670966 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.135892392 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.421857058 seconds)
done (took 5.658865314 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.304693884 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.240536684 seconds)
    (2/2) benchmarking "String"...
    done (took 0.162253443 seconds)
  done (took 1.657691504 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.091277224 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.058043736 seconds)
    (3/3) benchmarking "different"...
    done (took 0.064867964 seconds)
  done (took 1.466681519 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.06339308 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.139039769 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.064183629 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.06448981 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.06422969 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.066825089 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.063893392 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.064070342 seconds)
  done (took 1.778233689 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072234148 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.065659649 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.063510985 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.065263641 seconds)
  done (took 1.517134134 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065899806 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.118757424 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.062426198 seconds)
    (4/4) benchmarking "different"...
    done (took 0.062333075 seconds)
  done (took 1.557095285 seconds)
done (took 9.618748985 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.158589156 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.759239313 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.850124088 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.144816329 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.312947796 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.342201242 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.119539518 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.200425397 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.112781172 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.074775878 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.160005695 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.079989855 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.481209681 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.475304539 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.070895466 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.183759039 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.609476588 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.085059422 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.112510198 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.187498158 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.081190994 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.081779819 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.0865453 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.070923359 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.110522318 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.178030064 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.617092265 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.098063834 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.067617013 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.190686196 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.069991588 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.074387502 seconds)
  done (took 10.528495432 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.114968234 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.110919023 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.066633266 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.100846112 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.09320329 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.067772076 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.072887969 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.066631853 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.085884168 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.129590375 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.089830444 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.122263636 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.065989122 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.067489517 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.097554662 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.157033548 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.082263431 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.080538501 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.067627682 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.080749431 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.092675607 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.078433504 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.076708084 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.076216995 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.110546747 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.132366388 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.085813561 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.10643991 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066534346 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.078615933 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.096436585 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.106963785 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067232394 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.065135094 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.107623296 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.087192522 seconds)
  done (took 4.538686636 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.026477571 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.093450675 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.105215218 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.099823068 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.105382542 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.093287373 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.146510729 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.121066945 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.098849134 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.067099019 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.180039699 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.674431823 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.068566964 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070485903 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.144115721 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.35792863 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.896299735 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.072197069 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06729141 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.096850739 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069195935 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.138685677 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.06624637 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.176205466 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.637665965 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070501675 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068378407 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.096219708 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.186296399 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.140007168 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.09597518 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.068301405 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.576139542 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065604674 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.062926735 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.083534215 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.092001861 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065096757 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.066151203 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.07659344 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.064238536 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.114985146 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.079136319 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.547940213 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068905326 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.623774417 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.330427641 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.072447437 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.070861799 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.101067339 seconds)
    (50/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.063563214 seconds)
    (51/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066736082 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.666121261 seconds)
    (53/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.147706788 seconds)
    (54/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.066484131 seconds)
    (55/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.283530361 seconds)
    (56/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.070352906 seconds)
    (57/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.067657206 seconds)
    (58/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068495027 seconds)
    (59/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.099529516 seconds)
    (60/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066775205 seconds)
    (61/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.067777872 seconds)
    (62/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.0722693 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.083855304 seconds)
    (64/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.015817912 seconds)
    (65/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.15178575 seconds)
    (66/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.085360827 seconds)
    (67/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.140682728 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068886416 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.417472701 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.076431665 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.068890691 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.06989749 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.094978687 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.133647181 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066229732 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065535845 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.108386072 seconds)
    (78/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.092698646 seconds)
    (79/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.225301118 seconds)
    (80/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069039015 seconds)
    (81/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065776214 seconds)
    (82/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.066563304 seconds)
    (83/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.583685498 seconds)
    (84/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.950304765 seconds)
    (85/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.0672529 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065099406 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.066335634 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.501080069 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.06415101 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06515234 seconds)
    (91/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.062703185 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.066709827 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.087069564 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.065785392 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.062542653 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.06339475 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.09881108 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067896498 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.592966136 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.066913828 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.483107601 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069320973 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.097196178 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.125042692 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066894214 seconds)
    (106/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.064171834 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.105135251 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.066794389 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.06406073 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.072699816 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.064596078 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.063620816 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068346743 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.064856509 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065528655 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.067807185 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.067478118 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066303094 seconds)
  done (took 23.360347459 seconds)
done (took 40.710153253 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.397494699 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.077422619 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.077074483 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.07700322 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.07682887 seconds)
  done (took 2.003225948 seconds)
done (took 3.411262112 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.255608267 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.074378163 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.062826439 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.204851206 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.087656927 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.178576416 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.340920791 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.170766385 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.08913805 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.088805396 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.089587129 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.222526443 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.234324919 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.090337801 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.161993188 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.233284532 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.09061228 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.0662933 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.088555354 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.090047146 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.090621645 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064410567 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.089685792 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.091425773 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.162179225 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.089207869 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.063499753 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.162675664 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.090019512 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.16493 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.089819393 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.088963401 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.089563808 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.162012341 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.091456117 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.163923016 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.064177942 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.092006889 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.092032929 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.093273892 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.092079664 seconds)
  done (took 6.449056067 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.076450448 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.079627866 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.080767602 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060214395 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.069124258 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.07952444 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060222418 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.079035184 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.100063173 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.07983152 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.079556701 seconds)
  done (took 2.231307385 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071144314 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.080372953 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084216411 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.059912888 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.070925725 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08074415 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060089776 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.079894785 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.082957526 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.080600996 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.08063099 seconds)
  done (took 2.164129673 seconds)
done (took 12.170010176 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.190499599 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.087841411 seconds)
  done (took 1.590728964 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.256975285 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.498392283 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.249088251 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.121210547 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.099448114 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.115982427 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.217789189 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.09817445 seconds)
  done (took 7.15108991 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.124805283 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.06710103 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.066049069 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.067964294 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.068040819 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.065989267 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.067549425 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.066549186 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.065910795 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.065689157 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.066577314 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.065566855 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.065491411 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.067429344 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.065975301 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.066788469 seconds)
  done (took 2.563882196 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.100929118 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.067489681 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.096225325 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.060338361 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.07001813 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.061081141 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.069022089 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.070364111 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.068081626 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.06842863 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.069878568 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.068343825 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.069249677 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.069416995 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.070360026 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.070970554 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.072431767 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.068695414 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.071007359 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.07241828 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.071017278 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.072002194 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073083316 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.070308579 seconds)
  done (took 3.167672837 seconds)
done (took 15.810294989 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.17792638 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.072982585 seconds)
  done (took 1.57434637 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.093827482 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.091528449 seconds)
  done (took 1.527771916 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073206272 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.058440309 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.075393488 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.067791215 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.059191087 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.058996817 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.074634892 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.059288841 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.059255924 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.059409552 seconds)
  done (took 1.991380962 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063479697 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.065885552 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.063691195 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.062265957 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.064357497 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.060159899 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.062426268 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.060379625 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.066186749 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.059227471 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.063201515 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.080796555 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.062738079 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.081292198 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.062709074 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.063256422 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.064922647 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.062927099 seconds)
  done (took 2.515562784 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.062015786 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.059500045 seconds)
  done (took 1.472914434 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.06473199 seconds)
    (2/7) benchmarking "second"...
    done (took 0.059430001 seconds)
    (3/7) benchmarking "month"...
    done (took 0.06152329 seconds)
    (4/7) benchmarking "year"...
    done (took 0.061268131 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.059660835 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.05910431 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.059618858 seconds)
  done (took 1.771989967 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.427001706 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.192170369 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.427439316 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.068251905 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.08218868 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.264338814 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.063204198 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.067160737 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.067128494 seconds)
  done (took 3.047352334 seconds)
done (took 15.260829694 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.084138285 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.181079889 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.110388729 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.415951888 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.078031779 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.065584315 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.094008571 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.210365552 seconds)
done (took 2.614781585 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.286200931 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.206192253 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.256544435 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.146477456 seconds)
  done (took 2.964420814 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.418609793 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.166223991 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.074860234 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.065565154 seconds)
  done (took 2.088616819 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.066149871 seconds)
    (2/2) benchmarking "read"...
    done (took 0.069690661 seconds)
  done (took 1.500070755 seconds)
done (took 8.214403065 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074069985 seconds)
    (2/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.088405089 seconds)
    (3/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.065132507 seconds)
    (4/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.059507006 seconds)
    (5/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.059402846 seconds)
    (6/24) benchmarking ("one", "Float64")...
    done (took 0.061181364 seconds)
    (7/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.061336865 seconds)
    (8/24) benchmarking ("zero", "Float64")...
    done (took 0.06115258 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.0606551 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.061496555 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.059491459 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.061525569 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.06142919 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061446717 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.061253412 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06123427 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061422942 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.061105317 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061119299 seconds)
    (20/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.060990076 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.061853268 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062306435 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.061434166 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.062034599 seconds)
  done (took 2.893926974 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.08022377 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.0635865 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.064211387 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.063984098 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.064835542 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.064601588 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.064657396 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.063639954 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.064692141 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.063463584 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.0649157 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.064929516 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.063498876 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.06517613 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063588386 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.065370127 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.06490996 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063879699 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06355511 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.065228799 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.064693946 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063929335 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.065513971 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.065629574 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.06594549 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066003863 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.064242313 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.064693243 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065586213 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.065804807 seconds)
  done (took 3.334341993 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.067417832 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.058085631 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.058182947 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.068004745 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.057721911 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.058376418 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.058762267 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.057951374 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.058273544 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.059214262 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.058684608 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.058079126 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.058981486 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.05802542 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.058027096 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.058650801 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.063177967 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.078377919 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.058373437 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.058145788 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.062806162 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.058418452 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.058155857 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.058140341 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.058566209 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.058202172 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.058114892 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.058946391 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.058910718 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.059464355 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.05885716 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.06637602 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.065003613 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.05874645 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.069069151 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.063968539 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.058880536 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.065420906 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.059697589 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.058594706 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.058593716 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.058714693 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.058800899 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.058737728 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.069179636 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.059043001 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.060063392 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.059219891 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.059029043 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.058743694 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.058848408 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.0605816 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.064443297 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.060124358 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.058681703 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.060043593 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.058848246 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.059561313 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.058907016 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.058720723 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.058596073 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.06282771 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.060682567 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.059590274 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.079568879 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.060267643 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.069406793 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.059020678 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.059426385 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.063028657 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.059457076 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078245461 seconds)
  done (took 5.767708909 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.073049153 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.069279943 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.076782516 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.068100904 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061897101 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059194831 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.062295406 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059159497 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068374258 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.062760699 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059239786 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.062236359 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068210047 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.062677573 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060198996 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.068126048 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.062524288 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061695382 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.058892699 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.062979757 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060431761 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062800248 seconds)
  done (took 2.805560492 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.145503993 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064538176 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.106373488 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.068280024 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066754597 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.068050767 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064637617 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064630302 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064682049 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065153041 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065116202 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06465764 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066745032 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065087825 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065080493 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064967781 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06462964 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064969286 seconds)
  done (took 2.678299964 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.077917577 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.064146617 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.090514755 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.063740315 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.064173202 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.06385059 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067585041 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067785451 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.063811082 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.06416496 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.067884114 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063937161 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.06396147 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064145909 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063883385 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.06415602 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.064564181 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065415846 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.068100749 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06775129 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.067827487 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.068485016 seconds)
  done (took 2.857982757 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079065973 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063084631 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.078868489 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.064426562 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058254058 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058585606 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.065105797 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.063551094 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.065016691 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.063203691 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063664443 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058651529 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.065466506 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.06353277 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.065934969 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063871048 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063483887 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.063785631 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063296857 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058682397 seconds)
  done (took 2.672599295 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.098114649 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061045523 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.060761394 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.065349322 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061117265 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.060973476 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06598791 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.072507409 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.061073043 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.085102249 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.061141615 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.061123704 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065743434 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.063915892 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.061115513 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065675807 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.065687636 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.0657076 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.06454148 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061705162 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085957503 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.061983811 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.066908079 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061855549 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061732821 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.061762587 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061911477 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065126805 seconds)
  done (took 3.239183596 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065774702 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.061938518 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.061940529 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.061817312 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.061719073 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.061528285 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.061990645 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.062042387 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.06168283 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.062098291 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.061956111 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.061788985 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.06173412 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.061865923 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.061703172 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.06175368 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061600666 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.062018122 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.061940617 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061995469 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.062143009 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062064115 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.062039006 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.062221482 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062216692 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.061872545 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062223097 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.062244855 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062204295 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.062520349 seconds)
  done (took 3.256979744 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073917276 seconds)
    (2/2) benchmarking "in"...
    done (took 0.069332614 seconds)
  done (took 1.53330974 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062728585 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.07575369 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.057701114 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.070711938 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.06644737 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.062238164 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.066990163 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066835682 seconds)
  done (took 1.912663164 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.092893869 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.116151971 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.060177729 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.060667317 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.089936047 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.126809669 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.100149614 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.072303614 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074153804 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.062918932 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.060341582 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.099820426 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.059466739 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.073474735 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061145338 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.06931497 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067481294 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.078488973 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.073614995 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.058733898 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.073250911 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061094012 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.059888946 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.061227125 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.061003948 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.06774168 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.076727796 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.073407153 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069320737 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.05830251 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079845517 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.059487732 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.060455421 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069292576 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.09180511 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.059576062 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.097678045 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.059905725 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.064374675 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.058942691 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.072033429 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.080924849 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.074219187 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.077988258 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.060967339 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.061300393 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.058854034 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.061218649 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.063583196 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.069206413 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.059080431 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067389091 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.058659148 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.060849634 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.070449781 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.059733965 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.064520967 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.069181833 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073679343 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.07051929 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.07216855 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.075481993 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.068800332 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.068257288 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.060196028 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.079969508 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.061101787 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.073300212 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074854615 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.06071308 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.073222448 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.059011561 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.058315363 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.059098699 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.093839758 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.060974116 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.060496939 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.059564846 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.059444198 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.060796122 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069629122 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064627571 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067543418 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062783207 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076135717 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.069645714 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.059849556 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.067702511 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.078879404 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.064061787 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.060907554 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.079185589 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.065102927 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060707201 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.079966179 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.071635874 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.063195761 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.062234913 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.065074594 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075658061 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.06263481 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060016608 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070284711 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.062996566 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.243228693 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.063848395 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067726448 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.058892955 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.072332239 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.064189755 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.060010228 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.057387464 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.063501499 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.059444495 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.057434128 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.06848239 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.058616003 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073339615 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.065521025 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.07357262 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.073986176 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.069527325 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.074796639 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.058508191 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.057416422 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.076933663 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.068352528 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.059675683 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.076713409 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.057996653 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.069397534 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.057912243 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.059679127 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.068159403 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.057619091 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.059965923 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.058305738 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.063867071 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.059669252 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.060024093 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.06471469 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.067629306 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.070950884 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.059581059 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.067986506 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.058924907 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.07476782 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.069190947 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.064125987 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062028328 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.059815366 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.071709929 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.066522994 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.069501406 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.059267637 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.060432988 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.059808217 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.070903583 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.06970106 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.061472008 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.067899267 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.064546475 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.060221519 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.059872788 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.060624344 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.063706062 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062793912 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.060306188 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067928333 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.068851329 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.074148992 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.066811491 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.06905371 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.058664805 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.059012566 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.061178338 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.058921484 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.064463899 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.069333901 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075845782 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.071769758 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.081323619 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.059713519 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.069778675 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.060993611 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.076757805 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.073412945 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.060483103 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064012872 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.05848833 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061024785 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.069368564 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071374611 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.073936003 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075100468 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.064619732 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.064658282 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.059237587 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.075394901 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.060105741 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068916278 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.069686243 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.065506878 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.059765642 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062599812 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070823589 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.066107563 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.062015713 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.077569039 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.069096215 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.060825213 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.076231875 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.061577273 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.072561531 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.060761422 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.065122477 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.066898086 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.063079863 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.071426574 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.230376395 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.058519339 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.059556395 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.074903634 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.060204995 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.059912466 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.067207889 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.074168214 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.063682036 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.067002676 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069641049 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.069173984 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.063584309 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.068961669 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.059432213 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.068294712 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.061323763 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.070487165 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.05855664 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076849193 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.0575108 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.074085542 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.058818585 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.069854285 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.059146868 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068384397 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.05933697 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.075820322 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.060020991 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.059315221 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.07061633 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.057316923 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.06811757 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.057966614 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.064067273 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.065483107 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.068298833 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.06017648 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068374399 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.060057951 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.068147431 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.063746579 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.067214437 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.068288742 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.063705443 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.058613419 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.068139904 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073615756 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.068040556 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.060764123 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.060862753 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.059992641 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.06929423 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.060854249 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.060851184 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068447032 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.064810581 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.065860106 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061176591 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.061471996 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.061158501 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068546491 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069504785 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078287948 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068782388 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.067471488 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.069421285 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.059111079 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075915257 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.059751641 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.067664134 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.058743268 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.0667526 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.069406785 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.059793462 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079381887 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.061054211 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.068000927 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072458559 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068644149 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.06377328 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.078157943 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.062753722 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.068429688 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.068137651 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.064700622 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.066780424 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.061454941 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.068564922 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.069689714 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.070715082 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.060676845 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.067607958 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069347912 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.061338285 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.06855113 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.061527963 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.068750952 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.061674873 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.058953178 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.064909233 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.071955061 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.065958645 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066688106 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.061786183 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.060119017 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.061666999 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.070141384 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.066431132 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.070492176 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077612291 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060085632 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.062454634 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.060753552 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.065344469 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080529625 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.228420599 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.06818611 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.064286676 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.058116863 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.060204124 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.060229577 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.058759798 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.061491372 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.057648672 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.058190126 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069569142 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.060164883 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.063515044 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.058948564 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.059497216 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.069093729 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.062589693 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.059048868 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.065574599 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.058297173 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.064182282 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.057789872 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.059890159 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.063616798 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.057882874 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.062721319 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.069413145 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.075504961 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.065739292 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.068010874 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.059522175 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.067085275 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074422989 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066066665 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059690726 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.068353431 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.057888607 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077409919 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.068303904 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067721676 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068712433 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.059631058 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.075653981 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.063745156 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.068879619 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074634118 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060747547 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.067091555 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.059048422 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075701213 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.06444027 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.058908159 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067816347 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067777689 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.065619488 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.071572449 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.06002121 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.068096062 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064691525 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.063560373 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.06122576 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.06112851 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.068814163 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.076300386 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.060371687 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.065196435 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.068226408 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.068480091 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.064632613 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072267003 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.068237712 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060860606 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.061401949 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.063763217 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.060509812 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.072162493 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06009643 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.06454346 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.06466192 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.059215871 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.066729387 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076608075 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.06940874 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069649884 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.059206536 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.058796176 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.077974224 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.06380189 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.062932716 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.071197019 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.070154426 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072334439 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.069594287 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.077331163 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.060429338 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.065980682 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07229826 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.060502777 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.059689267 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.064058185 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.061462614 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.069584688 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07011619 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.068048905 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06341204 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.068582251 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075551076 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.062714962 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.066405892 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.068020406 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.062139069 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.072317307 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.069953139 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.070489375 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.062802121 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.06075221 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.065045789 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.222561549 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.067415061 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.068487749 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059753721 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.065733592 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.072572932 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.06661884 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061456465 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.058045737 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061260842 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.068208187 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.063481317 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.058035002 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.063749217 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.062874774 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065641836 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.068289289 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.063521265 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.058083682 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.075744514 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.067149424 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.068167853 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.060125429 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.060314414 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059170291 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.058135385 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.0699422 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.058026147 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.059851281 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.063652859 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.059890268 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.076381878 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.067229808 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074636704 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.059431996 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.063577574 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.058059255 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068602443 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.063597929 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.0587925 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.069770532 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.057869389 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074478991 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.070510796 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.065435765 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.059121361 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.065112653 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.068155663 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.07508693 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069568123 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.068857149 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.062819525 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069479849 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.06118272 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.070786912 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.059110108 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.058450437 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.069780786 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.06863152 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072618724 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.059297097 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070207059 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.061530994 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068378209 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068215709 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.061387378 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061186042 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.061387409 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.06971505 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064704352 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069520071 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.06480406 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.077240083 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.060667416 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.071155395 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.069327621 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.071090338 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.074315259 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072696282 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.068411707 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.060459988 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067714176 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.068325718 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.060970111 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.065234878 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.062944104 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.08251118 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.061684388 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.06139116 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074618623 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.067468432 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.059961695 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.067362421 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.06496587 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.070351211 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.060815672 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.07082067 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.065423718 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.060854969 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.065113044 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.065088933 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.059998743 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.06083829 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061286395 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072057799 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.066032156 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.061823892 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081620638 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.063078151 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.070613652 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073217013 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.068657835 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.063162308 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.214634676 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.060819554 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.07294648 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07489239 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.062859203 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067949846 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.060285757 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.068319368 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.057668431 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.067904315 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.067248787 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067789792 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.058197207 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.058938785 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.073977437 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074577297 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.063884305 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.077761552 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.068139969 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.059905789 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080619988 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.068290769 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.05968818 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.069876266 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060657429 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.05794604 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.057670244 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.060050057 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.070376812 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.058151067 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.060700134 seconds)
  done (took 41.7418798 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.1033546 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.059866467 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.058537603 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.058436658 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.065840102 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059927196 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.058728478 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.059889523 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.060413941 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.060944629 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.058687673 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058700889 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.064258771 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073917773 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.066676849 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.062282852 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058833405 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.059886577 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.058865843 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06000249 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065049255 seconds)
  done (took 2.806613277 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.06539826 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.062450186 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.062002438 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.062259476 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061822673 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.058828816 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.06232743 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058894078 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.062938117 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059337267 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.062837774 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059074394 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.059441379 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.059378609 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059249836 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060362254 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.062878399 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062077945 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.058863899 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06238301 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060467772 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062488722 seconds)
  done (took 2.804362457 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063449331 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.059567722 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.067961371 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.057951641 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.057865422 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.061346793 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.058231847 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.063455915 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.063506278 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.063393767 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.068172569 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.059288297 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.058198877 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.064809829 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.058228411 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.059393574 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103727188 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.059758979 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.059584812 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.058283178 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.061243128 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.068367591 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.058419337 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.058574607 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.063610012 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.062531212 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.058828997 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.061582805 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.059739898 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.063871498 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.05998108 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.058530883 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.068501516 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.067896461 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.063801466 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.063837337 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.060645677 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.059876014 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.05880333 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.059264249 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.067978251 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.06035066 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.059016701 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.06039179 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.068517842 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.058826902 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.058536854 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.068533108 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.0585528 seconds)
  done (took 4.526191791 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.073970877 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.109139366 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.064636598 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.091140435 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.07089067 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.063995834 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.064539981 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.091868209 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.059839097 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.060159664 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.0716238 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.071733572 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061326671 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.062587001 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.064558941 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.061103351 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061745727 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060931014 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.064081774 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061400434 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.064148579 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.066195263 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.071412986 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.071779659 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.062604255 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060993895 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061333002 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.062809151 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.071433588 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.064548699 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.062993932 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063586786 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.071825722 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.065291552 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061429642 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.061502509 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.076095189 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.062363976 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.061964289 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.060454028 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.061701325 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.063112759 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.066543438 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.073165189 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062132877 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.066960466 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.062139264 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.060086981 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.072272155 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.061837755 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.065524532 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.073677336 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.063023687 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.062251836 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.063472793 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.072246417 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.062126479 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.060708059 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.062319555 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.07186822 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.060436183 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062794486 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.072778269 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.06137967 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.064866411 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.073354878 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.067012567 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062970735 seconds)
  done (took 6.123624082 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.071702196 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.093485923 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073131444 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073393728 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068996126 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.069032809 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.068909754 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.068929747 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.068925118 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.071669614 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.069130283 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.132019801 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.066265348 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.070473337 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.069216025 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.069176065 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.069657443 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069668167 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.069714596 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.069580162 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.06962675 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.074245135 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.069620799 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.074419674 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074232053 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.066364845 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.06956914 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.069726478 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074533516 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.069651301 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.074230385 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.069630285 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.069794905 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.07457065 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074301801 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.069913957 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06043611 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069969958 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.070257442 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.070062703 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.066651178 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.075163738 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.069922297 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.066565434 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.070137671 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.069945889 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.07509509 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074820677 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.071732507 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073310642 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.070397833 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.075287268 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070208243 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.070374701 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.075191071 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.078151959 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.075047585 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.075296269 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.070402137 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.075060195 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.075142053 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.078141384 seconds)
  done (took 6.005840672 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076601593 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064395138 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.077180688 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.058626024 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.058569046 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.067973492 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.058624978 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.058684943 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064630755 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.064542272 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066139672 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068070976 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069883687 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066223725 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068026676 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069917778 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06794294 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067973983 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065253248 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068493115 seconds)
  done (took 2.833542607 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.063853225 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063687441 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.058936975 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.074322205 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.059310857 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066783998 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.059420034 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059387236 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059321071 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059309609 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063865588 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063915478 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.05935486 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067229622 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.062780951 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066732303 seconds)
  done (took 2.488680469 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064839553 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.06674093 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.092749271 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.060213422 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.061749694 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.059220561 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.060053703 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.059144235 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.061146777 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.07315977 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.060301434 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.06214034 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.060141552 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.059225171 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.059414635 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.062156265 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.060976209 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.060017126 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.059853202 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.093417951 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.071493487 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.060922635 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.062507079 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.060977399 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.062221799 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.068371437 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.061814389 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.062156437 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.060297675 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.062492494 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.062147066 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.071128041 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.06227392 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.060998535 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.059363166 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.060073015 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.060543505 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.062565501 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.062680096 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.060527752 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.059450379 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.062147023 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.060445931 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.060825429 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.061532589 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.062588721 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061749056 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.070770149 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.060801039 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.062561726 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.060841851 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.062306798 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.061438026 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.072110775 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.06307086 seconds)
  done (took 4.97521303 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079828416 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064155903 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.05829157 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058159442 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063579934 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.064621153 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064215406 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.064207078 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064676886 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058586638 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064637529 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.063665441 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064655662 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064261742 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.064762216 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064236795 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058480773 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.064305634 seconds)
  done (took 2.65411691 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.069078226 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063871916 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.064196765 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.060033592 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.060376575 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.064769402 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.059067321 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.060090248 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06005571 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.060356461 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060580825 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.060096362 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060032602 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.060142885 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.064083151 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060421629 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.060132687 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.059025829 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.060273724 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.058659737 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.064473636 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.05924551 seconds)
  done (took 2.836852564 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.118798718 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.082608766 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.157994469 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.079148275 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.088996351 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.070537941 seconds)
  done (took 2.088169761 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.095713059 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.096299702 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064556212 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.063843455 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068157733 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066650971 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066637952 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066870923 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06974952 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072362991 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06676127 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070093857 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069694618 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071441941 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068203672 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068356497 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066787443 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066869105 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.064445777 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075216548 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067427493 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070539706 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067448337 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067186736 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067344977 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072227748 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070621319 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073367317 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067270436 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070783972 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069076603 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067480635 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070754185 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073267371 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.064623821 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070691805 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067570799 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07515443 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069496431 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072724761 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064906677 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069571386 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071097583 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070934406 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071474755 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06802593 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070825733 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067875807 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067947702 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079591497 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06981126 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075658914 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069659054 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07143385 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071087987 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079615072 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074150251 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072954372 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069800889 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073946104 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073015884 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069710085 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072811598 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074229259 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069881339 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073112777 seconds)
  done (took 6.17415056 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105047242 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064630174 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066679554 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072255068 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071470019 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066856386 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067005275 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06700193 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067025743 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064533313 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.102770784 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067432946 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071851073 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071673087 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067261603 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066913692 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067116723 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072242364 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064990324 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078987551 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067714134 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072461954 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072419961 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072275042 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073605239 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069371902 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067621283 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067509143 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067549954 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067501385 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070464027 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06754525 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072448366 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.065064323 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072405212 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06770821 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06750574 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070486676 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067806619 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06970355 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072969622 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075858119 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067925842 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067846354 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073946403 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067882781 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067885752 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065322193 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068004038 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065404465 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07397795 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074068095 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074111671 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073045173 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068153937 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06805611 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067928891 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067923302 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068133697 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069713432 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072840377 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.0679191 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079726169 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068163625 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068096377 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073160363 seconds)
  done (took 6.185396743 seconds)
done (took 128.559458871 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.259794591 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.224529506 seconds)
  done (took 1.959957404 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075381243 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.268104778 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.076243949 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.072665992 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.13305277 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.132492906 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.10700383 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.070661892 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.072709564 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.070151897 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.173354345 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.107578626 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.07060979 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.339982036 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.071366551 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.093049711 seconds)
  done (took 3.439818781 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.121889238 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.208807104 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.080113103 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.068173034 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.151122082 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.076410932 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.071633032 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.074737271 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.075863051 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.06914494 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.117190387 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.083149006 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.073689298 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.074892313 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.071167143 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.073559695 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.07457248 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.075665544 seconds)
  done (took 3.149385211 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.104236114 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.111801547 seconds)
  done (took 1.729676932 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.161596837 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.107513668 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145748601 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.353543392 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.141837714 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.146651806 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.14664505 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.140966072 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.11480266 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.139143309 seconds)
  done (took 3.104244578 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.107093254 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.102929882 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.305505356 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.101126372 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.080523793 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.075167726 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.072992398 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.078011573 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.073177416 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.074579069 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.120738002 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.073358128 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.070603452 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.122620762 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.098178415 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.104610152 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.069237911 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.077035401 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.078452699 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.069180545 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.074117976 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.078596175 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.177596951 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.077434187 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100684586 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.073613346 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.07544935 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.075614428 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.072692795 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.076708619 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.077394454 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.100159083 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.07728604 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.08279378 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.07477779 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.096633366 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.070465676 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.099297784 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.073135949 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.07107818 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.073549953 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.07745482 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.070811987 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.076672449 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.073784377 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.07621892 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.079255782 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.069727152 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.07393566 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.073264364 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.071339956 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.075018817 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.0746189 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.075737031 seconds)
  done (took 6.219899531 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.123910402 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.110294016 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068180156 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.117797055 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.109353108 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068412345 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.124344397 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.104231756 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.122382635 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.0679361 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068213634 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067208909 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074883208 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.078839967 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.119945853 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.113446505 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.07003202 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068431867 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.112873562 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.113241159 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067460251 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.124920963 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.115688121 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.112082875 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.067264198 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068619456 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.067085903 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067630103 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075798887 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075623253 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.06761403 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.078222612 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.080013258 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.07512235 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.06676329 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067111915 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067050691 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.075565073 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077324532 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077216631 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.074305845 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066781462 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067047981 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067596278 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068108042 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.06669063 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077152685 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076202205 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.077650885 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068435735 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067985189 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.067331089 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.068893573 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075231446 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074261922 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.075595261 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078546223 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068459608 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067722727 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069234165 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079080528 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076259733 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075974577 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068755148 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077251708 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.06772265 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078191424 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.080526559 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067764964 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068113407 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067586569 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067631391 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068136438 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074317417 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.074448793 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068104292 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069590421 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068461246 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076363063 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074722894 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067787251 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.07693999 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067513004 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068774764 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069547136 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070645533 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.080816119 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.078247164 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.07015909 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070068392 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.06931501 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069289093 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.068601838 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.079330308 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.224309342 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.074650563 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.075878766 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067160745 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.076229389 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.07479559 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.06715321 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.073067506 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066607925 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.06698608 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066774261 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073143224 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072757367 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.074560561 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066679983 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066344717 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.074554015 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076379182 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.06675473 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.07283412 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075530338 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.073502666 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.066243902 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076234263 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066721529 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.075656004 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066799927 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075164365 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066823494 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.073389674 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066754559 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.066002428 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066525039 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.076014391 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066889074 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066449643 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066813299 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069461336 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.073310801 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077202327 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067367594 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074403578 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.074632976 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.06784673 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076571845 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067471211 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076788874 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067633858 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067810135 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066724893 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078749694 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067533132 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068430223 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.067626189 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.076961958 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067633639 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076748356 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074245837 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067131141 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077729429 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076645523 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.074298675 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.07733743 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068234645 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.06768602 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067389858 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067703329 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.076813729 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078420546 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068822959 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.06775047 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.073872752 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.07732518 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.067228314 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.07414886 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074062466 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.074635945 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.068000578 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067784171 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.077904262 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.079286787 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.074848097 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.077767211 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.07597567 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.067744793 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074961831 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.079999455 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069421903 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.083307691 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06939809 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.080759357 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.080574161 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.076290776 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.080204566 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.232269653 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.076285507 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.075502807 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.077328852 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066267346 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.06642156 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.072937719 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066466515 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066716833 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.072618976 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067119256 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067826847 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.081006816 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067076417 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.075844886 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066254555 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.073563592 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066146337 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066989419 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077987752 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.0667198 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067008731 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.073677086 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066646257 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.072729477 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075737434 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.072811286 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066458412 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067024325 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076079071 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.076202381 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066594831 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066396362 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066926752 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.075117572 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.074552475 seconds)
  done (took 18.546401156 seconds)
done (took 39.678813011 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.170535589 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.112652489 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.224734287 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.203302246 seconds)
  done (took 2.310626629 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.102129118 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.063746005 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.106614103 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.116747673 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.063902927 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.101996149 seconds)
  done (took 2.100226385 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.202657316 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.176738481 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.25168136 seconds)
  done (took 2.171920292 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.36787231 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.151222291 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.258604999 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.515440603 seconds)
  done (took 2.935844286 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.13562587 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.132289294 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.075829891 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.145685764 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.08277306 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.060507316 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.145471807 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.06764495 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.097635179 seconds)
  done (took 2.548025505 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.141147488 seconds)
done (took 13.753602792 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.09969752 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.315916965 seconds)
    (3/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.074196654 seconds)
    (4/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.322623416 seconds)
    (5/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.356581715 seconds)
    (6/341) benchmarking ("sort", Int8, false)...
    done (took 0.18190432 seconds)
    (7/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.123037007 seconds)
    (8/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.294221261 seconds)
    (9/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.070326518 seconds)
    (10/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.110685628 seconds)
    (11/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.071620277 seconds)
    (12/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.118050268 seconds)
    (13/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.296701223 seconds)
    (14/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.110433796 seconds)
    (15/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.271816527 seconds)
    (16/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.285004831 seconds)
    (17/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.293849615 seconds)
    (18/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.245524834 seconds)
    (19/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.096094746 seconds)
    (20/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.074088504 seconds)
    (21/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.154141298 seconds)
    (22/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.075181585 seconds)
    (23/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.078601431 seconds)
    (24/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.064301203 seconds)
    (25/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.077070865 seconds)
    (26/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.066596075 seconds)
    (27/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.07473504 seconds)
    (28/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.321226182 seconds)
    (29/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.073515881 seconds)
    (30/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.177721366 seconds)
    (31/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.076812993 seconds)
    (32/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.233256219 seconds)
    (33/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.083821736 seconds)
    (34/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.120284031 seconds)
    (35/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.166495233 seconds)
    (36/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.273207603 seconds)
    (37/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.065858093 seconds)
    (38/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.197510278 seconds)
    (39/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.069598427 seconds)
    (40/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.2292321 seconds)
    (41/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.072802181 seconds)
    (42/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.151489611 seconds)
    (43/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.080188039 seconds)
    (44/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.065433936 seconds)
    (45/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.141978513 seconds)
    (46/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.210910248 seconds)
    (47/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.216416244 seconds)
    (48/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.096816271 seconds)
    (49/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.111170466 seconds)
    (50/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.187678967 seconds)
    (51/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.080571698 seconds)
    (52/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.066093847 seconds)
    (53/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.232542874 seconds)
    (54/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.079012227 seconds)
    (55/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.148213349 seconds)
    (56/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.073938682 seconds)
    (57/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.065615587 seconds)
    (58/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.182244679 seconds)
    (59/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.250218888 seconds)
    (60/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.140229763 seconds)
    (61/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.07371677 seconds)
    (62/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.095135158 seconds)
    (63/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.185045967 seconds)
    (64/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.247649032 seconds)
    (65/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.092834201 seconds)
    (66/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.075458449 seconds)
    (67/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.236558969 seconds)
    (68/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.064716612 seconds)
    (69/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.073444738 seconds)
    (70/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.067404356 seconds)
    (71/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.090358749 seconds)
    (72/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.08627683 seconds)
    (73/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.148267481 seconds)
    (74/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.13249044 seconds)
    (75/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.064382125 seconds)
    (76/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.084144063 seconds)
    (77/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.160466144 seconds)
    (78/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.114484482 seconds)
    (79/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.064036498 seconds)
    (80/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.089726847 seconds)
    (81/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.069675763 seconds)
    (82/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.202236626 seconds)
    (83/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.068576508 seconds)
    (84/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.072211796 seconds)
    (85/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.064299865 seconds)
    (86/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.119416328 seconds)
    (87/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.082697436 seconds)
    (88/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.075804716 seconds)
    (89/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.189547761 seconds)
    (90/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.063872872 seconds)
    (91/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.064281012 seconds)
    (92/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.071537672 seconds)
    (93/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.185349038 seconds)
    (94/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.120867531 seconds)
    (95/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.064100522 seconds)
    (96/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.082051393 seconds)
    (97/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.085998929 seconds)
    (98/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.093274832 seconds)
    (99/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.082403008 seconds)
    (100/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.283761442 seconds)
    (101/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.204499693 seconds)
    (102/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.08315965 seconds)
    (103/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.228070433 seconds)
    (104/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.145733477 seconds)
    (105/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.065513333 seconds)
    (106/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.073262022 seconds)
    (107/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.064622067 seconds)
    (108/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.064612342 seconds)
    (109/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.06511539 seconds)
    (110/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.077834023 seconds)
    (111/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.06489285 seconds)
    (112/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.108198659 seconds)
    (113/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.187067263 seconds)
    (114/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.212216414 seconds)
    (115/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.200726443 seconds)
    (116/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.07708563 seconds)
    (117/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.071988319 seconds)
    (118/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.064663684 seconds)
    (119/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.064678303 seconds)
    (120/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.158587016 seconds)
    (121/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.070307548 seconds)
    (122/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.142341706 seconds)
    (123/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.0743211 seconds)
    (124/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.146719985 seconds)
    (125/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.090951353 seconds)
    (126/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.073954008 seconds)
    (127/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.189978664 seconds)
    (128/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.083058037 seconds)
    (129/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.069055795 seconds)
    (130/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.074555065 seconds)
    (131/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.070760656 seconds)
    (132/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.151521002 seconds)
    (133/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.141876619 seconds)
    (134/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.065787959 seconds)
    (135/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.065643399 seconds)
    (136/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.08792214 seconds)
    (137/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.074111197 seconds)
    (138/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.067255986 seconds)
    (139/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.065249637 seconds)
    (140/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.065013662 seconds)
    (141/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.223399875 seconds)
    (142/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.076544838 seconds)
    (143/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.176103004 seconds)
    (144/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.072831773 seconds)
    (145/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.071562783 seconds)
    (146/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.06551087 seconds)
    (147/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.174832427 seconds)
    (148/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.075596636 seconds)
    (149/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.065817903 seconds)
    (150/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.140068478 seconds)
    (151/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.08640339 seconds)
    (152/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.073780407 seconds)
    (153/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.17616301 seconds)
    (154/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.075026983 seconds)
    (155/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.084832238 seconds)
    (156/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.257081203 seconds)
    (157/341) benchmarking ("sort", Bool, false)...
    done (took 0.146278078 seconds)
    (158/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.072396357 seconds)
    (159/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.073023995 seconds)
    (160/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.069339343 seconds)
    (161/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.064964955 seconds)
    (162/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.079501088 seconds)
    (163/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.065235714 seconds)
    (164/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.071302449 seconds)
    (165/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.073889911 seconds)
    (166/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.071373823 seconds)
    (167/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.073991695 seconds)
    (168/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.065282713 seconds)
    (169/341) benchmarking ("sort", Int64, false)...
    done (took 0.065529347 seconds)
    (170/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.172316237 seconds)
    (171/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.202313589 seconds)
    (172/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.080402359 seconds)
    (173/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.27234844 seconds)
    (174/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.077375851 seconds)
    (175/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.172571505 seconds)
    (176/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.069344991 seconds)
    (177/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.14820378 seconds)
    (178/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.066237598 seconds)
    (179/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.150399917 seconds)
    (180/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.064012449 seconds)
    (181/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.064027248 seconds)
    (182/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.064572071 seconds)
    (183/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.084879561 seconds)
    (184/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.0647691 seconds)
    (185/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.13710145 seconds)
    (186/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.064584071 seconds)
    (187/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.130361296 seconds)
    (188/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.162156004 seconds)
    (189/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.073365108 seconds)
    (190/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.068457142 seconds)
    (191/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.068098823 seconds)
    (192/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.080976886 seconds)
    (193/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.065655562 seconds)
    (194/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.066271251 seconds)
    (195/341) benchmarking ("sort", BigInt, false)...
    done (took 0.265331443 seconds)
    (196/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.069147968 seconds)
    (197/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.064079175 seconds)
    (198/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.064629902 seconds)
    (199/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.071308942 seconds)
    (200/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.151094958 seconds)
    (201/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.066353756 seconds)
    (202/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.091734636 seconds)
    (203/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.092039236 seconds)
    (204/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.067221608 seconds)
    (205/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.139994499 seconds)
    (206/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.065015769 seconds)
    (207/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.077389481 seconds)
    (208/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.065129721 seconds)
    (209/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.155832971 seconds)
    (210/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.064845091 seconds)
    (211/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.190645163 seconds)
    (212/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.08363557 seconds)
    (213/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.065284707 seconds)
    (214/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.071507206 seconds)
    (215/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.067032008 seconds)
    (216/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.211975181 seconds)
    (217/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.067305798 seconds)
    (218/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.100405754 seconds)
    (219/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.066059528 seconds)
    (220/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.071849025 seconds)
    (221/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.064104928 seconds)
    (222/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.071520001 seconds)
    (223/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.064719018 seconds)
    (224/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.064321384 seconds)
    (225/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.138709886 seconds)
    (226/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.065304494 seconds)
    (227/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.070517963 seconds)
    (228/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.071651611 seconds)
    (229/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.067242137 seconds)
    (230/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.064842422 seconds)
    (231/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.064908802 seconds)
    (232/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.073342081 seconds)
    (233/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.188624253 seconds)
    (234/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.089776389 seconds)
    (235/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.146801489 seconds)
    (236/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.065988854 seconds)
    (237/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.067391348 seconds)
    (238/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.198774028 seconds)
    (239/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.07191659 seconds)
    (240/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.06684735 seconds)
    (241/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.064993196 seconds)
    (242/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.064606168 seconds)
    (243/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.0666093 seconds)
    (244/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.077820433 seconds)
    (245/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.07213741 seconds)
    (246/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.066069809 seconds)
    (247/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.0820757 seconds)
    (248/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.073834207 seconds)
    (249/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.069588057 seconds)
    (250/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.07739745 seconds)
    (251/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.083733697 seconds)
    (252/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.066364216 seconds)
    (253/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.065839105 seconds)
    (254/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.066036107 seconds)
    (255/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.065956029 seconds)
    (256/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.070158037 seconds)
    (257/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.072288508 seconds)
    (258/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.06568655 seconds)
    (259/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.066805253 seconds)
    (260/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.066357243 seconds)
    (261/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.070622773 seconds)
    (262/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.073356124 seconds)
    (263/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.256643813 seconds)
    (264/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.154416997 seconds)
    (265/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.066115361 seconds)
    (266/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.069842401 seconds)
    (267/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.210309332 seconds)
    (268/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.065777362 seconds)
    (269/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.069694679 seconds)
    (270/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.19691883 seconds)
    (271/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.065440194 seconds)
    (272/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.067093217 seconds)
    (273/341) benchmarking ("sort", Float64, false)...
    done (took 0.136400046 seconds)
    (274/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.06519857 seconds)
    (275/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.068487072 seconds)
    (276/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.066655715 seconds)
    (277/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.064324646 seconds)
    (278/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.066379408 seconds)
    (279/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.162100809 seconds)
    (280/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.065408486 seconds)
    (281/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.084715016 seconds)
    (282/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.065491938 seconds)
    (283/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.138778102 seconds)
    (284/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.063723094 seconds)
    (285/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.065356596 seconds)
    (286/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.150846257 seconds)
    (287/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.071437783 seconds)
    (288/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.071837889 seconds)
    (289/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.085139886 seconds)
    (290/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.147324705 seconds)
    (291/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.064820384 seconds)
    (292/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.064839057 seconds)
    (293/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.066620394 seconds)
    (294/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.090082044 seconds)
    (295/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.084092655 seconds)
    (296/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.159038926 seconds)
    (297/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.065770527 seconds)
    (298/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.064675642 seconds)
    (299/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.064869267 seconds)
    (300/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.091314089 seconds)
    (301/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.17344169 seconds)
    (302/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.064949856 seconds)
    (303/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.064559254 seconds)
    (304/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.06414639 seconds)
    (305/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.066246344 seconds)
    (306/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.225807755 seconds)
    (307/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.080599889 seconds)
    (308/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.064532301 seconds)
    (309/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.064488239 seconds)
    (310/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.071991575 seconds)
    (311/341) benchmarking ("sort", Float32, false)...
    done (took 0.136750692 seconds)
    (312/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.065870669 seconds)
    (313/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.06468007 seconds)
    (314/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.121005934 seconds)
    (315/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.064849027 seconds)
    (316/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.071669454 seconds)
    (317/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.208594482 seconds)
    (318/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.065070198 seconds)
    (319/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.064595681 seconds)
    (320/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.248400003 seconds)
    (321/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.065963645 seconds)
    (322/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.08507124 seconds)
    (323/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.070684264 seconds)
    (324/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.084670445 seconds)
    (325/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.076360284 seconds)
    (326/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.069123512 seconds)
    (327/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.064553413 seconds)
    (328/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.066993695 seconds)
    (329/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.064965501 seconds)
    (330/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.068844709 seconds)
    (331/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.086514096 seconds)
    (332/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.06566743 seconds)
    (333/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.066892308 seconds)
    (334/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.070441006 seconds)
    (335/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.068850639 seconds)
    (336/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.064718257 seconds)
    (337/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.065152326 seconds)
    (338/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.064477429 seconds)
    (339/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.066281457 seconds)
    (340/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.069314899 seconds)
    (341/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.211853778 seconds)
  done (took 38.696629961 seconds)
done (took 40.264010955 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.125010468 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.078119107 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.075495844 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.072653776 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.076298931 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.07668573 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.076281983 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.073906744 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.078438242 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.075077076 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.10620307 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.063497759 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.071179588 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.080608874 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.072461358 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.079091602 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.075967624 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.078690118 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.064468491 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.07907982 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.089344398 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.076834482 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.073019453 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.079048798 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.064946688 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.073020223 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.119833277 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.084227037 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.069098049 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.073836684 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.071716413 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.080244623 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.071860094 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.071523288 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.073988971 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.069392963 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.074428768 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.07061632 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.120192834 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.069560762 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.064868942 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.076682127 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.071343874 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.072165871 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.072808601 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.076226103 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.069520032 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079768665 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.063936801 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.075419509 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.120437051 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070096826 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.06922335 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.072526028 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.069418989 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.07388483 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.069013467 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.075824643 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.069340324 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.075882211 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.073749339 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.072199815 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.064244142 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.072856681 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.071301667 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.071597342 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.063202843 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069909444 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.064250993 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.064445024 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.063783277 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.073381763 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.07134495 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.06940163 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.0637118 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.064444392 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.063772679 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.076135907 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.071438082 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.073455943 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.064825497 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.069760513 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.069293805 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.064922626 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070068409 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.076161294 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.063823238 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.064988025 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.063657228 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.079237929 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.070994281 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.06451769 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.076329063 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070229175 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070210058 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.064613791 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.064061916 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070278388 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.072639227 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.064604396 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.063720482 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070390643 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.069816813 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.073914247 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.065354832 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070536365 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070424417 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.064298299 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.074944951 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.073186106 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.075361489 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.078988891 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.075216886 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.079390932 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.066494531 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.064769912 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.075765417 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.225674793 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070207602 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.071631615 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.068860047 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.071535747 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.064173157 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.063079055 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069066283 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.06920567 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.063908267 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.063918048 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.063793903 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.072238973 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.070579021 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.062610538 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.063332072 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.072966866 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.072225918 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.062821714 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.062638631 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.072079559 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.063944798 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.069369874 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.068505508 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.072244604 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.063113411 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.063967133 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.062663694 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.062888797 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.062718077 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.068505008 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068981597 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.063849879 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.071932287 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.070540552 seconds)
done (took 12.808944196 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.068377505 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.10772948 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.116040468 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.109473855 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.077741201 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.06837886 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.068193009 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.084381697 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.067741793 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.08997188 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.08967583 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.08594299 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.128792469 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.063270283 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.064640187 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.065297867 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.062708432 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.07663606 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.113100235 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.088567105 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.107529456 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.064616661 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.078236233 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.084932014 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077843904 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.084064435 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.066354731 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.065655478 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.067780587 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.082233497 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.090647535 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.064626319 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.065969802 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.084128619 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.080884883 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073684796 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.065581868 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071635125 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.065660417 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.064667265 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.066642905 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.083511237 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.071886763 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.07214207 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.065888167 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.065804368 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.064831448 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.072569112 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.078817388 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.071087223 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.07758673 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.081747479 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.066486713 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.064656081 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.062982362 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.072722728 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.064702692 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.065643335 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.065316417 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.064719815 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.065347759 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.067564579 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.070360125 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.075687871 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.069109097 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.072461127 seconds)
  done (took 6.632430863 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083930789 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.092659076 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.078449961 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.078644634 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.064080398 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.064892462 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.064897516 seconds)
  done (took 2.198451782 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068821545 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.104775551 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.111562556 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.112557665 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.121094699 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.110018635 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.06579694 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.097741107 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.064271131 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.106035164 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.119328822 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.114102431 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.068148757 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.077110156 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.065311225 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.114215972 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.066001393 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.072307944 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.110610163 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.115966117 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069845334 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.095884933 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.078990832 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.066001645 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.114787395 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.106595131 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.067768249 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.066118741 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067584148 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.06510395 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064934786 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.08817387 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.106394263 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.08008853 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065808277 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.064507294 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.104310257 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066080286 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.103251869 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.072585556 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.103421513 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067273855 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067583364 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.065271085 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.066319143 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.108640045 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.066391723 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.065117432 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.064750664 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.107625397 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.064807462 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.106527842 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.067862633 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.070252361 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072392975 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071675587 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.072722798 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.06576645 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.108782065 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.075399848 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067080507 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.117908436 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.116779696 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.10463401 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.118080557 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.075361355 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.109064382 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.105970474 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.065777079 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.065616289 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.066349141 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.11936652 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.06945273 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.068442857 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.070935044 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.073300065 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.111637817 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.122696672 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.122914145 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.080072292 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.069013827 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067137219 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.23668761 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.119979493 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069781338 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06467366 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.065438861 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.064220284 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.069430263 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.069125237 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.069454974 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.064533288 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074587227 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.067113758 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.066588131 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.112204686 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.064814928 seconds)
  done (took 9.969125206 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.07026649 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.067471754 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.065979461 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.065860716 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.066102298 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.065803318 seconds)
  done (took 2.084860149 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.092500734 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.065960202 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.077368389 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.065577712 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.087459633 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.108144468 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.107309465 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067368337 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.081807149 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.076820166 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.10808283 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.109717251 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.109941376 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.066990768 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.107412489 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.067001769 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.108511159 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.069637595 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.076898538 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067866289 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.07996958 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.067474472 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067632109 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.116616602 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.068656705 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.067259489 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.067104674 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.085360673 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.076986159 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.067939536 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.067388744 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.068386906 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.075334581 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.067561054 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.110518942 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.075599491 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066623738 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.070963785 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068266938 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.068409581 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.112470025 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.068022516 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070326447 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.070770241 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.067622827 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.075149421 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.070832115 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070380339 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.110261751 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.070906946 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.070759244 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.066653873 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.068223109 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.070624415 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.075075776 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067379818 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.070668267 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.110288221 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.067647447 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.07620481 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.066614479 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.068490705 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067709944 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.068392179 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.071562041 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.071065553 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.075532783 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.06786794 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067937801 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.066650035 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.071059647 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.06646969 seconds)
  done (took 7.248831262 seconds)
done (took 29.786586845 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.540816965 seconds)
  done (took 2.186935021 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.963264339 seconds)
  done (took 2.654617274 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.240345393 seconds)
  done (took 11.934270512 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.393002779 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.48205598 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.758897138 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.136572132 seconds)
  done (took 3.485271504 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.865371282 seconds)
  done (took 2.564102194 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.239611785 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.225772304 seconds)
  done (took 2.177628979 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.449386784 seconds)
  done (took 2.136451201 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.21623633 seconds)
  done (took 2.907884461 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.2366068 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.161511991 seconds)
  done (took 2.09761919 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.628616418 seconds)
  done (took 2.319528869 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.743337799 seconds)
  done (took 6.440582854 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.32717008 seconds)
  done (took 2.076063876 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.240364277 seconds)
  done (took 1.936506664 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.614483157 seconds)
  done (took 4.308638902 seconds)
done (took 50.940603096 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.087080934 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.084189828 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.083902858 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.079503044 seconds)
  done (took 2.003183692 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075787942 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.068976544 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.071385459 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.071742515 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.069189334 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.070832406 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.071654032 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.067870164 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.069430876 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.068608778 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.066786682 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.068475617 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.070985619 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.068038201 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.07058932 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.072034517 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.068449774 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.068627243 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.070363061 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.067996687 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.070982388 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.068316273 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.066259948 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.067832842 seconds)
  done (took 3.365855011 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079772328 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.070340915 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.073280935 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.068865513 seconds)
  done (took 1.998108054 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077968728 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.07463474 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.083033559 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.087713042 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.073983706 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.074866267 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.081823143 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.081962553 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.063623362 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.084764493 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.066044227 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.064851131 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.064902123 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083681595 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.081357219 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.060609107 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.061667101 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.075141117 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.077030259 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.077140804 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.06652673 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.063551104 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.074318965 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.075225591 seconds)
  done (took 3.479833816 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.08369097 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.063847476 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.080681487 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.088767671 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.09020332 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.063872576 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.078213521 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.090598055 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.126859705 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.064238734 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.069986525 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063865806 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.103435442 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.063821364 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.079322055 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.108426842 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.111636994 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.068728895 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.096896046 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.064038782 seconds)
  done (took 3.371620849 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.079016704 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.068858541 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.068605284 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.063981673 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.074596724 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.070706705 seconds)
  done (took 2.14038511 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069744585 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.066535087 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.065616097 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.070392469 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.066050414 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.066009803 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.065364323 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.064496469 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.064471307 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.06527806 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.065210505 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.065575326 seconds)
  done (took 2.500502816 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.215981016 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.071135829 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.06883116 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.064112629 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.065980142 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.065173415 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.079169589 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.067117711 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.087845557 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.065431476 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.06523811 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.067545429 seconds)
  done (took 2.690764016 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106813447 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109486253 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.142174773 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114186812 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11517062 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094122744 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.164426597 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.092810474 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.1591963 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.136147058 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116416602 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093564134 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086061234 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.068572562 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099509952 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119745028 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.139010888 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071725691 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112357849 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.208155563 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132669297 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.134827755 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.147201264 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11606821 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.091787777 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146772058 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095839404 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101633548 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124346695 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.127286592 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118290136 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.097070173 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.070645662 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.06973529 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150363929 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.106312285 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123747931 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.092473769 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105801392 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088480201 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108745463 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.06923268 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.083406096 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.112739263 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086087091 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134600064 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.093440837 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117183176 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081184074 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.141802725 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134761681 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.145319917 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088989735 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110519994 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147377816 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.12081722 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.146511181 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.111920024 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086826718 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.126360058 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.115235211 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107040662 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117454982 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083651653 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.191606878 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.094560751 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.119394592 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12139071 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.103557045 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101957175 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.112645248 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.145295403 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.137984957 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.137922454 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.151559181 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100488015 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128904028 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.108315193 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.135395131 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112047476 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.075215731 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.132075394 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.136640174 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106848995 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107061259 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141855137 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096860715 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080451374 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.107184593 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.125792988 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083346341 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.122132097 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086153547 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.117155383 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148160386 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105557067 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117807587 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.125847229 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081488299 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.492963311 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109282879 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075947106 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.117674071 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112779532 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158241259 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095626031 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.07625389 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101018003 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103397926 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.156317893 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1083027 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079800385 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109706809 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141801683 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094863055 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.222149754 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.095991967 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.142501328 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111992228 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086960213 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074682434 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.090421189 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114253583 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108905543 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112620871 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094503986 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.084026702 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086494504 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115627815 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093679378 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080743326 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114488735 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.099316001 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.074595117 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087946716 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.076012151 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142776766 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.077838153 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137136454 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126041684 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.076522172 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108024546 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098617645 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109167322 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.097375463 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119378295 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143036376 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.116348043 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.09134102 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.096173913 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109592302 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.146942734 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.129675814 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.269471004 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.075446145 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098738926 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110214023 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095717646 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125342004 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093942079 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104733502 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100861451 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137959203 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140674074 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09595009 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098510665 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104778397 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.11974621 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074834748 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153951799 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103306315 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118523251 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08413731 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141827524 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.1119015 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.08959164 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086762805 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100090667 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.105056791 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107670019 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144630337 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.095597643 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.071913868 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092655313 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144524424 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076866078 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109740742 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.091079413 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.092032099 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119249638 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.095210415 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080804756 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.067678764 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12783818 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.160397101 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.069752824 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115253542 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.110133233 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103427715 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.123908461 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.069469607 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120777584 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142455091 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119148676 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146717279 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.340495031 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116033147 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116901945 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.111281021 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103477244 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077310269 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.122711889 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.131879416 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093463225 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092866222 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132924568 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116920796 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.133516851 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.114819468 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116978658 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.105129303 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108668925 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103374998 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.10458588 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145439944 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122819096 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.125211349 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08594151 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105911398 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119848575 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137027157 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081064595 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142870499 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.085052929 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.12074573 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.078271972 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.124024648 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.077069252 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.108536931 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078709017 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100589304 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.068536966 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.073070932 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142947458 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.113674776 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108576757 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102641396 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.140819735 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.139368112 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.07921037 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108895594 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118586655 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102435586 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119236291 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.110079786 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.25862087 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100941452 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106431353 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.08349367 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.079438174 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.113397504 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091776248 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122651105 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.082316055 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073050134 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136943591 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101964962 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092608112 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076202769 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104944827 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.121376933 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090576263 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084781992 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11284957 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103231794 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139540873 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.090083645 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.097013493 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.124880658 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079545727 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.091821939 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.068638994 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.085042555 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.07520931 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.129593377 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075271421 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117287053 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.067970652 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131325887 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087273331 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.092408751 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.102122097 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109671532 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127612864 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09407237 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141057425 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089495736 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.121177756 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107589696 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094140251 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088819214 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103205561 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100845098 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.123679145 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.096399516 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124862096 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147430331 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10468674 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.1456296 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091638478 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12525634 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109130236 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.299756194 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109472737 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.164481622 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.137542627 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109696885 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109912693 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073437782 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093589796 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102744716 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.110064546 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.170576207 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123253662 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.070770119 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104997426 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092107276 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106655521 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102691613 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080838889 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144594129 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102998758 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.087716677 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112483425 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.091404902 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104199177 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075698977 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100030252 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.104799111 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09514655 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097212786 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118421897 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.130296563 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113231925 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.145284012 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.100733439 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.091793803 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.118921094 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110888842 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109952842 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085519828 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086048849 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139224989 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123248142 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.128911443 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.102292807 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110136757 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114760698 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10201496 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128286081 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10965183 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.130492231 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081120665 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.077163573 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.240351243 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.07130702 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.121257971 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105357777 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109616139 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096409418 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.070706268 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101092606 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104284888 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070269891 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085882394 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091490875 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.093808489 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.090065406 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104906882 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.110127138 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.089188954 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101562354 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097141596 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144419235 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.099701473 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087323093 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143356707 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.151527651 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088060474 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092388657 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.070974106 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078646525 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112543876 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150402068 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.152934185 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.078451544 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086564558 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.085717723 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086667437 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.070842862 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.088886287 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.088194495 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105947473 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101521974 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113806526 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106108947 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075010562 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101921173 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098660894 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092109964 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.107432034 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12226115 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.131877073 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.144903639 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116497959 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109608789 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076526909 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.081039419 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076073085 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079688326 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.102065274 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.078925616 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076420135 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.316831982 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.090482908 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102832843 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106150607 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08619333 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073934139 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131446181 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.067906799 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132083742 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.069554322 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079891919 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.080022266 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077169673 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091157234 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134721997 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10888226 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109398145 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105737317 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102075221 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.159684883 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157560536 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081044776 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.14448581 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07540009 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075832159 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07518608 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111160516 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08975153 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115557803 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14269306 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090424854 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101905452 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07769243 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14421678 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099300976 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104211664 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085920093 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078902957 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14459593 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079098779 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.080984352 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088885564 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.111286128 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.071781145 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104139998 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08482756 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079436225 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.166252928 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.711862433 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09129558 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.075733797 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096677478 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.146294496 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136705954 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098658289 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110514387 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.290805213 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098992561 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.094868948 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105719541 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.188263054 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072847307 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092309908 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.101737374 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095424428 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099422544 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.096919477 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.086169392 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.090153062 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.085138154 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077536802 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105269751 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086268395 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094702942 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108887148 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081420375 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.086139704 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.128874523 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.102927462 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.08140625 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087374859 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.104606769 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08741041 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103406768 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.069326854 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114630863 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091721287 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1196131 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.098404255 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108261435 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.129241236 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094368203 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138606915 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.108086089 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.123407549 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087135748 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.07803308 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127095831 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.08992774 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07715191 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145823106 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.096536638 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.091719329 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104873544 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.097473748 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115036691 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119090107 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114927539 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098067604 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079464163 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103040629 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.104746879 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.260826297 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078126698 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.072695028 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.074866541 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105288112 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084586904 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.081910895 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112602717 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087176788 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.101025234 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.101237888 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.120228166 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085992138 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099587705 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109358461 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089554345 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107603806 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099382451 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.126094483 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.171343598 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124086847 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.128669502 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134559926 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.077530501 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.075386007 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.068069537 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116268163 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079236659 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.089388457 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08106923 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135133662 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.082306994 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112948944 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.244001628 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080573828 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097581883 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096719796 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.069311257 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083312087 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10794043 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086742843 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079777163 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119885178 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083232172 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.130204786 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111768956 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099589703 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095642972 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080912012 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115215014 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105020763 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.131527687 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.095556501 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.075514145 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12596687 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104850684 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141524068 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.073472078 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081707997 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.133041584 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.276867247 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128632443 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078506416 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147238682 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.141830594 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098911354 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131587299 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.06947776 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086145978 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088077756 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.124395313 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082014284 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109099445 seconds)
  done (took 68.97556673 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.145273208 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.182300517 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.122643946 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.133217947 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.291033482 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.301087991 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.15352354 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.124278745 seconds)
  done (took 3.34115083 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.0702536 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.081680944 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.079483609 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.242785966 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.097159958 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.066775202 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.072372217 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.081001367 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.066278689 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.06599431 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.100367034 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.06624745 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.066520531 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.528933137 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.065911712 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.071943463 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.066253707 seconds)
  done (took 3.774505551 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.349886661 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.894028831 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.321119803 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.645809477 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.166368675 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.724715951 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.074586502 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.081760967 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.800309484 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.213592133 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.15922799 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.087715553 seconds)
  done (took 21.403284555 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.077858628 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.118902405 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.117770623 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.073033299 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.072671011 seconds)
  done (took 2.335694145 seconds)
done (took 123.106954523 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.085281478 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.170877432 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.067237873 seconds)
  done (took 2.148254919 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.120458001 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.116088439 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.116296089 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.118105045 seconds)
  done (took 2.354503348 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.076049299 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.07472521 seconds)
  done (took 2.035016705 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.227418094 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.213300822 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.090202528 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.084700529 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.078730777 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.07859763 seconds)
  done (took 2.134975572 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.07274113 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.069390205 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.069501145 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.069816768 seconds)
  done (took 2.159619646 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.170015087 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.065867264 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.067870402 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.069904751 seconds)
  done (took 2.253090623 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.086821841 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.085346176 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.114561425 seconds)
  done (took 2.172140294 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.085140129 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.083278799 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.077383478 seconds)
  done (took 2.131565242 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.110779819 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.094828454 seconds)
  done (took 2.08676116 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.08064156 seconds)
  done (took 1.962586208 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.092932347 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.096649824 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.183447517 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.149209955 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.184808787 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.171086854 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.07606019 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.076459616 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.07209063 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.071030457 seconds)
  done (took 3.051224173 seconds)
done (took 26.992304097 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.085820486 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.192354114 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.315075945 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085222853 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.653166044 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.312385934 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.73099816 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.088947111 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.099050962 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067350131 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084118747 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.632300865 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.733323083 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.146609683 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.717264182 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.134246687 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.806246979 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067527288 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066729345 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067199426 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.715719358 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066847858 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067408297 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067821636 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.804424686 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.330845239 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068060496 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.134202505 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067016589 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.07129282 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.315104664 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.06860663 seconds)
  done (took 14.719660125 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.077142739 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.144530712 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.07269422 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.082811831 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.06916115 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.069148948 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.071509161 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.068118634 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.110342488 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067536718 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084645456 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.06700519 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.071945724 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068827505 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087873586 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.067536673 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069610004 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068125286 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.06751817 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067906333 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.086342084 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.067185943 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067790466 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067864448 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067592194 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.08154273 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068686185 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.067286135 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067550939 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.0717336 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072963823 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068940088 seconds)
  done (took 4.309216486 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.129175628 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.128841495 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.07294959 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.107283477 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.116387385 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070591967 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.150048017 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.089743356 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.114096015 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068132219 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084792259 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.067540106 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.102757139 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.069005091 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087886474 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.067511139 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.070106545 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068108562 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067235883 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067720162 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.086126619 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.067322324 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067826231 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.06829353 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.068132713 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083160569 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068551456 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.067692264 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067537529 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071648299 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073228718 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068758908 seconds)
  done (took 4.560751 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.07101265 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.069713124 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.075654762 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.078562866 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.065012977 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.067208656 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.068162052 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.065669785 seconds)
  done (took 2.467268924 seconds)
done (took 27.962582947 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080559242 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.066398655 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.06890011 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.086048195 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.072229905 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.110015099 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.063821767 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.073252906 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.069926345 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.071321647 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.072235516 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.066323495 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.068630647 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.063399607 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.070338985 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.064523107 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.1123763 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.068870482 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.109317658 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.110831056 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.067051986 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.070266835 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.074088951 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.11143081 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.110374895 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.110021034 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.073575681 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.070283624 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.064756539 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.067468181 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.170040655 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.184455175 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.075223812 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.117398994 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.065193609 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.06484853 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.069053201 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.067446688 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.113707292 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.073956519 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.067097506 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.073531384 seconds)
  done (took 5.403039323 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.189615285 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.194125316 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.186270777 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.079129929 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.091610421 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.078769595 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.192450804 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.076350528 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.074466067 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.192554423 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.071016352 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.07485114 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.077050164 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.067793378 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.074667551 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.070691286 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.076058524 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.068787712 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.074328523 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.074180327 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.191535614 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.072179289 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.079377846 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.076083411 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.070129919 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.076042649 seconds)
  done (took 4.578672244 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.074916794 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.087244673 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.09098538 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.145123766 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.109176583 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.082069651 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.081485109 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.094124149 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.101013704 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.067360362 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.071034943 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.094890036 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.095429094 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.073849127 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.106320003 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.084801826 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.078883731 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.06836114 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.073791229 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.102001539 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.089693515 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.085290672 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.099691842 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.086904914 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.065974773 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.076063497 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.073871143 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.082506739 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.074234809 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.079184402 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.070904933 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.071494182 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.067734792 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.07831384 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.071005536 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.064885285 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.08971637 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.080161708 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.081993308 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.107119266 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.077262723 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.068602728 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.144182465 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.133060062 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.067157251 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.069542579 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.071208159 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.079992724 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.068660563 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097829713 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.08297666 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.066946286 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.086051597 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.068603754 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.06868936 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.084284552 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.069641836 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.069292748 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.079090236 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.073390005 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.088064372 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.072627336 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.088243407 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.067181618 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.078518825 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.068541057 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.068789603 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.065745214 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.101707465 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.075282486 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.117883574 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.068359676 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.064890888 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.079442474 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.078439852 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.073847835 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.066816051 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086313788 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079193998 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.070828563 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.078264157 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.070777326 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.070945304 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.103852903 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.065956796 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.064930067 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.064858023 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.069037147 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.070280776 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.067558862 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.079936971 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.066740119 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.070667995 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.082028712 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.06741407 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.068860717 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.069753945 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.068389799 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.066668586 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.077622805 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.07142859 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.069233389 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.080261702 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.068619387 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.07078474 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.082555629 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.076593909 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.066939268 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.068451204 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.070616194 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.069698566 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.072436179 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.071247019 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.069604274 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.072488016 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.075337125 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.074278867 seconds)
  done (took 11.173900883 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.207146361 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.19439048 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.068909187 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.19236699 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.075934639 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.124472974 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.192684943 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.130783447 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.067698534 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.06845798 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.066721601 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.140297955 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.133682198 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.143656938 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.115027911 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.067964861 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.094029521 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.143594372 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.198207412 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.193225828 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.093483138 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.075719396 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.070089912 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.069160597 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.069029516 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.077136574 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.083544893 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.076632116 seconds)
  done (took 5.206844649 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.07604232 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.082667622 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.070689251 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.092374888 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.084384884 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.067469881 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.069551851 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.071161271 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.084324036 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.072992171 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.066973507 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.071527988 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.070427843 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.067583448 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.068011604 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.073527064 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.074075298 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.066856006 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.070848085 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.07163836 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.078329767 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.155479908 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.071891395 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.067648783 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.069317761 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.067287161 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.073662768 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.07548074 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.066596102 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.101537863 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.06510289 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.071673506 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.0819017 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.068155028 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.067010868 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.067697038 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.067251559 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.067321054 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.067613278 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.065355269 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.065225483 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.07337053 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.066168783 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.072874666 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.08271559 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.076416639 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.068777845 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.069619215 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.069624828 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.064203283 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.070613306 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.070707201 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.070074601 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.076041533 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.071041989 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.069601176 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.069129481 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.099323211 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.074206939 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.067194154 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.067482634 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.065784655 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.069005472 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.075667104 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.084210752 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.069209166 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.0656425 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.067306518 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.075045569 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.082112463 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.067017251 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.073738436 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.064827847 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.067575177 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.069722022 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.070454873 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.069207518 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.065857004 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.067468536 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.067624468 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.068509514 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.067238119 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.067824095 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.070137527 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.06517398 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.066170232 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.069533334 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.069317779 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.073082138 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.066296865 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.070128564 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.069052227 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.066506412 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.070691038 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.073913085 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.070989974 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.088463163 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.075815341 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.068231566 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.065559654 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.083752772 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.06973301 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.067006275 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.071298249 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.072311048 seconds)
  done (took 9.576556292 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.098380496 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.068393968 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.086802942 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.098354055 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.076947441 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.07165461 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.081225485 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.067850244 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.090116726 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.066317196 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.075858021 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.065114346 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.080656047 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.076303268 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.068630959 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.077330546 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.069271248 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.088350996 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.609546479 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.066789283 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.076193029 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.079422405 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.079363891 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.08499052 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.0847298 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.085743055 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.079276167 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.070527834 seconds)
  done (took 4.7076308 seconds)
done (took 42.557402987 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.989676426 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.251989888 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.044212784 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.524206924 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.197352289 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.991854915 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.062332191 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.988204149 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.684082722 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.099655725 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.844725361 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.706513514 seconds)
done (took 70.377342409 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.105532543 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.143719628 seconds)
    (2/2) benchmarking "String"...
    done (took 2.23310428 seconds)
  done (took 6.30950957 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.422768787 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.990107652 seconds)
    (3/3) benchmarking "different"...
    done (took 2.025617971 seconds)
  done (took 8.35829739 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.294487542 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.600117759 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.261535735 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.985464312 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.995632548 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.503560355 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.116550138 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.623135662 seconds)
  done (took 34.012644084 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.995341684 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.272356752 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 5.34950668 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 5.43813319 seconds)
  done (took 22.054984918 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.427151669 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.378481546 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.375558963 seconds)
    (4/4) benchmarking "different"...
    done (took 2.441875135 seconds)
  done (took 11.633888957 seconds)
done (took 94.835941052 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.98555519 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.099740428 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.004991434 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.163343204 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.050143855 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.060120659 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.989765609 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.011826993 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.990495501 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.99215174 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.929858974 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.989258628 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.985933081 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.02465112 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.986603225 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.000484098 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.107598147 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.992968265 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.992215504 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.503851582 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.337488708 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.994250297 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.99716792 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.198600098 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.242392103 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.035737875 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.328264485 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.999122278 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 3.01699888 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.998819897 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.990819877 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.991078244 seconds)
  done (took 210.912174221 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.987941202 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.696055308 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.738016784 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.007902789 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 5.266913528 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.332302726 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.77345896 seconds)
    (8/36) benchmarking "gemv"...
    done (took 5.293188736 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.990960662 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.008446113 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.908331677 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.987263035 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.945962576 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.537233307 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.020049306 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.992237427 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.800608172 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.740158125 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.026250592 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.861146726 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.988810204 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.377007995 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.381513529 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.737844549 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.988457434 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.020766289 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.997026238 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.017802053 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.447450312 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.763418099 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.009014169 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.997811311 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.421342544 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 3.218812101 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.002722417 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.005923381 seconds)
  done (took 184.219740536 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.261938975 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.993331702 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.026713295 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.098207094 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.815532233 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.654010935 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.989489954 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.984874863 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.984183722 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.991711523 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.987870409 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.050734065 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.293534061 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.012776905 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.98838952 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.988205567 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.302147986 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.992415845 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.985005609 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.985457762 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.085556589 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.331893109 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.098321941 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.988634846 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.998966167 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.095765669 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.999737732 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.990261384 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.097821031 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.996154492 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.116610721 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.098177949 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.000096024 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.04186759 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.996839683 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.077584217 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.989850185 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.986162216 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.988713871 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.032057998 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.990376849 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.844825694 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.087483286 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.990022297 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.004576313 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.456501834 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.554821503 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.994250117 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.98798222 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.986209624 seconds)
    (50/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.986520608 seconds)
    (51/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.988042989 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.043389589 seconds)
    (53/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.991278059 seconds)
    (54/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.021296328 seconds)
    (55/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.927565487 seconds)
    (56/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.991533732 seconds)
    (57/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.987219198 seconds)
    (58/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.987084434 seconds)
    (59/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.986487345 seconds)
    (60/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.986608444 seconds)
    (61/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.992942766 seconds)
    (62/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.026886579 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.528521309 seconds)
    (64/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.777662314 seconds)
    (65/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.346530156 seconds)
    (66/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.648029377 seconds)
    (67/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.991554534 seconds)
    (68/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.989073184 seconds)
    (69/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.199171837 seconds)
    (70/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.050390829 seconds)
    (71/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.990950104 seconds)
    (72/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.152120695 seconds)
    (73/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.992112035 seconds)
    (74/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.988031043 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.987456576 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.9887158 seconds)
    (77/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.831236686 seconds)
    (78/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.827499924 seconds)
    (79/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.994449751 seconds)
    (80/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.097937306 seconds)
    (81/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.997044918 seconds)
    (82/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.994089048 seconds)
    (83/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.164206519 seconds)
    (84/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.485026835 seconds)
    (85/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.261843943 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.995363271 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.00859512 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.105067288 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.041433327 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.03410961 seconds)
    (91/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.018322508 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.049310711 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.152328448 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.044034755 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.043464983 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.992119448 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.735404304 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.994533109 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.39767114 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.378570546 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.088882292 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.414428576 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.909411926 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.995804555 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.003391072 seconds)
    (106/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.055489393 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.008881643 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.992054622 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.989706949 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.005515047 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.003765079 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.990028612 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.99142124 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.989737412 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.98906006 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.992030942 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.008408816 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.991136809 seconds)
  done (took 431.59569882 seconds)
done (took 830.993669462 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.683819074 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.787670668 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.630126652 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.671958244 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.57167018 seconds)
  done (took 15.274489082 seconds)
done (took 17.194084454 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.085941663 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.0187257 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.008386753 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.020766008 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.03603577 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.087588005 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.241505066 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.331991296 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.376410868 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.376194403 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.390965972 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.377607217 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.386517041 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.395009807 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.396666935 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.364290092 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.366803893 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.363972456 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.388838663 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.382308476 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.378809539 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.382406963 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.380912983 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.386052442 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.389190383 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.371860233 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.371313792 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.380115255 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.377942805 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.379912091 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.398135772 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.391734025 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.387485369 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.390780073 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.381121539 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.384639431 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.373828045 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.384955298 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.368438255 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.353475615 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.274300717 seconds)
  done (took 97.247858192 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.093451486 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.427638621 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.549538619 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.339360313 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.273688485 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.658087051 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.325049572 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.401501714 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.484683959 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.594569527 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.637984903 seconds)
  done (took 28.845063419 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.285760062 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.479663514 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.579865408 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.330727289 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.31143512 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.572559868 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.404066708 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.482453443 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.491878653 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.609171575 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.58259255 seconds)
  done (took 29.380855776 seconds)
done (took 157.40622492 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.865335056 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.349326733 seconds)
  done (took 7.452578356 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.297726244 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.332933989 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.497768748 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.320145445 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.306756566 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.2846558 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.330770384 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.311247256 seconds)
  done (took 20.905256264 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.301639719 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.285856518 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.321259613 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.305808949 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.292989322 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.300618963 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.317540746 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.327028781 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.29593191 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.292989695 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.300548318 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.317648151 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.306675878 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.296842162 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.294615507 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.308666448 seconds)
  done (took 39.098957045 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.321594466 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.30948718 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.299284662 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.29130806 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.298719047 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.337056175 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.315568902 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.29899031 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.287938669 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.30409076 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.338606411 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.288837658 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.281586455 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.306747161 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.305476376 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.316371316 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.331110125 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.289933069 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.303087195 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.307214704 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.288278922 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.29603504 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.324726712 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.301049642 seconds)
  done (took 57.57260293 seconds)
done (took 127.259659347 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.870497424 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 4.286698443 seconds)
  done (took 10.409436592 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.312390922 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.299340313 seconds)
  done (took 6.942441955 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.305414219 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.311969614 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.321443403 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.313626508 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.299593723 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.291699684 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.311437974 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.310245193 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.30114491 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.309305507 seconds)
  done (took 25.316096228 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.301170673 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.297602238 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.30172329 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.242741125 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.208425385 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.23133536 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.20339528 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.11387606 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.136402252 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.10057516 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.046919338 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.219098049 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.381227711 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.265412754 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.258463233 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.29024537 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.288973745 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.251240793 seconds)
  done (took 42.389314123 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.26285067 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.253913384 seconds)
  done (took 6.710493248 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.171208708 seconds)
    (2/7) benchmarking "second"...
    done (took 2.154488812 seconds)
    (3/7) benchmarking "month"...
    done (took 2.177388906 seconds)
    (4/7) benchmarking "year"...
    done (took 2.148932138 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.168736931 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.112475655 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.069451387 seconds)
  done (took 17.210003531 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.010464686 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.206067748 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.193980645 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.51054142 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.016948785 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.002792938 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.619047673 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.004158137 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.003508538 seconds)
  done (took 21.520740285 seconds)
done (took 132.741649882 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.889658669 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.015429417 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.675614639 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.149087296 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.104600591 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.382815856 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.066176061 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.624257057 seconds)
done (took 45.836100391 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.098976812 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.007283864 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.044013993 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.041736849 seconds)
  done (took 23.03796712 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.007933823 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.674787132 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.033236227 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.069176715 seconds)
  done (took 23.80382833 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.509238071 seconds)
    (2/2) benchmarking "read"...
    done (took 2.4153286 seconds)
  done (took 6.871139252 seconds)
done (took 62.75455733 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.000256558 seconds)
    (2/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.000343116 seconds)
    (3/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.013287435 seconds)
    (4/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.038627597 seconds)
    (5/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.036522715 seconds)
    (6/24) benchmarking ("one", "Float64")...
    done (took 2.001392429 seconds)
    (7/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.001240333 seconds)
    (8/24) benchmarking ("zero", "Float64")...
    done (took 2.001047297 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.001213283 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.001444325 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.001222905 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 2.001674951 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 2.002082135 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.001646202 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.001557937 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.002274044 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.001552699 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.002216881 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.002161343 seconds)
    (20/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.001962734 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.002085463 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.001542457 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.001572402 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.002690613 seconds)
  done (took 50.052415459 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.001778451 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.002383905 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.001741869 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.005439331 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.003235529 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.002213067 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.002722679 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.002340799 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.001996588 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.002228451 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.002408199 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.002691548 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.002028864 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.001724712 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.00294633 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.002120336 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.003277494 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.002625665 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.002948747 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.004020934 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.003202241 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.002743196 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.003597918 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.003385332 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.003916455 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.003590224 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.003384716 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.003895779 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.003850861 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.003787808 seconds)
  done (took 62.022089364 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.003233093 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.003071494 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.002791994 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.003651913 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.002852926 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.003161669 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.0032324 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.004117887 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.003954372 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.004054523 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.004062582 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.004241446 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.004370667 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.004051346 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.00414029 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.00422193 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.004656166 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.004958708 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.004538267 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.004371708 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.004810382 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.004776607 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.00464316 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.004595945 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.005423924 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.004845311 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.004841742 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.005537344 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.006140656 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.005536998 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.00571453 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.005522095 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.00495435 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.005431135 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.005709894 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.005928882 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.005272026 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.010385102 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.015942731 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.006053853 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.007590158 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.006711903 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.007420047 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.009131797 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.011537746 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.012954222 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.013829156 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.013553535 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.013782414 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.014173715 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.013068499 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.013124504 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.013630885 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.012074179 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.011357406 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.009156854 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.007802088 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.007076304 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.007190724 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.008592812 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.006979853 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.007181102 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.007088595 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.00769746 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.008308817 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.007683825 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.008846898 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.008658013 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.008123507 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.009041814 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.008877018 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.009219927 seconds)
  done (took 146.448033191 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.008270779 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.0085574 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.00910593 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.008339197 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.008590489 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.009297362 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.009786484 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.009326593 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.010737928 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.010014691 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.009545713 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.010822832 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.010672293 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.009811527 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.010512182 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.010952303 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.010534957 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.010297902 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.010358706 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.010594203 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.009698525 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.010968265 seconds)
  done (took 46.15717837 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.010883218 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.010880558 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.011333889 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.011128345 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.01118262 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.01139719 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.011517006 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.011352138 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.011853525 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.013048275 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.014231691 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.015381832 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.015566103 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.015670796 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.015667238 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.016201076 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.016274146 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.014747682 seconds)
  done (took 38.179965682 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.015853347 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.015575361 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.016005892 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.014600074 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.014101848 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.011761731 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.011618077 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.012424442 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.009975543 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.010332765 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.010512604 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.010358524 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.011808392 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.011302181 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.01152225 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.012618848 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.011707603 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.012030117 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.012443125 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.012646815 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.012556604 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.012533489 seconds)
  done (took 46.22318399 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.011864761 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.012348417 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.01227181 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.012727766 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.012031593 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.012937109 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.012965903 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.013139752 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.013747767 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.01252762 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.01383048 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.013712527 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.013507101 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.013358157 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.014659606 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.015772357 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.017211379 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.018521103 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.020425635 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.019377428 seconds)
  done (took 42.230098887 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.020279599 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.020527946 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.020592567 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.019984807 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.020124697 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.017941808 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.01406775 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.01327277 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.012782401 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.014405833 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.014192975 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.014643094 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.015199566 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.01468841 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.015382641 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.014614204 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.014639028 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.014925428 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.015360705 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.015504499 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.016617392 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.016168288 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.016149007 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.016235022 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.015261729 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.015804823 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.01562847 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.017374217 seconds)
  done (took 58.402138798 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.015305354 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.015527685 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.015425901 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.016585236 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.017201217 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.018960274 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.019542351 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.020816749 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.019494283 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.019240955 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.018583179 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.017395618 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.015775899 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.014597021 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.01505528 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.01430262 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.014859539 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.015018776 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.015505962 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.015595062 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.015924782 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.016019429 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.016091999 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.016137764 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.016073414 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.016339545 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.016628534 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.016802765 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.016946913 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.016389005 seconds)
  done (took 62.444782024 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.037846966 seconds)
    (2/2) benchmarking "in"...
    done (took 2.040876701 seconds)
  done (took 6.025671695 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.016396718 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.016917129 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.01607734 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.017518012 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.017632248 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.019386878 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.020801415 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.021713098 seconds)
  done (took 18.094387728 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.020398035 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.025560935 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.022310768 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.023068984 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.02348914 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.030509531 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.020484043 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.017086468 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.018783861 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.018638007 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.022520615 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.022293591 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.028033041 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.022882744 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.017445283 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.018225109 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.019706036 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.021295689 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.01954842 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.016225179 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.021466824 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.018427232 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.017919905 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.020499406 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.020651454 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.025482963 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.034509493 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.024887014 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.023942427 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.019113375 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.026407913 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.016342143 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.016777865 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.020190082 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.018385616 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.017286255 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.02642854 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.01901795 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.018238897 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.018853835 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.023548433 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.023219985 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.023696597 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.027924332 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.020039668 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.01979634 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.020456329 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.024158677 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.025415446 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.031093142 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.033730883 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.024924177 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.019092377 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.016727614 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.020512157 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.01935361 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.019776518 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.022897759 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.027926699 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.027299374 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.024845995 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.044550094 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.031739321 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.020079555 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.021387967 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.034818811 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.054261273 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.02735585 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.027140179 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.023646033 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.030309035 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.017923102 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.018569798 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.018769914 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.036472767 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.030973951 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.020551828 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.020073102 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.020051242 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.021440648 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.023443612 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.021631437 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.02218221 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.02171574 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.034670797 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.057404059 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.026796274 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.027575804 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.0294405 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.026914096 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.025359254 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.023036659 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.020238453 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.020149754 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.022959055 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.023898454 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.022232831 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.022010103 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.021412679 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.032723383 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.022427563 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.021185145 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.026724317 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.033433651 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.023372765 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.026512782 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.029062546 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.027304716 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.035655393 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.023271256 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.022597925 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.020373393 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.02306516 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.027582924 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.02105261 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.028001799 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.033319372 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.031349515 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.024891132 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.028331351 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.031524593 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.026798555 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.037555947 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.059813154 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.028064772 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.03398311 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.03233656 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.036942648 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.027945617 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.022108567 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.0269489 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.02284245 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.023023192 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.026405072 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.023570249 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.0239814 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.022858276 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.024193892 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.024253869 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.025679555 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.030494059 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.031373837 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.031709627 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.029993382 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.032513122 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.023111922 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.02692404 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.032174888 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.024510492 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.024409989 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.023520098 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.027749461 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.026166888 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.027143239 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.024012608 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.024754833 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.024680246 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.026425855 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.031423926 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.03058986 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.031449288 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.032019762 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.033180577 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.026355786 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.024762544 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.02454458 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.025040119 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.025430429 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.027175952 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.026605415 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.029469958 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.026918739 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.031575835 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.024952369 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.025438322 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.027355519 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.02844582 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.029664922 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.036268973 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.044670743 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.033251153 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.038041068 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.023552733 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.033985346 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.025471021 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.028436387 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.027152155 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.027379678 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.02709241 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.026087073 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.026549343 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.032777508 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.05347898 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.040345422 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.03099157 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.032485154 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.03952203 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.036982406 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.039383804 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.031040231 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.031291989 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.028906637 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.025413404 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.02747748 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.026421927 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.03163054 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.026947857 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.025892796 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.032318814 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.027373686 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.026785531 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.030322569 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.027990828 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.030760232 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.026999798 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.027755296 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.028539554 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.02849777 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.040959233 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.035717523 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.032475081 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.033696241 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.035172467 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.029338345 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.026860252 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.030557704 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.032147369 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.027798648 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.030373681 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.036189545 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.029901301 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.028729801 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.028674936 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.028580327 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.03305256 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.028372549 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.034210972 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.039371125 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.034223372 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.032685951 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.041777738 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.030257041 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.035463432 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.03219678 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.033938237 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.030418741 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.029275471 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.029425874 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.028997796 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.037813888 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.028747296 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.030382519 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.028977466 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.032664507 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.031597084 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.033668489 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.030306403 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.034949959 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.04133423 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.04056436 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.034958454 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.038046855 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.036784029 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.035180447 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.033895793 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.032335037 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.045576863 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.04214949 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.029533734 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.029891074 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.031563677 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.034229499 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.030729902 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.031982446 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.03975153 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.032271196 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.034232038 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.038361267 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.03756252 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.037699346 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.045762934 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.037124177 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.035495434 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.031469219 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.032872923 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.032999099 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.030081475 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.034592327 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.032161876 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.03502935 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.036387648 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.031730259 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.034056538 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.030845388 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.042112744 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.032566368 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.03741057 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.04565601 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.038636376 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.036541922 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.03473354 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.030717648 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.033416154 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.033861942 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.032306927 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.033588583 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.035754867 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.03404132 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.043775227 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.033720077 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.040034289 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.031364448 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.040733657 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.029328818 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.028273838 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.030091045 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.034835816 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.039036938 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.028028439 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.029237823 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.038154963 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.030162452 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.030539202 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.035134149 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.029455481 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.02970574 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.030040771 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.031269103 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.036372 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.033353113 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.028774387 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.029871056 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.028483453 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.029266782 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.034185442 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.033154448 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.030917152 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.031363151 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.029004803 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.030907073 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.031346257 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.031241401 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.03092974 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.029200477 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.02926349 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.038784437 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.03072821 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.032160497 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.035723393 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.031009456 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.040862382 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.031355702 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.031737834 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.032217696 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.030353155 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.033655035 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.029815242 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.031705828 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.031130057 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.030305118 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.03322434 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.044811304 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.039779818 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.035836368 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.034186208 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.032378602 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.033374674 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.04522617 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.061589987 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.032549289 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.036032356 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.036650612 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.040589552 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.036295479 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.04011899 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.038060906 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.043154465 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.035648425 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.032736932 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.037770564 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.054720754 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.03233636 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.031749336 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.042423575 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.056925685 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.052581365 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.036120442 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.053103629 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.078840499 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.073348673 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.055321382 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.085245375 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.06981735 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.044218131 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.05571214 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.038108064 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.032585738 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.038247296 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.035517678 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.032840479 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.034670374 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.036448114 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.039974391 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.033925724 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.039287166 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.04555683 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.036543372 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.033777116 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.03630265 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.03683549 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.037320574 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.035084255 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.033625673 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.036650925 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.032787489 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.035293245 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.038831474 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.045227308 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.036551335 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.032718365 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.032628792 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.040118731 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.035384196 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.03457934 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.037579527 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.044393352 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.040875133 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.050204926 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.04613501 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.034769182 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.037678821 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.044536485 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.045783503 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.035224115 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.034580475 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.034361061 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.038824803 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.037800417 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.037521755 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.035015179 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.03642102 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.042707204 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.034482403 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.035613958 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.03606509 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.034436716 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.037872995 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.03871189 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.041929824 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.034612322 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.034479851 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.034946739 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.037662954 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.038026091 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.03938336 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.035877688 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.035551125 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.039191506 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.038917048 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.040262077 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.036748103 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.034761681 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.039425558 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.035466897 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.035204034 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.036461468 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.037002325 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.036218572 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.042524457 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.046829201 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.036393891 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.03907284 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.038346803 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.041237209 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.037725549 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.037972862 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.037427798 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.035922677 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.04578582 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.036353465 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.03691317 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.038070641 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.037514764 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.046248177 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.03954867 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.04365307 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.03731971 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.0376376 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.039459337 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.042383421 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.049661125 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.043395871 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.043000071 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.046788907 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.044017152 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.040467575 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.037176618 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.036743356 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.03837299 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.038918436 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.043278195 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.040005883 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.042711371 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.038601347 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.040885312 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.038729994 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.041890006 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.037443027 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.037146522 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.043872014 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.050320223 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.049186959 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.039140919 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.040775312 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.039447477 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.044659926 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.052703859 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.03919422 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.038668141 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.039733609 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.041770212 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.042005364 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.049448371 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.050710789 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.044440603 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.039483255 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.046387021 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.062146563 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.042889908 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.054240962 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.078924448 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.042242243 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.040047684 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.041085238 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.040914632 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.040272223 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.043155814 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.040719453 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.048275568 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.04065838 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.039364467 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.052224863 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.040180533 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.03943464 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.040647402 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.042365031 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.047711865 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.040084208 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.048453889 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.041524014 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.040399311 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.041348493 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.043642476 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.040027782 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.039736349 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.039390488 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.043960604 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.040318353 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.041605579 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.051526689 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.041857271 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.043156692 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.057383248 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.05496899 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.042022419 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.040319049 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.042065623 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.047778417 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.045310893 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.040944048 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.046787845 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.05220071 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.047874826 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.050682665 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.043631257 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.043599725 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.044041775 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.04173667 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.041820102 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.057523156 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.057278584 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.043093476 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.04360792 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.051212522 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.042117688 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.051283692 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.049386833 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.042683718 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.04563556 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.042968101 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.042344515 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.042492349 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.042041514 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.048439896 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.051666662 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.043093805 seconds)
  done (took 1214.421870945 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.042439057 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.041874782 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.042342823 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.043294941 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.043178542 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.042171479 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.042815204 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.042720021 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.042781183 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.042567149 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.042816952 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.04296462 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.042916453 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.043526212 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.042450734 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.043577081 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.042785448 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.042593518 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.042818018 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.043313563 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.042951678 seconds)
  done (took 44.871295314 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.04272743 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.044009638 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.043970092 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.044614028 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.04377167 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.043580843 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.043823678 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.043370921 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.04399673 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.045482439 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.045331342 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.046788429 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.044793339 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.044191831 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.044031751 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.043715421 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.043835305 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.045033722 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.043966896 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.044027551 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.045388353 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.044389087 seconds)
  done (took 46.948433181 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.044921498 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.046232211 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.047207419 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.044829508 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.044166471 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.046014465 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.045067124 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.048081495 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.045246942 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.047717788 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.055830935 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.054851243 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.044618077 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.049106335 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.045304505 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.046551427 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.164982423 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.047587244 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.046970566 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.046085204 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.046543693 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.054550308 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.045351715 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.046136531 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.046379811 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.046848845 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.045793585 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.047316 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.04641396 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.048818389 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.052936125 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.046059751 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.05017062 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.050358287 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.047498671 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.048857556 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.051859495 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.047607185 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.045914974 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.045603087 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.060090418 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.077378324 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.046868003 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.055917206 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.070129394 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.063299089 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.100703933 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.079574914 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.056699208 seconds)
  done (took 102.608140394 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.059878691 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.052888249 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.048617163 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.047831872 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.04855143 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.047874928 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.048863667 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.048856747 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.048131293 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.0553489 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.087713307 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.087428077 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.050371914 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.048372023 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.047603594 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.047105768 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.047127641 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.047957912 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.048370264 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.04848378 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.048479418 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.048558253 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.048532341 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.048903157 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.048441672 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.049038147 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.048826428 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.048743361 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.048842061 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.048899408 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.048654215 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.048267482 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.049368203 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.049564787 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.04928292 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.049237192 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.049709649 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.049748322 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.049113111 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.049641421 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.048933168 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.048936757 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.049227527 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.049906152 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.049768103 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.050048478 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.04945134 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.050065248 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.050316439 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.050369437 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.049451345 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.051277687 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.04970511 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.050061351 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.050135967 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.050483698 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.049882598 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.050391677 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.049883541 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.049969176 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.050710038 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.050400464 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.05111674 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.050308146 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.051021684 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.05189304 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.052008038 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.05106018 seconds)
  done (took 141.435584894 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.052203014 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.051927196 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.05232854 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.051720088 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.052001637 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.052294968 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.05273763 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.052989784 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.052200046 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.052061102 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.052356415 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.05146002 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.052509958 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.051233457 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.052736636 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.052867885 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.051871952 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.053212409 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.05291709 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.052632506 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.052650053 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.053133925 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.053557091 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.053534584 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.053531688 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.053147135 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.053201018 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.053963963 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.053471963 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.053518873 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.053720749 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.053209999 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.053823088 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.053921008 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.053704678 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.053671132 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.053012149 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.053649683 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.053369427 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.053231616 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.054178747 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.053715494 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.054288244 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.054061809 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.054193462 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.054201115 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.054457852 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.054299582 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.053063367 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.054085516 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.055073741 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.055023034 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.054678708 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.054241018 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.055119258 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.053924021 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.054988412 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.055960769 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.055327771 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.055466795 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.05502477 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.054337768 seconds)
  done (took 129.297751795 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.052769151 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.053675485 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.054556557 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.054586397 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.054886456 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.053911457 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.054067375 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.054339585 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.054238591 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.054613414 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.054272905 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.055265995 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.056356425 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.055040436 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.055412705 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.056435707 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.055179153 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.055559875 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.056029093 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.055488182 seconds)
  done (took 43.079491471 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.053722122 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.055083169 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.055202301 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.057200269 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.055020892 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.055768805 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.055349152 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.055241661 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.055301254 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.055938004 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.055636231 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.055921796 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.055508937 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.056667077 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.055681873 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.056296593 seconds)
  done (took 34.873509809 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.055873135 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.056158977 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.057566799 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.060060806 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.056626204 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.056359843 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.056593028 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.056146895 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.056573317 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.057440528 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.056645663 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.056562237 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.05630705 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.058100817 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.056647623 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.057722927 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.057142532 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.05676576 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.056662914 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.058241522 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.057724013 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.056857179 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.057649478 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.057496751 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.057035743 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.058405476 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.057652623 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.057351289 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.05730226 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.058026721 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.058403453 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.057977467 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.057918808 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.058201016 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.059797498 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.057968167 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.058344288 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.057870526 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.058507928 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.058184355 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.058291878 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.058433161 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.057601625 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.058394331 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.058751781 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.059921024 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.058728474 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.059225862 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.058815512 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.059514778 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.058842444 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.060186174 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.059853804 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.059811751 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.05837342 seconds)
  done (took 115.170218355 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.059056498 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.059691687 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.059088931 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.059344992 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.059062484 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.05972945 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.059411009 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.059458568 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.059561987 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.059187253 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.05979587 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.06007055 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.060057094 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.059521256 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.059907466 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.059192088 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.059242586 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.059839215 seconds)
  done (took 39.059270861 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.059882605 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.05865927 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.059055051 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.058742351 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.059478822 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.060231895 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.059932399 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.060131083 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.060739899 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.05986971 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.06085341 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.060771942 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.06036143 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.060475698 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.06008503 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.060464703 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.060810505 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.0604755 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.060150886 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.060347027 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.061653242 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.060174716 seconds)
  done (took 47.312992197 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.060573164 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.061516117 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.079453751 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.088795774 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.088002429 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.106920244 seconds)
  done (took 14.475365402 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.061852606 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.060904395 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.061502454 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.061806693 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.062051881 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.061931731 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.061891289 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.062645237 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.062274281 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.062750375 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.06247017 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.062602609 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.061860674 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.062720065 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.061640247 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.062351581 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.06445841 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.062030151 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.062420103 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.062429966 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.062576125 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.062773157 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.06272769 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.06294447 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.063177228 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.063549447 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.063074363 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.064305937 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.062950848 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.063360535 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.063648662 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.063509309 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.063096421 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.063268244 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.062920735 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.063514045 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.063598962 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.063074621 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.063323896 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.063035237 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.063364613 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.063594199 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.063439706 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.06411515 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.063787748 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.063481239 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.063589641 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.064082123 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.064108573 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.064781299 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.064328368 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.064448891 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.064474985 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.064898512 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.064492098 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.065296607 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.064538933 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.064146426 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.065226501 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.064986444 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.065104465 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.064535523 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.065853549 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.065513037 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.064706211 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.064479439 seconds)
  done (took 138.176446716 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.064925386 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.065276315 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.065068933 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.065368759 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.065658615 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.065575274 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.065211599 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.065158295 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.065757227 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.06530224 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.065903637 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.066228858 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.065898966 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.065456441 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.065478604 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.065886624 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.065633551 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.065922097 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.065364356 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.065977792 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.066195129 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.066184514 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.066208418 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.066344119 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.065844538 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.066136551 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.066153821 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.065802942 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.066305892 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.066258834 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.065466627 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.065883887 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.066212164 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.066192322 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.066503408 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.066425611 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.066134741 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.066804338 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.066781588 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.06663138 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.066515681 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.066953439 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.066054143 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.066791799 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.067114824 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.066606467 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.066847636 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.066988461 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.066325258 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.067383856 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.06793615 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.06767194 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.068075449 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.06743195 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.067345098 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.067643398 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.068511207 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.067340073 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.067974984 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.067689836 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.067405382 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.068608464 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.068122617 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.068258126 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.06787457 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.06905363 seconds)
  done (took 138.385854611 seconds)
done (took 2828.33019821 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.137444415 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.189210352 seconds)
  done (took 16.321732741 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.201657597 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.150061649 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.219726554 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.163365128 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.084064981 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.075422968 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.075366055 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.072042899 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.155433456 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.071572405 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.071881202 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.076060215 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.072019872 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.071997732 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.072024874 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.072335469 seconds)
  done (took 55.744754512 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.075756654 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.076358579 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.073651332 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.072186369 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.096309554 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.168367785 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.101219515 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.07976363 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.093172464 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.122963431 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.100391805 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.082538334 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.088187574 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.081307319 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.181833005 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.131326918 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.144324941 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.165856313 seconds)
  done (took 39.933140979 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.173682263 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.083866828 seconds)
  done (took 11.263627293 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.069689224 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.085814977 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.09893325 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.104805906 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.082829213 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.097046345 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.098661929 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.09516088 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.11221059 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.094028688 seconds)
  done (took 72.965246127 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.077536961 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.077525646 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.442297393 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.087319741 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.084513676 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.106976553 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.076086448 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.111294657 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.078243124 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.071901519 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.086417745 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.451799445 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.092148331 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.07539508 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.49391789 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.09409137 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.081478407 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.113158842 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.114366822 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.080670186 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.082609071 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.080904422 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.320879125 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.84482527 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.078930872 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.089487323 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.083987756 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.071842493 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.072413461 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.075477342 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.078946423 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.074214241 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.082446654 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.074735968 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.093252033 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.082124788 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.732827507 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.099743618 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.084272793 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.166149058 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.133893111 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.083869234 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.074482734 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.084329092 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.072967626 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.08181205 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.792338714 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.136920864 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.077901358 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.225225436 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.512918866 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.097777806 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.226108554 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.213386098 seconds)
  done (took 145.09137754 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.070941306 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.519242436 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.221040904 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.074318543 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.45265169 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.285758959 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.633825585 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.118442826 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.076575936 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.282612292 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.238137879 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.196849978 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.075919258 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.076289157 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.075413725 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.073720016 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.243911068 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.143009084 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.075467264 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.073351497 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.095579875 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.302906832 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.195968132 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.076727846 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.094591578 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.290423432 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.124671412 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.194623141 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.472847256 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.073336283 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.137496453 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.076784446 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.074888668 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.074738215 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.116178591 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.186423265 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.180338767 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.077535061 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.690565381 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.074932835 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.693828677 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.278911323 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.189215432 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.203193814 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.315339326 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.288341829 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.764687473 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.074831593 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.805967364 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.24111182 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.28636233 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.287684763 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.172879321 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.07982001 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.517462736 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.075173741 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.076162642 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.306446616 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.2381742 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.200707771 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.07868465 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.075761187 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.076101043 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.31192532 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.078401064 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.185820241 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.079003729 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.07658564 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.188541021 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.202502237 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.231972679 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.300444189 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.11077124 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.298500533 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 5.041114175 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.280858382 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.140842696 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.306154215 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.079875237 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.079514613 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.175323765 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.528926784 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.232355864 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.318126102 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.383962627 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.113344138 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.569675311 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.075737329 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.289010127 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.219646353 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.296996642 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.328412929 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.131248919 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.931272503 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.076802985 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.076286909 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.275975489 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.196096946 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.081334091 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.610559524 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.317195337 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.668448679 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.098589862 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.525811989 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.184174784 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.082463519 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.695286676 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.076510943 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.290072818 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.122848923 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.079896591 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.078479168 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.222315085 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.822791825 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.079226364 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.14948335 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.138246669 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.08291684 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.234224365 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.08093287 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.329429264 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.824449509 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.315365595 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.081528945 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.112724592 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.248064867 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.335843062 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.082119862 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.412495684 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.319741432 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.1746742 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.294203426 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.580362986 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.079681767 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.352957338 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.082053993 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.078737034 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.246086476 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.787620461 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.24407398 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.083001579 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.328815011 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.101947113 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.134041235 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.083299391 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.328528294 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.115251814 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.12985932 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.083215341 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.211048448 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.081543825 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.124134888 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.242232999 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.081211875 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.080108022 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.960215398 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.082519388 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.232196028 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.312399464 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.096474126 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.151744307 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.449999333 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.080267989 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.180582571 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.106567721 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.504257878 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.619161245 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.241952923 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.725132996 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.346962525 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.080144217 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.315373204 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.256884228 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.085273054 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.082619835 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.847015022 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 5.319119409 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.080595667 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.236794338 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.806947181 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.256733204 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.296418332 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.086182988 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.133881391 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.085692625 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.311049013 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.613320544 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.190374336 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.082008871 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.081583598 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.082226536 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.083556001 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.283709413 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.116288388 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.709127164 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.22346217 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.347981184 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.30271124 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.390746087 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.142004475 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.087946638 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.395886025 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.085308633 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.146148859 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.085301148 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.092418389 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.321352692 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.086509346 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.29083506 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.430761251 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.156774583 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.129584742 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.086085366 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.085003859 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.043793945 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.253154124 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.195312431 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.08682793 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.22100577 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.125504823 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.203500527 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.281955946 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.182116778 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 3.049243375 seconds)
  done (took 932.222485878 seconds)
done (took 1275.536076531 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.082229885 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.086269749 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.085752047 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.087270463 seconds)
  done (took 30.354246771 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.085537418 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.085244153 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.086454262 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.08708923 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.0866266 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.085739917 seconds)
  done (took 14.536674596 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.08384819 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.08601046 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.086954107 seconds)
  done (took 23.269136627 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.489612074 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.385422657 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.17491256 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.244283729 seconds)
  done (took 11.309657972 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.091509851 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.086682195 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.085675042 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.085718328 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.085677538 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.086356362 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.089043613 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.087117512 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.087145045 seconds)
  done (took 20.807416294 seconds)
  (6/6) benchmarking "26942"...
  done (took 6.641035821 seconds)
done (took 108.928497311 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.246958041 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.524238907 seconds)
    (3/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.120632908 seconds)
    (4/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.315638029 seconds)
    (5/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 3.016688368 seconds)
    (6/341) benchmarking ("sort", Int8, false)...
    done (took 5.680462769 seconds)
    (7/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.490877557 seconds)
    (8/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.545680795 seconds)
    (9/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.239941019 seconds)
    (10/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.108577559 seconds)
    (11/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.250678424 seconds)
    (12/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 3.100754473 seconds)
    (13/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.440509167 seconds)
    (14/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.392599392 seconds)
    (15/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.222914197 seconds)
    (16/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.499360181 seconds)
    (17/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.417947027 seconds)
    (18/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.089887292 seconds)
    (19/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.924880756 seconds)
    (20/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.310093957 seconds)
    (21/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.687514412 seconds)
    (22/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.109514066 seconds)
    (23/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.086018288 seconds)
    (24/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.574561581 seconds)
    (25/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.110773631 seconds)
    (26/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.236074127 seconds)
    (27/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.101291057 seconds)
    (28/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.600284403 seconds)
    (29/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.10847391 seconds)
    (30/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.600070799 seconds)
    (31/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 3.063028803 seconds)
    (32/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.545737352 seconds)
    (33/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.221911718 seconds)
    (34/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.377860052 seconds)
    (35/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.303958821 seconds)
    (36/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.395457743 seconds)
    (37/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.090973785 seconds)
    (38/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.730691709 seconds)
    (39/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.162670281 seconds)
    (40/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.08758349 seconds)
    (41/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.401285438 seconds)
    (42/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.226610116 seconds)
    (43/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.135741891 seconds)
    (44/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.403155123 seconds)
    (45/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.414512974 seconds)
    (46/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.603140777 seconds)
    (47/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.092194506 seconds)
    (48/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.09122767 seconds)
    (49/341) benchmarking ("perf_sum", Int8, true)...
    done (took 3.765031155 seconds)
    (50/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.091742012 seconds)
    (51/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 3.056149612 seconds)
    (52/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.373031812 seconds)
    (53/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.288462454 seconds)
    (54/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.542577522 seconds)
    (55/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.394213002 seconds)
    (56/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.098079172 seconds)
    (57/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.544198588 seconds)
    (58/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.309201409 seconds)
    (59/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.089839992 seconds)
    (60/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.981834433 seconds)
    (61/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.102311584 seconds)
    (62/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.992279035 seconds)
    (63/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.213591525 seconds)
    (64/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.385779778 seconds)
    (65/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.228470658 seconds)
    (66/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.098262085 seconds)
    (67/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.378842638 seconds)
    (68/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.864488614 seconds)
    (69/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.096376117 seconds)
    (70/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.158540206 seconds)
    (71/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.26369403 seconds)
    (72/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.483643023 seconds)
    (73/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.372100164 seconds)
    (74/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.249350373 seconds)
    (75/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.358732643 seconds)
    (76/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.143936052 seconds)
    (77/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.94238777 seconds)
    (78/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.235066186 seconds)
    (79/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.561860636 seconds)
    (80/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.270498882 seconds)
    (81/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.256081923 seconds)
    (82/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.342422452 seconds)
    (83/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.333109149 seconds)
    (84/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.121742796 seconds)
    (85/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.390954801 seconds)
    (86/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.158644819 seconds)
    (87/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 4.93206176 seconds)
    (88/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 3.071642429 seconds)
    (89/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.24947233 seconds)
    (90/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.139854111 seconds)
    (91/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 3.021181312 seconds)
    (92/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.105456297 seconds)
    (93/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.146030075 seconds)
    (94/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 9.067097597 seconds)
    (95/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.283445843 seconds)
    (96/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.811259241 seconds)
    (97/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.735490054 seconds)
    (98/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.135210791 seconds)
    (99/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.194651694 seconds)
    (100/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.62492455 seconds)
    (101/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.998840807 seconds)
    (102/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.336645775 seconds)
    (103/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.471920178 seconds)
    (104/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.414673678 seconds)
    (105/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.613741701 seconds)
    (106/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.138533137 seconds)
    (107/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 9.090688 seconds)
    (108/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.551637118 seconds)
    (109/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.631515141 seconds)
    (110/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.794539254 seconds)
    (111/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.554771297 seconds)
    (112/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.223024874 seconds)
    (113/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.246082073 seconds)
    (114/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.100981392 seconds)
    (115/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.298378046 seconds)
    (116/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 7.110081916 seconds)
    (117/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 4.045332218 seconds)
    (118/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.980063893 seconds)
    (119/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.490825589 seconds)
    (120/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.098184194 seconds)
    (121/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.25028141 seconds)
    (122/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.243689573 seconds)
    (123/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.0995615 seconds)
    (124/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.094581242 seconds)
    (125/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.221976146 seconds)
    (126/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.136764496 seconds)
    (127/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 5.572659195 seconds)
    (128/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.535633251 seconds)
    (129/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.407155101 seconds)
    (130/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.143519222 seconds)
    (131/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 4.452621697 seconds)
    (132/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.14557945 seconds)
    (133/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.09365684 seconds)
    (134/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 4.309663126 seconds)
    (135/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.516371025 seconds)
    (136/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.104620252 seconds)
    (137/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.106690754 seconds)
    (138/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.376929519 seconds)
    (139/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.238875008 seconds)
    (140/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.615142319 seconds)
    (141/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.488733988 seconds)
    (142/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.102976784 seconds)
    (143/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.543334735 seconds)
    (144/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.545835461 seconds)
    (145/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.187970196 seconds)
    (146/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.646895132 seconds)
    (147/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.437349362 seconds)
    (148/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.398973301 seconds)
    (149/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.09313065 seconds)
    (150/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.389001505 seconds)
    (151/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.225695073 seconds)
    (152/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.249796078 seconds)
    (153/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.455744595 seconds)
    (154/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.116589974 seconds)
    (155/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.64456483 seconds)
    (156/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.409966099 seconds)
    (157/341) benchmarking ("sort", Bool, false)...
    done (took 2.316600127 seconds)
    (158/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.109453519 seconds)
    (159/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.304283906 seconds)
    (160/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.228618061 seconds)
    (161/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.467796127 seconds)
    (162/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.415634311 seconds)
    (163/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.378859458 seconds)
    (164/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.22493223 seconds)
    (165/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.108445774 seconds)
    (166/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.108060023 seconds)
    (167/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.109308311 seconds)
    (168/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.259229687 seconds)
    (169/341) benchmarking ("sort", Int64, false)...
    done (took 6.820787373 seconds)
    (170/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.302612325 seconds)
    (171/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.255606249 seconds)
    (172/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.500202099 seconds)
    (173/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.323304918 seconds)
    (174/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.410157996 seconds)
    (175/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.206376115 seconds)
    (176/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.254845319 seconds)
    (177/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.157552149 seconds)
    (178/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.108111573 seconds)
    (179/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.126727514 seconds)
    (180/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.325890811 seconds)
    (181/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.493952254 seconds)
    (182/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.216061964 seconds)
    (183/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.278403617 seconds)
    (184/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.105906476 seconds)
    (185/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.380550401 seconds)
    (186/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.644642986 seconds)
    (187/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.252565887 seconds)
    (188/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.095414339 seconds)
    (189/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.117631234 seconds)
    (190/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.110375026 seconds)
    (191/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.241837779 seconds)
    (192/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.411360122 seconds)
    (193/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.10293333 seconds)
    (194/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.998473749 seconds)
    (195/341) benchmarking ("sort", BigInt, false)...
    done (took 7.101112777 seconds)
    (196/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.264347058 seconds)
    (197/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.352186387 seconds)
    (198/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.108014807 seconds)
    (199/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 4.306409544 seconds)
    (200/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.62455716 seconds)
    (201/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.118038534 seconds)
    (202/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 4.061098172 seconds)
    (203/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 3.020382859 seconds)
    (204/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.909013912 seconds)
    (205/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.354186718 seconds)
    (206/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.331767343 seconds)
    (207/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.103363097 seconds)
    (208/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.329298092 seconds)
    (209/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.097989002 seconds)
    (210/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.545893904 seconds)
    (211/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.106847902 seconds)
    (212/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.377003803 seconds)
    (213/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.527077851 seconds)
    (214/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.104360102 seconds)
    (215/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.246512245 seconds)
    (216/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.423071449 seconds)
    (217/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 7.370700513 seconds)
    (218/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 5.490115028 seconds)
    (219/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.10785688 seconds)
    (220/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 3.791964129 seconds)
    (221/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.532162444 seconds)
    (222/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.118869374 seconds)
    (223/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.227454586 seconds)
    (224/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.22332772 seconds)
    (225/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.230115859 seconds)
    (226/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.300728434 seconds)
    (227/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.265761967 seconds)
    (228/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.115183768 seconds)
    (229/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.284745783 seconds)
    (230/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.750174954 seconds)
    (231/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.231260243 seconds)
    (232/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.118217063 seconds)
    (233/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.101551704 seconds)
    (234/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 4.833240651 seconds)
    (235/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.139603715 seconds)
    (236/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.969244427 seconds)
    (237/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.768059932 seconds)
    (238/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.381544993 seconds)
    (239/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.117057351 seconds)
    (240/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.267663688 seconds)
    (241/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.548289128 seconds)
    (242/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.342983801 seconds)
    (243/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.453686241 seconds)
    (244/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.538757096 seconds)
    (245/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.232436863 seconds)
    (246/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.101109115 seconds)
    (247/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.294466169 seconds)
    (248/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.133212982 seconds)
    (249/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.221987869 seconds)
    (250/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.88671804 seconds)
    (251/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.419173754 seconds)
    (252/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.099707293 seconds)
    (253/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 4.390864709 seconds)
    (254/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.659214379 seconds)
    (255/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.618082184 seconds)
    (256/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.265482073 seconds)
    (257/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.116924629 seconds)
    (258/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.36440169 seconds)
    (259/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.643621123 seconds)
    (260/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.496701157 seconds)
    (261/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.245546232 seconds)
    (262/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.119425358 seconds)
    (263/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.247941235 seconds)
    (264/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.101405029 seconds)
    (265/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.244078064 seconds)
    (266/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.188907308 seconds)
    (267/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.099146038 seconds)
    (268/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.242098288 seconds)
    (269/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.267554437 seconds)
    (270/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.384797993 seconds)
    (271/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.243648978 seconds)
    (272/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.178682405 seconds)
    (273/341) benchmarking ("sort", Float64, false)...
    done (took 7.101166446 seconds)
    (274/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.110157537 seconds)
    (275/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.339608451 seconds)
    (276/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.258042087 seconds)
    (277/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.309605141 seconds)
    (278/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 3.058896126 seconds)
    (279/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.118998442 seconds)
    (280/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.108217729 seconds)
    (281/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.248395975 seconds)
    (282/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.309420238 seconds)
    (283/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.389053027 seconds)
    (284/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.15992924 seconds)
    (285/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.11085627 seconds)
    (286/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.111306925 seconds)
    (287/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.123821363 seconds)
    (288/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.115572488 seconds)
    (289/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.439360388 seconds)
    (290/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.562106839 seconds)
    (291/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.114722692 seconds)
    (292/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 4.700289895 seconds)
    (293/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.177212442 seconds)
    (294/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.26219139 seconds)
    (295/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.61053088 seconds)
    (296/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.110022481 seconds)
    (297/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.110139595 seconds)
    (298/341) benchmarking ("map", abs, Bool, true)...
    done (took 4.044667374 seconds)
    (299/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.650622818 seconds)
    (300/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.10574392 seconds)
    (301/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.445426746 seconds)
    (302/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.1136984 seconds)
    (303/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 4.635354238 seconds)
    (304/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.278011016 seconds)
    (305/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.256073959 seconds)
    (306/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.102525297 seconds)
    (307/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.580753528 seconds)
    (308/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.517458493 seconds)
    (309/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.470413239 seconds)
    (310/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.128518926 seconds)
    (311/341) benchmarking ("sort", Float32, false)...
    done (took 6.752151914 seconds)
    (312/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.497302611 seconds)
    (313/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.271665977 seconds)
    (314/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.106199446 seconds)
    (315/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 4.742902739 seconds)
    (316/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.49019305 seconds)
    (317/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.537829565 seconds)
    (318/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.589621415 seconds)
    (319/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.26104635 seconds)
    (320/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.256135028 seconds)
    (321/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.490747842 seconds)
    (322/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.797530627 seconds)
    (323/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.114120799 seconds)
    (324/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.649291748 seconds)
    (325/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.271488766 seconds)
    (326/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.303981954 seconds)
    (327/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.245210359 seconds)
    (328/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.434264695 seconds)
    (329/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.438487212 seconds)
    (330/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.659236769 seconds)
    (331/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 4.065304607 seconds)
    (332/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.104445243 seconds)
    (333/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 4.626905161 seconds)
    (334/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.124639552 seconds)
    (335/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.22374976 seconds)
    (336/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.450794961 seconds)
    (337/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.227588737 seconds)
    (338/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.447044788 seconds)
    (339/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.113947549 seconds)
    (340/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.566459703 seconds)
    (341/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.111986636 seconds)
  done (took 1213.682281397 seconds)
done (took 1215.835108481 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.18671988 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.153671185 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.730303465 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.171291558 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.154085402 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.155585893 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.705452927 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.191233397 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.162195392 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.704752193 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.170876557 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.154176042 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.162169286 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.170964158 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.159736112 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.161682832 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.160038254 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.178996363 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.172039145 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.157926311 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.200164315 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.158150464 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.154430069 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.20161809 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.15447078 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.163417457 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.187761337 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.199686455 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.199795223 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.156768867 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.160780222 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.554509398 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.225656818 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.160505954 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.160828834 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.162423839 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.160107351 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.163263886 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.187725442 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.162359383 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.155550519 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.166064841 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.159829738 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.157389447 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.154448147 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.155166075 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.157314965 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.250896283 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.164269972 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.561529758 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.251397804 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.188065666 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.201699375 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.158464083 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.158348911 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.158327876 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.201378306 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.160708293 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.16050951 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.56547613 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.239943612 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.165182593 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.561510962 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.239646501 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.166867822 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.166595463 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.155534787 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.189836052 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.554390066 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.768097849 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.196623266 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.180195718 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.157585527 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.158733942 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.168827992 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.70953881 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.176543453 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.837758602 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.19169334 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.167158222 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.162522573 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.16056761 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.15793434 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.16605073 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.190054691 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.156213702 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.161676965 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.162367042 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.169239715 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.555495334 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.220116171 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.734989899 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.17194465 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.191514371 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.189484252 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.838322348 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.193285224 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.195566617 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.160315265 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.55303154 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.216943898 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.191885468 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.160344979 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.165052519 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.254579848 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.192482879 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.191252763 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.157361601 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.181208129 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.164604517 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.158381034 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.169963845 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.180928686 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.176241933 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.166972763 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.157881124 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.168964866 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.163719412 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.196454053 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.16946881 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.16587613 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.165068833 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.159173615 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.205802319 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.191182641 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.167410244 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.255330164 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.16475366 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.25490955 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.167260032 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.16672379 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.158887034 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.569940709 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.222685603 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.183112823 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.16373922 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.183828711 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.182972763 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.168319434 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.162604465 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.167721994 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.162304906 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.206860143 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.160344707 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.18483614 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.207433386 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.17164748 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.166685438 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.197918848 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.17815628 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.183120718 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.16488934 seconds)
done (took 340.611208426 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.163832549 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 4.493764997 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.176843542 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.112352088 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.189185037 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.172936999 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.111655326 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.11170722 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.111668924 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.542344416 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.112674621 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.113541507 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 4.536778677 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.112186976 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.167418105 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.112344827 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.11158671 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.379992775 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.113873045 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.172445641 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 3.125660293 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.112738052 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.113031509 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.55579637 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.111292765 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 3.119151494 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.173103469 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.112984051 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.385176919 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 3.114281315 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 3.132532331 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.385615909 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.17343429 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.115126309 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.113781694 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.114534272 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.191918913 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.119839097 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.165191049 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.16551471 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.178267038 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.120356502 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 3.116753933 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 3.144118959 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.119289612 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.11544553 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.114216363 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.119136531 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.112198641 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.11461488 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.382006412 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.115113839 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.116560662 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.11447316 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.114636495 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.118142184 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.114660265 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.116222795 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.174925485 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.116662986 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.165359595 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.570815199 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.543924457 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.114331673 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 3.131953024 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.114856371 seconds)
  done (took 167.137883486 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.202241805 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.212333968 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.202026948 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.121100129 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.175334513 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.193878251 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.121837516 seconds)
  done (took 17.270030361 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.123507847 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.115952238 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.148129186 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.142665102 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.117012068 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.290109455 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.129266194 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.11753058 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.145875225 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.11800913 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.480119215 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.143138644 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.117330556 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 3.127923731 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.130680963 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.151839316 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.119234119 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.118328645 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.224926527 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.192774967 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.118495144 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.118169745 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.151944891 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.13082367 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.117264898 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.118352602 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.118313444 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.12591982 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.117319128 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.116286792 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.116474532 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.133017335 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.117810908 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 3.114029271 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.116750228 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.118266664 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.118583363 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.117398227 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.118334653 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 2.504773977 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.117846993 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.118163342 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.118359756 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.117811215 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.117902853 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.144056833 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.118132919 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.11847636 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.118535841 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.118997698 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.15262294 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.118732758 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.118944932 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.118990148 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.154305095 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.120340344 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.120351929 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.118318913 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.119182029 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.119294972 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.118664491 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.195003088 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.150804942 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.119249775 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.15064964 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.161669852 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.119090699 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.118953521 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.11909767 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.147449225 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.118660011 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.148367973 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.11928079 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.210705872 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.118803713 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.296502767 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.145201397 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.123486298 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.124125602 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 3.084530158 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.127735638 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.119893035 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.122652751 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.127795924 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.121441225 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.120074512 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.120435216 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.121544338 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.128337469 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.121211104 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.171331409 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.120467117 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.122065034 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.215218276 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.120265124 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.229103108 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.150377679 seconds)
  done (took 212.828072343 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.125831667 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.121518308 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.136364503 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.121827981 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.120626645 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.12651201 seconds)
  done (took 14.79813241 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.123195574 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.124941128 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.12033851 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.120374798 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.121364944 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.121769729 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.120530385 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.12295652 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.128382783 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.121497784 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.122559725 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.123271414 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.122506842 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.123557396 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.121009097 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.121222357 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.12168839 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.121557217 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.122118826 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.122140382 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 2.320882135 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.123112486 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.12311685 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.127016717 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.127765193 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.122269903 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.131941646 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.12247632 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.122017098 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.130465581 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.12783238 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.123736565 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.12805854 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.131646807 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.127372676 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.12773621 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.1274637 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.124210335 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.122021989 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.123489482 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.124712266 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.124476157 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.122369772 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.124370728 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.126198302 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.133855067 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.12954722 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.132505278 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.123730059 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.124546185 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.124585279 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.122766839 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.12399663 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.124551748 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.131673403 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.130914752 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.131278027 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.123415272 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.12700784 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.129425615 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.12929736 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.125428541 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.127697627 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.129197167 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.124511951 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.125455567 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.129682963 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.130418226 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.125053124 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.124377001 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.127026206 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.124912074 seconds)
  done (took 155.268764121 seconds)
done (took 569.337566476 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.159951393 seconds)
  done (took 9.209178767 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.280937586 seconds)
  done (took 9.468705864 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 12.529279918 seconds)
  done (took 14.590617062 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.140868359 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.18335355 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.153332364 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.134543881 seconds)
  done (took 30.685240713 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.278999444 seconds)
  done (took 9.333082916 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.142910179 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.126970303 seconds)
  done (took 16.409752616 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.199286748 seconds)
  done (took 9.259651317 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.460820478 seconds)
  done (took 9.528943579 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.129078874 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.13322033 seconds)
  done (took 16.349136449 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.129608142 seconds)
  done (took 9.179722318 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.71586166 seconds)
  done (took 10.856135612 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.140862195 seconds)
  done (took 9.224440738 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.207061901 seconds)
  done (took 9.258425206 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.877173108 seconds)
  done (took 9.928339267 seconds)
done (took 175.328110629 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.140538096 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.125972807 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.126276064 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.125947952 seconds)
  done (took 30.568964036 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.165573714 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.165669412 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.168197342 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.172399269 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.155487697 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.155486134 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.165724138 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.166307387 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.155116745 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.172267086 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.165571587 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.185280538 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.172391058 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.168783907 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.169215119 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.179731259 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.183774624 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.166797847 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.155468552 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.169154281 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.185290692 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.185425847 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.126770481 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.126518629 seconds)
  done (took 54.037191726 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.33331738 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.199058056 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.293140293 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.182498282 seconds)
  done (took 11.059469463 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.126453869 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.201961493 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.185729089 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.171454665 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.185458686 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.293437819 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.185615475 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.333689498 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.274861581 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.304725005 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.131804227 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.144213714 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.1460679 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.185828058 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.293212836 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.126486187 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.127077005 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.304729039 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.202298811 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.324534384 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.127202953 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.186701336 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.186084431 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.18718569 seconds)
  done (took 54.989217493 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.127705556 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.140689007 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.139131612 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.128538024 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.12882456 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.128587237 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.139486673 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.129880185 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.157071537 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.1334692 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.128648053 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.12944379 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.129523425 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.129834216 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.128391996 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.146103554 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.146065562 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.129817303 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.131173597 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.140075148 seconds)
  done (took 44.745125228 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.126993496 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 7.1271736 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.345198212 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.291997206 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.126483852 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.129495821 seconds)
  done (took 35.200471577 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.145599568 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.152073743 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.138320534 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.167694937 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.199466854 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.142169741 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.21988248 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.349474157 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.142307928 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.215829074 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.15716726 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.139084646 seconds)
  done (took 28.227255226 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.127771502 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.129638939 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.131350509 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.144599276 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.143596647 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.139497113 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.141076992 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.127454511 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.146417256 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.153506442 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.138995597 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.147450666 seconds)
  done (took 47.72788689 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.304602106 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.290348247 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.442195294 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.865458735 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.642546127 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.20094843 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.524293278 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.642112516 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 4.907893637 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.955312632 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.619448421 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.167640686 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.635947419 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 5.082235377 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.130391322 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.406326197 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.13340171 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.094156857 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.555128622 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.207536814 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.136624201 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.132293499 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.134524315 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.652446275 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.445080902 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.139718712 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.319547436 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.156207899 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.131200335 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.349308655 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.171477026 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.150101051 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.280864736 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.42848189 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.643579427 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.215186408 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.211912757 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.132674124 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.185666413 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.168742783 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.145504297 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.149093754 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.658827111 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.148332081 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.379765849 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.134420557 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.147068844 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.719550025 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.087127801 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.269621434 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.307262032 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.995074963 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.189183099 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.82596066 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.267722524 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.406760294 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.140431332 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.139675948 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.20725785 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 6.200061196 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.314116353 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.215131836 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.305987173 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.083909995 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.383341559 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.319238124 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.135549091 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.141230391 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.389367168 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.408994768 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.216207803 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.272660754 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.874065348 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.134801944 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.137206156 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.155820078 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.249059611 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.134752332 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.859941141 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.643248912 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 5.087380566 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.251847839 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.802974854 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.1423058 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.133342566 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.146519805 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.350338182 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.085627383 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.217852927 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 6.210493537 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.49197949 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.135175343 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.135759746 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.164910736 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.136780335 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.088043888 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.776828169 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.214999422 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.086543575 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.684605733 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.189219686 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.088092106 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.179941662 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.141137413 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.50732154 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.177548074 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.880435426 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.757889316 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.412657434 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.695198293 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.142361726 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.134441588 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.2220042 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.216443982 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.13989173 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.828044479 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.132227719 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.265094022 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.313530522 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.137078766 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.088965798 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.151497756 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.286296813 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.197476314 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.163895005 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.137996836 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.145100422 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.137421459 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.142655545 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.171385755 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.162928884 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.635646532 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.251522083 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.138866309 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.080613519 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.146238638 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.615872101 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.303823256 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.184085846 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.559540691 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.734523117 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.889382989 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.103244928 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.959056821 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.590701091 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.244278738 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.224643565 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 4.256456856 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.308905082 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.221947724 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.138991591 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.293767494 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.146597798 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.142634981 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.139055887 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.854001246 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.831738536 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.187900112 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.140048688 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.09590825 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.135594054 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.33519778 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.801197029 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.180759403 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.147907309 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.228761421 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.299896961 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.141823592 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.090788594 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.477780716 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.375142883 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.636504853 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.50875879 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.793674216 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.228586817 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.154348194 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.327576896 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.225280117 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.793553778 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.76456578 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.453957268 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.651688139 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 5.137254686 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.14183584 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.234035647 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.536216867 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.164756102 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.87768463 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 6.143698958 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.852340316 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.176738058 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.117199661 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 5.092343002 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.148257495 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.581251859 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 5.141936388 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.689604814 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.425385986 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.173104573 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.14345359 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.143884864 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.153470545 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.153417698 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.264078268 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.216720411 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.220919239 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.095592914 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.080864766 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.189931331 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.146375924 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.142278206 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 6.379217343 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.103060255 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.164018132 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.143817872 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.22912265 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.013309816 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.851922592 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.147470371 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.148370611 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.612493022 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.15242036 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.142859233 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.158070037 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.062972396 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.18312605 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 6.231657651 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.267675224 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.664318702 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.250554272 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.225413312 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.143877686 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.148714679 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.423007561 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.157465584 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.409812055 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.622230478 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.751458628 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.809100833 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.244827203 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.767649773 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.165367313 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.145662319 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.726155086 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.183561779 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.147024162 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.293293177 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.851552762 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.309411378 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 7.302424794 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.231438192 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.145045106 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.596121332 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.736136805 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.244952553 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 3.082026158 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.257597981 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.150614257 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.307516076 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 3.030900891 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.147149696 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.65235902 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.156134559 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.319211988 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.294405607 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.514425505 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.642982211 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.846171282 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.097737443 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.153474863 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.238576855 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.417957916 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.146008812 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.181805288 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.761773204 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.817435377 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.925824962 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.66743923 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.410699479 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.29012762 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.590862995 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.24794246 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.160103543 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 3.079782581 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.340618343 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.108168604 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.276478464 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 5.097411935 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.228771695 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.448785616 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.171721633 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.59926957 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.186284156 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.659389973 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.504534715 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.227437333 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.284354554 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.183065521 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.147057941 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.209594706 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.147936745 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.225494953 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.27507595 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.148074441 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 6.635196018 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.196057555 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.194856809 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.155195798 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.72642276 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.180010357 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.152074043 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.891479007 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.177232331 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.277300094 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.232552873 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.984520727 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.179367732 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.268695566 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.649966381 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.718805096 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.59928042 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.238299681 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.702586257 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.210245618 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.893371777 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.149182172 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.336559587 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.15557075 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.798893786 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.204268891 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.515227179 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.151038089 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.323762368 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.441270075 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.24251383 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.157690201 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.102324072 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.721953396 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.220737653 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.629072588 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.153588559 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.907423853 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.651652321 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.193160386 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.697871439 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.131024552 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.152562975 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 6.37790678 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.831745555 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.882689506 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.192562083 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.153524006 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.29575606 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.33074392 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 6.288644135 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.855512737 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.163082062 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.178687998 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.338116097 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.27715544 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.093726894 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.677461287 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.899333413 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.413299006 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.168468969 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.299234401 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.299581649 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.323472598 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.196362501 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.228383481 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.897105597 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.601610969 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.254765439 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.103375474 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.152422989 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.834783909 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.610541399 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.23638315 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.427081407 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.573272819 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.198405921 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.192129687 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.324272551 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.424544501 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.833402562 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.844272926 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.459066194 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.641594815 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.72624455 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.896853532 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.897015225 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.340912441 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.268602346 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.52750461 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.061734314 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.523318135 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.425717819 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.160840017 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.10477104 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.305144229 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.162375712 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.222943249 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.932861822 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.434488319 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 6.236659002 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.932907714 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.74001335 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.158371342 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.182922824 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.739338789 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.179139045 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.175901668 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.155751846 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.680375511 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.538982442 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.170505381 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.109864213 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.905819937 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.106156022 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.343361208 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.167058815 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.200170412 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.062157433 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.250945093 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.309326065 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.677605808 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.242530187 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.200123654 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.106800274 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.242890081 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 5.137846547 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.83822256 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.932354414 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.181022979 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.159805317 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.30463146 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.140282945 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.202062801 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.163221268 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.445343918 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.599717266 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.612930136 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.323120943 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.492211084 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.431859432 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.115749879 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.257367286 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.384318239 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.107847868 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.156485906 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.225567522 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.20682706 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.231949003 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.156481118 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.161854799 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.396036604 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.320472157 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.316606851 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.223696687 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.25297634 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.180807376 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.30665101 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.297783118 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.15954768 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.164898436 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.157329346 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.399535671 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.158555219 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.128815621 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.345254632 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.23908041 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.540392875 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.234645381 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.748010423 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.165468433 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.117128877 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.311037559 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.662732083 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.158289565 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 5.277392145 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.227592019 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.15927911 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.612031919 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.812790916 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.306944123 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.840373428 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.100452241 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.167420132 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.208735202 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.162041157 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.163293953 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.752029624 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.529750434 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.158447586 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.613016894 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.233703284 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.167987064 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.906855529 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.636664564 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.159019118 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.244301027 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.111785139 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.630286602 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.413709118 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.161318267 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.299007325 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.165205683 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 5.112037958 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.160398804 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.237452191 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.665609487 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.169449328 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.671883737 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.33441346 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.298294252 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.164227406 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.161267839 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.160548373 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.34796631 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 3.340139122 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.184569402 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.427040728 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.308790218 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.164176875 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.684979594 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.835905109 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.275508863 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.212120537 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.178575549 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.500700207 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.031277219 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.165311516 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.700537784 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.321283715 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.162573014 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.388115406 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.40931956 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.161347162 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.334279712 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.160110493 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.50016781 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.448323849 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.71000961 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.263760455 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.235146731 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.311332205 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.163684977 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.687207288 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.609143094 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.247761844 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.160453442 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.17490946 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.161560243 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.961143702 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.739589869 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.333313217 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.328528829 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.10602595 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.676162751 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.165168419 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 5.114714739 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.162624533 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.189657084 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.166058444 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.113185285 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.963371283 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.988111608 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.355483901 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.482908226 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.113443637 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.311205252 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.152474269 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 5.116609069 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.640657058 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.163003362 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.460342916 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.114813606 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.166928332 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.11725487 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.296739886 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.299934764 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.528873152 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.164413994 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.118399608 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.171887995 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.166126983 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.16292637 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.253552377 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.165183764 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.407593652 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.611938563 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.431897076 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.323625235 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.040136923 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.970323039 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.132986248 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.208473093 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.163742675 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.710113406 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.2810848 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.357327626 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.255594921 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.142959024 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.690105037 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.188949385 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.878735659 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.170813108 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.16795542 seconds)
  done (took 2459.59374097 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.191199158 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.230871981 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.230844016 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.231624273 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.193662544 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.211202888 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.231662257 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.21439821 seconds)
  done (took 59.824195344 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.163342358 seconds)
    (2/17) benchmarking "4467"...
    done (took 5.138942797 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.179722667 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.166681082 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.16739232 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.175347853 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.379454002 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.205333929 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.165040678 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.176759044 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.166182427 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.174256353 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.166865066 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.170112356 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.176325123 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.417129022 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.192582504 seconds)
  done (took 82.522321267 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.182848924 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 7.77621405 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.173623411 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.564133162 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.177326488 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.483833781 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.169990011 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.168123327 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.846243236 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 8.45042111 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.188463993 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.182781105 seconds)
  done (took 92.464001776 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.169015352 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.168112597 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.16771577 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.168276256 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.167654659 seconds)
  done (took 12.932084439 seconds)
done (took 3016.073782749 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.389783021 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.306517725 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.26672105 seconds)
  done (took 6.662641091 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.225242193 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.290722849 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.358311472 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.305358232 seconds)
  done (took 11.282550525 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.457138986 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.639596194 seconds)
  done (took 7.187327047 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.737477873 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.241622141 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.766717298 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.167090144 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.172825463 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.169697714 seconds)
  done (took 23.61825417 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.167968018 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.168541415 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.168830535 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.169275636 seconds)
  done (took 10.774133117 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.169062883 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.160247371 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.173255692 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.186385697 seconds)
  done (took 22.779592181 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.403167936 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.247878982 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.918489478 seconds)
  done (took 9.661201628 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.976298483 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.543318246 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.962116064 seconds)
  done (took 10.572916047 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.112371181 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.099878704 seconds)
  done (took 8.3040917 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.320487168 seconds)
  done (took 4.412199415 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.667504738 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.647108133 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 3.004442531 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 3.005523488 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 3.16352402 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.479886504 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.535625011 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.484919849 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.820994161 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.667608737 seconds)
  done (took 29.569230377 seconds)
done (took 162.04854172 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 4.024955085 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.588017199 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.338648284 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.856945618 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.267987554 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.341132719 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.235351878 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.623347534 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.472336069 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.462028559 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 4.357500185 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.266170586 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.226530459 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.571408056 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.229861565 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.521387717 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.329416468 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 4.003204346 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 5.179588353 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.693445063 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.249491422 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.727782278 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 4.021140472 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.772410457 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.335315011 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.298092772 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 4.229927493 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.535634217 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 5.466841046 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 4.233125895 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.303429294 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 5.001024368 seconds)
  done (took 186.856560369 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.17058797 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.175372516 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.175995073 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.174386373 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.078594004 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.174761217 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.175497112 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.174764098 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.900145091 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.859019538 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.175145287 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.095606119 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.175903046 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.174514453 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.176975716 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.174278689 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.165962511 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.175589471 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.176617911 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.174790365 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.176216212 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.933701277 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.17570011 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.93994934 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.126791885 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.177331225 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.175286678 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.176041808 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.176417611 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.176192915 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.178822198 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.17535515 seconds)
  done (took 222.418684322 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.173371713 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.176482226 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.175951575 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.176292837 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.176293346 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.178695461 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.178548537 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.175986463 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.176179348 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.177180727 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.177507417 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.180513412 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.179080478 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.17694257 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.177441618 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.176271731 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.175276749 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.175896417 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.177629238 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.176021219 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.178685785 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.177572371 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.177603582 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.179728303 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.179204115 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.183860507 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.177941358 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.182482015 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.175975089 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.176696247 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.178366341 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.177952832 seconds)
  done (took 231.794861318 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.471674698 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.174691556 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.176193742 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.503076867 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.174836265 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.173840796 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.501426407 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.471098215 seconds)
  done (took 22.756284062 seconds)
done (took 665.933413781 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.892018793 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 3.064817324 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.342819029 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.207464965 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.803223788 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.270140527 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.198652321 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.292525152 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.964895923 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.317459861 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.684894927 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.208744128 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 3.089153408 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.240565439 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.352569633 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.275693832 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.634333733 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.975222578 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.377737641 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 3.002223948 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.4417919 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.209878632 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.314228843 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 3.017803457 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.701589797 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.245442362 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.309333844 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.650869129 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.210122057 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.472701643 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.234264697 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.580552428 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.227072522 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.206838399 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.26891182 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.256982726 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.520026194 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.221119268 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.341418175 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.98824461 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 3.024086432 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.829705946 seconds)
  done (took 116.566212993 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.187489512 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.18481097 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.185023219 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.184685758 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.185284776 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.18397236 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.183777397 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.184423218 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.184904074 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.185588173 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.185085715 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.185939277 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.18480829 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.185941653 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.186421833 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.185882606 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.186204491 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.186549199 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.185813418 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.1859019 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.1856808 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.185469248 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.179134239 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.185891943 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.186307143 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.185616788 seconds)
  done (took 58.939129139 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.177683017 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.387964396 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.541655284 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.218481452 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.17853349 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.181703554 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.219092776 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.188423143 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.181066447 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.181386758 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.308717889 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.184677375 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.194459054 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.533874186 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.215120506 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.17777919 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.178250837 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.179879606 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.396649854 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.201220952 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.222683133 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.190260303 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.221022926 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.200628775 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.182162659 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.180933822 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.183472671 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.670612995 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.194053177 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.308558735 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.281506677 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.230569072 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.642258687 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.549715408 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.2592952 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.188652911 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.180511224 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.360865062 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.196643187 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.180821402 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.221034675 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.192250312 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.537236604 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.828331547 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.204757882 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.181279766 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.665743414 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.37328617 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.239642592 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.197878515 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.54528073 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.218879259 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.182028943 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.183660126 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.224812298 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.193296942 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.183733349 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.524191127 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.200295433 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.223798224 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.193428406 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.183647947 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.403123422 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.197161927 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.390022709 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.198680229 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.191510683 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.184764551 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.540357711 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.220190001 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.822636502 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.206987581 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.183729722 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.312112454 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.398073812 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.704896594 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.203961837 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.404469976 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.668063714 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.236834588 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.199233939 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.652423643 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.240053125 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.199522304 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.184423465 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.184865496 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.183272748 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.235345217 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.224277405 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.745102628 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.828826493 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.550431643 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.239159704 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.202569705 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.185848424 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.52600614 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.197981872 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.183852316 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.535993923 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.85175768 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.208701425 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.192896653 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.802334712 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.209250147 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.227175078 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.200603366 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.55862036 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.222918811 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.236359237 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.184858882 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.19293945 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.188204383 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.226781153 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.198767268 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.184984776 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.795834574 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.391531358 seconds)
  done (took 272.497330989 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.189850693 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.186620526 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.184722071 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.186854717 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.183575916 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.186107517 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.184339779 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.182517023 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.185946094 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.183997719 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.184077108 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.186808952 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.186582625 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.186192968 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.214635925 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.187125846 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.802977623 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.186757868 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.185105984 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.189368055 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 4.017901396 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.192374099 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.186012257 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.189822978 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.18588293 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.186819744 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.19234541 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.211376209 seconds)
  done (took 176.844666532 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.18618683 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.255544526 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.202196291 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.256262189 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.201485085 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.186378073 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.217195009 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.210571865 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.196508576 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.186698606 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.186405909 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.227099849 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.198316311 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.29152602 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.233466521 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.23101143 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.300235063 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.199152015 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.187658157 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.188016877 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.25773557 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.209835569 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.227385448 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.268526598 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.202594077 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.258171733 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.209643853 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.188344035 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.188131908 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.31586896 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.214231766 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.228292666 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.238595447 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.215802242 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.32337842 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.319479684 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.304786355 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.232382702 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.195163302 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.188298797 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.188785555 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.195695046 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.258792537 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.203221684 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.190448102 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.326395341 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.214610779 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.189274321 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.211788955 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.188801366 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.20630012 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.214925619 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.238403303 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.330215052 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.255349612 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.224396834 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.221482086 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.211680667 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.19163962 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.294545161 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.208381317 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.318321002 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.217809945 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.197426506 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.191599558 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.194619407 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.260230818 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.23598653 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.302668325 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.203165156 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.294985141 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.272531233 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.204951032 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.190931023 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.190833514 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.261267106 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.310528361 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.272546773 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.275889065 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.240398013 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.21018516 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.191008966 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.198401628 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.231140819 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.201585083 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.318690245 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.322507872 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.203231609 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.191469034 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.192192522 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.191831977 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.22708486 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.274063364 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.246222178 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.317708205 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.243446234 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.243285093 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.20330111 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.209830839 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.20044069 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.234835408 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.203129061 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.210104707 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.555507308 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.246025906 seconds)
  done (took 236.713204785 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.595072568 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.253951029 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.278475571 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.463953249 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.607313481 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.448096124 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.249207683 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.263373795 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.253871941 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.409776103 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.319815395 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.309703279 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.246556121 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.224891268 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.247969363 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.263124149 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.288429253 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.609209013 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.381679002 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.174205371 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.250535553 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.558908878 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.579547189 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.623108165 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.297964951 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.718925269 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.907958292 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.354694671 seconds)
  done (took 72.308798193 seconds)
done (took 935.963367731 seconds)
SAVING RESULT...
DONE!
