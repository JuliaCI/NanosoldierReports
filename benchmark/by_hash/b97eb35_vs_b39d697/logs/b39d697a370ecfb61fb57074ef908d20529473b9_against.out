cset: moving following pidspec: 1835799
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.769804137 seconds)
loading group "shootout"... done (took 1.145946015 seconds)
loading group "string"... done (took 0.654351364 seconds)
loading group "linalg"... done (took 8.502789072 seconds)
loading group "parallel"... done (took 0.162214345 seconds)
loading group "find"... done (took 2.979091229 seconds)
loading group "tuple"... done (took 2.055750203 seconds)
loading group "union"... done (took 14.304466872 seconds)
loading group "dates"... done (took 1.415937434 seconds)
loading group "micro"... done (took 0.21064757 seconds)
loading group "simd"... done (took 4.62371496 seconds)
loading group "io"... done (took 1.372125984 seconds)
loading group "random"... done (took 9.519650648 seconds)
loading group "problem"... done (took 1.585022142 seconds)
loading group "array"... done (took 24.911039398 seconds)
loading group "misc"... done (took 1.813804346 seconds)
loading group "scalar"... done (took 41.880543924 seconds)
loading group "sort"... done (took 3.257584537 seconds)
loading group "sparse"... done (took 13.006458233 seconds)
loading group "collection"... done (took 18.285980135 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.437568374 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.113343521 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.161155138 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.109484749 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.229115399 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.125414755 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.126601984 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.087598874 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.064810095 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.140105972 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.134791423 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.419782401 seconds)
done (took 5.581723595 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.319041988 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.240359336 seconds)
    (2/2) benchmarking "String"...
    done (took 0.161143306 seconds)
  done (took 1.565130437 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.091130159 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.057863769 seconds)
    (3/3) benchmarking "different"...
    done (took 0.064459979 seconds)
  done (took 1.373270733 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.063084894 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.13874959 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.06390166 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.064220618 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.064050134 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.063812027 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.063674792 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.063714406 seconds)
  done (took 1.684456339 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.071915202 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.065308988 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.063204167 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.064970778 seconds)
  done (took 1.42633398 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065712964 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.118093455 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.062195185 seconds)
    (4/4) benchmarking "different"...
    done (took 0.062018732 seconds)
  done (took 1.465647088 seconds)
done (took 9.074707368 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.157749664 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.757043944 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.848642988 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.144453307 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.31147131 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.34084593 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.119813716 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.199474641 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.112254246 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.074528218 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.162303053 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.079572057 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.47943082 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.473824786 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.070727969 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.186160844 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.607072645 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.084880229 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.112106989 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.185525625 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.081108645 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.082141438 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.086884128 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071035878 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.118148718 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.175188873 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.614630894 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.098130568 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.067639194 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.194342486 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.069766235 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.073942318 seconds)
  done (took 10.432102524 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.113964459 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.110296409 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.066385343 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.10038763 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.092712859 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.067474781 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.072736083 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.06622818 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.085599123 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.129218772 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.089482898 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.12122502 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.065931056 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.067394825 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.097172753 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.159499965 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.081986745 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.080436352 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.066420802 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.079631972 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.09244947 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.078468511 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.076231075 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.075935066 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.11012379 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.131847614 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.08553624 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.10651673 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066684143 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.078674189 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.093342937 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.105987921 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.066833387 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.065600783 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.108359063 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.086944776 seconds)
  done (took 4.433024536 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.024021539 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.092995296 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.104451733 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.099389671 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.10418345 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.092536034 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.145840288 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.120695066 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.098547599 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.066915613 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.179383501 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.672736706 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.06226203 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070697455 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.144858541 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.362210023 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.898176989 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.072115582 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067112555 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.096663304 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068883005 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.138093892 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066008633 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.175585857 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.637165835 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070918943 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068782624 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.096620613 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.186954605 seconds)
    (29/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.135792624 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.138776163 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.09254429 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.067915281 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.575072212 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065491106 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.062658323 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.08320729 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.091518067 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.064776338 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.065826431 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.07616023 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.063817742 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.114091974 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.078763537 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.545502397 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068506492 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.624963046 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.332227209 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.072665955 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.071153106 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.10093684 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.063487303 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069526779 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.642498018 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.148893496 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.066292493 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.28482238 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.06996501 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.06739242 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068195349 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.099264996 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066445015 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.067549455 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.072021124 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.08362899 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.016624091 seconds)
    (66/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.066547771 seconds)
    (67/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.063547278 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.148174658 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.084233025 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067686369 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.417216954 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.076771347 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069448587 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070493906 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.096146952 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.135469771 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066761139 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065952132 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.109870951 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.230021138 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.088796396 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068590714 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065665944 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.064558216 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.532316681 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.962771834 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.069080029 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.06656178 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.503643577 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.06393949 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064991179 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.066571859 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.086847802 seconds)
    (94/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.063153497 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.064838385 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.062114637 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.062937658 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098859566 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067666889 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.548401571 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.06661452 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.480790382 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069381069 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.097128489 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.122089314 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066614559 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.104588632 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.06666656 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.063964981 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.07229873 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.064652367 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.06346515 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068355961 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.064726735 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065525567 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.067658779 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.067418151 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066186794 seconds)
  done (took 23.13483761 seconds)
done (took 40.186607296 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.396500649 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.077303526 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.076856964 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.076734253 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.076620068 seconds)
  done (took 1.909286888 seconds)
done (took 3.220329763 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.254377054 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.076788942 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.062683788 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.204002573 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.087412719 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.177870763 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.217922841 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.291805183 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.089961233 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.0886611 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.0892804 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.221945099 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.232962622 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.089854502 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.161831652 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.232871478 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.091116762 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.064270869 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.089280382 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.09050025 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.090904321 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.065080236 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.090738386 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.090767279 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.161711469 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.088821498 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.063264776 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.162556875 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.091637216 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.16725272 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.092038703 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.09120912 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.091766263 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.163702223 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.09211114 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.164009531 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.06417168 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.091848029 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.09193978 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.094706603 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.092510426 seconds)
  done (took 6.361692846 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.076692142 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.079555715 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.080930341 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060101331 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.069041539 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.079350382 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060225599 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.078935913 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.099880096 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.079620274 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.079263873 seconds)
  done (took 2.141936457 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070709582 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.080138526 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.081313036 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.059694808 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.070627212 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.080166767 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.06007522 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.079820796 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.082582645 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.080167775 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.080312346 seconds)
  done (took 2.065240069 seconds)
done (took 11.793528294 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.189740895 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.087403355 seconds)
  done (took 1.497290378 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.255963194 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.496720227 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.224549105 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.120836936 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.098999645 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.116391202 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.228283008 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.099042775 seconds)
  done (took 7.041218566 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.096010478 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.065693793 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.093247274 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.067565136 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.067800174 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.066425624 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.065467315 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.06649892 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.066773398 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.065763863 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.065494974 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.067655157 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.066049857 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.067263222 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.066450822 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.065981847 seconds)
  done (took 2.477903282 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.100434862 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.06712425 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.096052076 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.060088692 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.069873694 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.06095063 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.068666466 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.07030973 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.067894998 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.068042948 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.069690622 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.068077519 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.068989411 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.069039314 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.070164164 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.071224532 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.071634042 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.068277162 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.07063141 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.072217141 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.070468906 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.071828282 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073051589 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.070455703 seconds)
  done (took 3.06963779 seconds)
done (took 15.325068713 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.1769457 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.072576767 seconds)
  done (took 1.483426436 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.093408768 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.091259106 seconds)
  done (took 1.438220228 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.072797467 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.058385818 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.07514193 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.067446899 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.059088433 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.058772378 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.074106474 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.059043662 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.058901325 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.058988138 seconds)
  done (took 1.898670691 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063300146 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.065369215 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.063417518 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.061974607 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.06420464 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.059807819 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.062150399 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.060058484 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.06588151 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.059042666 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.062951314 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.080655045 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.062632122 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.081048913 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.06256674 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.063010152 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.064609352 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.062870547 seconds)
  done (took 2.421107082 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061733651 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.059238177 seconds)
  done (took 1.37880392 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064585963 seconds)
    (2/7) benchmarking "second"...
    done (took 0.05937225 seconds)
    (3/7) benchmarking "month"...
    done (took 0.061225506 seconds)
    (4/7) benchmarking "year"...
    done (took 0.060928814 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.05942889 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.058843064 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.059282342 seconds)
  done (took 1.675693103 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.426620819 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.192967242 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.424729708 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.068033989 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.081696821 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.267535991 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.063096929 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.06688744 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.067156258 seconds)
  done (took 2.951956232 seconds)
done (took 14.512861506 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.083966108 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.180857244 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.109787063 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.415597126 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.07791927 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.065515509 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.093564917 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.208880225 seconds)
done (took 2.512069676 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.284772019 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.204343366 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.25561718 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.146336115 seconds)
  done (took 2.869119505 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.418431366 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.166057844 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.075926709 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.065462532 seconds)
  done (took 1.998020109 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065764406 seconds)
    (2/2) benchmarking "read"...
    done (took 0.06953529 seconds)
  done (took 1.407076911 seconds)
done (took 7.836660302 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.073356998 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.059126742 seconds)
    (3/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.093980114 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.061020898 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.061338386 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.060869793 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.060269432 seconds)
    (8/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.059244388 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.061261268 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.059303917 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.061212892 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.061186675 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061253966 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.060985814 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060924838 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061244537 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.059319165 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.060869235 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060852423 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.061433976 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062252323 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.061300711 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.061926927 seconds)
    (24/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.061249807 seconds)
  done (took 2.795330881 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079812629 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.063515176 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.064073545 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.063796667 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.06471831 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.064447836 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.064479206 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.063440148 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.064497588 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.063479703 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064838226 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.064851253 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.063278552 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.064891906 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063393284 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.065055945 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.064735068 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06369559 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063411425 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.064887896 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.064558158 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063683401 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.065505275 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06529185 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.065708981 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065702257 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.064085807 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.0645447 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06548661 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.065827208 seconds)
  done (took 3.232406198 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.06722786 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.057822974 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.057885084 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.067817763 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.057624874 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.057996058 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.05863829 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.057748768 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.058074565 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.058974361 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.058458517 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.057934632 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.058740514 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.057850766 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.057923589 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.058449308 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.062963478 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.078376392 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.05826926 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.057937555 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.062712078 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.058228425 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.058015392 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.057916189 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.058404459 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.057912018 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.058065303 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.058707386 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.058634245 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.059300618 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.05868273 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.063213782 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.064814924 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.058617699 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.069053788 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.063675605 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.058546562 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.065220629 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.059400742 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.058327635 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.058319504 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.058354387 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.058728187 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.058754644 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.069213143 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.058925131 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.059844827 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.062066095 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.058993887 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.058515831 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.058837735 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.060460889 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.064718655 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.060100243 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.058544516 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.05990494 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.058550477 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.059362718 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.05875225 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.058487076 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.058598621 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.062761722 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.060358797 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.05940061 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.07986604 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.060190235 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.069296567 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.059044052 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.059192942 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.062909515 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.059318657 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078398076 seconds)
  done (took 5.66577412 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.072638798 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.068981119 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.076558672 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067865588 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061687006 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.058920639 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.062079527 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058900958 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068093391 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.062494392 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058980818 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.061955176 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068021425 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.062484732 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.059927041 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.067869291 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.062210335 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061398688 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.058816959 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.062868704 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060227553 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062636368 seconds)
  done (took 2.708853087 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.144277354 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064217513 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.106037664 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.068068539 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066486337 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.06775977 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064220502 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064214092 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064366945 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064827248 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064794823 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064406263 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066429045 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064828924 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064849457 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064703897 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064411207 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065011627 seconds)
  done (took 2.580767898 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.077634269 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.063875611 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.090396973 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.063572682 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.064171432 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.06382065 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067421708 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067632775 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.063663178 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.064047826 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.067752845 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063721446 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.063732896 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06410655 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063818397 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.064052465 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.06437561 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.0651773 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067726259 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067488234 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068003496 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.068580891 seconds)
  done (took 2.763181453 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079045482 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063036965 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.07880576 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.064387192 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058078526 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058387764 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.064843664 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.06339171 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.064707088 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.063063189 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063571049 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058631816 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.065555005 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.063495912 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.065650361 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063733375 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063156519 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.063434119 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063036813 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058377516 seconds)
  done (took 2.575863759 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.097494302 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.060921282 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.060401935 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.065069434 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.060743252 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.060833592 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065175058 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.072638186 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.060679743 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.084781888 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.061090906 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.061053695 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06564251 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.063986246 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.061051946 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065488694 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.065467503 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.065455679 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.061244476 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061213928 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085597274 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.061805851 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.066928812 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061883606 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061867729 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.061826801 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061839324 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.064803117 seconds)
  done (took 3.137499088 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065594828 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.061583552 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.061602287 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.061550607 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.061525983 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.061356882 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.06174262 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.06473457 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061507387 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.061829053 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.06148162 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.061531347 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.06143568 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.061480146 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.061681213 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.061667033 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061538465 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.061804253 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.061771148 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061778611 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.061760593 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06171702 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.061597618 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.061978296 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061969786 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.061707273 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.061872926 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.06214521 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.061973852 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.062335714 seconds)
  done (took 3.158732769 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073624102 seconds)
    (2/2) benchmarking "in"...
    done (took 0.069052671 seconds)
  done (took 1.439107301 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062524473 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.075413905 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.057466834 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.070373453 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.06633467 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.062087068 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.066808785 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067917614 seconds)
  done (took 1.818176488 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.092425561 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.114291518 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.059709943 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.060241716 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.089211142 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.126266605 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.099317195 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.071974744 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073758191 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.06268003 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.060114717 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.099367523 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.059402248 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.073307053 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060905561 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.069090139 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067517603 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.078302703 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.073422595 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.05849257 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.073153047 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06099975 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.05970494 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.061192793 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.060889118 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.067699383 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.076548376 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.073248171 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069193282 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.058017516 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079712357 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.058998715 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.060097248 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069219686 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.091415091 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.059444825 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.0971734 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.059666199 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.06416385 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.058760152 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.071772127 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.080672008 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.074072847 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.0777861 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.060770899 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.061080528 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.058691796 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.06099547 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.063323333 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.068983816 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.058864365 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067087855 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.058406925 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.060651033 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.070188725 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.059606543 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.064258672 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.069128288 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073396781 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.070321197 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.072109876 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.075283197 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.068569198 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.068004059 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.060041023 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.079850757 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.061013703 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.073112034 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074764393 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.060507641 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.073057035 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.05894988 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.058505916 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.059303548 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094227998 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.061252378 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.060974456 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.059866913 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.059713471 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.061162463 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069883622 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065945747 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068841458 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064707683 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077698438 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.07073067 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.060901334 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.069440613 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.080165538 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.065068994 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061312012 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.078833091 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.065020615 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060590975 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.080114544 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.071783866 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.06312527 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.062369925 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.065278253 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075702924 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.06290621 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060680455 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071235239 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.063873798 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.247081562 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.06369462 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067737748 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.058825363 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.069473155 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.063885292 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.059882257 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.057347231 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.063194079 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.059125095 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.05717417 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068285795 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.058480366 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073167673 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.065387402 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.07340252 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.073813671 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.069387922 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.074607368 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.058363624 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.060042636 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.076664623 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.068214633 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.059466401 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.07651259 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.057792309 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.06922257 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.057736772 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.059510498 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.068088252 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.057279961 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.059793629 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.058178379 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.063709992 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.059514544 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.05974801 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.064433033 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.067334873 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.070779986 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.059216033 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.067590625 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.058668715 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.074572506 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.06911038 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.063779079 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061981681 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.059805645 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.071591011 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.066617412 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.069361643 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.059071423 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.060198604 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.059671248 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.070601207 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069620617 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.061104504 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.067841936 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.064484743 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.060115208 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.059704149 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.060507996 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.06358039 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062690302 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.060159262 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067858497 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.068743341 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.073927913 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.066593402 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.06897688 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.058611878 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.058919777 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.060920199 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.058843801 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.06434975 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.069152587 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075444117 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.071459945 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.081194007 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.059482487 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.06978121 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.061026596 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.076804348 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.073472952 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.060613411 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063967076 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.058458081 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061024265 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.069391979 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071645862 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.074235727 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075586961 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.066111568 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.065991831 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.060558715 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076822473 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061537554 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07000476 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.07089234 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.067320773 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.061027718 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062638118 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070835537 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.065992904 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.061710859 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.077324249 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.068800453 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.06075255 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.076182758 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.06141673 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.072807112 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.061346358 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.06577785 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.067514604 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.064083585 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.229490317 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.075870479 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.057997406 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.059399193 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.074857792 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.060241117 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.059841335 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.067126295 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.074039683 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.063361469 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.066738369 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069449152 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.069000586 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.063432616 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.068684649 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.059107995 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.06805178 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.060907637 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.070237909 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.058287761 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076639465 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.057330019 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.073963783 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.058710368 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.069762888 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.058911321 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068098559 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.05919661 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.075621649 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.059965481 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.059114701 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.070565651 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.057386133 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.068099717 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.057894075 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.064014475 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.065566268 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.068074965 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.060011258 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068178059 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.059816604 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.067825951 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.063461967 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.067088806 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.068151747 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.063890666 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.058472851 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.068028319 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070639738 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.067871095 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.060506457 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.060532876 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.059696973 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.069156009 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.060803469 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.0607439 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068286376 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.064640741 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.065778163 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061004019 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.061406382 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.061057434 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068471262 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.06949108 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081047399 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068562161 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.067478432 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.069202407 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.058974016 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075681572 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.059653144 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.067481352 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.058334526 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.066442892 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.069171975 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.059466592 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079078476 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.060894211 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.067881037 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072318006 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068671227 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.063643846 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.077989499 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.062710339 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.068427242 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.068008818 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.064690755 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.0668165 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.061459844 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.06870881 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.069852992 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.071160055 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.060921687 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.068025515 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069368486 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062514092 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.071243894 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.062998151 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.069966305 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.062922887 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060056006 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066237019 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073264824 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066403224 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066640194 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.061429361 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.059775975 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.061413393 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.069888032 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.066537058 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.070527857 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077687653 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060589033 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.06299595 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.06151376 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.066241368 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081768192 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.2298432 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.067875578 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.064089987 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.058037974 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.060040716 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.060151396 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.058821561 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.061434915 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.057572348 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.057920231 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069331091 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.059914675 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.063249031 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.058544862 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.059206872 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.068608979 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.062306568 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.058869581 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.065362726 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.057997821 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.063904265 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.057506416 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.059673541 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.063555039 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.057972164 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.062613504 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.069167756 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.075261236 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.065473991 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.06780747 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.059396807 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.066876403 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074223841 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065840215 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059488765 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.068108846 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.057907401 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077168832 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.068194763 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.06739305 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.06846692 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.059499992 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.075607538 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.063448285 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.06879645 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075175214 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060509365 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.066934686 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.058879528 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075497671 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.064255849 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.058778932 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067764525 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067628181 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.065448327 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.07148355 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.05998327 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.068086695 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064578439 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.063428662 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.061149079 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.061033083 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.068744647 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.076257728 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.060255926 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.06501005 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.068020661 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.068390564 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.06453814 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07227647 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.068091089 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060851122 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.061182846 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.063655004 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.060375924 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.071924396 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059952186 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.064530477 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.064462743 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.059035292 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.066605324 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076435308 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.069229583 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069549695 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.05910421 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.058886178 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.078076986 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.063779827 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.062973441 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.068274383 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.070088051 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072689676 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.069830127 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.077531835 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.060666112 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.066798182 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074078641 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.061970497 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.061080558 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.065303663 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.062824858 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.070931292 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071717886 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069228047 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063319332 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.071210708 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075214696 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.062519045 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.066313383 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.068030192 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.062116452 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.072953369 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.070568519 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.071176161 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.063829467 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061822257 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.220814806 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.068823482 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.06702601 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.068331892 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.05958639 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.065520533 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.072409371 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.066472918 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061159676 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.05787826 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061170611 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.067796531 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.06324202 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.057881119 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.063472118 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.06247947 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065265392 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.067986932 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.063370011 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.057869725 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.075530636 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.066933858 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.067993741 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.059970258 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.060066592 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059018126 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.057856077 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.069805911 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.057993604 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.059727442 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.063555769 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.059841148 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.076371571 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.067056262 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074746072 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.05919479 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.063396129 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.057861664 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068389632 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.063461826 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.058622605 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.069341923 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.057630058 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074196792 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.071096878 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.065485448 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.058965744 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.06495035 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.067753755 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.07498963 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069374632 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.068680845 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.062597849 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069368524 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.061024061 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.070639064 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.058956014 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.058171091 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.06963185 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068631362 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072359136 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.059087978 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.069969641 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.061371542 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068326609 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068151857 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.061254627 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061236553 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.061194061 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069443735 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064468212 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069480007 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.064819652 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.076926165 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.06061393 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.071154074 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.069185847 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.070976259 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.074283342 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072318296 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.068190678 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.060332467 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067636382 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.068128438 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.061044252 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.065281697 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.063156586 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082666004 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.061821038 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.061645974 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074920613 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.068059064 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.060432738 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.0678963 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.065634591 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.072535056 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.062382178 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072258294 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.067336827 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062151263 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.066525796 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.06653929 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.060105393 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.060820877 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061328197 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071796837 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.066072301 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.062194884 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081911705 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.063491473 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.071258021 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074111487 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.069758984 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.221085651 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.058914636 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.06000837 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.072702483 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074624499 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.062541637 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.0677686 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.059915082 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.0680957 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.057489148 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.067597664 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.066941045 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067565334 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.058015386 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.058667298 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.073790445 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074381384 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.063544248 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.074860424 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.068168057 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.059721238 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080398395 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.068156396 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059524652 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.06959373 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060513754 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.057831684 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.057643875 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.059923497 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.07024387 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.05808332 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.060475282 seconds)
  done (took 41.665175824 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.102953578 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.059738864 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.061084623 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.058541249 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.065563836 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059708127 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.058515882 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.05965043 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.059613209 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.060801394 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.058431164 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058539553 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.064075596 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073786517 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.066308951 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.06217013 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058548487 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.059554595 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.058465161 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059739006 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.064952583 seconds)
  done (took 2.721598624 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.064929596 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.062362251 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.061776877 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.061930775 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061435792 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.058594746 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.062073179 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058725218 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.062566939 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.05904781 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.062529977 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058762573 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.05916085 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.059104965 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059261054 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060180996 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.062591482 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061747207 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.058765871 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.062021423 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060077151 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062514612 seconds)
  done (took 2.715441137 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063132109 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.059243843 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.067738331 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.057808894 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.057640161 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.061068901 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.058088534 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.063334229 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.06333983 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.063222458 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.068034525 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.059152679 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.058006362 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.064556377 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.058001657 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.05918475 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.10336492 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.059663068 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.059567785 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.058327525 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.061142179 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.068283376 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.058280298 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.058671714 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.063802624 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.061961987 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.05872641 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.061409513 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.059422222 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.063611825 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.059907793 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.058482624 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.068284316 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.067693572 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.063693709 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.063685093 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.060443037 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.05963743 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.058611531 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.058609598 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.067595921 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.060185027 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.058934375 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.060209597 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.068735237 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.058633537 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.058475537 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.068329956 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.058375442 seconds)
  done (took 4.433346817 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.073388752 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.108757246 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.064389117 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.09071049 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.070577718 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.063794469 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.064444182 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.091768056 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.059646422 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.060113839 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.071332418 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.071342064 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061075251 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.062379642 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.064390431 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.06087326 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.062255448 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060964452 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.063860028 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061136964 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.06384932 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.065896842 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.071159532 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.071619151 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.062442849 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060684101 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.060978195 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.062609385 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.071097274 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.064239956 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.062865791 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063221338 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.071538713 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.067122329 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061140739 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.061291953 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.072526604 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.062158783 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.061952948 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.0604529 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.061572262 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.062991132 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.066449996 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.072879943 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062027955 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.066805683 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.062281327 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.059827829 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.071829743 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.061607753 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.065248766 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.072865692 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.06267434 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064818 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.063169362 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.072000185 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.061916208 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.060554227 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.062058041 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.071799681 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.060362338 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062620096 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.072746463 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.061531494 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.064908384 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.072809238 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.066943833 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062968093 seconds)
  done (took 6.025943058 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.07126461 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.093443429 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07281492 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072928265 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068701071 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.068804866 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.068704648 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.068709312 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.06857584 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.071539946 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.068764162 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.131550178 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.06595103 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.070410298 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.068876337 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.068972802 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.069507835 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069537906 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.069529824 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.069456475 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.069396368 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073972624 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.069434654 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073987719 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073887001 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.065969896 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069363071 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.069420606 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074281537 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.069405819 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.073973633 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.069420869 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.069275 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074122894 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.073922262 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.069571872 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.060210072 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069693739 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.069861701 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.069683852 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.066286817 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074674643 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.069710513 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.066456119 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069793439 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.069611576 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074721481 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074482075 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.071291368 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072693178 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.069911379 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.075445066 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.06969884 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.069921806 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074833422 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.077812309 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.07499797 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.075126497 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.070244196 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.075083558 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.075163164 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.07822104 seconds)
  done (took 5.902077742 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076108851 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064112988 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.076891769 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.058416899 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.058421975 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.067774743 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.058501793 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.058515852 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064430521 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.06433187 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065896919 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067713637 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069747403 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065810805 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067744482 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069540118 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067704615 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067869919 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06509728 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068338256 seconds)
  done (took 2.742021291 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.063496803 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063282936 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.05884832 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.074180508 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.059072697 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066595428 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.059172742 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059265308 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059385227 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059206659 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063556956 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063649124 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059045574 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067037314 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.062598274 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066502453 seconds)
  done (took 2.398481649 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064438991 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.066306541 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.092277949 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.060072174 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.061590974 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.059067449 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.059863394 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.058896204 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.060936795 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.07281617 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.059915569 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.061619698 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.059692142 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.05887177 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.058970411 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.061693621 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.060777182 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.059826656 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.05970412 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.093185061 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.068313239 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.060706144 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.062157268 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.060805097 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.062608128 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.068244616 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.061604945 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.061906181 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.060109151 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.062349643 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.061912419 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.070999287 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.061893397 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.063557882 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.059217849 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.059881371 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.060273466 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.062312982 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.062264967 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.060250256 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.059163845 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.061817706 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.060331111 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.060588349 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.061510128 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.062427025 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061574166 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.070602927 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.060569474 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.062470555 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.060612611 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.062067721 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.061336491 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.071966861 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.062825438 seconds)
  done (took 4.875921753 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079132207 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064020467 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058224972 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.057988434 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063460197 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.064337464 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.063986079 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.064000679 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064558085 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058579409 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064458188 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.063516694 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064402342 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.06404399 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.064393096 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064138591 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058296247 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.064064367 seconds)
  done (took 2.565108139 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.068634576 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063529375 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.06382222 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.05984351 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.060092791 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.064338234 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.058629233 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.059953433 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059999851 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.060258728 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060186448 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.059905981 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.0599709 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.059987835 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.0638494 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060155685 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.059889727 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.058809277 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.060138976 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.05857289 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.064321161 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.059089485 seconds)
  done (took 2.745585798 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.117658007 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.082263986 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.157233946 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.078790729 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.088861482 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.070397163 seconds)
  done (took 1.999117959 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.095247611 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.095919928 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063651679 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.063487334 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067865315 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066526739 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066447565 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066594248 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069446485 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072168667 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066437863 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069686851 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069425185 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071276288 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068120342 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068091098 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06657827 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06687538 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.064275696 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074776404 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067150477 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070474487 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067265058 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067005048 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067132871 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072190007 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070428364 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073116875 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06718532 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070504471 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068852687 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067307316 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070585539 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073098103 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.064552234 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070345833 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067318194 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075116585 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069379816 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072846085 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064843823 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06945494 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071013299 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070718738 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071167719 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067815844 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070681584 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067730133 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067896706 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079405764 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069669 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072591658 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069452922 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071191868 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070985024 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079406756 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073848344 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072864277 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069753821 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074171699 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073152692 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06995206 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073058122 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074423107 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.0700536 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073934092 seconds)
  done (took 6.074363582 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105450764 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064437944 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069378071 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071954553 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071331145 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066858496 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066816905 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066904952 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066898474 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064555577 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.1021457 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067102565 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071534206 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071530217 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066840348 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066684507 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066834119 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072122219 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064929496 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078709061 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067419833 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072218171 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072329196 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072166468 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073235301 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069235557 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067443674 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067318165 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06735233 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067317181 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070321682 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067480314 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072193588 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064788391 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072216094 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067583647 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067241815 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070414624 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067805439 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069541541 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072844871 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075824193 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067910561 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067755457 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073857352 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067854259 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067857153 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065327616 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067741244 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065270107 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073776511 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073934057 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073874757 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072835609 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068083051 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068130453 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067867283 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06788082 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068017952 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069764516 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073169593 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068146913 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079852301 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068404013 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068365631 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073458358 seconds)
  done (took 6.094171498 seconds)
done (took 126.098816495 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.259788415 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.221704501 seconds)
  done (took 1.871284609 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075170149 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.26651062 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075782393 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.07238244 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.132378339 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.132094599 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.106473443 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.07056278 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.072646408 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.069957947 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.168733156 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.10669996 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.070450661 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.07007279 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.070009291 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.094523481 seconds)
  done (took 3.073301437 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.121850534 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.207248342 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.080081366 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.068015426 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.151091004 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.076240168 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.071083472 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.074669831 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.075971695 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.337537639 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.117587266 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.08291517 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.073521816 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.074859375 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.070968587 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.073255184 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.074463024 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.075512883 seconds)
  done (took 3.328654627 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.103869978 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.112404484 seconds)
  done (took 1.642048556 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.160620232 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.107187018 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.144924029 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.352701308 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.140907755 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.141463223 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.145716228 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.141350932 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.115377752 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.138802703 seconds)
  done (took 3.008243532 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106941354 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.102940798 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.305275279 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.100893999 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.079977368 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.074957031 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.073002319 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.077774265 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.072761735 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.07443245 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.120160728 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.07312033 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.070263554 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.122251649 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.097606163 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.104744606 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.069200883 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.076669933 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.07816912 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.069070586 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.07407967 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.078386216 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.177685234 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.077442828 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100185114 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.073580553 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.075225506 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.072582795 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.07247752 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.07627539 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.077037268 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.100184304 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.076915913 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.083236016 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.074742148 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.096351639 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.070256431 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.098883751 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.073064099 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.070980667 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.073320649 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.077266291 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.07087852 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.079322499 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.073698078 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.076112609 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.079056603 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.06957796 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.073868316 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.073202566 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.07130034 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.074922596 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.074644756 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.075696164 seconds)
  done (took 6.126123738 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.123339115 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.109712335 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067936955 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.117327737 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.108967111 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.0683343 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.123829792 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.104275237 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.122002889 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067911257 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.06794339 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.06712089 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074783851 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.079030639 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.120049129 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.113089183 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070071387 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068472396 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.112617302 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.113109088 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067394377 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.124729706 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.115548651 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.111887849 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.067143385 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068488679 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.067037127 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067594402 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075623763 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075426303 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067483003 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.077941629 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.079815083 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074707718 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066769511 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067079075 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066963559 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.075617717 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.0770185 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076877638 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.074096561 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066656856 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067031252 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067549867 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068033751 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066546274 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077006294 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076122306 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.077317772 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068366323 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.068103568 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.067366925 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.068881532 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075107982 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074090526 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.075569477 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078477901 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069326235 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068327037 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069228659 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079047158 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076477889 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075940862 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068798087 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077055596 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067730904 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07798068 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.080579424 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067576412 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.06818269 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067709665 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067757867 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068127814 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074579128 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.074867515 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068510145 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068910794 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067765641 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078034543 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076898992 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069163225 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.078947806 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068739008 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069290637 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069700842 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070553997 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.080612934 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.077951526 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070004627 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070571684 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.070421084 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070277577 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.069562775 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.233658883 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075096319 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.074473016 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.075732147 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067083167 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.075919557 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074662962 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067098554 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.072874431 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066522476 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066714605 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066680966 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.072829791 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072411561 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.07431645 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066455696 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066165297 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.074235994 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076102187 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066543328 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.072488479 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075579757 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.073218437 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.066150706 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076148345 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066636717 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.075398576 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066578441 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074910948 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066737398 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.073063232 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066746381 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.065969958 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066594523 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.075856204 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067644064 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066472686 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066672788 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066395525 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.072938943 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076715695 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067258453 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074170375 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.074113205 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.06775167 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076294377 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067324418 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076578481 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067614935 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067672704 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066816046 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078691187 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067365546 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068432187 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.070327734 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.076836554 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067725044 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076535783 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074120383 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067087832 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077579783 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076514786 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.074291598 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.077196169 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.06838164 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067751931 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.06736609 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067692095 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.076858335 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078505498 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068928707 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067785712 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.073970372 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077350699 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.067393905 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.074358461 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074315441 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.074701197 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.068016554 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.06795426 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078234851 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.079688085 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.076158683 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.080012649 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.077952035 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069340098 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076550213 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.080214651 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069378696 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.083131161 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069298531 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.080271117 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.080699673 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.077540663 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.082075918 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.235008178 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.07638506 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.075544775 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.077323278 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066304374 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066508751 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.072904166 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066489316 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066443307 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.072303276 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.066740925 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067608112 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.079605519 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06702853 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.075478842 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066131151 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.073283486 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066008865 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066994307 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077859939 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066596246 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066856135 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.073636262 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066528968 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.072662927 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075520494 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.072619859 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066398114 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066805412 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075936793 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.07582942 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066564367 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066288789 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066724129 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.074967786 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.074279657 seconds)
  done (took 18.474211233 seconds)
done (took 38.964428764 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.169969711 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.112349362 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.224128276 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.203262675 seconds)
  done (took 2.228860304 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101289541 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.063593243 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.10586839 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.115570772 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.063565695 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.101579161 seconds)
  done (took 2.017333988 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.201745046 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.175764109 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.250758939 seconds)
  done (took 2.089587168 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.366949708 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.150536774 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.25778922 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.51515283 seconds)
  done (took 2.853742848 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.13501909 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.13161008 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.075417977 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.144861271 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.082578713 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.060410872 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.144895472 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.067631544 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.097517904 seconds)
  done (took 2.462793789 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.140691593 seconds)
done (took 13.255266063 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.316747493 seconds)
    (2/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.260207879 seconds)
    (3/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.10832334 seconds)
    (4/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.100786972 seconds)
    (5/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.15243831 seconds)
    (6/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.242012507 seconds)
    (7/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.294815835 seconds)
    (8/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.148239667 seconds)
    (9/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.108085009 seconds)
    (10/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.297508944 seconds)
    (11/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.323677661 seconds)
    (12/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.222749784 seconds)
    (13/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.068721964 seconds)
    (14/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.075169301 seconds)
    (15/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.074939654 seconds)
    (16/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.200024396 seconds)
    (17/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.074412712 seconds)
    (18/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.300293529 seconds)
    (19/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.075193585 seconds)
    (20/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.299475579 seconds)
    (21/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.121186895 seconds)
    (22/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.329691428 seconds)
    (23/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.204640382 seconds)
    (24/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.125539976 seconds)
    (25/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.124329192 seconds)
    (26/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.123713431 seconds)
    (27/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.069430817 seconds)
    (28/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.072919491 seconds)
    (29/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.070937086 seconds)
    (30/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.242576937 seconds)
    (31/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.316491275 seconds)
    (32/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.265380788 seconds)
    (33/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.192701344 seconds)
    (34/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.144146043 seconds)
    (35/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.147286117 seconds)
    (36/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.065287679 seconds)
    (37/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.079866103 seconds)
    (38/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.116915488 seconds)
    (39/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.148097861 seconds)
    (40/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.068935203 seconds)
    (41/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.085920407 seconds)
    (42/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.075611357 seconds)
    (43/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.203846574 seconds)
    (44/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.257177088 seconds)
    (45/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.09447328 seconds)
    (46/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.174854986 seconds)
    (47/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.073994711 seconds)
    (48/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.084645659 seconds)
    (49/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.129120171 seconds)
    (50/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.086329476 seconds)
    (51/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.308717614 seconds)
    (52/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.192295063 seconds)
    (53/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.066989036 seconds)
    (54/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.074724196 seconds)
    (55/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.068514679 seconds)
    (56/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.075673258 seconds)
    (57/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.198118413 seconds)
    (58/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.081645764 seconds)
    (59/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.075444564 seconds)
    (60/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.075566438 seconds)
    (61/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.079410329 seconds)
    (62/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.175691925 seconds)
    (63/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.335979167 seconds)
    (64/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.12268998 seconds)
    (65/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.110779334 seconds)
    (66/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.144378355 seconds)
    (67/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.072766628 seconds)
    (68/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.186696442 seconds)
    (69/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.069206391 seconds)
    (70/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.066344792 seconds)
    (71/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.071538024 seconds)
    (72/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.143603234 seconds)
    (73/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.073242074 seconds)
    (74/341) benchmarking ("sort", Float32, false)...
    done (took 0.136358562 seconds)
    (75/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.087207162 seconds)
    (76/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.068198407 seconds)
    (77/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.063832219 seconds)
    (78/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.08593581 seconds)
    (79/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.080077308 seconds)
    (80/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.149966948 seconds)
    (81/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.064073085 seconds)
    (82/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.207132724 seconds)
    (83/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.07684162 seconds)
    (84/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.146917993 seconds)
    (85/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.077067969 seconds)
    (86/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.206616456 seconds)
    (87/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.07108081 seconds)
    (88/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.100544465 seconds)
    (89/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.072456544 seconds)
    (90/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.075708581 seconds)
    (91/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.204294545 seconds)
    (92/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.146937333 seconds)
    (93/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.086335504 seconds)
    (94/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.182425879 seconds)
    (95/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.064665442 seconds)
    (96/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.064763744 seconds)
    (97/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.066578809 seconds)
    (98/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.07115188 seconds)
    (99/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.07497768 seconds)
    (100/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.193552548 seconds)
    (101/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.072791049 seconds)
    (102/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.072721279 seconds)
    (103/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.082207534 seconds)
    (104/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.178874744 seconds)
    (105/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.096166347 seconds)
    (106/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.065058301 seconds)
    (107/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.09265752 seconds)
    (108/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.149080126 seconds)
    (109/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.215909427 seconds)
    (110/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.065494408 seconds)
    (111/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.150901613 seconds)
    (112/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.074947467 seconds)
    (113/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.068782853 seconds)
    (114/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.173933658 seconds)
    (115/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.141386261 seconds)
    (116/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.214189566 seconds)
    (117/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.082848571 seconds)
    (118/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.149055404 seconds)
    (119/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.072215489 seconds)
    (120/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.188604063 seconds)
    (121/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.074944196 seconds)
    (122/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.074046507 seconds)
    (123/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.064977513 seconds)
    (124/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.07073482 seconds)
    (125/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.07421849 seconds)
    (126/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.077763858 seconds)
    (127/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.072046177 seconds)
    (128/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.084114269 seconds)
    (129/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.070812523 seconds)
    (130/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.065245747 seconds)
    (131/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.065093007 seconds)
    (132/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.091589287 seconds)
    (133/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.075169562 seconds)
    (134/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.133016253 seconds)
    (135/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.065270488 seconds)
    (136/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.158250511 seconds)
    (137/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.208425821 seconds)
    (138/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.165009841 seconds)
    (139/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.152324026 seconds)
    (140/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.072579028 seconds)
    (141/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.074966343 seconds)
    (142/341) benchmarking ("sort", Bool, false)...
    done (took 0.149545712 seconds)
    (143/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.091305524 seconds)
    (144/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.073168359 seconds)
    (145/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.066706391 seconds)
    (146/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.177613607 seconds)
    (147/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.067106903 seconds)
    (148/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.074968988 seconds)
    (149/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.073822085 seconds)
    (150/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.076776174 seconds)
    (151/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.07451138 seconds)
    (152/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.071612652 seconds)
    (153/341) benchmarking ("sort", Int64, false)...
    done (took 0.068091775 seconds)
    (154/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.319030546 seconds)
    (155/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.068397962 seconds)
    (156/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.069262486 seconds)
    (157/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.06540746 seconds)
    (158/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.064615742 seconds)
    (159/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.150702255 seconds)
    (160/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.075894996 seconds)
    (161/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.20523442 seconds)
    (162/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.087572628 seconds)
    (163/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.082248573 seconds)
    (164/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.089994067 seconds)
    (165/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.06602035 seconds)
    (166/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.113636726 seconds)
    (167/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.063479766 seconds)
    (168/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.13865259 seconds)
    (169/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.149859805 seconds)
    (170/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.063832892 seconds)
    (171/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.263755035 seconds)
    (172/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.091994114 seconds)
    (173/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.09385451 seconds)
    (174/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.073018496 seconds)
    (175/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.20409862 seconds)
    (176/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.206667359 seconds)
    (177/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.069137689 seconds)
    (178/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.068357301 seconds)
    (179/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.226766257 seconds)
    (180/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.064296734 seconds)
    (181/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.064441436 seconds)
    (182/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.065372921 seconds)
    (183/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.209752751 seconds)
    (184/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.208301189 seconds)
    (185/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.080150652 seconds)
    (186/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.154448637 seconds)
    (187/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.065202568 seconds)
    (188/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.070796304 seconds)
    (189/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.064711276 seconds)
    (190/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.074256369 seconds)
    (191/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.159966135 seconds)
    (192/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.064224522 seconds)
    (193/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.083285185 seconds)
    (194/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.065157235 seconds)
    (195/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.071676553 seconds)
    (196/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.065445612 seconds)
    (197/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.141658732 seconds)
    (198/341) benchmarking ("sort", Float64, false)...
    done (took 0.136751681 seconds)
    (199/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.189413702 seconds)
    (200/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.07579439 seconds)
    (201/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.141104334 seconds)
    (202/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.065032342 seconds)
    (203/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.064238593 seconds)
    (204/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.082717064 seconds)
    (205/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.064534766 seconds)
    (206/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.064591685 seconds)
    (207/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.070195967 seconds)
    (208/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.065441989 seconds)
    (209/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.071493102 seconds)
    (210/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.08450827 seconds)
    (211/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.068949367 seconds)
    (212/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.068752423 seconds)
    (213/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.087398766 seconds)
    (214/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.078034181 seconds)
    (215/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.079937624 seconds)
    (216/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.069088025 seconds)
    (217/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.066381127 seconds)
    (218/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.067094159 seconds)
    (219/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.067087372 seconds)
    (220/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.085092221 seconds)
    (221/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.066885134 seconds)
    (222/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.069981201 seconds)
    (223/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.202436729 seconds)
    (224/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.065816378 seconds)
    (225/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.065159172 seconds)
    (226/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.065173922 seconds)
    (227/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.065216827 seconds)
    (228/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.076843395 seconds)
    (229/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.075324303 seconds)
    (230/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.069960228 seconds)
    (231/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.069859493 seconds)
    (232/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.067704487 seconds)
    (233/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.065399747 seconds)
    (234/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.090993179 seconds)
    (235/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.066343775 seconds)
    (236/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.186668266 seconds)
    (237/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.072556135 seconds)
    (238/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.065705637 seconds)
    (239/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.067517149 seconds)
    (240/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.157282771 seconds)
    (241/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.087757253 seconds)
    (242/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.073412774 seconds)
    (243/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.072205221 seconds)
    (244/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.06951114 seconds)
    (245/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.065402904 seconds)
    (246/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.06582411 seconds)
    (247/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.072844566 seconds)
    (248/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.068359553 seconds)
    (249/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.138702961 seconds)
    (250/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.071933592 seconds)
    (251/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.071315875 seconds)
    (252/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.067091209 seconds)
    (253/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.205230974 seconds)
    (254/341) benchmarking ("sort", Int8, false)...
    done (took 0.154952357 seconds)
    (255/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.06737028 seconds)
    (256/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.261856271 seconds)
    (257/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.070482498 seconds)
    (258/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.070121578 seconds)
    (259/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.082571081 seconds)
    (260/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.065668651 seconds)
    (261/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.065360074 seconds)
    (262/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.068897743 seconds)
    (263/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.073821649 seconds)
    (264/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.066672243 seconds)
    (265/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.071577621 seconds)
    (266/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.06535166 seconds)
    (267/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.065650364 seconds)
    (268/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.064433061 seconds)
    (269/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.064065233 seconds)
    (270/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.071838463 seconds)
    (271/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.063452922 seconds)
    (272/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.064985704 seconds)
    (273/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.06439559 seconds)
    (274/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.083887037 seconds)
    (275/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.068183953 seconds)
    (276/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.064361858 seconds)
    (277/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.070974105 seconds)
    (278/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.063999886 seconds)
    (279/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.18924886 seconds)
    (280/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.085041018 seconds)
    (281/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.083603956 seconds)
    (282/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.064079064 seconds)
    (283/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.091048494 seconds)
    (284/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.159312 seconds)
    (285/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.063968745 seconds)
    (286/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.065057667 seconds)
    (287/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.072103581 seconds)
    (288/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.06424965 seconds)
    (289/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.210658775 seconds)
    (290/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.0649166 seconds)
    (291/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.075785561 seconds)
    (292/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.064876403 seconds)
    (293/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.066243316 seconds)
    (294/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.172774176 seconds)
    (295/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.12995535 seconds)
    (296/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.064584083 seconds)
    (297/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.063931803 seconds)
    (298/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.063971667 seconds)
    (299/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.085650502 seconds)
    (300/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.064418348 seconds)
    (301/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.064402534 seconds)
    (302/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.070028749 seconds)
    (303/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.226618713 seconds)
    (304/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.065580393 seconds)
    (305/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.064527925 seconds)
    (306/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.066867688 seconds)
    (307/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.065039123 seconds)
    (308/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.065175262 seconds)
    (309/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.064272699 seconds)
    (310/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.24755954 seconds)
    (311/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.138538879 seconds)
    (312/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.066630783 seconds)
    (313/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.071075057 seconds)
    (314/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.069122376 seconds)
    (315/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.065111184 seconds)
    (316/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.068742252 seconds)
    (317/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.064858874 seconds)
    (318/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.064490552 seconds)
    (319/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.064799313 seconds)
    (320/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.076412073 seconds)
    (321/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.064844652 seconds)
    (322/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.064582719 seconds)
    (323/341) benchmarking ("sort", BigInt, false)...
    done (took 0.267779055 seconds)
    (324/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.09289528 seconds)
    (325/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.069538885 seconds)
    (326/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.06556321 seconds)
    (327/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.065401406 seconds)
    (328/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.066785132 seconds)
    (329/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.06543414 seconds)
    (330/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.065803745 seconds)
    (331/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.120483315 seconds)
    (332/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.065288832 seconds)
    (333/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.064373967 seconds)
    (334/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.06476808 seconds)
    (335/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.084350586 seconds)
    (336/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.064936699 seconds)
    (337/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.066413192 seconds)
    (338/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.066678405 seconds)
    (339/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.06601156 seconds)
    (340/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.066638964 seconds)
    (341/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.064983416 seconds)
  done (took 38.645158233 seconds)
done (took 40.126638435 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.124890535 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.078224701 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.075805629 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.072836946 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.076519463 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.07691528 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.076612523 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.074083643 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.078681581 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.07539478 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.106283864 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.063654003 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.071158461 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.080544059 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.072516753 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.079373136 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.079036226 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.078847433 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.064554694 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.078958729 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.089212838 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.076845587 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.072811967 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.078838104 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.064837476 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.07282007 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.119395125 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.084196796 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.069249748 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.074064287 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.071799353 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.080380588 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.071964973 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.071500266 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.073950038 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.069460452 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.0742597 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.070586426 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.11991844 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.069440651 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.064980012 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.076915148 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.071315786 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.072307158 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.072825807 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.076344159 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.06964439 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079938429 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.064016752 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.075492944 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.120236328 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070090045 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.069163464 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.072587577 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.069519493 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.073812649 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.068886352 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.075694965 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.069281258 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.075907627 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.073904065 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.072176906 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.064155828 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.072919258 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.071246369 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.07159843 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.063113007 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069669033 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.064193327 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.064273752 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.063726615 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.073188797 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.071275438 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.069329772 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.063525667 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.064378395 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.063688549 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.076156732 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.071531953 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.073437029 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.064906753 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.069858028 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.069377222 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.064922337 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069974667 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.076179802 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.063758749 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.065050588 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.063627407 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.079411407 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.071186801 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.064838019 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.076797644 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070427981 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070334053 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.064746099 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.06430679 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070345686 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.072949773 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.06490883 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.063690523 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070437241 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.069679468 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.074145717 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.066424304 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071571058 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071627859 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.064907439 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.074894372 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.072969131 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.075074401 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.079295368 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.075894558 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.080592961 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.067370178 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065802928 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.076797106 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.227265269 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.06997174 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.071682735 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.069000797 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.071605691 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.064171838 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.062715926 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068993672 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.069159455 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.063771616 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.063802867 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.063708439 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.072170213 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.070631787 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.062282431 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.063408651 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.072862086 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.072100226 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.062673258 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.062680688 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.07210657 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.063787222 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.06919421 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.068381702 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.071958991 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.0628965 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.063664369 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.062477581 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.06282453 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.062571317 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.068605429 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.06888588 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.063917071 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.072062461 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.070645703 seconds)
done (took 12.748816339 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.068501358 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.107165899 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.114999369 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.109139472 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.077705251 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.065669286 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.068220069 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.083964229 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.067598514 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.08952338 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.089471567 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.086041624 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.128299223 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.063096268 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.064531757 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.065152026 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.062862502 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.076525501 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.113132651 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.08864909 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.107289288 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.064444984 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.080958197 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.084865814 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077738266 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.08397934 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.066240074 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.065586262 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.067646911 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.082200404 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.090895001 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.064767522 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.065893295 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.084041658 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.080955446 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073704433 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.065606104 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071707435 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.065559667 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.064583308 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.066692114 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.083413297 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.071882475 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.07213477 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.065801685 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.065848666 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.064927153 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.07242066 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.078805899 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070882318 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.077330134 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.081574228 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.066367423 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.064771146 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.063080466 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.072609248 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.064824318 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.06561377 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.065303882 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.064811759 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.065368626 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.067558865 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.070425098 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.075421338 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.068977432 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.072344998 seconds)
  done (took 6.558675741 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083624983 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.092912832 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.078488983 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.078697145 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.063991301 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.064816026 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.064859449 seconds)
  done (took 2.129245648 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068533826 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.10450557 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.110874113 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.111761537 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.12085623 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.109621686 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.065801202 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.09770382 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.064332342 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.105931584 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.118928811 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.113534669 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.06813077 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.077175814 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.06537498 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.113795127 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.065985579 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.072411424 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.109835304 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.115449537 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.06975425 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.095891527 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.078979444 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.066104783 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.114800014 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.106667211 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.067881832 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.066104842 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067646424 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.065108901 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064968206 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.088271937 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.106257561 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.08019707 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065758222 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.064528125 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.104188163 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066145287 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.103284217 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.072608893 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.10331678 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067263991 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067647783 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.065175809 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.066184152 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.10818713 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.066546377 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.065006845 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.064750221 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.107648074 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.064941443 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.106263648 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.067561377 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.070180783 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072367415 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071761484 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.072873497 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.065890974 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.109308749 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.075638901 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067329071 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.118791317 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.117444963 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.105585329 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.1176433 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.07509224 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.109281964 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.106028639 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.065819005 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.065722359 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.066345478 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.118749732 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.069505646 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.068440642 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.071167179 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.073703166 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.112663665 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.124178123 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.125475137 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.082138165 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.070445409 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067560922 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.23912911 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.119743274 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069938777 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064645698 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.065519482 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.064269067 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.069504671 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.06655812 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.069479986 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.064346758 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074550532 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.067210255 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.066681975 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.111515177 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.06483503 seconds)
  done (took 9.905071021 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.069981155 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.067307593 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.065931131 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.065817177 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.066013607 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.065740722 seconds)
  done (took 2.019008363 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.092666788 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.065903704 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.077441943 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068403437 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.087649983 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.107817271 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.107008465 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067420519 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.08188122 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.076800183 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.107716772 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.109400737 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.10967011 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.067073416 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.107570407 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.066810569 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.108197134 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.069486133 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.076953686 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067786509 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.079885134 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.067398832 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067667482 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.116400849 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.068672392 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.067456654 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.074876439 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.077509313 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.076941155 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.06777291 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.067383452 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.068396731 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.075342455 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.067653381 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.110461997 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.075612509 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066646953 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.070948278 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068286016 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.068395909 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.112301165 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067990989 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070470058 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.071006072 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.067617014 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.075086864 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.070847675 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070288291 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.110045696 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.070927247 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.070765162 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.066738611 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.068166863 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.070672607 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.075041227 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067327353 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.070642729 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.110298665 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.06766935 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.075493872 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.066496779 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.068566792 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067667938 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.068504192 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.071751481 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.071178196 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.075617809 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.068141754 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068079829 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.066893348 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.071294662 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.066777396 seconds)
  done (took 7.179680174 seconds)
done (took 29.373482608 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.547214739 seconds)
  done (took 2.123538146 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.959959024 seconds)
  done (took 2.581120365 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.276012298 seconds)
  done (took 11.903210415 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.391568368 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.481650277 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.75964693 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.139919992 seconds)
  done (took 3.422665977 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.874732141 seconds)
  done (took 2.504444105 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.239671717 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.226026411 seconds)
  done (took 2.113341905 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.454154457 seconds)
  done (took 2.072721958 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.209686933 seconds)
  done (took 2.835210164 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.23695527 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.161135777 seconds)
  done (took 2.029123678 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.627005177 seconds)
  done (took 2.251045695 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.764434068 seconds)
  done (took 6.391953603 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.323784873 seconds)
  done (took 2.004137515 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.239907978 seconds)
  done (took 1.869858919 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.875469014 seconds)
  done (took 4.49758178 seconds)
done (took 50.239431951 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.086704293 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.084392141 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.083817303 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.079327788 seconds)
  done (took 1.93328044 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075851566 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.068878969 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.071328611 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.07180881 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.069131953 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.070805928 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.071628963 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.067861068 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.069325492 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.068426667 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.066720579 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.06831722 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.070861829 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.067882572 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.070443674 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.071944586 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.068376143 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.068567184 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.070343352 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.067894998 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.070909951 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.06832609 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.066277933 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.067912419 seconds)
  done (took 3.293650241 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079674361 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.070334969 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.073343119 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.068952917 seconds)
  done (took 1.924177935 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077775609 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.074664435 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.082910648 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.087515711 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.073833465 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.074802453 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.081937766 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.082011976 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.063774016 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.084755649 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.066076085 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.064858069 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.06489612 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083279506 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.081035696 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.060332107 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.06153266 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.075260092 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.074279293 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.077096681 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.066426167 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.063606195 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.074240968 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.075017848 seconds)
  done (took 3.402112958 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.083295431 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.063958968 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.080215256 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.089061419 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.090120631 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.06399108 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.078072982 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.090480935 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.126700771 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.064108005 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072763982 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063881345 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.103244646 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.064000929 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.079293764 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.108573671 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.111579153 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.067810073 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.096686216 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.063951964 seconds)
  done (took 3.301605978 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.078602154 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.06858368 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.068466772 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.063621765 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.074544802 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.070596236 seconds)
  done (took 2.066325543 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069535568 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.066276695 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.065530871 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.070285488 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.066048175 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.066001761 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.065264841 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.064514282 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.064374166 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.065122853 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.065039218 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.065488645 seconds)
  done (took 2.426806952 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.215989799 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.071044776 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.068660412 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.064123746 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.065830948 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.065090369 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.078912133 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.066953423 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.087632113 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.065233661 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.065328929 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.067507782 seconds)
  done (took 2.617603859 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106410648 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108940439 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141712212 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113937499 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114522259 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093781336 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.163085791 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.092426993 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.158982932 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.13630257 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116090279 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093174891 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086131276 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.068524786 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09936256 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119511202 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138196294 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071633491 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112280197 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.207373581 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131908241 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.134676083 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.147489242 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115970958 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.091671963 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146685546 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09585221 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101481259 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124434051 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.127225018 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11836008 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.097345041 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.070695105 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.06975309 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150350336 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.108779866 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123828562 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.092444656 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105949287 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088648742 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108692154 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.069249698 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.083305233 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.112799916 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08607767 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134435633 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.093681991 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1177042 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083126561 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.313569138 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125676706 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.133714351 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.084039613 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103067927 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134405902 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109537563 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.131666509 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103921066 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080175227 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.116173074 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.103433107 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097514295 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105565982 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077699036 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.173721272 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087019944 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.109546905 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10923571 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.093244113 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093866626 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10433219 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.13449321 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.126991405 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.126542381 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139787283 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095585719 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120266159 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.101291148 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.128663549 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104122231 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.072050129 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.122896403 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129660579 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100281104 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102123938 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133229436 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093100577 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077660668 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.101921473 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.120622664 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080644161 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.115500092 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081155843 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.111299325 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140176739 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100488636 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115091632 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.124586718 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.254065259 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151627029 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106283639 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071136315 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114079078 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109695861 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152504334 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092674546 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.074322425 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098241114 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100336569 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.150055521 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105225535 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077891008 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106433879 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136863199 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091494174 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.214772603 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093034765 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140082586 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107955049 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084890084 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073341615 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.088538388 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112642293 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107355439 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111379483 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093448876 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.083512509 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085687689 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114662971 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093227045 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080096372 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114438466 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.098724585 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.074155827 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087546736 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.075544952 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142204087 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.077842037 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138106817 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126788113 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.076814605 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108275602 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099031401 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109742278 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.098039188 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120564853 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14408903 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.11627988 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.091831691 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.096660919 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11174749 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.153520188 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.13574751 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.268514814 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.075924811 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099220327 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110336276 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095719153 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124004306 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093536658 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104313468 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100380486 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137553037 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14022742 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095832877 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099249115 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104687831 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.119173149 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074591458 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153012799 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101382663 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11614595 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082533209 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138197112 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.11034769 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.08772262 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085788171 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098906327 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.104809202 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107329199 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143906774 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.09542856 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.07184264 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092410392 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144494178 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076826674 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109310729 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.090643846 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.091970175 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118990288 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.094679899 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08081285 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.067753789 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129933552 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.161023732 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.06991643 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116118434 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.110713917 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104701531 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.125008925 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.069623272 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12427879 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.145723689 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123991741 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.327129496 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.165139389 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115691685 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116330076 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.110752958 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103047793 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07710923 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.122252443 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.131355517 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093157166 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092689832 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132126925 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116477434 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.1326315 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.114002098 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116080264 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.102419272 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106322996 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100356758 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.103453168 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141982957 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121413122 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.123800308 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085246462 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105188067 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119613343 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13665859 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08103529 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141465424 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.084532892 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120328164 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.07782381 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123706253 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.076942479 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.107939586 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078414505 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100473433 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.068963461 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.073659364 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.145050243 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.114216346 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109169047 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102408943 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.141114573 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.139960527 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.079496086 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10909609 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118470754 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103322174 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121000931 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.113651372 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.267054728 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093612668 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106835176 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083422196 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.079296016 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.112634647 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09133293 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121750691 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.082007382 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072798483 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13616149 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101671619 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092257241 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076028338 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10490852 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.120862651 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090428829 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084449446 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11502833 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102899469 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138070444 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.088815084 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.095135764 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.121696758 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077927449 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.09002611 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.06739896 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.084006293 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.074612517 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.127477601 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07503474 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116672546 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.067955507 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.130817503 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087159905 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.092158805 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101902376 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109603022 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127448687 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093922625 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141128779 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089307545 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120861605 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108427977 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094697722 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089028817 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103912582 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101511221 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.124843853 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.096812133 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125736909 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147716457 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104919956 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.146055179 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093254705 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128995664 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113386994 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.3049889 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110296065 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.164330251 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.136844553 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109106125 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109844244 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073214875 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093216722 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102361313 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.109643422 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.169855615 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122390921 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.070472652 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104678948 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091906911 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10609787 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1014544 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079948241 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141938565 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100054775 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.086063964 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110289009 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.089606154 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10282646 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075328516 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09988662 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.104449854 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094758959 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097040495 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117938274 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12963758 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113054448 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.14504146 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.10050709 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.091588047 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.118833206 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110904418 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11004923 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085943471 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086399967 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140148349 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124197601 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129314044 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.10365562 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111020568 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115608376 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102170585 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128693059 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110441455 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.135649816 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083988468 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.25450341 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.06799269 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.070985224 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.121912592 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105462267 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109144758 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096205703 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.070541873 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100901876 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103958915 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070141049 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085656723 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091424656 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.093419202 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.089773266 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10448153 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.110115438 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.089024099 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101425433 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09690359 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143659986 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.09936105 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086343581 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140584304 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146383925 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085855349 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091167923 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.070342428 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077797623 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111034969 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150003078 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.152630732 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.078174425 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086298843 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.085654331 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086240631 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.070848142 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.088728931 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.088282621 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10589177 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101177424 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113507922 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105795894 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074809648 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.102272835 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100017424 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093130068 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.109081633 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123407994 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.129387236 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.145032318 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116451582 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110080029 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076671635 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.081035108 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076208797 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080229225 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.103914911 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.080093732 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078734216 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.318271579 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.090838691 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103205701 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105771263 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085697536 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073659097 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13388844 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.067687423 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131632153 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.06937881 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079761708 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.079950785 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07682305 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090841796 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134068842 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108485213 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109051787 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105390948 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101813332 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158153476 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154844632 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079320981 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.141260469 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074276492 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074887512 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.074407753 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10945255 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088866389 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115418542 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14215753 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09037328 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101571833 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077471697 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143944414 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099759398 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104496965 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085849662 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078802348 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144155424 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079307103 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.081388159 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089811231 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112495381 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.072502838 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104561349 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085454576 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079720528 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.167413877 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.712526747 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091298069 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.075796956 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.099135546 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.146433992 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137752047 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102907603 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.286412673 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.117460895 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098918833 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.094295185 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105270692 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.188720144 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072522346 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091718161 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.101186927 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095035471 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099132046 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.096498525 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.086628029 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.090160715 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.084834601 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077306179 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104976254 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08593933 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094196721 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.10861265 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081210787 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.085877031 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.128047389 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.101387844 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.080413879 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085693773 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.103380111 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085718193 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10088021 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.06867651 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113129808 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.09055433 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11826363 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.098367602 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.10797207 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.128601548 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094280104 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137997167 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.107444152 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.123069262 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087098566 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.077876465 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127136233 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.090318804 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0777629 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147992166 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.098216591 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.091790294 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104959675 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.097010134 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11469312 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119615649 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115871895 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099978688 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08097309 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105917512 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.282353885 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085755067 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07775799 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.072943729 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.074705714 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104656321 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083928803 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.081603475 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112213592 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086483462 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100445004 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.100974306 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.120151152 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085979407 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098841158 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.1089566 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089281377 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107346868 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098899947 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.125796481 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.170269676 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12161785 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.126929164 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131691588 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.076210853 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.074286466 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.067517516 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114771537 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078257711 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.088351991 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080341302 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134316234 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.081858497 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112608555 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.242404843 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.08029419 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094648133 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096452986 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.069116034 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083055054 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107802152 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086653699 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079452483 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119371076 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082956164 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.129832928 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112167736 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100083919 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096060956 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081611082 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116217227 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105477019 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.132212929 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.099161319 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076092567 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126726834 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.105371556 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144863149 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.07585636 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084910296 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.311075968 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102751688 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128519795 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078158356 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146105456 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.141004606 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098456604 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130980812 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069431283 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085916659 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087650119 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.124276591 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081952685 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108511326 seconds)
  done (took 68.399537843 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.14525423 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.174569049 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.123072368 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.133386528 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.290580242 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.300285729 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.152915573 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.124141489 seconds)
  done (took 3.237933089 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.070669956 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.082249217 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.079966976 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.242580269 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.096638935 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.066616201 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.072010533 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.080777318 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.066102111 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.065733479 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.099958157 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.066080694 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.066319012 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.52513895 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.065822924 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.071802624 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.066129437 seconds)
  done (took 3.673327054 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.350171031 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.516277919 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.319804936 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.76300415 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.166534244 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.724219106 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.074674468 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.081779881 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.928385786 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.215783625 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.159383055 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.087846988 seconds)
  done (took 21.173319033 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.077986203 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.118667159 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.117472015 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.07290927 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.072514268 seconds)
  done (took 2.246247923 seconds)
done (took 121.34824883 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.085537894 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.171266242 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.067494131 seconds)
  done (took 2.04982288 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.120560287 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.117631041 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.116104063 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.117362323 seconds)
  done (took 2.257304706 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.076502874 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.074746568 seconds)
  done (took 1.936883706 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.227310437 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.211890109 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.089906835 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.085317772 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.07878758 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.078965008 seconds)
  done (took 2.03670375 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.073051004 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.069845941 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.069749302 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.069899042 seconds)
  done (took 2.061226062 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.170189333 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.06586798 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.068185003 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.069935183 seconds)
  done (took 2.155668276 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.086919494 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.085337538 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.114542637 seconds)
  done (took 2.073680155 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.085276342 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.083286204 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.077636153 seconds)
  done (took 2.03291794 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.111019131 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.09514866 seconds)
  done (took 1.987845659 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.081108822 seconds)
  done (took 1.867438873 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.093285279 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.096767358 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.182593918 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.147788226 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.183819719 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.17018124 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.075861364 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.076153475 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.071875532 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.070851176 seconds)
  done (took 2.950390282 seconds)
done (took 25.808208037 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.085870772 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.190258459 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.439672385 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085285453 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.652906649 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.436575049 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.730710516 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.088719654 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.098154963 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067386413 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083695535 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.631959838 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.729977206 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.14371834 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.716102056 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.136817419 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.56026995 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067287944 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066268135 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066966489 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.715471547 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066564567 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067029899 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067344365 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.558627265 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.453493359 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068037876 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.136778708 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066790961 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073812878 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.436647616 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067960954 seconds)
  done (took 14.617075505 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.077169588 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.144900777 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.071880015 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.082657261 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.069061506 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068747079 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.070977567 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.067623063 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.109383037 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067416743 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084141143 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066766428 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.071782156 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068463356 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087486653 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.067427304 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069540245 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067813876 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067202145 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067781289 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.086025267 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066917485 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.06758664 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067809146 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.06740934 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.081155686 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068282163 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.06716652 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067339201 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071238281 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072381121 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068681254 seconds)
  done (took 4.202067081 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.12919521 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.129373143 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.072373528 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.107060377 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.115656949 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.069772379 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.149819528 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.089647025 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112870616 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067733651 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084416093 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.067453236 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.102897259 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068812314 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088060954 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.067472408 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.06958602 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067773327 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066918574 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067637078 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.086373893 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066807529 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067455881 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067734585 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067826928 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083333598 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068434457 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.067457148 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067363757 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071487665 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073294087 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068531679 seconds)
  done (took 4.455640745 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.071356812 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.069822664 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.075732912 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.07857497 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.064921274 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.066860256 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.067950678 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.06515147 seconds)
  done (took 2.366776551 seconds)
done (took 27.447053298 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080521118 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.06630515 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.069029236 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.085762493 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.072295786 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.109245826 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.063500398 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.073146644 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.069667011 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.069732597 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.07144243 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.065831201 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.068380572 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.063254907 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.070143836 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.064302001 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.111741343 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.068610202 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.108603578 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.11038808 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.066906699 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.069893999 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.072872853 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.110234484 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.109588736 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.109596129 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.073361763 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.070238891 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.064627594 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.067539354 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.169981709 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.183786078 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.074308467 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.116415021 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.065119311 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.064862378 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.06912932 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.067453307 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.113212394 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.074046523 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.067161766 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.073600587 seconds)
  done (took 5.283526948 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.190219102 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.193067698 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.185648381 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.078782738 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.091157134 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.078491462 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.191822715 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.076062315 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.074350231 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.191112819 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.070395174 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.074704276 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.076891998 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.067588722 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.074213878 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.070607384 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.075787888 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.068519682 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.074174681 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.074061795 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.191244396 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.068073627 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.078808738 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.075848326 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.06994303 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.075706711 seconds)
  done (took 4.463035145 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.075231638 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.087591616 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.091099102 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.145108639 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.109125539 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.081894398 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.081093821 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.092640765 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.100277329 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.066970339 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.070688029 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.097365253 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.09525139 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.073540834 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.10609557 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.084707917 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.078722285 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.06824429 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.073247521 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.100699553 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.08932342 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.084980482 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.099372153 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.086704588 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.065710005 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.075874475 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.07367536 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.082382988 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.074084148 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.078922657 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.070475006 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.070018121 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.067207331 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.078069063 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.07084465 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.064677776 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.089448758 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.079817279 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.081813997 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.106747279 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.07720553 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.068490894 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.143833924 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.132000433 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.066833542 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.069265715 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.070976898 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.079663117 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.068502446 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097572594 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.082575666 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.066806577 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.086243993 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.068348468 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.068416742 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.083122134 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.068695535 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.068881573 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.078910704 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.073024722 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.087936945 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.072482585 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.08797406 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.066728931 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.07834475 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.068320985 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.068539711 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.065659212 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.100976968 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.074424327 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.117243965 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.068330092 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.064912633 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.079410309 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.078608182 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.073855329 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.066788075 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086241656 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079167795 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.070797073 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.077947622 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.06969264 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.070445402 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.103150499 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.06580616 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.064835261 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.064810604 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.068992445 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.070537971 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.067831587 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.080038952 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.066789749 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.070794209 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.082206007 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.067414211 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.067824882 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.06966956 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.06846527 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.066715939 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.077831222 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.071469592 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.069183303 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.08012966 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.068654079 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.071027755 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.082791739 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.076986281 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.067282941 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.068552004 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.071177866 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.071064581 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073802314 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072822596 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071188407 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.07411116 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.076815449 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.075852144 seconds)
  done (took 11.055949034 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.208182895 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.193322004 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.06810565 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.189489122 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.075432877 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.123306065 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.191023915 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.129873133 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.067604988 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.068246232 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.066466469 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.137933815 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.132095002 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.142744535 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.114414547 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.067933251 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.093845292 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.143011638 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.195696931 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.190364774 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.093352479 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.075228591 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.069948051 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.06896899 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.068828852 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.07688248 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.083429427 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.076378492 seconds)
  done (took 5.085836646 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.076027116 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.082819625 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.070716086 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.091141099 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.083343321 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.06687072 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.069212758 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.067941532 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.083841243 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.072286791 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.066664767 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.071319052 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.070031824 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.067442168 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.067731779 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.073301891 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.073299309 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.065626795 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.070251582 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.071071958 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.077888276 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.155084712 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.071513193 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.070129366 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.069163953 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.067233196 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.073401078 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.075049958 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.066325154 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.099816367 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.064108495 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.071048244 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.081464816 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.067830612 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.066907404 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.067878161 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.067284034 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.067238563 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.067608111 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.065215307 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.065224048 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.073231353 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.066049832 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.072486443 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.081741983 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.076196236 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.068769717 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.069713273 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.069536275 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.064084039 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.070485678 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.070570845 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.070087199 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.075942933 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.070828312 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.069508432 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.068885498 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.098067303 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.073263828 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.066846403 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.067194683 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.065645789 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.06881293 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.075246269 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.084376435 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.069004314 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.065596678 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.067276154 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.074938494 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.081758508 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.066777493 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.072714754 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.064293616 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.067319687 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.069452218 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.070234123 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.068902946 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.065456778 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.06727061 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.067510018 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.068396432 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.06698711 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.067697891 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.070185262 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.065085052 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.065754048 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.068100591 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.068666285 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.0726366 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.0659886 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.070026726 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.069154967 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.066563607 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.070729521 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.073755402 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.070846625 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.088225706 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.075992257 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.068263337 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.065611739 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.08279016 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.069407625 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.066867945 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.071220807 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.07236373 seconds)
  done (took 9.43760504 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.098726555 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.068239185 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.086867063 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.098521901 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.076859382 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.071556167 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.080955016 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.067360771 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.088302301 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.06557198 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.075285815 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.064677187 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.080443218 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.07575086 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.068045923 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.077067346 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.069066067 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.087770857 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.081491887 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.065017027 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.075672736 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.078921836 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.07911927 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.085011868 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.084611257 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.085568049 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.078985478 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.068875397 seconds)
  done (took 4.063088265 seconds)
done (took 41.185218877 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.90437685 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.09315646 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.892426308 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.429581688 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.960419814 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.985536251 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.967004861 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.881260435 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.568810266 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.958557468 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.638436893 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.559538152 seconds)
done (took 68.729904584 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.065371889 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.047704217 seconds)
    (2/2) benchmarking "String"...
    done (took 2.139274592 seconds)
  done (took 6.095960786 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.324463322 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.88081562 seconds)
    (3/3) benchmarking "different"...
    done (took 1.920883872 seconds)
  done (took 7.942518407 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.244878435 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.880816184 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.159954251 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.879956511 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.888341195 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.376009302 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.073049057 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.525624337 seconds)
  done (took 33.611351936 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.887934844 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.256342977 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 5.263916521 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 5.326871087 seconds)
  done (took 21.633807753 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.330468464 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.205360506 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.205170792 seconds)
    (4/4) benchmarking "different"...
    done (took 2.351388897 seconds)
  done (took 11.005336044 seconds)
done (took 92.565786076 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.883289426 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.043741721 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.899096178 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.084426193 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.943089114 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.982889179 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.890980474 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.460681603 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.911631961 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.888491603 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.878510634 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.888889411 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.882681681 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.93131288 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.887915583 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.893975048 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.027058114 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.889214841 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.893877997 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.423164677 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.227668049 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.895967653 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.916746932 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.967670121 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.078086288 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.939953095 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.155887781 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.89218357 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.474215728 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.91872186 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.888026062 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.889368046 seconds)
  done (took 207.64750856 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.883302988 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.58866963 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.61641828 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.912568895 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 5.163844864 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.242196577 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.68211926 seconds)
    (8/36) benchmarking "gemv"...
    done (took 5.187863857 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.888029297 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.887138899 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.756806828 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.883879525 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.834393889 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.400468162 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.919189318 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.933092438 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.714646736 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.636338536 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.925416376 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.756966585 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.889258261 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.319973228 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.316864019 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.636825737 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.898347926 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.936315977 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.034138012 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.892681889 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.34128011 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.710923137 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.894886541 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.896672401 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.360023983 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 3.117995094 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.893313327 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.888533278 seconds)
  done (took 180.672583568 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.113603871 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.911771561 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.932494169 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.99709994 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.621115315 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.539488105 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.887824238 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.883875522 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.88378162 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.88981968 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.910895533 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.949856032 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.243134599 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.909136936 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.888440083 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.885655988 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.211510097 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.917552243 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.883526809 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.884664954 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.979633934 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.228767708 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.995617835 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.888618353 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.939053328 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.995316207 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.894730947 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.885610937 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.993797764 seconds)
    (29/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.888150662 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.885319737 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.01014535 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.997941596 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.939345461 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.940111874 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.895310097 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.967995595 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.889246024 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.884694985 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.88674707 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.926050871 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.889127284 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.665504535 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.988120042 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.888411377 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.904266767 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.357410628 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.479109661 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.892362262 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.886660923 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.884768157 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.885407909 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.885898753 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.095477046 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.889665823 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.919801042 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.806970362 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.890459625 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.886344511 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.888856366 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.886051401 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.885815644 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.892447956 seconds)
    (63/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.968437647 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.449709749 seconds)
    (65/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.656534181 seconds)
    (66/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.889916688 seconds)
    (67/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.885757883 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.237798519 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.47561328 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.890934041 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.039993403 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.992466333 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.891679978 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.049332122 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.890607405 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.8872586 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.886721541 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.886766734 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.817440521 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.838493969 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.891877058 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.995678546 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.891497704 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.88727469 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.233675748 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.181241457 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.896228483 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.909024187 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.990483885 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.889100018 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.887658645 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.89427821 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.761016486 seconds)
    (94/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.891986962 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.888093407 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.887931322 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.887131161 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.066455486 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.892980531 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.226728833 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.253474727 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.979931684 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.287746014 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.680757392 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.917796966 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.888315127 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.906759109 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.889995 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.888241987 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.942945305 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.889249791 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.888436479 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.890899506 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.88932613 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.888218022 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.914301384 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.907431952 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.889805688 seconds)
  done (took 418.126098371 seconds)
done (took 810.453549202 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.529201992 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.604301258 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.454747525 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.513520115 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.460505392 seconds)
  done (took 14.388079404 seconds)
done (took 16.208056533 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.918241237 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.913031848 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.901735897 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.915515834 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.911777523 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.90986321 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.91856548 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.929089231 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.921544431 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.908020181 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.917076587 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.911030692 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.921527391 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.923475606 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.923850676 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.923434003 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.914583741 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.903868583 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.920285253 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.912132768 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.912338345 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.912693125 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.91192711 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.920448426 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.924216094 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.914158478 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.90913431 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.917331001 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.915837135 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.919435767 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.931006234 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.924806204 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.922617848 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.922534056 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.921705148 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.924866878 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.915430504 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.927811989 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.914078862 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.927363753 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.921255315 seconds)
  done (took 80.456632743 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.902806528 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.087083706 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.20782454 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.941343984 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.904125628 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.178390356 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.968105615 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.054009105 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.069377772 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.194151717 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.19132448 seconds)
  done (took 24.530772096 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.900176369 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.070808163 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.183624029 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.944639383 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.905216356 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.179879073 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.97463539 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.064520593 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.067495329 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.183450435 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.204975108 seconds)
  done (took 24.527772624 seconds)
done (took 131.339106676 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.439746634 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.953320643 seconds)
  done (took 6.222607735 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.896875238 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.913505828 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.072750808 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.920585371 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.897553846 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.897049015 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.896708688 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.897453433 seconds)
  done (took 17.221581805 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.895483949 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.895403368 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.895374972 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.895725695 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.896141858 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.896525025 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.896944715 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.896173186 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.896551856 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.896087103 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.896362081 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.896330615 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.896003928 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.896132785 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.896847368 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.896683086 seconds)
  done (took 32.169447584 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.896347866 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.896449406 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.896193496 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.896066181 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.896205861 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.896415127 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.899480455 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.897497164 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.896724003 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.896927089 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.897845797 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.896607339 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.897122731 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.897237585 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.897941963 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.897516257 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.897963943 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.897752584 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.899605705 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.897125436 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.897456858 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.897084548 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.905716971 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.897189827 seconds)
  done (took 47.373976178 seconds)
done (took 104.830992704 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.49909602 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.905320518 seconds)
  done (took 9.236180668 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.901658382 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.897094964 seconds)
  done (took 5.726563216 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.897425166 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.897121318 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.897474632 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.898109937 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.897254605 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.89738496 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.897646938 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.897734209 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.897360156 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.897153645 seconds)
  done (took 20.806322662 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.897850303 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.898018676 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.898087623 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.897565045 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.897738586 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.89802967 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.89776353 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.89857659 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.898514073 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.898007623 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.898166121 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.898610976 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.898612111 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.897853044 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.897999761 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.89901648 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.898837631 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.898079962 seconds)
  done (took 35.999790558 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.899179966 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.899066817 seconds)
  done (took 5.631999478 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.899092821 seconds)
    (2/7) benchmarking "second"...
    done (took 1.899002102 seconds)
    (3/7) benchmarking "month"...
    done (took 1.899168587 seconds)
    (4/7) benchmarking "year"...
    done (took 1.899150183 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.899717868 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.899385668 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.900301637 seconds)
  done (took 15.129855916 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.900306727 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.045225889 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.089445423 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.369650919 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.901417228 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.902776682 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.523268737 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.902715553 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.904279137 seconds)
  done (took 20.373006689 seconds)
done (took 114.730279845 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.676941093 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.907676637 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.559650337 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.072067002 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.912152504 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.257173833 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.911068497 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.411943653 seconds)
done (took 44.53713899 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.945626094 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.898352928 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.938567583 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.93905118 seconds)
  done (took 22.611317155 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.908313546 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.533125248 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.933328285 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.96616566 seconds)
  done (took 23.264683561 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.39998373 seconds)
    (2/2) benchmarking "read"...
    done (took 2.311306454 seconds)
  done (took 6.56068033 seconds)
done (took 61.213162447 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.900884706 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.900408205 seconds)
    (3/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.900672498 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 1.90315916 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.901497627 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 1.9018874 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.901369141 seconds)
    (8/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.901983847 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.902214893 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.901744222 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 1.901234768 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 1.901349959 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.902680239 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.902191975 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.901622208 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.901777574 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.901937269 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.902090916 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.902176227 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.902113022 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.9019522 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.901866239 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.901756372 seconds)
    (24/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.902312949 seconds)
  done (took 47.478614775 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.902902577 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.903466089 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.902973502 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.903021964 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.902765306 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.903345667 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.90343736 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.902618133 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.902940674 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.902483669 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.902859647 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.903640776 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.903246741 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.903266889 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.903026686 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.904007672 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.903604993 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.903861338 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.903645381 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.902462735 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.903218883 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.902808491 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.903268117 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.903059076 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.903404779 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.903544819 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.903740789 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.903325807 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.903452197 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.903738018 seconds)
  done (took 58.935640448 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.904135107 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.9040409 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.904208337 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.903676588 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.90424984 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.90422623 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.904667809 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.904793991 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.903865562 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.904867007 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.904746705 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.907766417 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.904819462 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.90481569 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.905078361 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.905104667 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.905452355 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.905525344 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.905405065 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.905210049 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.905362318 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.904983019 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.905370196 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.905379818 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.905690081 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.905592607 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.905345796 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.905269997 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.905761839 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.905050177 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.90565538 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.905311549 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.906051117 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.905854461 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.906204331 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.906593084 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.905660906 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.911243031 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.91680241 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.905489446 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.90640341 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.906750262 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.905911166 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.906560271 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.906794767 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.907071529 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.906501318 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.906699063 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.906742935 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.906211827 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.906638737 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.906838699 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.907006151 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.906256446 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.906691803 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.906855099 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.906723336 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.906616839 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.907197609 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.906919373 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.906628415 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.907211128 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.907489871 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.907325385 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.908457837 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.907647608 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.907174645 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.906946822 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.907275563 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.90817403 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.907605998 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.907308905 seconds)
  done (took 139.088946348 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.906719573 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.906551928 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.907135666 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.907295961 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.907034418 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.907845074 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.90738935 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.907233959 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.90808656 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.907466776 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.90760829 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.907411337 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.908107444 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.907216507 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.907363021 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.907883931 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.90769947 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.90708965 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.907912412 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.908372402 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.907900886 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.90844235 seconds)
  done (took 43.808015487 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.908638942 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.908276126 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.908193097 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.908905285 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.908863367 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.908562725 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.908642589 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.908526548 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.908911524 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.908815521 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.908738552 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.909159339 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.908956156 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.90878038 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.909111533 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.909649831 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.909908096 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.909187831 seconds)
  done (took 36.202899771 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.910213024 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.909719383 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.90965554 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.909259883 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.90934442 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.910543819 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.909242935 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.909744133 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.909428087 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.910244631 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.909631984 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.909753543 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.910518851 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.909586159 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.91001659 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.910783337 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.910827032 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.910058278 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.910697933 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.910232775 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.911175305 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.911055339 seconds)
  done (took 43.865944945 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.910211283 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.909929194 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.910237668 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.910377688 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.910287377 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.911387915 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.912093312 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.911117823 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.910620398 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.910388268 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.910793547 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.910650046 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.911003433 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.910846505 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.911155215 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.910921904 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.911137976 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.91112332 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.911533351 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.910758694 seconds)
  done (took 40.061296095 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.912717916 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.913341889 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.91338255 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.913056873 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.913799281 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.913470158 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.913249127 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.913424763 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.913419093 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.914369989 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.913901901 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.913512858 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.913593758 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.91348311 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.913938461 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.913558158 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.914056954 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.914676403 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.914258974 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.913980642 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.914854868 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.91427829 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.914003995 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.913602005 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.914451154 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.914429491 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.914139381 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.91445887 seconds)
  done (took 55.433037399 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.912230251 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.911939653 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.912405464 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.912718209 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.912803435 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.912729607 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.913760625 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.913453129 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.912888524 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.913118869 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.913041044 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.913145272 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.913148138 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.912699047 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.91373495 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.912816889 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.91252484 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.913589303 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.913282559 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.913388625 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.914099008 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.913185707 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.913527871 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.913415878 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.91328047 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.913090082 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.914143053 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.913950571 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.914071503 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.913875636 seconds)
  done (took 59.242817472 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.934566191 seconds)
    (2/2) benchmarking "in"...
    done (took 1.937093398 seconds)
  done (took 5.718679451 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.913014571 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.91415232 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.913046951 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.914176161 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.914373471 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.914451358 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.914398621 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.914111456 seconds)
  done (took 17.160331494 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.913839908 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.920050333 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.91463631 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.914500151 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.916122782 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.924082771 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.916368666 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.91803636 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.919110529 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.917300198 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.921402641 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.921712457 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.927424739 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.921960428 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.915156079 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.917188593 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.919005233 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.919958961 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.918829476 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.914906854 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.920769087 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.917853286 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.915397828 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.917237737 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.915148508 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.920661601 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.929343242 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.919387639 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.919830114 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.915248376 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.925868163 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.915581946 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.918093532 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.919613023 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.917759988 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.915976151 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.925451481 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.91815425 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.918459367 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.91606549 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.92099599 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.921113152 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.922345735 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.926990188 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.918241434 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.91595176 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.916183336 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.918922877 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.917551729 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.923297211 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.926445953 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.919409962 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.916214162 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.91672048 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.921884575 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.919457332 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.919116502 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.921900613 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.926701332 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.92670602 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.923778923 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.943226866 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.930641813 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.919323361 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.919206883 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.932167298 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.950501063 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.921622684 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.921858636 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.917594588 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.927587778 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.917017632 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.918454755 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.917384675 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.935410656 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.92999167 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.920208698 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.918418118 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.918409649 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.920027316 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.922051561 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.92059018 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.921618119 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.920317401 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.932433721 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 1.952989744 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.920195459 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.920481765 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.923111667 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.921028973 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.925889254 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.924202446 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.91902769 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.918569588 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.922200244 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.922296929 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.921322567 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.921629843 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.919550994 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.930718917 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.919171816 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.918802818 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.925989891 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.931984884 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.919748095 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.921571856 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.923330889 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.921947733 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.930718394 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.921947911 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.921970714 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.919716363 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.922132249 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.926977171 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.919709068 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.926906418 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.931955811 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.930866002 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.922350691 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.927173642 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.927043922 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.925555659 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.935035667 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 1.953954963 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.919628549 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.927448703 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.928716771 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.937325987 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.927422578 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.92101059 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.925920472 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.920046972 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.92048723 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.925341143 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.920549693 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.923281522 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.921254982 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.922938465 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.92096561 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.92330816 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.924534629 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.925484099 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.925801348 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.923370266 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.928269807 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.923723611 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.927639985 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.931682318 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.92254288 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.923893839 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.922371026 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.927325122 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.924217217 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.92554352 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.921468459 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.922059785 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.923920873 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.924015249 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.92965803 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.924354048 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.921807801 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.924475122 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.927172052 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.924504938 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.924401462 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.923720994 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.924715341 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.926074891 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.926495443 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.925733991 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.927812744 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.924497679 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.929885111 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.923133669 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.922449628 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.924432694 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.922410942 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.923285279 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.930113467 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.939152094 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.930262555 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.937554751 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.92360099 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.933352859 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.923380424 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.927395267 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.926367667 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.925830679 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.925256211 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.923690719 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.923969471 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.930651862 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.950767435 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.939037452 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.929328525 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.926356037 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.931803091 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.928242853 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.93248302 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.924628652 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.927659619 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.929254008 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.926838172 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.926787799 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.924565737 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.93082616 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.925703862 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.924146957 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.930977119 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.926694841 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.924184591 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.928351829 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.925210193 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.929576485 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.924962922 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.925500306 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.926695479 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.926070274 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.93657677 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.930147816 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.925485458 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.927740274 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.930450947 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.92759904 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.92587021 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.929804941 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.932166956 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.925459599 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.928827911 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.935747008 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.927630016 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.927608429 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.926576059 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.926200155 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.930549783 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.925695294 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.933008477 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.936266634 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.931225931 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.926152972 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.934325353 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.925968745 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.931760742 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.929114143 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.92999606 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.928733484 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.930944636 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.928530147 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.926351889 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.936366894 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.926891314 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.930256171 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.926343832 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.930525886 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.928326179 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.932576989 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.928957878 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.93420672 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.939819411 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.934992794 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.928727148 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.930869797 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.932212455 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.929470485 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.932280184 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.930892179 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.945171066 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.942282847 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.927583532 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.927792248 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.930603901 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.933237031 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.927860122 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.929709644 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.937701877 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.930176316 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.930186189 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.932771405 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.9299205 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.929914108 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.937285986 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.931775027 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.934068808 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.932263232 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.931356209 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.931385262 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.928286056 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.933383297 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.930534724 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.933623333 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.933475105 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.928305216 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.931987803 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.928975752 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.940110838 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.928325167 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.932721671 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.938768232 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.932870476 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.929451431 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.93297247 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.929535527 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.932380966 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.932899057 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.929823581 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.931913482 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.93131313 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.936140702 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.944959373 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.936173938 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.941940582 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.934708963 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.943871922 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.932143031 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.930151004 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.931958141 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.936918217 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.94201068 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.929756133 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.929824426 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.94036971 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.932188639 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.93195027 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.937385493 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.930094683 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.933322667 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.932884618 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.933027101 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.939086047 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.935405976 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.930273822 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.932628301 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.930242778 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.930861756 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.936457205 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.93537684 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.934001828 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.932846345 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.930967316 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.933396652 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.933259784 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.93293897 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.933716038 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.930584475 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.931318605 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.941163037 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.933331997 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.933515186 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.938979174 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.931363263 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.942919913 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.933641334 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.933767284 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.933215205 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.932778375 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.935506302 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.932532359 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.934863968 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.932669083 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.932198771 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.934458714 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 1.947515186 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.942971122 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.937601914 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.937209159 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.935581992 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.935911346 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.946526824 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 1.964502694 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.934467908 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.937899131 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.937669489 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.942378401 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.937596569 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.942089599 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.940137024 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.945188487 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.937272085 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.933460714 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.940082275 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.951385071 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.934901156 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.933197648 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.933672059 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.94155909 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.936115192 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.93361045 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.9358544 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.940400204 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.936122768 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 1.949109976 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.933875251 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.93565908 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.935876641 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.934523684 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.936839563 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.934620638 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.938547363 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.938878925 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.936737694 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.936745649 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.939581034 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.942153612 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.934749704 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.941321251 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 1.948328677 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.93653188 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.937106692 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.936837557 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.937071396 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.939386482 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.937120846 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.934773253 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.937885836 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.934919418 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.936860449 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.94174636 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 1.948781837 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.939527007 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.935091674 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.935594026 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.941812713 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.93552996 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.937658557 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.93937693 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 1.947399752 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.942402549 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 1.952686872 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 1.94997204 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.93804007 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.938079898 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.947504513 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 1.94781237 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.937597155 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.935975863 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.938131736 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.941532959 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.94110589 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.939353261 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.938431991 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.938270833 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 1.944867955 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.935836438 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.937550123 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.938766622 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.936678445 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.941715793 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.942343042 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 1.945188795 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.937062863 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.936585832 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.93749359 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.940342799 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.939979961 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.942535962 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.939329333 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.937344499 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.942062135 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.942110205 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.94222226 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.937178309 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.937630414 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.941767656 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.937797314 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.937878469 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.938972078 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.938647713 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.937540965 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 1.944720617 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 1.948971108 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.937529759 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.941418694 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.939842775 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 1.945022537 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.940252741 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.940599588 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.939831424 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.938299546 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.949401644 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.938317941 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.94053239 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.93991031 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.938501246 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 1.947537887 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.942380399 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.946225328 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.940432466 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.940022971 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.938564014 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.94534901 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 1.951290611 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 1.945809536 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 1.945310011 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 1.948671832 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.946330378 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 1.943825545 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.939232607 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.939315497 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.94009297 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.941218778 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 1.945841662 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.94352571 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 1.944522288 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.941637159 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.944335843 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.941807972 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 1.943971794 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.939589845 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.939490622 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 1.947001622 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.953872641 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 1.951092512 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.940140425 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 1.943613523 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.943025221 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 1.947274931 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 1.955236329 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.94169247 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.942743635 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.942395752 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.94477913 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 1.943431009 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 1.952934523 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 1.952511555 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 1.947084749 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.942893659 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 1.949810331 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 1.967375569 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 1.945654761 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.954655578 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.982165563 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 1.94308794 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.943253812 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.944110567 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 1.942411957 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.945811577 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 1.948594452 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.976775589 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 1.974164709 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.997197823 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.952482721 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.008736231 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.945839703 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.943283171 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.96140585 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.977082309 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 1.99753049 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.98705897 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 1.976680686 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.975764642 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.961410235 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 1.960601207 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 1.992891849 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.001541304 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.962927926 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.942619102 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.948459636 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.942273273 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.944255721 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 1.9549016 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.007144925 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 1.964761326 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.959303648 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 1.956773713 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.943340122 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.941916707 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.94455632 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 1.950885335 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 1.948662862 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.972681471 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.072970676 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.048486007 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.017432238 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.020037448 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.013548308 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 1.95280358 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.950359355 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.94656022 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.949789638 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.028065437 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 1.990714402 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 1.945612844 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.945095085 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.082379674 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.315582437 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.328717166 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.33221924 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.322845735 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.326921198 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.322820257 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.317614759 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.322899359 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.330493177 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.325309103 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.32779074 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.330656583 seconds)
  done (took 1160.14991769 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.324541924 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.319596091 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.323701292 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.316505473 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.329468576 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.316756988 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.322885837 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.325830585 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.319495049 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.326897998 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.325692945 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.325537106 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.326952552 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.330653161 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.325360065 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.323736258 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.317759478 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.324790954 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.3311242 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.321089243 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.323964148 seconds)
  done (took 51.06107872 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.32669234 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.329626145 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.319843931 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.329027494 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.322102572 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.324897888 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.321515209 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.329732713 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.328301138 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.325008802 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.316976478 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.327439746 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.317639077 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.32002018 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.326167815 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.321854797 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.318981839 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.326383013 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.323064664 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.319874192 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.317111487 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.318809978 seconds)
  done (took 53.363767026 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.322469801 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.330628471 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.331479408 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.320968945 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.325002955 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.323882425 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.323528637 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.32247694 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.316307374 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.329740781 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.332964398 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.338695553 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.320724145 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.327299345 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.332443 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.325585352 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.445578504 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.330113921 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.328337214 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.315909267 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.330193429 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.338476487 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.330900214 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.325694859 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.329639185 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.327538137 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.275831268 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.131645912 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.170096405 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.203756398 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.221378569 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.219395485 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.253464668 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.332096231 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.172768108 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.216036012 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.297032983 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.250177368 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.253498134 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.240089947 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.241569893 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.308711865 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.255627322 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.221358232 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.269960558 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.261100698 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.246085226 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.265006781 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.251656136 seconds)
  done (took 114.438810852 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.269045874 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.231176021 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.268183506 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.241573921 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.240768453 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.250064848 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.255965924 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.269746943 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.251179636 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.224082132 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.267466616 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.255544145 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.227400903 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.267338753 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.253534537 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.204598703 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.280764845 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.269186859 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.245500559 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.260834533 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.222779888 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.249917658 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.256178688 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.255966251 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.259238121 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.246388838 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.240634494 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.243150311 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.258665345 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.26907958 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.235374191 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.276304822 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.250802339 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.242241655 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.253763936 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.244811653 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.246626085 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.235444696 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.26477191 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.255636323 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.253252912 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.250855906 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.244667448 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.240304192 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.272602189 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.253940519 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.257143309 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.263690352 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.220018674 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.245470681 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.251050684 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.26801099 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.269647945 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.25702981 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.252511869 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.232209961 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.242549037 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.270677078 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.256906655 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.236625299 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.24053886 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.2787793 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.277623603 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.226705899 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.245034444 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.252451297 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.255213629 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.274192728 seconds)
  done (took 155.316961968 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.261546726 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.28050661 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.255151985 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.256031606 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.256177077 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.242507812 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.253037554 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.254018704 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.265762458 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.261742801 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.271016516 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.248069645 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.223148584 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.266916227 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.26594256 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.255124123 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.259273206 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.25104621 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.250848199 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.273034151 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.269807395 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.24064924 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.23363919 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.268460396 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.265869759 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.261356761 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.248206203 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.258262854 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.26787942 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.270611755 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.222292258 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.243185821 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.266353216 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.267405979 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.25655343 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.256544182 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.22954425 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.248428136 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.264584842 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.267424287 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.28349068 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.258617567 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.244849507 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.235276884 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.242877311 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.266176907 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.255000013 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.254975087 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.251680719 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.255086636 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.249457864 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.242782475 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.269742704 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.26479223 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.261392762 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.25624344 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.260053361 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.247566562 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.251580327 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.268767626 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.244378191 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.254989912 seconds)
  done (took 142.041712491 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.240515949 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.275309294 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.24338355 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.25310732 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.276163946 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.249307543 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.256487441 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.238525789 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.235739237 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.268531109 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.242534266 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.254903272 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.279678469 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.240843003 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.261478618 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.260205139 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.250710336 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.248399256 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.239352679 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.259105758 seconds)
  done (took 47.25845475 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.249779131 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.235003821 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.255238202 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.264478979 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.271459648 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.273505571 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.240865661 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.234025343 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.244677814 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.277196405 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.25366229 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.25179612 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.225567903 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.244539483 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.284459096 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.292687552 seconds)
  done (took 38.315969208 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.224881525 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.241760635 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.270465957 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.291495959 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.228294065 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.233489401 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.271094146 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.284016512 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.266911287 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.230917151 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.213750192 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.247982092 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.294252372 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.28033942 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.239574216 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.243280072 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.259060132 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.258598336 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.27993706 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.257571683 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.254570115 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.252284805 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.270272057 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.254521723 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.239196179 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.271578528 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.267176623 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.274396704 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.251974024 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.244692982 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.26877607 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.260386972 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.26970657 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.264347062 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.258197538 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.243569059 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.263549416 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.268177338 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.271724487 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.252631172 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.252577837 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.241977936 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.256000146 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.270832531 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.265851996 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.26884166 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.267229718 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.262148111 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.251554424 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.247657887 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.263042875 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.285459353 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.26593872 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.262764027 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.245562877 seconds)
  done (took 126.4005563 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.290184762 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.284368692 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.24980767 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.236096477 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.250864965 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.263896516 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.291915725 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.266131652 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.234953899 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.278393533 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.265887265 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.259329882 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.2660463 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.251439902 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.255784606 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.268195544 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.252816923 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.279298296 seconds)
  done (took 42.92281755 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.238893727 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.268642906 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.232924953 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.263333789 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.294045947 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.252218437 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.243457236 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.240491108 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.263817663 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.2500504 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.213243087 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.13808671 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.110044836 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.048820233 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.026156997 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.029073926 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.14506256 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.384590749 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.375613604 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.356827702 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.313548752 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.245091709 seconds)
  done (took 51.159115617 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.247119975 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.215339541 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.245472187 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.258792591 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.284169737 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.272371412 seconds)
  done (took 15.69617487 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.220225236 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.201626522 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.225489383 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.231407898 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.241503843 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.242700185 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.215402695 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.205642174 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.206798332 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.269310814 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.237997324 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.217998115 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.219460276 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.200531123 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.129150551 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.11068685 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.118673307 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.129300943 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.112481497 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.123764155 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.118643906 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.13208873 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.127199743 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.111053881 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.115742055 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.129713965 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.125256031 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.116142651 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.116276654 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.030773213 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.025735762 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.028231168 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.008578978 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.963345293 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.011927526 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.027678881 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.990370108 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.006229078 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.014277167 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.964165702 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.963855017 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.962819419 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.963557707 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.965562177 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.965061683 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.964273427 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.963909105 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.963736186 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.96405228 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.964382408 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.963808797 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.964434172 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.963577115 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.964252514 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.963219455 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.964390886 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.964967044 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.964627366 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.964270394 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.964631333 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.964744808 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.964774097 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.964529886 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.964739773 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.964731069 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.965055138 seconds)
  done (took 138.250214315 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.964891489 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.964571527 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.965479449 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.965915925 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.965199374 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.964617045 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.965021308 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.966024633 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.965576666 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.96505361 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.965035067 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.964837423 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.965385112 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.965066251 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.96525207 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.965506152 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.965031884 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.96539848 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.965643745 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.966272234 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.965699439 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.965307738 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.9662515 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.966140072 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.966050574 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.966402991 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.965858496 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.965998396 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.9660502 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.966253059 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.966796332 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.966087976 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.966964255 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.967189338 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.966665895 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.966285204 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.966280021 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.967080151 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.966699925 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.966858479 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.966911242 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.96621708 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.966307199 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.96660439 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.967076227 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.967342723 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.967060251 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.96741778 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.967298102 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.967223532 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.967632529 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.967178268 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.967108222 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.967432687 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.967127701 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.966934547 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.966970113 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.967057597 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.967529985 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.967413646 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.967650881 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.967652915 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.967730133 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.991745782 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.026076712 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.978016743 seconds)
  done (took 131.771916246 seconds)
done (took 2816.976118944 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.502356722 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.501248337 seconds)
  done (took 17.017394745 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.537587447 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.463067657 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.560100824 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.501453477 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.414285974 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.415869758 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.412028792 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.417000536 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.502554555 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.426195576 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.458004936 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.413677833 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.419730307 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.422492209 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.42947996 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.419598852 seconds)
  done (took 61.526725873 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.421698992 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.399347457 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.425986737 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.392694692 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.438104339 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.524266081 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.449769462 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.430190351 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.44894739 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.454332694 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.451101926 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.435780347 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.432266177 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.429184487 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.52587025 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.47747574 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.496490535 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.517996658 seconds)
  done (took 46.448937468 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.524792819 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.428740462 seconds)
  done (took 12.246398875 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.388648988 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.388864827 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.358244134 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.386331056 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.370433809 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.358004994 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.374395083 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.373012203 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.359597125 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.367420409 seconds)
  done (took 76.042141333 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.351038151 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.213721517 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.455759744 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.27887088 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.283034785 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.32232718 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.237679877 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.464156372 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.263918216 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.253253728 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.356825781 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.666965751 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.331568733 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.323353819 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.74097107 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.337679898 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.32064281 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.360816063 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.397210587 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.336625094 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.33012472 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.329440045 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.542318736 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 3.082552862 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.350251717 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.316122106 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.326708826 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.279778052 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.275205898 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.319269009 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.326495667 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.309139028 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.353028202 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.290848849 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.355181799 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.333902964 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.957559965 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.373708 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.318756201 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.42802992 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.403844472 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.289713926 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.292971437 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.351885622 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.274989458 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.295941831 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 3.09182961 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.370681314 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.296095322 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.458140688 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.835776007 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.33929863 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.45767955 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.435614189 seconds)
  done (took 157.974184501 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.292978079 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.706816335 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.466197124 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.274254518 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.654682198 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.502042953 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.056156332 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.322327087 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.285590364 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.484510918 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.451783761 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.403698364 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.294834108 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.28441964 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.265570257 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.254553333 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.443055122 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.35829819 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.275935717 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.262230944 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.306198473 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.543165917 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.399731249 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.264788175 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.335906387 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.470969889 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.306020659 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.402101112 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.702015298 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.298419802 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.336645497 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.279209115 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.278023168 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.272345766 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.341419312 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.402133915 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.34839196 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.266039075 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.958123508 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.277426176 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.88265065 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.457575077 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.402937626 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.408559162 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.529539442 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.485273458 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.963462817 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.252976342 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.99639839 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.449135528 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.498362217 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.499940462 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.375942621 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.275675137 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.729800825 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.271738888 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.286856597 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.521095985 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.431401418 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.397302825 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.267248693 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.279209966 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.284750643 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.512642072 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.295601999 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.401716832 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.288529134 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.285045313 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.383609653 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.386916416 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.469448051 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.504683438 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.308358578 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.562686544 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 5.28155192 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.480015541 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.314616749 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.512464923 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.308421101 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.253861627 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.399865238 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.744681711 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.406562252 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.502205743 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.597899246 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.324580872 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.80781838 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.263702729 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.510244018 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.443011325 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.497395886 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.519949763 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.344837519 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 3.149106737 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.268575445 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.274251164 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.489188419 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.404632127 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.267532906 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.843962974 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.512988644 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.868206572 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.313759284 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.710017631 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.387491162 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.295075343 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.894498696 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.27478294 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.489320936 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.360222609 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.258104564 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.286621008 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.410913214 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.028081182 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.272551616 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.371665179 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.310228395 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.300061282 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.445664208 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.267097296 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.542259985 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.033126243 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.521643111 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.296494194 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.315591848 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.441695902 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.476166786 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.205490131 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.438201998 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.323583232 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.420930548 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.583260102 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.919692016 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.240886365 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.530344045 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.222439449 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.249839024 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.389389666 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.240948749 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.393981453 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.276571543 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.472396427 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.279799706 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.286013579 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.221572463 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.384668831 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.184685174 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.176836682 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.138273774 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.267159947 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.134585192 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.172753404 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.290070437 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.149606799 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.04138941 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.905105989 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.984185216 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.136793994 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.213163608 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.99599566 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.05032837 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.371377707 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.979472471 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.078338518 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.005786714 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.399862171 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.482190309 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.140920164 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.643346715 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.2487576 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.97959652 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.21377675 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.156285 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.982038662 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.982045895 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.753421193 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 5.41520024 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.979957982 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.13956072 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.710925254 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.346131878 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.192836569 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.984866328 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.032956281 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.986988405 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.220116885 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.513775109 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.201498303 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.982865144 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.983101169 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.981660943 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.996526264 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.179916516 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.014950449 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.612006776 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.122541928 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.245593691 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.205634819 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.289415101 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.042420517 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.984501762 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.293632055 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.98480999 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.044349585 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.984790277 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.991956958 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.220172611 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.986442029 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.187668042 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.325812392 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.053713744 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.027643405 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.985742508 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.982531654 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.962467765 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.169913729 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.111439559 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.986513021 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.172096461 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.025543622 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.142284725 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.2202991 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.072606612 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.950526025 seconds)
  done (took 956.206367519 seconds)
done (took 1329.356130627 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.982332228 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.985791575 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.985816155 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 6.984060741 seconds)
  done (took 29.853168201 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.984458723 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.985001566 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.002327658 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.028227555 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 1.985498576 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.986925793 seconds)
  done (took 13.894625216 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.982110903 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.98638315 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.98537971 seconds)
  done (took 22.869756944 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.447650599 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.302777191 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.120444172 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.196601878 seconds)
  done (took 10.986049929 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.032869421 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.987293301 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.988025212 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.004245329 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.003281066 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.9881563 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.030994398 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.00335794 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.029289556 seconds)
  done (took 19.993285603 seconds)
  (6/6) benchmarking "26942"...
  done (took 6.443243685 seconds)
done (took 105.949850575 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.595070069 seconds)
    (2/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.622638124 seconds)
    (3/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.953467991 seconds)
    (4/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.156011554 seconds)
    (5/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.500025563 seconds)
    (6/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.40529115 seconds)
    (7/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.280882027 seconds)
    (8/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.176408625 seconds)
    (9/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.00305323 seconds)
    (10/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.305713627 seconds)
    (11/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.36842197 seconds)
    (12/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.135345661 seconds)
    (13/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.046520673 seconds)
    (14/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.002048939 seconds)
    (15/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 1.999036916 seconds)
    (16/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 6.986006272 seconds)
    (17/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.010523517 seconds)
    (18/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.198519187 seconds)
    (19/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.002965261 seconds)
    (20/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.41299296 seconds)
    (21/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.116066875 seconds)
    (22/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.511164755 seconds)
    (23/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.229985131 seconds)
    (24/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 6.995974201 seconds)
    (25/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 4.771409771 seconds)
    (26/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.035492468 seconds)
    (27/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.135339023 seconds)
    (28/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 1.995634896 seconds)
    (29/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.069748703 seconds)
    (30/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.141031955 seconds)
    (31/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.51729276 seconds)
    (32/341) benchmarking ("map", abs, BigInt, true)...
    done (took 6.991065664 seconds)
    (33/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 3.989892561 seconds)
    (34/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.155341411 seconds)
    (35/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.126794516 seconds)
    (36/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.390870955 seconds)
    (37/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.048068295 seconds)
    (38/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.700616046 seconds)
    (39/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.350390614 seconds)
    (40/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.063337276 seconds)
    (41/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.036148798 seconds)
    (42/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.308323828 seconds)
    (43/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.120921405 seconds)
    (44/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.114352423 seconds)
    (45/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.475698093 seconds)
    (46/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.095659372 seconds)
    (47/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 1.997331722 seconds)
    (48/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.550628984 seconds)
    (49/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.52931943 seconds)
    (50/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.49845415 seconds)
    (51/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.969914636 seconds)
    (52/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 7.957606446 seconds)
    (53/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.405975433 seconds)
    (54/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.883668259 seconds)
    (55/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.30769606 seconds)
    (56/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.277505315 seconds)
    (57/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.125130831 seconds)
    (58/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.111425314 seconds)
    (59/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.008153153 seconds)
    (60/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.135692198 seconds)
    (61/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 3.020334354 seconds)
    (62/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.53969313 seconds)
    (63/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.79139387 seconds)
    (64/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.947784244 seconds)
    (65/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.14112268 seconds)
    (66/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.061565991 seconds)
    (67/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.005363203 seconds)
    (68/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.967013421 seconds)
    (69/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.293680114 seconds)
    (70/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.264247562 seconds)
    (71/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.012599699 seconds)
    (72/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.470918734 seconds)
    (73/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.003878018 seconds)
    (74/341) benchmarking ("sort", Float32, false)...
    done (took 6.988566588 seconds)
    (75/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.913961841 seconds)
    (76/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.082074697 seconds)
    (77/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.329932346 seconds)
    (78/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.331475556 seconds)
    (79/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.049832906 seconds)
    (80/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.033223541 seconds)
    (81/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.650325269 seconds)
    (82/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.444555604 seconds)
    (83/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.381485678 seconds)
    (84/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.194772304 seconds)
    (85/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 6.998588377 seconds)
    (86/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.463555948 seconds)
    (87/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.005447803 seconds)
    (88/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.370541045 seconds)
    (89/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.01029423 seconds)
    (90/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 3.01133752 seconds)
    (91/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.733831275 seconds)
    (92/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.240516447 seconds)
    (93/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.339906104 seconds)
    (94/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.637638367 seconds)
    (95/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.083851292 seconds)
    (96/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 6.992605923 seconds)
    (97/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.176620548 seconds)
    (98/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.000305828 seconds)
    (99/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 6.990009197 seconds)
    (100/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.340383337 seconds)
    (101/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.009514172 seconds)
    (102/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.000391793 seconds)
    (103/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.118542613 seconds)
    (104/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.209613296 seconds)
    (105/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.134937434 seconds)
    (106/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.429488279 seconds)
    (107/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.143258358 seconds)
    (108/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.834834674 seconds)
    (109/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.001704931 seconds)
    (110/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.307504362 seconds)
    (111/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.018144088 seconds)
    (112/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.411227043 seconds)
    (113/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.300564161 seconds)
    (114/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.335285737 seconds)
    (115/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.232376052 seconds)
    (116/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.003226994 seconds)
    (117/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.08532501 seconds)
    (118/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.021713511 seconds)
    (119/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.113747591 seconds)
    (120/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 6.99125002 seconds)
    (121/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.941189027 seconds)
    (122/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.183489778 seconds)
    (123/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.944452425 seconds)
    (124/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.145657272 seconds)
    (125/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.926852277 seconds)
    (126/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.442096647 seconds)
    (127/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.472221792 seconds)
    (128/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.12582642 seconds)
    (129/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.087203411 seconds)
    (130/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.905769449 seconds)
    (131/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.326808377 seconds)
    (132/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.000355866 seconds)
    (133/341) benchmarking ("perf_countequals", "Int64")...
    done (took 4.927030581 seconds)
    (134/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.169245404 seconds)
    (135/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.18806235 seconds)
    (136/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.00311121 seconds)
    (137/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.490434178 seconds)
    (138/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 6.992274735 seconds)
    (139/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 6.997774842 seconds)
    (140/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.148099068 seconds)
    (141/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.303451996 seconds)
    (142/341) benchmarking ("sort", Bool, false)...
    done (took 2.215288524 seconds)
    (143/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.115355822 seconds)
    (144/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.018694148 seconds)
    (145/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.52778779 seconds)
    (146/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.157255448 seconds)
    (147/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.303039694 seconds)
    (148/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.017383881 seconds)
    (149/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.006282649 seconds)
    (150/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.008371558 seconds)
    (151/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.008399608 seconds)
    (152/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.539400019 seconds)
    (153/341) benchmarking ("sort", Int64, false)...
    done (took 6.716899481 seconds)
    (154/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.137606397 seconds)
    (155/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.439323231 seconds)
    (156/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.135346851 seconds)
    (157/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.321975344 seconds)
    (158/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.473254345 seconds)
    (159/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.061498277 seconds)
    (160/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 7.004726269 seconds)
    (161/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 8.841974144 seconds)
    (162/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 8.283320173 seconds)
    (163/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 4.854546967 seconds)
    (164/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.167528832 seconds)
    (165/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.002401616 seconds)
    (166/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.269737304 seconds)
    (167/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.225634058 seconds)
    (168/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.176986932 seconds)
    (169/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.53444367 seconds)
    (170/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.552305363 seconds)
    (171/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.320527517 seconds)
    (172/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.903364778 seconds)
    (173/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.006061408 seconds)
    (174/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.116546006 seconds)
    (175/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 6.993528992 seconds)
    (176/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.000862955 seconds)
    (177/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.160637392 seconds)
    (178/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.143431335 seconds)
    (179/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 6.993298294 seconds)
    (180/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.332207144 seconds)
    (181/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.267620341 seconds)
    (182/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 6.996533141 seconds)
    (183/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 9.135331316 seconds)
    (184/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.407215381 seconds)
    (185/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.174315808 seconds)
    (186/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.006963133 seconds)
    (187/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.004330499 seconds)
    (188/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 4.009567247 seconds)
    (189/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.388165128 seconds)
    (190/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.006707045 seconds)
    (191/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.985723301 seconds)
    (192/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.051619763 seconds)
    (193/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.675679074 seconds)
    (194/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.0005141 seconds)
    (195/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 4.115069083 seconds)
    (196/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 3.036864231 seconds)
    (197/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.549415482 seconds)
    (198/341) benchmarking ("sort", Float64, false)...
    done (took 6.802178129 seconds)
    (199/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.828400692 seconds)
    (200/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.024601746 seconds)
    (201/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.149548879 seconds)
    (202/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.434380838 seconds)
    (203/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.371151911 seconds)
    (204/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.555104369 seconds)
    (205/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.412900219 seconds)
    (206/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.004517358 seconds)
    (207/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.21814043 seconds)
    (208/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.383332364 seconds)
    (209/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.034287593 seconds)
    (210/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.112676289 seconds)
    (211/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.029566846 seconds)
    (212/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.119192743 seconds)
    (213/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.007600433 seconds)
    (214/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 6.998210107 seconds)
    (215/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 3.130508107 seconds)
    (216/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.164463448 seconds)
    (217/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.295092239 seconds)
    (218/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.823626829 seconds)
    (219/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.20427318 seconds)
    (220/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.544693146 seconds)
    (221/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.004323641 seconds)
    (222/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.155355879 seconds)
    (223/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.141036161 seconds)
    (224/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.218738511 seconds)
    (225/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.325209676 seconds)
    (226/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.321971974 seconds)
    (227/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.167245909 seconds)
    (228/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.843672829 seconds)
    (229/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.418757205 seconds)
    (230/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.124207469 seconds)
    (231/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.146683755 seconds)
    (232/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.05824179 seconds)
    (233/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.459880226 seconds)
    (234/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.141580808 seconds)
    (235/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.016471032 seconds)
    (236/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.018821366 seconds)
    (237/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.145312015 seconds)
    (238/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 6.996869212 seconds)
    (239/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 3.081053408 seconds)
    (240/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.040573923 seconds)
    (241/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.687303156 seconds)
    (242/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.048453715 seconds)
    (243/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.039934994 seconds)
    (244/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.172520082 seconds)
    (245/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.439772225 seconds)
    (246/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.454621849 seconds)
    (247/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.349671466 seconds)
    (248/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 7.03750555 seconds)
    (249/341) benchmarking ("map", abs, Int8, false)...
    done (took 4.184806104 seconds)
    (250/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.042567314 seconds)
    (251/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.116113791 seconds)
    (252/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.499380904 seconds)
    (253/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.421415863 seconds)
    (254/341) benchmarking ("sort", Int8, false)...
    done (took 5.60114391 seconds)
    (255/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.201403255 seconds)
    (256/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.47772894 seconds)
    (257/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.003565731 seconds)
    (258/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 3.193539285 seconds)
    (259/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.110970358 seconds)
    (260/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.002273786 seconds)
    (261/341) benchmarking ("map", identity, Float64, false)...
    done (took 4.768894976 seconds)
    (262/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.368983297 seconds)
    (263/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.215466434 seconds)
    (264/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.146925458 seconds)
    (265/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.013023012 seconds)
    (266/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.526353808 seconds)
    (267/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.003081911 seconds)
    (268/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 4.008372514 seconds)
    (269/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.004892755 seconds)
    (270/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.300133018 seconds)
    (271/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.050569411 seconds)
    (272/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.414242881 seconds)
    (273/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.475264876 seconds)
    (274/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.319852109 seconds)
    (275/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.143770065 seconds)
    (276/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.512990913 seconds)
    (277/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.020114661 seconds)
    (278/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.272804605 seconds)
    (279/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.008736496 seconds)
    (280/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.155040673 seconds)
    (281/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.685978841 seconds)
    (282/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.875477565 seconds)
    (283/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.060131678 seconds)
    (284/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.039802641 seconds)
    (285/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.380510881 seconds)
    (286/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.471143264 seconds)
    (287/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.054908084 seconds)
    (288/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.369491755 seconds)
    (289/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.053528205 seconds)
    (290/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.238673841 seconds)
    (291/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.797399354 seconds)
    (292/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.336679569 seconds)
    (293/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.471013977 seconds)
    (294/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.173692641 seconds)
    (295/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.198129771 seconds)
    (296/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.30919532 seconds)
    (297/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.462191545 seconds)
    (298/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.303268537 seconds)
    (299/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.987048538 seconds)
    (300/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.444049184 seconds)
    (301/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.167557271 seconds)
    (302/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.056958864 seconds)
    (303/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.040669553 seconds)
    (304/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.172420913 seconds)
    (305/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.189416543 seconds)
    (306/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.20039623 seconds)
    (307/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.037858256 seconds)
    (308/341) benchmarking ("map", identity, BigInt, false)...
    done (took 4.936922912 seconds)
    (309/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.247855137 seconds)
    (310/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.150354414 seconds)
    (311/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.002796335 seconds)
    (312/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.005278002 seconds)
    (313/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 3.621883628 seconds)
    (314/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.316261859 seconds)
    (315/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.415374492 seconds)
    (316/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.121265077 seconds)
    (317/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.372731024 seconds)
    (318/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.216234956 seconds)
    (319/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.032534193 seconds)
    (320/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.28023725 seconds)
    (321/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.150551874 seconds)
    (322/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.35003933 seconds)
    (323/341) benchmarking ("sort", BigInt, false)...
    done (took 7.011453517 seconds)
    (324/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.912962599 seconds)
    (325/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.171065484 seconds)
    (326/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 3.073774821 seconds)
    (327/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.399516635 seconds)
    (328/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.167526587 seconds)
    (329/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.001793828 seconds)
    (330/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.141701956 seconds)
    (331/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.010586391 seconds)
    (332/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.334966311 seconds)
    (333/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.141279373 seconds)
    (334/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.420680767 seconds)
    (335/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.339995177 seconds)
    (336/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.513762447 seconds)
    (337/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.011019708 seconds)
    (338/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.136154325 seconds)
    (339/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 8.360667023 seconds)
    (340/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.452319823 seconds)
    (341/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.49039213 seconds)
  done (took 1182.275043404 seconds)
done (took 1184.570603546 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.026772851 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.00538078 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.57942552 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.021933676 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.006414295 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.007337073 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.556002493 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.04309504 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.014797927 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.555386016 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.022849321 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.006236068 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.014306138 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.022806733 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.013895357 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.018513151 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.012740823 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.030739753 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.024021274 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.011019238 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.067077091 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.011030592 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.005867221 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.054746438 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.006826789 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.016213119 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.031256537 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.07267138 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.072216674 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.009526751 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.013968661 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.403442962 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.070462136 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.013995665 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.015766499 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.014019363 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.012419257 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.015560065 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.032621983 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.01497707 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.007966032 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.019323257 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.011828866 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.010635592 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.007099307 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.007845116 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.010607215 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.103630583 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.017349889 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.410442048 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.079963057 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.033363729 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.07411505 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.010524039 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.010365357 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.011481484 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.07373995 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.013738929 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.013005419 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.415275971 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.140308824 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.017544102 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.412546903 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.086575944 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.020773124 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.019324847 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.008807543 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.03434171 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.403454807 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.607708839 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.048690088 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.032794277 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.010096526 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.011920036 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.023566064 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.559208377 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.028304605 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.684611061 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.041558424 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.01903745 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.014533022 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.013459028 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.010908164 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.019362699 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.0289876 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.009939863 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.014777221 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.01590707 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.021353884 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.404214341 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.0661694 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.583028249 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.024690777 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.035425227 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.029516296 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.687730081 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.043345347 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.029980345 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.012866141 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.403501755 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.062637861 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.036090293 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.013704808 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.017192024 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.107009236 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.035646223 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.03612855 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.010449076 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.034406056 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.017682974 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.011680043 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.025342808 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.034166815 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.02890379 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.020062078 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.011422655 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.021558398 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.016963933 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.032409256 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.022063132 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.019153093 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.019615546 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.012698064 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.059613885 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.030434595 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.020359428 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.108948822 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.017118794 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.108061056 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.021332855 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.019306342 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.012569784 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.413760863 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.067432522 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.036455966 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.017079641 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.037397205 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.036170793 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.022006497 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.016558856 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.020904649 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.015373001 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.061072002 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.013710808 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.038140384 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.060292229 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.02435776 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.019423129 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.032469919 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.031348082 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.036965385 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.019770244 seconds)
done (took 317.982512931 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.065054939 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 4.343841668 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.080035613 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.012824094 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.085280795 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.072035426 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.01237908 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.012545294 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.012646891 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.448266912 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.012737974 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.014261564 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 4.404797112 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.012390193 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.065461722 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.013078937 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.013127075 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.284253334 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.016077849 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.073391949 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 3.022500066 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.012734245 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.013119589 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.458899331 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.012289747 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 3.017731098 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.074921245 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.014125168 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.289603327 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 3.019826014 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 3.027335871 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.290313494 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.0746762 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.016588642 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.015371948 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.014608923 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.087695034 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.020839234 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.068494488 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.068290564 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.080741698 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.022564632 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 3.022093895 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 3.039666502 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.019419054 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.016801206 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.014331202 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.019828264 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.012729729 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.015870237 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.285361187 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.016112471 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.016105168 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.014942707 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.014686863 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.019535164 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.015260092 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.017671402 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.076098649 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.017864633 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.068552557 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.460009095 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.462647013 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.014700947 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 3.028879075 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.01532569 seconds)
  done (took 160.425467458 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.094391855 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.112936507 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.098036119 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.020940165 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.077422333 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.106352413 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.021436955 seconds)
  done (took 16.475805554 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.023202621 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.01590939 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.041996457 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.047406652 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.017621315 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.181411082 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.030633326 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.016486422 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.045352236 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.018568536 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.37450032 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.047873149 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.016784663 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 3.018351241 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.028905959 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.0475783 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.019601544 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.018982885 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.124031289 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.091135505 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.018280759 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.018011377 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.054206179 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.030105929 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.017299162 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.01971587 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.018969398 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.025004433 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.016521947 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.017262154 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.017451114 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.03220193 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.017137813 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 3.008726386 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.017189724 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.018046112 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.019450096 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.017322799 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.017592485 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 2.403979316 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.017144936 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.017032855 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.017704456 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.017177622 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.017587182 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.04347864 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.01941322 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.017817596 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.01732334 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.018539291 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.055512779 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.017703433 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.018179256 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.018860107 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.054279761 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.019604099 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.020604414 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.018168303 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.019434389 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.018955701 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.018882354 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.093336249 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.050505918 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.018843276 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.050021718 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.061142569 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.019257294 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.018736236 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.018475797 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.046852576 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.018928415 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.047597302 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.019423807 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.109303837 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.019393314 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.196937494 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.045521077 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.023240432 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.023535636 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.977592184 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.027678986 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.019394549 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.021922931 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.027278828 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.020952305 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.019759435 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.019851224 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.022062573 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.02817942 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.019695121 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.070415574 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.019394595 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.021865275 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.114042424 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.021904862 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.127647007 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.049473431 seconds)
  done (took 202.972657973 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.026543925 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.022265879 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.036031623 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.021512348 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.020721215 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.026941242 seconds)
  done (took 14.102935602 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.023558302 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.025783761 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.02029961 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.020181712 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.023014489 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.022694318 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.021960034 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.02366981 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.028379424 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.021115886 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.023584323 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.04790897 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.022925249 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.023661418 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.021430464 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.021441773 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.020734451 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.021515614 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.021317435 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.023308614 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 2.220713639 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.022904435 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.02369052 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.051941287 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.029052379 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.021392851 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.032281582 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.02144377 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.021654207 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.030658114 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.028289094 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.024305494 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.053044294 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.030229544 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.026581187 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.052052915 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.027344998 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.05029762 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.022114366 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.02423355 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.049619501 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.024108192 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.022597032 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.050642809 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.025655159 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.05794206 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.054564116 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.032402102 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.022321456 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.050439817 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.049479407 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.023475769 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.025743217 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.050165762 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.056287419 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.030306777 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.055124363 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.022938286 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.024908031 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.053788408 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.02812909 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.025929239 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.026572029 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.028274111 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.025329707 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.050555591 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.054250815 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.031561896 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.026885453 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.023461064 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.051020794 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.023648745 seconds)
  done (took 148.422172597 seconds)
done (took 544.335312081 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.425810966 seconds)
  done (took 9.378356625 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.13261601 seconds)
  done (took 9.235045964 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 12.340372105 seconds)
  done (took 14.301970824 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.053674295 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.033374998 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.079386576 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.038868448 seconds)
  done (took 30.183669012 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.17715132 seconds)
  done (took 9.133493449 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.042826923 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.026099898 seconds)
  done (took 16.109550894 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.215736478 seconds)
  done (took 9.178812107 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.308322967 seconds)
  done (took 9.273885806 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.02947982 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.02922636 seconds)
  done (took 16.048177976 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.026198974 seconds)
  done (took 8.980682899 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.584145938 seconds)
  done (took 10.617486144 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.041417836 seconds)
  done (took 9.027958395 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.078547617 seconds)
  done (took 9.032942061 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.715478307 seconds)
  done (took 9.668955249 seconds)
done (took 172.11729342 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.038261324 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.02553749 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.026022483 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.024654691 seconds)
  done (took 30.067775817 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.065013157 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.065719345 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.067769569 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.07179657 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.054811198 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.0548401 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.065964001 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.065792635 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.054773418 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.071575277 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.066365074 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.07147172 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.084323614 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.068044776 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.068659341 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.072424196 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.072497043 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.066205472 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.055446178 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.069468715 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.072776498 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.072815513 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.026944643 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.026261616 seconds)
  done (took 51.489018771 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.235476536 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.115437769 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.178995018 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.073521103 seconds)
  done (took 10.557938943 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.025880045 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.100596688 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.086101886 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.08609665 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.086227124 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.193108432 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.085805691 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.233463521 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.174163102 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.16369965 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.031503102 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.043534733 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.045321759 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.072176897 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.193235436 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.027161016 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.028045098 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.163843963 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.102164112 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.240770731 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.027866211 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.087327066 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.086533812 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.086837668 seconds)
  done (took 52.427082117 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.028013317 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.040580636 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.039870173 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.02929883 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.02897587 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.029473309 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.040036295 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.030035641 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.057640419 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.032035976 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.029256362 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.029086595 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.029493699 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.029334748 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.02894619 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.046733583 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.045795591 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.029804704 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.031523974 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.040524143 seconds)
  done (took 42.652844599 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.026912976 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 7.027277527 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.22677119 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.191586921 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.027981776 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.029096549 seconds)
  done (took 34.486872122 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.045547272 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.051143467 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.038157537 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.067827364 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.097563458 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.040484921 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.117085481 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.24882452 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.041417706 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.113877402 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.05875874 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.039677978 seconds)
  done (took 26.922357506 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.027617133 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.030870253 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.030738444 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.044484322 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.042789232 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.038884167 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.041894956 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.027582043 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.045815091 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.053548158 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.039779495 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.047568728 seconds)
  done (took 46.429435635 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.209348988 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.193550555 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.359246851 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.717824512 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.538082609 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.093034678 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.426648681 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.539127261 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 4.790083853 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.848730919 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.52730604 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.077527233 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.56087475 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 5.025054986 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.085811404 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.300322757 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.031508603 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.997654196 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.480570816 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.120161418 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.056585791 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.04819812 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.043010625 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.552037535 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.34298226 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.033637871 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.207413907 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.053902095 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.028761438 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.245279567 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.030199847 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.051983379 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.18465928 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.327900282 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.540600235 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.106078178 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.104359579 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.991859139 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.084201773 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.066795219 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.043981164 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.046851442 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 7.030213015 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.046866995 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.279248328 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.032279336 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.046205384 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.612074924 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.984812623 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.192847587 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.22440646 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.905427603 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.118595416 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.695575843 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.165616168 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.29954183 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.040114342 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.987025814 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.105539909 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 6.102855098 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.191418872 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.107744574 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.212335441 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.001978979 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.659556742 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.275195714 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.130823923 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.080050918 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.334310906 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.371647789 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.23425436 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.268208785 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.811569868 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.039483662 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.038860351 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.462863701 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.151954807 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.036313484 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.757814176 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.543091266 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.989898126 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.150825863 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.636046329 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.044338094 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.033069786 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.04764718 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.249048624 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.986355903 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.127859115 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 6.118641894 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.374998702 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.035546112 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.035609103 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.064746705 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.036979154 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.020757351 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.685221034 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.116100713 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.987368446 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.588500435 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.071148934 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.987918002 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.045283817 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.046620423 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.425713849 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.081484309 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.762747744 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.64127281 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.31649715 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.60932274 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.045447567 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.037376414 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.12818244 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.124504445 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.036568291 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.728462415 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.001338289 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.15682157 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.215910712 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.036886657 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.995190688 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.054569583 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.193212369 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.077618387 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.064321347 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.041674638 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.049891699 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.036944844 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.051599313 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.291888513 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.066105976 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.539859378 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.146360574 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.040358001 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.986521792 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.050493911 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.520440446 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.12882163 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.08483206 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.51729493 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.926361436 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.014452972 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.486678115 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.323874479 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.961424405 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.616559799 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.591059935 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 4.145072811 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.705725054 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.589223205 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.486574963 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.596372232 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.485423593 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.53132198 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.498049096 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.087419052 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.421296058 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.574434783 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.495623451 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.401906254 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.681316648 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.681024978 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.214219939 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.540544513 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.520902996 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.618363762 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.695841141 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.546687076 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.483247132 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.867286255 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.738251353 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.016980341 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.888181396 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.21924092 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.55105231 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.505407245 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.663487798 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.595950486 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 5.204936846 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.694024878 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.775973299 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 7.274755647 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 5.510299555 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.447150637 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.633297586 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.873938878 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.49441232 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 3.220476629 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 6.749208785 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.553311679 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.543603564 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.529223538 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 5.471794196 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.506700101 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.960549646 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 5.519634077 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.043488605 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.550058015 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.639408239 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.503506747 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.509877779 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.508670431 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.815153878 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.576293039 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.520560721 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.554312242 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.455018932 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.348290094 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.473025917 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.495932362 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.508987491 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 6.957460051 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.833960134 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.549564217 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.530883652 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.600368939 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.644315919 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 3.080720384 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.438285342 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.423868874 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.965431965 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.486689516 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.999621646 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.411869197 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.655446771 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.533976849 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 6.625765188 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.408900414 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.280372247 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.636279129 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.6130759 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.532925305 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.514451425 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.743513672 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.441602049 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.672363347 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.960309584 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 6.069361807 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 3.191621294 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.527463346 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.067473103 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.497025612 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.49626594 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.214902568 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.555223698 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.528861731 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.677678594 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 3.142897236 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.753472347 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 7.683874762 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.614385968 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.523187121 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.879191051 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.042327141 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.478672982 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 3.51612764 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.544279405 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.471073584 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.665748108 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 3.236454418 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.509545091 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.522103916 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.535567494 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.708378468 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.678166165 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.929083101 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.009183599 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.852320031 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.46169473 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.457654627 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.518675459 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.718491427 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.465940319 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.496554486 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.122207589 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.106743827 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 3.207860033 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.991391294 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.790622916 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.158459364 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.986186709 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.633023826 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.50800843 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 3.443572548 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.692413485 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.446184762 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.538264478 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 5.411335137 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.253052108 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.736137667 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.505233869 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.951855262 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.551538873 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.047723385 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.896857993 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.650062254 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.676709292 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.511653726 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.462224851 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.492838013 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.44048655 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.546670082 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.329325903 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.092788049 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 6.515501404 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.103999856 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.105865459 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.059477046 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.624024503 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.084007156 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.062846506 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.805168599 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.089451359 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.187942246 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.140060985 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.131796618 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.198381199 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.061494607 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.063542009 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.632848587 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.511328133 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.150871557 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.62822523 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.131437756 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.783751672 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.064654712 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.235776156 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.0739637 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.729667546 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.108021298 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.445205511 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.063004357 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.249030689 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.36672653 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.149596033 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.060560656 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.009621538 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.625377047 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.190371832 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.529433662 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.056132737 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.799977146 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.551907948 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.0576233 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.60068571 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.029666982 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.054663881 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 6.452120807 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.728667764 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.790227786 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.091191003 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.055756822 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.221001754 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.237666041 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 6.17437775 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.761544428 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.065440073 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.076835933 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.224478678 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.174707155 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.992332256 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.580568253 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.801364242 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.318504277 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.070970512 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.204776335 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.205759977 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.189066787 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.093668832 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.128151055 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.778320411 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.501317196 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.151803938 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.001852744 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.052988755 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.309162988 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.522652844 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.137518506 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.33009064 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.472456164 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.145404568 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.159687268 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.114738184 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.586910762 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.765747133 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.74047017 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.376347217 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.558936313 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.498127616 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.054030648 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.77686395 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.228377079 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.169299111 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.443372283 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.967858913 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.429987247 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.330525089 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.060420275 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.001922449 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.211230941 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.064514432 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.119819117 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.761426193 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.331619201 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 6.153242227 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.845736365 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.642268186 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.029320727 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.084763195 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.088269744 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.078784107 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.075503758 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.054002439 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.580771584 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.441899701 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.071489605 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.009604615 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.807255074 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.004020567 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.230362259 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.036084396 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.09979517 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.863090281 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.152784361 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.203039633 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.572475641 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.102426345 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.10089951 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.005700401 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.1930275 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 5.077677287 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.725175841 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.810917418 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.080721814 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.056666986 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.209330591 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.037808874 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.102297134 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.062189277 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.362254378 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.496912168 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.510056437 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.218407125 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.4061077 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.335034595 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.012148421 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.153213556 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.2875019 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.006547322 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.074242368 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.127520759 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.106093194 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.131611323 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.055558275 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.063382651 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.296488179 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.203616449 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.202258459 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.121798531 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.155362904 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.079576659 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.194012381 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.194258264 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.060058486 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.064127542 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.066310314 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.324665183 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.080759496 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.014962602 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.232918665 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.138521221 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.441809571 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.137779591 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.940793596 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.066874705 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.008701743 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.209495356 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.562197116 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.059137926 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.876104304 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.126142135 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.057015747 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.508464587 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.697296133 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.213401602 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.313531968 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.014241702 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.04097586 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.109362399 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.06130412 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.070258453 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.646297167 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.424648271 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.058084917 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.511248039 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.128832679 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.069578033 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.800606616 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.536478829 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.060641347 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.144069126 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.097925319 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.53811682 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.315377096 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.074984612 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.196485632 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.064792783 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 5.012295472 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.061743302 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.145266422 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.566841605 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.079757695 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.57118918 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.2270329 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.193952461 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.063646245 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.064127285 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.056665146 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.236921314 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 3.238434808 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.085799366 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.328803741 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.215561361 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.068314287 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.620864527 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.751279564 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.278639363 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.13785192 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.11324354 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.447377069 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.879940872 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.070705572 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.604146812 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.248539872 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.070691562 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.296368845 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.308253535 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.062102983 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.242629844 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.058571479 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.401964107 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.362040548 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.608551522 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.195315552 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.076792443 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.386680546 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.07592527 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.586887425 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.506817864 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.142168132 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.059286189 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.073455484 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.05950362 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.148916567 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.672159619 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.248840023 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.269101833 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.335611054 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.584435719 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.071380974 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 5.222405877 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.35155442 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.54735537 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.404301484 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.142880179 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.233176819 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.996364494 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.264126101 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.388885251 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.017430083 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.224420598 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.055828705 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 5.058049113 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.553203227 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.079926945 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.37803439 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.027835386 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.118430108 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.120073031 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.334104322 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.246051613 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.566172187 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.189807525 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.874911975 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.234282739 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.131964975 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.066459674 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.157642693 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.067179325 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.307298298 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.51831643 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.363202042 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.226230151 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.934561655 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.144349282 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.037758499 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.114652861 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.87820179 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.622875798 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.380830829 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.27328202 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.872649175 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.043999596 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.593847301 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.092958494 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.770305219 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.075338685 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.074379712 seconds)
  done (took 2482.062105295 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.136268637 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.134210922 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.154682807 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.131330289 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.136424435 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.147108186 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.132275261 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.098729002 seconds)
  done (took 59.074747926 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.203391625 seconds)
    (2/17) benchmarking "4467"...
    done (took 5.356850039 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.27012812 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.348187449 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.376998365 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.394854112 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.657800586 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.526023296 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.447234659 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.292269201 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.239369672 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.325971677 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.193446271 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.110519397 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.383455724 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.508777301 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.33344615 seconds)
  done (took 85.192475445 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.623028538 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 8.35952924 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.400746921 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 7.567192675 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.247281687 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.395769805 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.220351414 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.150705687 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.995530808 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 8.984190802 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.089109497 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.117477133 seconds)
  done (took 93.625400023 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.123117776 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.07016316 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.069355568 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.067776922 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.068490264 seconds)
  done (took 12.445981418 seconds)
done (took 3029.512426405 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.286142575 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.211587302 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.165310875 seconds)
  done (took 6.371000543 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.126319025 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.192035992 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.258740361 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.211631941 seconds)
  done (took 10.794077072 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.359059932 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.537737415 seconds)
  done (took 6.891346677 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.502822884 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.078449389 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.608259737 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.066990167 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.073765215 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.071885976 seconds)
  done (took 23.223119639 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.067291569 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.069527661 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.067404829 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.067847483 seconds)
  done (took 10.278590946 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.06799539 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.047518958 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.069163948 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.084579741 seconds)
  done (took 22.264587932 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.438184671 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.32287363 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.830869448 seconds)
  done (took 9.585156565 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.882572225 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.444971371 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.860336728 seconds)
  done (took 10.18654524 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.343737289 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.994955891 seconds)
  done (took 8.337175804 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.225659089 seconds)
  done (took 4.221342942 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.541021697 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.55033987 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.926421074 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.948680297 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 3.088076148 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.384799955 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.430939383 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.458632172 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.75160648 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.583621456 seconds)
  done (took 28.659302396 seconds)
done (took 157.274972808 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 4.064258664 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.47043161 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.261831176 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 4.116073035 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.1683931 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.260079672 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.137246806 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.883868837 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.634088326 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.630460901 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.743113843 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.16491168 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.131664589 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.456350779 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.134693175 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.426914216 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.477605786 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 4.043150789 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.673477892 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.607323148 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.145314696 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.628643234 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.490271696 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.654664038 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.528488339 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.213298235 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 4.304188359 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.435679359 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.947777989 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 4.298165476 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.218467325 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.886988956 seconds)
  done (took 184.233339188 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.069345503 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.072390755 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.07330255 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.08912393 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.049834494 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.078097786 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.091144738 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.077327726 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.887365894 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.89975726 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.129137633 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.079371632 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.083854356 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.114842746 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.082439415 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.088283023 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.082933132 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.111697381 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.12375905 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.170351144 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.083471387 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.923387463 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.091496101 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.928226139 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.025629146 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.095591454 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.07841113 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.096650395 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.097470577 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.100867047 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.141992829 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.186412581 seconds)
  done (took 220.312933392 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.303271662 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.297459645 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.07712805 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.083995096 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.174093837 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.446712793 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.496284498 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.531441647 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.563342593 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.565194714 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.55279817 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.546870011 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.554159315 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.554327791 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.54600238 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.554596042 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.572089059 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.538726781 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.561214877 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.513907249 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.555550886 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.528090036 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.476473329 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.482747017 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.439248683 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.225601358 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.238050504 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.197698016 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.440354168 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.477521827 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.49180373 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.511336259 seconds)
  done (took 240.279228687 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.718197474 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.461899522 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.469672137 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.869133742 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.484835323 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.469306167 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.821369671 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.747694655 seconds)
  done (took 25.44930592 seconds)
done (took 672.281574528 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 4.207362749 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 3.389015489 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.623344171 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.525232664 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 4.117083154 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.58008048 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.498849544 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.614501673 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.978539289 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.254585354 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.563830588 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.120944203 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.928130432 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.135653333 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.267152265 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.252444908 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.590917093 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.875121466 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.383805801 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 3.075922298 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.596661848 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.438051079 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.588668636 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 3.285318438 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.947733898 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.543743014 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.61105676 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.861417667 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.452774466 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.735966119 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.502304793 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.866027407 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.48828673 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.474591253 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.59895553 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.583292103 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.845226394 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.536994573 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.65203142 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 3.305948067 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 3.323897385 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 3.151197618 seconds)
  done (took 124.735281082 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.483830533 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.414481371 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.3402212 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.289869925 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.219995823 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.359292313 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.407763014 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.435502734 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.436182486 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.443462813 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.404346721 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.427000233 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.443811297 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.409579812 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.28503891 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.097952102 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.147454579 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.156327859 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.147620151 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.184364121 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.23638734 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.210221257 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.233971698 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.307900541 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.363583255 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.349228327 seconds)
  done (took 62.658086147 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.343510353 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.576659476 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.670218904 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.362121338 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.331870616 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.333414133 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.431316554 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.35908876 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.32007305 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.310017003 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.498696114 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.359609121 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.367593983 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.634359408 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.326330691 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.434455727 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.406080442 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.297563219 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.309187885 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.121600169 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.198396578 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.1673497 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.156594733 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.202616372 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.223770016 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.210839509 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.330603004 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.834558507 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.417636273 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.533443096 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.517426281 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.501758261 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.877535248 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.808177418 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.501964411 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.394980273 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.376336729 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.582674767 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.433616654 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.421786378 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.504492157 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.403040427 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.691025092 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.996257331 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.424382548 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.436714925 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.957423202 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.660455563 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.506225956 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.451897448 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.757991261 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.451942246 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.431365243 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.450571439 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.526125597 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.474465213 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.452598332 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.739288714 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.452684352 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.469042332 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.441293122 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.44736937 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.708041588 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.480273371 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.662908655 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.44000592 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.436925161 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.367904664 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.692206774 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.19716012 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.858248226 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.467965726 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.456279917 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.537837236 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.638946433 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.90765002 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.476866998 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.681532796 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.89449165 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.49483451 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.450532904 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.861553247 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.507164789 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.449058218 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.425079411 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.436072068 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.331031238 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.154248767 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.129518386 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.579796942 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.682402293 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.486809789 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.223698175 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.143930804 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.27309919 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.631973843 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.184721628 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.29624844 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.714870056 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 3.036874444 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.485666587 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.361212533 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.983401606 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.401716328 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.437534265 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.45973875 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.792916046 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.474360505 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.493046457 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.400627194 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.458611676 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.433879639 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.495016264 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.472177276 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.453798891 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 3.09205413 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.671224411 seconds)
  done (took 293.628655887 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.50743882 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.527725025 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.557470984 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.539150008 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.543100381 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.541085024 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.537901661 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.554821511 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.392396057 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.31932928 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.308286161 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.260358807 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.254477989 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.261202902 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.112979171 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.087916737 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.87846492 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.093956025 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.159523587 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.281683057 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 4.015319832 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.280136983 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.432816091 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.495357542 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.511590582 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.537547724 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.535594399 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.517386774 seconds)
  done (took 182.431006971 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.50651477 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.578059895 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.506416448 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.56115341 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.511381587 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.502669344 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.523403151 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.535257976 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.505488286 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.510058999 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.488653797 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.543325702 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.509657035 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.61351881 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.546087283 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.557585994 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.61677904 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.518415097 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.509916404 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.507122676 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.550016941 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.500894954 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.497784406 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.558368066 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.474030769 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.534066205 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.473640793 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.464205249 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.45806815 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.58298851 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.485800163 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.507088294 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.515751579 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.493733639 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.607605912 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.59698059 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.564631213 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.499969166 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.454027244 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.465553399 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.440177041 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.464356045 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.524036515 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.46423752 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.444030415 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.57386836 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.471303626 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.444381251 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.47780966 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.441176118 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.465899225 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.469190542 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.501718797 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.579780971 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.504566914 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.466191134 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.478636116 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.440919773 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.439119314 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.550327313 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.450958068 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.5708464 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.472990369 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.453698801 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.450386012 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.439560994 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.519057005 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.471205491 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.532756134 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.443432758 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.54652084 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.514274594 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.436355569 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.405680096 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.354939972 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.297047003 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.22416159 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.380251671 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.393516278 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.427158801 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.518702806 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.512276309 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.501746271 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.509467531 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.499851019 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.60396367 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.617808423 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.497850052 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.502804185 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.509246735 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.494848654 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.545121455 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.548610062 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.560748555 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.582248609 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.553649725 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.525336967 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.512659317 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.496992545 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.507443032 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.503343436 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.489016012 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.529452902 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.604154886 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.145769164 seconds)
  done (took 264.678621216 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.528805333 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.155583572 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.225675412 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.421989277 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.583372629 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.46686431 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.38369893 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.481815806 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.506183674 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.671726717 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.609751196 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.620143457 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.567089654 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.547590644 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.556867686 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.591864988 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.589279544 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.957641911 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.655870744 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.465281062 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.570019487 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.801354071 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.857541036 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.921446426 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.590237898 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 3.023850242 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 3.176645237 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.653703075 seconds)
  done (took 78.217646194 seconds)
done (took 1008.737246757 seconds)
SAVING RESULT...
DONE!
