cset: moving following pidspec: 16768
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.82786558 seconds)
loading group "shootout"... done (took 1.137301968 seconds)
loading group "string"... done (took 0.670291088 seconds)
loading group "linalg"... done (took 8.634823066 seconds)
loading group "parallel"... done (took 0.166664771 seconds)
loading group "find"... done (took 3.019499312 seconds)
loading group "tuple"... done (took 2.134062673 seconds)
loading group "union"... done (took 14.915563176 seconds)
loading group "dates"... done (took 1.45170112 seconds)
loading group "micro"... done (took 0.219629626 seconds)
loading group "simd"... done (took 4.80875094 seconds)
loading group "io"... done (took 1.104030356 seconds)
loading group "random"... done (took 9.607274676 seconds)
loading group "problem"... done (took 1.526604416 seconds)
loading group "array"... done (took 25.311289075 seconds)
loading group "misc"... done (took 1.91235195 seconds)
loading group "scalar"... done (took 43.690086122 seconds)
loading group "sort"... done (took 3.328916462 seconds)
loading group "sparse"... done (took 12.750224683 seconds)
loading group "collection"... done (took 18.588521482 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.430940198 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.119406093 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.13185658 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.117446132 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.190899158 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.122568917 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.129076696 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.08551215 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.882752183 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.139457793 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.115991627 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.43025846 seconds)
done (took 5.345445869 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.166386627 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.091405266 seconds)
    (2/2) benchmarking "String"...
    done (took 0.08425232 seconds)
  done (took 1.395918831 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.072349083 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.063665423 seconds)
    (3/3) benchmarking "different"...
    done (took 0.068255119 seconds)
  done (took 1.424911426 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.06547682 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.13633418 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.067215487 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067226289 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.067852035 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.067226906 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.0669484 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.066816424 seconds)
  done (took 1.763771902 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072723088 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.068300357 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.066608278 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.068375076 seconds)
  done (took 1.499501742 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.06617341 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.122368235 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.065464238 seconds)
    (4/4) benchmarking "different"...
    done (took 0.065914927 seconds)
  done (took 1.541149571 seconds)
done (took 9.096862648 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.140428468 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.838592985 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.778196703 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.123167659 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.245952875 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.449451181 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.124577111 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.183610025 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.089237098 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075937415 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.122649794 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.078620452 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.400119977 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.403543052 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071777503 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.170488808 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.658195804 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087366542 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.136122671 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.47101789 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074214544 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.088688208 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.085434366 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.072102932 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.33065054 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.15332907 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.660526529 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.097342207 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.069100536 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.095239253 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.071312683 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078813454 seconds)
  done (took 10.782856356 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.094016886 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.091287895 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.069625568 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.125067299 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.095074935 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.070972435 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.076639692 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.070349047 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.092507276 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.127292579 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.091100884 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.10044896 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.072293289 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.070023772 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.074970689 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.198077768 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.081569875 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.082228735 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.068394739 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081878946 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.106826966 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.07927907 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.07963741 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078912893 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.133154237 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.169779487 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.098032879 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.099728969 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066800692 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.0801088 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.115756525 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.126206059 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067578058 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.066656577 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.121263632 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.096087987 seconds)
  done (took 4.693589715 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.887839255 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.096785368 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083646391 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074827389 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106667365 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.113894931 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.121756391 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.123684457 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.100345218 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069774051 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.151624991 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.68148492 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.178347687 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.072680151 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.120710184 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.358430573 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.08620532 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071466921 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069250955 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071932539 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070761832 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.112931917 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066852771 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.176858715 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.585336022 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.071154224 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069902432 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.096354695 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.065625899 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.140130223 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.093003117 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.070700846 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.541757705 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.066031738 seconds)
    (34/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.094138452 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.063931189 seconds)
    (36/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.19602694 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.089990036 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.095456751 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067915193 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.068884939 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079484214 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.067030638 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109094218 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.081301301 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.518568723 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070769446 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.586404924 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.227096894 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.073669263 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072821823 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.102562788 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.065059922 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068505337 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.288132815 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.145436193 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.0679021 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.273937977 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068703897 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.06866194 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069776407 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.100151527 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.071074082 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069510823 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.07398695 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.09725936 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.887839489 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.088430977 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.097964474 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067102785 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.409141689 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.076552295 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.070057451 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070355906 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.06961755 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.107246941 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067213025 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067178694 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.111457123 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.095912934 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.089946727 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070427096 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.068195516 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.066678944 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.352273859 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.207710942 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066971734 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.067839387 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.47524086 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.064644863 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.184281561 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069631516 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.093569286 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068045426 seconds)
    (94/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.065307694 seconds)
    (95/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.065735203 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.100170673 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.068887243 seconds)
    (98/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.355345198 seconds)
    (99/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.070251942 seconds)
    (100/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.503776546 seconds)
    (101/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069694816 seconds)
    (102/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.103767036 seconds)
    (103/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.120930164 seconds)
    (104/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068279183 seconds)
    (105/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.066370272 seconds)
    (106/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.065763621 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.102896659 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068518414 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065861749 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.074401076 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.066401772 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.065298603 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.070041624 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.066589625 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067375731 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.07033341 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068839783 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068183927 seconds)
  done (took 23.463136641 seconds)
done (took 41.053998024 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.315957683 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.079573824 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.080011674 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.079695052 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.079938486 seconds)
  done (took 1.909299297 seconds)
done (took 3.278262819 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.134536486 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.076230025 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.065013309 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.101566202 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.069494644 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.10277957 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.109974592 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.105814501 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.069715256 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.069613615 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.069731205 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.106754919 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.106493085 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.069704896 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.100017441 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.10517087 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.069791433 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.065118388 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.069685722 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.069626801 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.069575809 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.065231616 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.06975089 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.069553388 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.100610277 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.06967555 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.065091737 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.099800695 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.069469459 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.09964582 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.069352611 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.069510769 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.069372517 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.101253305 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.069782507 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.100972437 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.065816931 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.187858031 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.069626379 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.069333071 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.069155301 seconds)
  done (took 4.77684632 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071779811 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081740779 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08440029 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.06318571 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.072223836 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082820239 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062807284 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082436462 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.092204682 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.08369876 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083454208 seconds)
  done (took 2.182944862 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071138637 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.084050475 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.085092066 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062915845 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.074303062 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084750719 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062964376 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083659449 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.086560161 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084347375 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084528811 seconds)
  done (took 2.168914006 seconds)
done (took 10.423641054 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.097471715 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.066714691 seconds)
  done (took 1.446823984 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.225290829 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.51050676 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.328711744 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.093981316 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.07276559 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.087176765 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.204994185 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.067627371 seconds)
  done (took 8.06565705 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.104336394 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.068716615 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.068227215 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.068691666 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.069956742 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.070691507 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.070054774 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.06847124 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.068533294 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.069337418 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.07004758 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.068546563 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.069366702 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.068733318 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.06897072 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.070720039 seconds)
  done (took 2.545229905 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.103850109 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.070380655 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.100173866 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.062979432 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.072603568 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.063710573 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.071570386 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.073798717 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.071105285 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.072498112 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.073241283 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.07212152 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.072175935 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.071938758 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.073519176 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.073758799 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.073674485 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.071915675 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.073826603 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.074915773 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.074023599 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.074180885 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.074776108 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.072521679 seconds)
  done (took 3.209121449 seconds)
done (took 16.571031183 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.17515945 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.075622044 seconds)
  done (took 1.545913155 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.069122919 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.069455235 seconds)
  done (took 1.453407841 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073810359 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.06159712 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.079437391 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.071292193 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.062535032 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.062165422 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.078238931 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.062395479 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.062375374 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.062589874 seconds)
  done (took 1.989093084 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063706008 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.069822931 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.067901932 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.065625737 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067911977 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.063250549 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065958679 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.063802054 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.07076859 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.062552703 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.066633637 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.083498101 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.066597143 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.084318229 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.066118956 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.066555917 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.068155701 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.06588776 seconds)
  done (took 2.54693539 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061579169 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.06289616 seconds)
  done (took 1.445360437 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.06521823 seconds)
    (2/7) benchmarking "second"...
    done (took 0.063007007 seconds)
    (3/7) benchmarking "month"...
    done (took 0.065175148 seconds)
    (4/7) benchmarking "year"...
    done (took 0.064857268 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.062758816 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.061918558 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062894718 seconds)
  done (took 1.760398267 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.423893355 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.12291182 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.343353475 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.069513789 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.077394386 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.255875579 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.06436332 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.069303912 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.069119197 seconds)
  done (took 2.855543415 seconds)
done (took 14.925360001 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082877322 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.181320657 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.08807813 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.409664191 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.095304721 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.070340235 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.114352477 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.182745722 seconds)
done (took 2.567342884 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.277376901 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.163909348 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.317333538 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.149784097 seconds)
  done (took 2.95324142 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.336922357 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078824511 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.077608237 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.067736295 seconds)
  done (took 1.891995232 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065253186 seconds)
    (2/2) benchmarking "read"...
    done (took 0.071903731 seconds)
  done (took 1.463429658 seconds)
done (took 7.922596583 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.073052354 seconds)
    (2/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.098819404 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.062910257 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.064315229 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.065097641 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.074856658 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.064066871 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.064809964 seconds)
    (9/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.062613791 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.062564731 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.065092998 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.064949811 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065247593 seconds)
    (14/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.068829221 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064985573 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065033688 seconds)
    (17/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.064451234 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065250572 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.064763517 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064847374 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064541405 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065301761 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.064386831 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.065180217 seconds)
  done (took 2.956732404 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.080236272 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.066438254 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.067244757 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.067964064 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.067695081 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.067759151 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.06765205 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.066462766 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.067397529 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.066138193 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067647842 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067691578 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.065761783 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067917159 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066418972 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.068125348 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.068070835 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066676556 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065977498 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.068041549 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.067403526 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066396324 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.068124412 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067674711 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067985773 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.068076133 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.066166751 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.066636881 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06778483 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.068155382 seconds)
  done (took 3.37102669 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066659162 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.060626489 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.060977654 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.070505776 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.06066167 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.061129378 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.061607209 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.060987176 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.061067355 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.061857132 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.061389051 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.060758878 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.061606714 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.061139819 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.060904341 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.061779568 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.065829414 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.080203233 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.0613961 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060601811 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.065079646 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.060911934 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.060712014 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.060948803 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.061668561 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.061021839 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.060577725 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.06163615 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060651075 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.061524018 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.061077285 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.065105951 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.066146919 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.060855732 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.070977665 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.06600727 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.060891429 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.065287755 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.061712317 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.060705259 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.060760746 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.061000845 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.061203207 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.06088365 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.071004348 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.061377632 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.061986036 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.061521361 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.061059314 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.060556651 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.061093642 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062750717 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.069320648 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.062312602 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.060496854 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061724755 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.060814012 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.061604786 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.060536715 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.060768926 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.060809637 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.064581735 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.062477656 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.061593597 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.080769678 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.06238317 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.071068073 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.060626956 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.061728483 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.064362795 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.061216162 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078675217 seconds)
  done (took 5.885457074 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.072509367 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.073625286 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.079959825 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.071215104 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065266851 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.062400642 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065684707 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061928046 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.071189831 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.066244947 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062116865 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065774359 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.071429708 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066387512 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063330732 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.071668918 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.066633805 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065497767 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.062603102 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066628904 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063615181 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065946622 seconds)
  done (took 2.836877238 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.140421073 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.06705824 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.105865937 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.070605638 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.06973267 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.071312844 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067479772 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.067225512 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067005884 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067729896 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068056826 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067205433 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.069509314 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068134489 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068099636 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067392077 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067549911 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.067792264 seconds)
  done (took 2.682926443 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.078262098 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.066890637 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.09041361 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.066704779 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.066709095 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.066882092 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070520947 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.071205054 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.066464618 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.06697867 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.070749782 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066537973 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.066859781 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067027015 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066639384 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.068069512 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.066702407 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067065946 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.070998264 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.070249863 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070395407 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.070690539 seconds)
  done (took 2.882029622 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078792945 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065874648 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.082387228 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.068805557 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061157496 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061298471 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.066739267 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.066201559 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.066955708 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.065537797 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066038071 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.06144653 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.067729005 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066192874 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.068082594 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.0661991 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066237071 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066324679 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065983811 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061457076 seconds)
  done (took 2.688162668 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.073941443 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064131191 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063609322 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069119698 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063804489 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.063903687 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.069692095 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.063683575 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.063766902 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.085748899 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063797411 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.064263232 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069609537 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.067574274 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.064103234 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069228158 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.069412051 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069235606 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063798984 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064279484 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085698658 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.064349362 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.069180849 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.064271116 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063966498 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063784092 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064536202 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.067296289 seconds)
  done (took 3.23943727 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.06524932 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.063883471 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.064456018 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.064803534 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.064457167 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.064657986 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.064496564 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064366162 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.064277938 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.064807723 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.06430327 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.06438228 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.067301417 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.064749591 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064178614 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.064700611 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064650102 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.064758296 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064579178 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064346865 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.064397257 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064140122 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.06432789 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.064641474 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06482343 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.064309064 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064553556 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064835873 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064421487 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064400178 seconds)
  done (took 3.29421834 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073745972 seconds)
    (2/2) benchmarking "in"...
    done (took 0.071938331 seconds)
  done (took 1.500358989 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.063257976 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.078561 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060896207 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.073156861 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069800546 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.064419475 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070301698 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069411429 seconds)
  done (took 1.898398633 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.067997978 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.091343688 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062785331 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.063143203 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.066027576 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.128042626 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.075518804 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.074674282 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077176321 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.065624308 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.06382185 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.075038226 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.062924541 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.076525743 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064355759 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.072075282 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070314227 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.081108764 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.07602597 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.061572586 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.075369034 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063775156 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.061697655 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.064114638 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.063096692 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.070274353 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.079001173 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.075227285 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071331233 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.060764288 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.081631562 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.061799649 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.063082241 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071567887 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.065867991 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.062084246 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.098973878 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.062553385 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.067351602 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.061944677 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.074270996 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.082857567 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.076438786 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079774848 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.063569839 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.063832571 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.061335535 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.063848815 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.065368198 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.07132325 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.061713254 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069275881 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.061196908 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.063529861 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.072686396 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.062460331 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.067314988 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.071383454 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.075847509 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.072399221 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.070949838 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.077729563 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.071033062 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.069532863 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.062684285 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.08172126 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.06360075 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.075373088 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076891891 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.063029211 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.075113449 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.061769811 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.060613134 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.061755354 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.096196312 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.063579413 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.063031514 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.061962465 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.061766308 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.063457255 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.07137301 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.067233376 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069590694 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065871174 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077980322 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.071532811 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.062161338 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.068364543 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.07980788 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.06533032 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.062228836 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.078536785 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.065482714 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.061429905 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.079434601 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.071190448 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.063484496 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.062351559 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.064635539 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074659799 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.062513773 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060182333 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069258155 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.062479186 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.063266857 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.065456033 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06897305 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.061109354 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.071509963 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.065870872 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.062283999 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.059737779 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.064812416 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.061576613 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.059161206 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.06974506 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.060231924 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074557275 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.066918916 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.074847101 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.075571277 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.071278567 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.077137321 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.061276864 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.059693914 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.078602083 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.071046368 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.062239181 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.078502118 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.060446859 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.073571274 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.060193523 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.062005808 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.069721564 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.059745803 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06232303 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.060500915 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.065274493 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.061990278 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063245517 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.066370157 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.069447172 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.073085084 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.061951289 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.069948442 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.061162753 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.076078078 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.070475819 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.06537448 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063819327 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.061552812 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.072294021 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.066573321 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.069883971 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.059796761 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.060953647 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.060856154 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.071334129 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070537252 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.062331998 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.067564022 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.064852151 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.061014065 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.060862111 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.061335758 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.064018939 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063542811 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.060997978 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068413329 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.068831163 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.072828541 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.065374183 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.069266124 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.05958551 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.059306712 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.061668438 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.059898228 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.064708659 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.069038388 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07510655 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.071828092 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.081382167 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.059746979 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.070252237 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.061721467 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.076448268 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.073492533 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.06066673 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063428835 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.059350998 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060958831 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.068475659 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071059143 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.073180172 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074792286 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.064629668 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.064091915 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.059674768 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.074509817 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.060615674 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068667103 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.068993265 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.063397229 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.059664557 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.061141544 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.068696842 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.064308288 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.059802958 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.075343648 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.065103465 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.058948759 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.0740685 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.06015244 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.070205061 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.060180919 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.063807669 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.065699345 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.06155178 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.06968186 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074784211 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.058951762 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.05999606 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.074841908 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.061469967 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061186492 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.068007855 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.074683264 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.064942846 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.067607974 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070395575 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.070225653 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.06448255 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.069710679 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.061232768 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.069108572 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.062459609 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.071627937 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.059698846 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077341233 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.059336231 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.075102132 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.060688788 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.070102348 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.060496572 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068656912 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.060215684 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.076165506 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.061606207 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.060342223 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.071198262 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.058869556 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.069020195 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.059898237 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.065396964 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.066165073 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.069209239 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.062061089 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069499638 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.062021208 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.068719254 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.064626796 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.068408071 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.06975664 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.064880299 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.059923521 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.068904505 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.07081411 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.068691656 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.062227879 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.061416452 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.060657407 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.06921407 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.061087635 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.060885226 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068093689 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.064395814 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.065443876 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061025074 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.061477656 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.061636835 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068286009 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069371947 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077549233 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068710226 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.067753482 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.069029042 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.059652625 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.07451149 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.060233502 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.070008696 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.058870962 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.064929401 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.069178177 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.059850033 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077575603 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.060786741 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.068325273 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071225445 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.06867214 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.063923673 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.077371018 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.062411533 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.06873738 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.067571761 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.064271425 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.066513683 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.061479233 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.068123647 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.069545455 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.0698381 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.060513168 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.06709817 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069007617 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06174654 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.066241598 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.061427476 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.068564695 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.061688058 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.059049061 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.065311345 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.070998411 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.064870633 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.064912636 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.060201936 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.059321562 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.060256962 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.065379048 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.064444805 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.068915062 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074825124 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.059385648 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.060514894 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.059069581 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.063320893 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.076292441 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.069080303 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.067478609 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.064644252 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.058764302 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.061206872 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.061626031 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.059977389 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.062341817 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.058919794 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.059159032 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070173047 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.061399345 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.064209126 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060515557 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.061252583 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.07012978 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.063617179 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.060992848 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.066092189 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.059547861 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.0648252 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.059080315 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.060791796 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.063566738 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.059204251 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.062587447 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.068969286 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.074411141 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.065382756 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.068097744 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.059542102 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.066283534 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073276617 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064437694 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059836676 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.068025457 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.05801076 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076915278 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.068312797 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067937781 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068266344 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.060598793 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.074932867 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.063592252 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.069222 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074131482 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060233662 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.064280411 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.058825454 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073450046 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.063215222 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.05883554 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.066426084 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066791434 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.064441281 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.069800456 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.059899688 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.416883426 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.069475704 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.06817645 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.066000653 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.065712725 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.07361579 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.081053337 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.065146977 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.068892318 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.073502126 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.073855946 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.069354315 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077227361 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.073037939 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.065792867 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.066854528 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.068816332 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.066026487 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.077547548 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.065540529 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.069743236 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.069940485 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.065003172 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.072320616 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.082610727 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.074968549 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.075050288 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.064867725 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.064608271 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.083550259 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.068715687 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.068123404 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.073370386 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.075076743 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.077506102 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.074455205 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.081362624 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.064808034 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.070147626 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.077094196 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.064902082 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.064127907 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.06826983 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.065862185 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.07391221 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074529503 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.072394748 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.066390108 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.071059345 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.078165456 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.065272838 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.068824153 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.068486765 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.064536897 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.074893994 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.072492544 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.075648635 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.06522798 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.063879194 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.067694241 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.073655876 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.072265147 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.073617834 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064704188 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.07093144 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.078048924 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.072050283 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.067042401 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.063264041 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066777861 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.073128514 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.0685127 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.06320845 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.068375993 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.067540126 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.070943906 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.074159208 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.068279171 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.063420004 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.08091605 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.07197079 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.072960744 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.065160282 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.065821525 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063766613 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.063395731 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074701272 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.062873519 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.064905186 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.068270451 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.065158761 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.081318014 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.07179462 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.079293217 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064227192 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.06750724 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.062671529 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073091027 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.067401429 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.06330066 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.073584959 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.062490251 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078568798 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.07537277 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.089524005 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.062282017 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.067986992 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.070810218 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.07805761 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072095094 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.07199978 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.066459526 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072331737 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.064351891 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.073451245 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.062430459 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.061422709 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.072476207 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071352732 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075249303 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.062393606 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.072768703 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.064592032 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.07104524 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.07074679 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.064322967 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064035063 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.064269359 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071807284 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.067134082 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.072410634 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.066925567 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.228041747 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.063616071 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.074381706 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.071788962 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.073667446 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07603714 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.074579723 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.070343051 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.062919619 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069966573 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.070319963 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.064671916 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.06817583 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.065563837 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.084010096 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.064255332 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.063719225 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.076678475 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.068527501 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.062135974 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.068535488 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066822892 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.072484496 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.063086504 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.073212758 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.066550355 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.063015326 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.066723341 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066691101 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.06105738 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.061675285 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.062391585 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072094304 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.066559498 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.062649208 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081502138 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.064463261 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.071256824 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073584795 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.068772533 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.063987799 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.061799181 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.063265964 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.075967108 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078298942 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.066005235 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071914035 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.064038959 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.072390573 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.061523877 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.071222566 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.070622252 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.0713452 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.062029939 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062583115 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.078168786 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07914645 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.067346261 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.072296447 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.071888161 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.064316053 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.084354416 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.071369048 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063570354 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.073311446 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.065510658 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.061928424 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.061744348 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.064063476 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.074254185 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.061986172 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.065273792 seconds)
  done (took 42.276498397 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.101739285 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063501963 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.062634843 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.062879531 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070997014 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063949957 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063120367 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063747918 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.06369402 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.065549974 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.062883979 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065736811 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.069356161 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.0763366 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071603839 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.066715452 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063557196 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.064278739 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063014625 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063976158 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.069850899 seconds)
  done (took 2.997486716 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.06650257 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.066610471 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067314047 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067145458 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066144687 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.062984709 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.067009736 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062872472 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067374136 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063574935 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067594075 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063020535 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.063356288 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.063225494 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063579981 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064799489 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.067900237 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067385335 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.063841595 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067845751 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065349329 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.067669052 seconds)
  done (took 2.978201115 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.064978726 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.063001021 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.071567898 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.062225688 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.061970257 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.0658835 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.062417576 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.067425023 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.067777844 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.067789488 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.072749759 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.064225522 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.062782421 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.068917201 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.062825138 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.063862291 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.10738447 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.064243149 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.06411922 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.062711442 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.065604039 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.072277784 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.062957298 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.063201961 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.067697384 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.06632229 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.062633216 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.065480523 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.063467503 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.067302503 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.064210629 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.062536447 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.072159613 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.07140705 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.066947752 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.067106017 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.064822037 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.063990937 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.06263417 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.062587236 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.071459389 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.064061427 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.062791479 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.064228359 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.071898073 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.062691177 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.062434809 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.072042117 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.062694243 seconds)
  done (took 4.796749435 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.07300061 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.115590304 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.068355999 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.097319188 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.07546488 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.068777802 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.068401395 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.098147069 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.063883755 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.064184865 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.076503149 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.07680927 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.065816073 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.066801663 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.069553993 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.065370954 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.066558786 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064798912 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.068651231 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.06524093 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.068397888 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.069429486 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.075172175 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.07597276 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.066955305 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.06486007 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.065151421 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.066958541 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.076154492 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.069275943 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.067390351 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.06767451 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.07629821 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.068769347 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.065281518 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.065295277 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.076938525 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.066093191 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.065350942 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.063897054 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.065280789 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.066666544 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.070231849 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.077013042 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.065593817 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.07001747 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.065529084 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.063304573 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.075821024 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.065349198 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.069415972 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.077088707 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.066668897 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.065794314 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.066846524 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.075867666 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.065730362 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.064098749 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.065668294 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.075830966 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.063829513 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.06627645 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.07916406 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.06486923 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.068748239 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.076659909 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.070931594 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066492801 seconds)
  done (took 6.477980821 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.072180173 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.09798785 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.078628202 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.078370574 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.073819736 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.073630823 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.073415648 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.073310439 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.073291907 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.077182167 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.073527325 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.108595536 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.069668721 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.075339693 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.073727767 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.073512894 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.073587586 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.073374153 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.073290708 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073188042 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.073508293 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.078367157 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.073363661 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.078686358 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.075797132 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.069649807 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.07328998 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.073283349 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.078826745 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073863169 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.076047467 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.073230691 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.073249475 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.078796276 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.076019967 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.073346 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063577141 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072949544 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.073351155 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.073259714 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.069899526 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.078510819 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.073117053 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.06950382 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.07365556 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073262613 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.078799107 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.075765474 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.075026849 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.076897668 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.073601149 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.07874559 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07317444 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.073339704 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.078924803 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.081057501 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.078573756 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.078603019 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.073462374 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.078519736 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.078561724 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.080894352 seconds)
  done (took 6.26864382 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076332487 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068924931 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.081945291 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.062819439 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.062686938 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.072088783 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.062194311 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.062345815 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.069945392 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.069606854 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.071261939 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.071982847 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.074312919 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.070890651 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.072175818 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.073891196 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.071904455 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.071878666 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.069515329 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.072080175 seconds)
  done (took 2.979260847 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.077818667 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.081503911 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.068090093 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.07147745 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.068351651 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.071947778 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.067549715 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068342795 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068821065 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068687577 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.073289152 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.073636432 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068926634 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.072093529 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.073149337 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.072285138 seconds)
  done (took 2.705274331 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.065965001 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.070942171 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.069101032 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.063781465 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.065781349 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.063064021 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.064331482 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.0623563 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.066167865 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.076941732 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.063615163 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.066574954 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.064182864 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.063121103 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.063941729 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.066330822 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.065390673 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.063874908 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.066844776 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.068205418 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.072124186 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.064585538 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.066201409 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.06352933 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.065927852 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.072358023 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.065226743 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.065865339 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.063500757 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.066443366 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.065829078 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.070480347 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.065951543 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.064206163 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.062856364 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.063794339 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.064173913 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.066568618 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.066317491 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.064156769 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.062111045 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.06878047 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.063908262 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.064607997 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.065364516 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.066388831 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.065277066 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.069527439 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.064252865 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.066502857 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.063966722 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.065262962 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.063702355 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.070882947 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.06555453 seconds)
  done (took 5.186142292 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079978376 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.067698116 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062154507 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062441686 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.067703611 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.067740663 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067601709 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.067903617 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068291493 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062341533 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.068471437 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.067695479 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068138185 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.067780845 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.068425852 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068458367 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062457518 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.068072176 seconds)
  done (took 2.789017862 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.068975644 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.068061013 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.066910579 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.06436759 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.064685316 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.068887092 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063432029 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.064088967 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063986671 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.064410641 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064493743 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.064431047 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063672547 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.063951192 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.068443753 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064486882 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.063897207 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062691202 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.064498448 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062642538 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.0691978 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063121163 seconds)
  done (took 3.00099862 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.090044133 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.086433743 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.130324383 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.082053775 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.090350233 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.073677413 seconds)
  done (took 2.122842922 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.095926741 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.101009212 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067383655 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067162465 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072669558 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070488701 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070390213 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070454758 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074376139 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074632882 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070381018 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07412761 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074120203 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076127657 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071811912 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072454142 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070409253 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070403998 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067227499 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078236651 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070863869 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074208016 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070499027 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070625439 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070669747 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076201845 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074008375 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07446386 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070615121 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074321749 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07270441 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071189244 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074437162 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074336869 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067288803 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073878981 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070847059 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078494486 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072535905 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076466892 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.067269993 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07265075 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074177211 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073893202 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074372136 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070765228 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074141397 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070947554 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071174004 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079852262 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072846718 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.076836148 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072722822 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074417435 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074169411 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079974075 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074660663 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075973009 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072734242 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074859005 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.076002575 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07288825 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076078947 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074636163 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072360443 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076585506 seconds)
  done (took 6.450807669 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.106478761 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067849516 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071110576 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074777095 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076433361 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070951999 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071049057 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070731255 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070809926 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068146253 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.106996141 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071093665 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076555799 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.079234114 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071102256 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070764927 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070824932 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.076023219 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068044218 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079837138 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070936329 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076371723 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075884081 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075950574 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074209408 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072285559 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070733651 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070198023 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070236459 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07048254 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073778842 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070483446 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075978513 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.067513969 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075861251 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071023183 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070545806 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07376662 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070974536 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072523703 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076275069 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078652344 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070401112 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070830311 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074650161 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070622786 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070679249 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068303949 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070657152 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067882959 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075121233 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07477279 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075135256 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076438429 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071115963 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071010407 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070934669 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07107397 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071323648 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07294189 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076380297 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070671472 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.080189262 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071347963 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071686622 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076603515 seconds)
  done (took 6.460847356 seconds)
done (took 132.05636819 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.219818478 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.191547323 seconds)
  done (took 1.969276589 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.076034297 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.167909831 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.076434957 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.076184129 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.109928134 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.109009269 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.077669989 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.073669581 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.076115558 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.07367289 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.140422612 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.078170012 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.073566058 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.073749926 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.074172936 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.073498247 seconds)
  done (took 3.016315138 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.109379104 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.187161286 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.084024917 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.071605729 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.153983022 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.078158179 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.073835498 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.078288658 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.078512019 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.071942934 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.108483179 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.084528103 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.076893026 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.077812676 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.073706365 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.07692067 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.077902849 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.078300151 seconds)
  done (took 3.233028536 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.104839568 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.093276252 seconds)
  done (took 1.79004419 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.163249677 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.107689777 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.147409394 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.349701357 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.139631411 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.142025934 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.145928085 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.141471673 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.116557077 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.137082704 seconds)
  done (took 3.176384664 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.107290554 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.106897227 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.31074128 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.10418423 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.084196056 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.079032139 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.076923003 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.081270887 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.07687975 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.078018333 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.124283999 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.077009977 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.074356359 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.127122637 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.100562467 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.107994093 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.072682764 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.079669171 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.081186737 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.072503018 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.077639522 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.081453663 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.180994516 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.080314809 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.102149736 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.076883544 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.078607557 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.075649452 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.075948609 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.079833903 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.080910151 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.1015293 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.079980418 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.083920993 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.077909264 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.098363473 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.073244129 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.100776727 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.07550573 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.074258452 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.076616382 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.080561118 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.073642026 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.079719812 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.076981681 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.078694269 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.081326056 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.072574688 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.076738364 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.075703719 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.074087731 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.078137264 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.077561805 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.078981321 seconds)
  done (took 6.465291816 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.109782863 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.110165405 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071534906 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.11425432 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.106813495 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071763972 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.10627066 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.101762654 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.110474564 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071223577 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.070576457 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.071035347 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077570797 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.080720904 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.11818543 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.109880388 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072916508 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.071625435 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.109250339 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.108659967 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070802284 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.103198947 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.101850618 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.107760508 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.069783761 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.071406447 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.06999229 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070333672 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075265203 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.07637046 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.070189217 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076756672 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.082351484 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076765379 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069898347 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.070255887 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070275701 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.077043241 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077781949 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.07797706 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.07572229 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069852787 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069827228 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070710099 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071092589 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069773847 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.076492847 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.077074768 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.076477115 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070572019 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070720888 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.069654939 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.07068651 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.077229497 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.07613316 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.07804683 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.077699262 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070321895 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070495334 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.07233163 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078581291 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.078755894 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.07750925 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071227374 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.078367325 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.070340978 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079100297 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081922123 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.070382165 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.070749027 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.070723029 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070743404 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070949359 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.076337987 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.076534802 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071002566 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070868159 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070337317 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078776637 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076760315 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.07015206 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075898433 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069598416 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070253332 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070703554 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.07077368 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.075921054 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.077458156 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.071326239 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070155892 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.07025432 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070498631 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.069834766 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.076083122 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.077050442 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.077340257 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.076327111 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070850123 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.077007418 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.076937529 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070842553 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.076877095 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.070428361 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071359885 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071045212 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.076805666 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.076032601 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.078123372 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070460061 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069822282 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.07654213 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078719762 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.208090705 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.076489564 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079188817 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.076815275 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.070175791 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.079880787 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070645093 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.078203958 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070193206 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07857991 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070179248 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076258022 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.070439237 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.070011799 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.070230248 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.07627729 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070985106 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070455713 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070769404 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.07047308 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.076924934 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.079879981 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071260042 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076520803 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.076630541 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070998089 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076369152 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070598925 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077774035 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070697531 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070850297 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069930219 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07914217 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.070328126 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069912744 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.070251274 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.078617999 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070427243 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079177061 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.076314523 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070374652 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080070039 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.078713471 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.075926169 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.079088337 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071342836 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.070495814 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070478636 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.072971206 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075750651 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076717836 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071015425 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.07051799 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.075809422 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.07846653 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.070134643 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.075985283 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.07636909 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.076066133 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.070664431 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.070246816 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.079002941 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.078635018 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.076132454 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.075967111 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076944131 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.070420998 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076079276 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076275798 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070098767 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.082608354 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070248129 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.080591128 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.076405658 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.0756118 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076541168 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.07787363 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.078522812 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.316917962 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.080260043 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069894483 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.070192914 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.076866627 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.070095098 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070177217 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.076522805 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070546394 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070867359 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.081274861 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.071120165 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.07860713 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.069751993 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.077347496 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069548416 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070810851 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.081397964 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.070342979 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070705902 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.076437122 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.070438388 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.075965956 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078911848 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.0760854 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.070230884 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070900006 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.077379666 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.077785291 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070492015 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069692936 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.07075006 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.075971753 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.075297041 seconds)
  done (took 19.050074272 seconds)
done (took 40.303032036 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.170925128 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.116709048 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.212948419 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.200676226 seconds)
  done (took 2.397649819 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.10204619 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.066532482 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.081954309 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.091956483 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.066633953 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.078010779 seconds)
  done (took 2.129993616 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.204361898 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.177663784 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.247525173 seconds)
  done (took 2.263262704 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.370942625 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.153051973 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.218564836 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.503190309 seconds)
  done (took 2.98713999 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.111690035 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.101765987 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.078958625 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.113397596 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.086799674 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.06403649 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.13630788 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.07099263 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.101846516 seconds)
  done (took 2.57007955 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.1416697 seconds)
done (took 14.149738149 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.25998762 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.239793463 seconds)
    (3/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.278846306 seconds)
    (4/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.186320515 seconds)
    (5/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.223721701 seconds)
    (6/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.148523109 seconds)
    (7/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.202685541 seconds)
    (8/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.108042897 seconds)
    (9/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.11827441 seconds)
    (10/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.244011925 seconds)
    (11/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.148987904 seconds)
    (12/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.167725168 seconds)
    (13/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.21402239 seconds)
    (14/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.093705624 seconds)
    (15/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.093627491 seconds)
    (16/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.098539077 seconds)
    (17/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.086246301 seconds)
    (18/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.179683491 seconds)
    (19/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.078073639 seconds)
    (20/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.073333034 seconds)
    (21/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.1813779 seconds)
    (22/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.232334486 seconds)
    (23/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.079151967 seconds)
    (24/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.257533197 seconds)
    (25/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.231566818 seconds)
    (26/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.079287729 seconds)
    (27/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.155822328 seconds)
    (28/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.080268385 seconds)
    (29/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.163601009 seconds)
    (30/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.076160323 seconds)
    (31/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.150880997 seconds)
    (32/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.0753966 seconds)
    (33/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.095982321 seconds)
    (34/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.155649657 seconds)
    (35/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.150822386 seconds)
    (36/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.075594111 seconds)
    (37/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.184621549 seconds)
    (38/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.129509551 seconds)
    (39/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.202088876 seconds)
    (40/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.084833027 seconds)
    (41/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.124527151 seconds)
    (42/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.075821223 seconds)
    (43/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.067696541 seconds)
    (44/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.077523907 seconds)
    (45/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.077851636 seconds)
    (46/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.07834201 seconds)
    (47/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.091195553 seconds)
    (48/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.070950922 seconds)
    (49/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.090175757 seconds)
    (50/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.078521854 seconds)
    (51/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.084886956 seconds)
    (52/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.202915405 seconds)
    (53/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.068087775 seconds)
    (54/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.193539373 seconds)
    (55/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.19565623 seconds)
    (56/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.139642301 seconds)
    (57/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.081269942 seconds)
    (58/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.080879832 seconds)
    (59/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.187028319 seconds)
    (60/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.081172836 seconds)
    (61/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.080248558 seconds)
    (62/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.14497268 seconds)
    (63/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.144401313 seconds)
    (64/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.143513411 seconds)
    (65/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.073736655 seconds)
    (66/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.075434448 seconds)
    (67/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.203140139 seconds)
    (68/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.089630554 seconds)
    (69/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.104301919 seconds)
    (70/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.075597974 seconds)
    (71/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.083650953 seconds)
    (72/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.144638366 seconds)
    (73/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.075410507 seconds)
    (74/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.090779545 seconds)
    (75/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.361056809 seconds)
    (76/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.077143723 seconds)
    (77/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.077233142 seconds)
    (78/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.070569965 seconds)
    (79/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.095734834 seconds)
    (80/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.071995834 seconds)
    (81/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.165979357 seconds)
    (82/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.078559383 seconds)
    (83/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.068060241 seconds)
    (84/341) benchmarking ("sort", Float32, false)...
    done (took 0.14020722 seconds)
    (85/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.075975451 seconds)
    (86/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.086376752 seconds)
    (87/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.067367473 seconds)
    (88/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.075650479 seconds)
    (89/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.07859295 seconds)
    (90/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.066993728 seconds)
    (91/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.076043065 seconds)
    (92/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.150848576 seconds)
    (93/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.237760399 seconds)
    (94/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.067877636 seconds)
    (95/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.068120995 seconds)
    (96/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.142061304 seconds)
    (97/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.077193593 seconds)
    (98/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.174712229 seconds)
    (99/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.067165917 seconds)
    (100/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.077087783 seconds)
    (101/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.071456119 seconds)
    (102/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.06743838 seconds)
    (103/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.190756263 seconds)
    (104/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.172344824 seconds)
    (105/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.078243016 seconds)
    (106/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.078029185 seconds)
    (107/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.082021362 seconds)
    (108/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.07552502 seconds)
    (109/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.074894731 seconds)
    (110/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.0963507 seconds)
    (111/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.135167333 seconds)
    (112/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.068684016 seconds)
    (113/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.090008706 seconds)
    (114/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.16974164 seconds)
    (115/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.075245839 seconds)
    (116/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.069220841 seconds)
    (117/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.164840523 seconds)
    (118/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.222599642 seconds)
    (119/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.067050538 seconds)
    (120/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.067515139 seconds)
    (121/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.199351834 seconds)
    (122/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.070019991 seconds)
    (123/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.067761036 seconds)
    (124/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.084655887 seconds)
    (125/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.068181083 seconds)
    (126/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.074628045 seconds)
    (127/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.067217902 seconds)
    (128/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.119473541 seconds)
    (129/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.077379937 seconds)
    (130/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.07034355 seconds)
    (131/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.201270298 seconds)
    (132/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.083416378 seconds)
    (133/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.182095183 seconds)
    (134/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.067290029 seconds)
    (135/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.078748683 seconds)
    (136/341) benchmarking ("sort", Int8, false)...
    done (took 0.152118481 seconds)
    (137/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.076582986 seconds)
    (138/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.069892795 seconds)
    (139/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.142009399 seconds)
    (140/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.079484943 seconds)
    (141/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.068779609 seconds)
    (142/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.075915942 seconds)
    (143/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.155446371 seconds)
    (144/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.077432903 seconds)
    (145/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.067255186 seconds)
    (146/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.095867986 seconds)
    (147/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.16683047 seconds)
    (148/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.066772442 seconds)
    (149/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.066077982 seconds)
    (150/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.145960559 seconds)
    (151/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.079779091 seconds)
    (152/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.07534639 seconds)
    (153/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.076928602 seconds)
    (154/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.074496893 seconds)
    (155/341) benchmarking ("sort", Bool, false)...
    done (took 0.149341949 seconds)
    (156/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.074738794 seconds)
    (157/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.067955314 seconds)
    (158/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.075434854 seconds)
    (159/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.193315373 seconds)
    (160/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.075634941 seconds)
    (161/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.066164827 seconds)
    (162/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.067433039 seconds)
    (163/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.085823689 seconds)
    (164/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.071561935 seconds)
    (165/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.067240988 seconds)
    (166/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.068383919 seconds)
    (167/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.074626065 seconds)
    (168/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.077104495 seconds)
    (169/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.16616538 seconds)
    (170/341) benchmarking ("sort", Int64, false)...
    done (took 0.068880746 seconds)
    (171/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.086467819 seconds)
    (172/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.06827379 seconds)
    (173/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.125420172 seconds)
    (174/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.075273108 seconds)
    (175/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.158635523 seconds)
    (176/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.096295353 seconds)
    (177/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.066163543 seconds)
    (178/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.068339906 seconds)
    (179/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.13426381 seconds)
    (180/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.222524976 seconds)
    (181/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.067378494 seconds)
    (182/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.083962624 seconds)
    (183/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.067817955 seconds)
    (184/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.067586381 seconds)
    (185/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.087096955 seconds)
    (186/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.365328628 seconds)
    (187/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.077807615 seconds)
    (188/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.067569744 seconds)
    (189/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.068046653 seconds)
    (190/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.092333857 seconds)
    (191/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.07539707 seconds)
    (192/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.066494081 seconds)
    (193/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.067501756 seconds)
    (194/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.068365054 seconds)
    (195/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.067321646 seconds)
    (196/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.070542278 seconds)
    (197/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.069866304 seconds)
    (198/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.075952757 seconds)
    (199/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.201643914 seconds)
    (200/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.146249054 seconds)
    (201/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.067274405 seconds)
    (202/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.067245617 seconds)
    (203/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.068578625 seconds)
    (204/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.071903331 seconds)
    (205/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.094399624 seconds)
    (206/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.08876235 seconds)
    (207/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.070574113 seconds)
    (208/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.148274411 seconds)
    (209/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.067653828 seconds)
    (210/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.091377248 seconds)
    (211/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.074960019 seconds)
    (212/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.154066012 seconds)
    (213/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.082733409 seconds)
    (214/341) benchmarking ("sort", BigInt, false)...
    done (took 0.268517278 seconds)
    (215/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.093839677 seconds)
    (216/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.166971674 seconds)
    (217/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.079255525 seconds)
    (218/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.070907236 seconds)
    (219/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.068084062 seconds)
    (220/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.067398818 seconds)
    (221/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.157977463 seconds)
    (222/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.067222148 seconds)
    (223/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.092148779 seconds)
    (224/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.127602072 seconds)
    (225/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.07914093 seconds)
    (226/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.142791919 seconds)
    (227/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.065734743 seconds)
    (228/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.229686099 seconds)
    (229/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.067052025 seconds)
    (230/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.075243864 seconds)
    (231/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.083482297 seconds)
    (232/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.067424319 seconds)
    (233/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.066901053 seconds)
    (234/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.074592535 seconds)
    (235/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.06708776 seconds)
    (236/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.069548549 seconds)
    (237/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.067543877 seconds)
    (238/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.068041201 seconds)
    (239/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.070815631 seconds)
    (240/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.229155588 seconds)
    (241/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.071206053 seconds)
    (242/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.067256579 seconds)
    (243/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.074638221 seconds)
    (244/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.069493639 seconds)
    (245/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.147611519 seconds)
    (246/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.067491705 seconds)
    (247/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.066646609 seconds)
    (248/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.067601378 seconds)
    (249/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.069447703 seconds)
    (250/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.067669766 seconds)
    (251/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.068158309 seconds)
    (252/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.067675572 seconds)
    (253/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.075117526 seconds)
    (254/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.077497561 seconds)
    (255/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.067574957 seconds)
    (256/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.07964087 seconds)
    (257/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.066705601 seconds)
    (258/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.068867776 seconds)
    (259/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.067423277 seconds)
    (260/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.067927657 seconds)
    (261/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.067588812 seconds)
    (262/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.067527402 seconds)
    (263/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.158488917 seconds)
    (264/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.074821024 seconds)
    (265/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.068265592 seconds)
    (266/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.066414665 seconds)
    (267/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.067268233 seconds)
    (268/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.074730217 seconds)
    (269/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.070970192 seconds)
    (270/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.066105872 seconds)
    (271/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.0884015 seconds)
    (272/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.081130204 seconds)
    (273/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.068342131 seconds)
    (274/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.15471668 seconds)
    (275/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.066422239 seconds)
    (276/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.068487241 seconds)
    (277/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.175413179 seconds)
    (278/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.069218347 seconds)
    (279/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.09285125 seconds)
    (280/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.093759236 seconds)
    (281/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.135906469 seconds)
    (282/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.087195795 seconds)
    (283/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.069196011 seconds)
    (284/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.067220626 seconds)
    (285/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.067652206 seconds)
    (286/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.068437848 seconds)
    (287/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.068291937 seconds)
    (288/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.083919004 seconds)
    (289/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.117234883 seconds)
    (290/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.066239294 seconds)
    (291/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.131979654 seconds)
    (292/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.067852961 seconds)
    (293/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.067833549 seconds)
    (294/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.194980539 seconds)
    (295/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.079566146 seconds)
    (296/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.152162693 seconds)
    (297/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.071349548 seconds)
    (298/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.067827537 seconds)
    (299/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.08578573 seconds)
    (300/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.068663894 seconds)
    (301/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.070562288 seconds)
    (302/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.068370842 seconds)
    (303/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.067693491 seconds)
    (304/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.068026221 seconds)
    (305/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.071931614 seconds)
    (306/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.066016864 seconds)
    (307/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.067653807 seconds)
    (308/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.067589833 seconds)
    (309/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.067415628 seconds)
    (310/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.066859101 seconds)
    (311/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.248454057 seconds)
    (312/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.072279694 seconds)
    (313/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.06961204 seconds)
    (314/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.069686042 seconds)
    (315/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.073131888 seconds)
    (316/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.092387217 seconds)
    (317/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.068666908 seconds)
    (318/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.126788281 seconds)
    (319/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.180954754 seconds)
    (320/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.072864282 seconds)
    (321/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.156049373 seconds)
    (322/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.070318462 seconds)
    (323/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.079928999 seconds)
    (324/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.069644934 seconds)
    (325/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.117752144 seconds)
    (326/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.074552224 seconds)
    (327/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.181514611 seconds)
    (328/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.067827084 seconds)
    (329/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.067544595 seconds)
    (330/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.067537052 seconds)
    (331/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.069875737 seconds)
    (332/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.067639898 seconds)
    (333/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.067554614 seconds)
    (334/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.067815675 seconds)
    (335/341) benchmarking ("sort", Float64, false)...
    done (took 0.139438173 seconds)
    (336/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.155147864 seconds)
    (337/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.148992862 seconds)
    (338/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.069065319 seconds)
    (339/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.069596115 seconds)
    (340/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.067549289 seconds)
    (341/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.087358872 seconds)
  done (took 37.532697232 seconds)
done (took 39.194751703 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.093402216 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.081159382 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.079531554 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.076131846 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.08017392 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.078225327 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.079548075 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.077236524 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.078757634 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.078586063 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.078612891 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.066625298 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.07525295 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.082268057 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.076303564 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.082936602 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.079994297 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.082707632 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.067882924 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.082196354 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.094103929 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.079140217 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.07589075 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.08091444 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.067138459 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.076777317 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.09102232 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.088149918 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.073905936 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.077273397 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.075386039 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.085875392 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.075289811 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.073775156 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.077237183 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.073622478 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.076745111 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.074271466 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.090913982 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.073420592 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.068133825 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.080241395 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.075069015 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.075559728 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.076722262 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.0796261 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.072806066 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.080711101 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.067146563 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.078406391 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.090642655 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.072192631 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.073518713 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.07544803 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.072943053 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.076787182 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.073424638 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.078662815 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.072524996 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.079063911 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.078763871 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.075490381 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.066761318 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.075882794 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.074646315 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.074829926 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.066152779 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.07196017 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.067094888 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.067292796 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.066442019 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.07561477 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.074487965 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.071994684 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.066200776 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.06692967 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.066367909 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.078853239 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.073240726 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.076279333 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.067695199 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.072522144 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.071847947 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.067093576 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.072539016 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.078948638 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.065958439 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.067453556 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.066382956 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.08151567 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.073260858 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.066646518 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.078946399 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.072408944 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071843026 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.067048591 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.066426669 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071844341 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.075027599 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.06704604 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.066099651 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.072007742 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071891234 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.07569268 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.067233194 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071794223 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.072107823 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.066198392 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.075903046 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.074451564 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.075766895 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.080364259 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.075874397 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.078910774 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.067841001 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.06629166 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.076534295 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.067165761 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.072004176 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.074605285 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.072049354 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.074647028 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.067242679 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.065896161 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071906619 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.073755974 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.067507335 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.067338261 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.067095236 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.076541367 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.074146022 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.066111797 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.067196361 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.075773642 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.075774874 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.065921125 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.066046304 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.076110576 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.067036924 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.072568213 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.072825535 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.075452434 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.066141467 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.066978208 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.212466082 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.067237846 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.066734472 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.072565758 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071945121 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.068231346 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.079449175 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.073852191 seconds)
done (took 13.160105067 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.068517178 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.109554814 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.082299895 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.083897609 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.080643677 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.068879939 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.072487318 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.086647567 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.071473518 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.092051963 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.093968447 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.090090374 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.098868693 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.066897587 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.067868833 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.068809701 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.066563321 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.079801298 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.08505897 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.091288486 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.103928215 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.067747157 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.083935603 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.087184473 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.081642061 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.085868654 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.06882585 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.068628199 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.112392255 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.086247521 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.093676404 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.067515298 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.069061187 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.085880581 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.083403561 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.076267434 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.068941701 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.0742854 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.0713718 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.067666623 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.069852779 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.085423539 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.074126882 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.074491074 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068907205 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.069101878 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.068507503 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.075255706 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.085780609 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.073814409 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.079935319 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.086942594 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.069482875 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.067905898 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065985571 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.074653315 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.067673517 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.068392116 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.068123857 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.067805662 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.06848779 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.070245004 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.072503824 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.074086079 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.071491228 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.074186975 seconds)
  done (took 6.843308361 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.084183985 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.093855624 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.082620166 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.08271674 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.067281434 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.06822759 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.068156659 seconds)
  done (took 2.319431516 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.06826659 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.075896654 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.079942699 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.080061006 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.089906864 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.077422677 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.068694339 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.100271767 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.067315719 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.077288087 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.083589325 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.081147809 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.071381245 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.080312096 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.068573203 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.079824305 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.068614902 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.075254557 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.075555518 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.081374997 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072462908 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.097794125 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.081306362 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.068614308 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.082224227 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.075839347 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.070425198 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.068788253 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.069114028 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.067946499 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.068128738 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.090371344 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.074551348 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.08050253 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068891972 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.067760214 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.07292015 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068994308 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.072481761 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.077588958 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.071976425 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.068116685 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.068649514 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.068189687 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.069575515 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.073020225 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.069514382 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067927006 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.067802414 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.075777504 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.067379724 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.074695238 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.070304891 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.073522283 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.073064597 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072856049 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075289517 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.068774656 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.075862381 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.074185778 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067951965 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.080413151 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.079999213 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.071893986 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.079298826 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.076765373 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.074509182 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.071785001 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.067786108 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.067159658 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.068328295 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.079551257 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.071245755 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.070125176 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068887265 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.073073401 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.071706352 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.083043576 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.083042239 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.081360377 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.070264425 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.068666295 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.071911942 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.083204794 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072855243 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.068251732 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.068775139 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.067269195 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.072816898 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.068293787 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.07247223 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.068014386 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074663157 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.070671089 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.070241468 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075946752 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.067856417 seconds)
  done (took 8.931926739 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.070971938 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.069831498 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.068930282 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.06905911 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.069796094 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.069139285 seconds)
  done (took 2.227739664 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.090947244 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.068654113 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.080801076 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068651439 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.091148827 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.075028329 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.075388174 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070552059 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.084604273 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.079304348 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.075283852 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.077589923 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.07787262 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.070334071 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.07446205 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.069862186 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.074669171 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071884825 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.078596605 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070827016 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.084728516 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.070565292 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070959439 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.080880939 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.071841406 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.069754746 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069609839 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.079085129 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.078302102 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.069985308 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.070136926 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.071481873 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.076846717 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.069966208 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.074921384 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.076962531 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068484242 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.073831808 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.070741812 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.071400458 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.076919409 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070568845 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070849495 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.074130303 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.070032938 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.077020964 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.073986916 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071889109 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.075056844 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.073910969 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.074069469 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.069182081 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.071392483 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.074075576 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.07726912 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.0699402 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.074142991 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.074993495 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.069796803 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.076898044 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.068798247 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.071338579 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.070044269 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.071481285 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.073603023 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.074102599 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.076872737 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.070816823 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070233464 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.068669488 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.073801158 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.068188969 seconds)
  done (took 7.091688164 seconds)
done (took 29.173621692 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.543425808 seconds)
  done (took 2.296526157 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.616648053 seconds)
  done (took 2.414365776 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.670202034 seconds)
  done (took 10.465286702 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.340730744 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.407500239 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.745120237 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.133592591 seconds)
  done (took 3.457896317 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.739473909 seconds)
  done (took 2.546673408 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.230857011 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.222727908 seconds)
  done (took 2.262881337 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.33652397 seconds)
  done (took 2.133877665 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.151006478 seconds)
  done (took 2.945237431 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.235104889 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.164066796 seconds)
  done (took 2.2041185 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.538015359 seconds)
  done (took 2.33639338 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.30119577 seconds)
  done (took 6.105294084 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.233743246 seconds)
  done (took 2.07374958 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.233318223 seconds)
  done (took 2.038511653 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.122602812 seconds)
  done (took 3.920339156 seconds)
done (took 49.006359452 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.085131691 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.087464689 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.087540605 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.08264643 seconds)
  done (took 2.115130107 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075733454 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.071641549 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.075133013 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.075213904 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.072679523 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.073451843 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.074650158 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.071442661 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.073060365 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.072091072 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.070135806 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.071752128 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.074247123 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.071558603 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.074018824 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.075248429 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.071766232 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.071518098 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.073827538 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.071341303 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.074757061 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.071704852 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.069818233 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.071470361 seconds)
  done (took 3.551156697 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.08012062 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.073764822 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.076742462 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.07245079 seconds)
  done (took 2.114776903 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077587506 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.077825049 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.086897707 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.091520855 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.077540034 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.078193267 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.085489286 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.085677876 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.067496863 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.089955679 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.069536288 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.068545315 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.068020418 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.087522086 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.084760564 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063922078 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.065433099 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.078668435 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.077645546 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.080402706 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.069759963 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.067124645 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.077186045 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.078581764 seconds)
  done (took 3.666865059 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.083866226 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.067154883 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.082740675 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.092113647 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.093370471 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.066813419 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.0805945 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.094263281 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.12997866 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.066911807 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.073403202 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.067041545 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.106390764 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.067233608 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.082485507 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.109716596 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.112976402 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.07101791 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.10017198 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.067202773 seconds)
  done (took 3.536478146 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.07728883 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.071061385 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.071810327 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.067099482 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.078203558 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.074456779 seconds)
  done (took 2.267668985 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069836174 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.069518041 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.071381876 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.073856445 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.06932648 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.068990136 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.068812111 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.067722436 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.067697453 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.068555253 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.068281876 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.068784257 seconds)
  done (took 2.652219689 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.156234155 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070666566 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071922519 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.067711541 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.069640666 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.068709462 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.08286722 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.070607738 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.086177184 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.068622622 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.068720523 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.071029156 seconds)
  done (took 2.772970904 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106480704 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.113006615 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.147615336 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119431619 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118338935 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098111039 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.127854983 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.096387254 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.162145428 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.140123634 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118421753 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094886575 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087815555 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.070990587 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101663425 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122011861 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.139333807 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07443341 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115489491 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.166958852 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134412766 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.137307099 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.151348206 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118943534 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.092954945 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.150864469 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099041487 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104454393 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.126267052 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.129136506 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121344467 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.099339346 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.073330399 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.072552837 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151021185 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.105050164 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122579081 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.094826945 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10643601 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089677732 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109197562 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.071106587 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.087875702 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.115089267 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086869607 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.13371838 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.08983421 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117495286 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082585477 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.139763211 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126599676 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101093114 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.087427716 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106197298 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.29609143 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115112711 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.137226233 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109503026 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084690125 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.120897166 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.104814496 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102728516 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109844381 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081938302 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.180467183 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091118066 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.113729769 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114473541 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.09645186 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.096444211 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.109435213 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.137935028 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12752298 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.128179439 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140516933 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097164957 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125320656 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.102743768 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.131953722 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107120023 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.074854959 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.12334044 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.131427405 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101237269 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103574609 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132236545 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093905334 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079430641 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.101102126 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.121031704 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.0821806 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.114842471 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083038905 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.110860644 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136066215 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09931058 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113782057 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118632181 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079818822 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157421226 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110584466 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074469718 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.119034467 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116156406 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.159271938 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096909294 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.236629278 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.102113006 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10638833 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.149658773 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109685495 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081322993 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111702439 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142660216 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096606548 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.170898208 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09783453 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.143363014 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114379515 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.089309823 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.077357293 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.091659406 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11446345 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109666928 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1143901 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092240727 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.085734437 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089265776 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114051435 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094098899 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082861315 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115938874 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.104244819 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.077406318 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090913557 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.081233797 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14468193 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.08015356 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140976591 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127697688 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.080375397 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108182115 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099338959 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110086871 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.099828822 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119096441 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142383326 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.1178933 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.092093803 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.09610323 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110266072 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.147361217 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.129002518 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093969039 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.078983141 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102290157 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113916897 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.09938448 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.128205685 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098012072 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11099749 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10528382 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144215628 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147232899 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100966198 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.263796195 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109449493 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.125324221 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078743174 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158234013 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106679099 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12011432 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085821907 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143509928 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.116294304 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092045821 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.089191731 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102401148 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.106187288 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108452493 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145648189 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.097890435 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.074458396 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094964042 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.14775566 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078381877 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112505562 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.093398651 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.094916772 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120715228 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.095892536 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083385072 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.07039953 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131159885 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.162141562 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.072040252 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116345093 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.113783544 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10496765 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.123429549 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.071192341 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121288104 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.140657519 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119869453 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143813285 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149921804 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119293308 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120106964 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.116036594 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.107626494 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081054732 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.127372193 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.136986914 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098292401 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094664019 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138610453 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120299029 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.137452478 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.116761311 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.276998698 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.107665877 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109584576 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105013631 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.104859909 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147000098 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122041352 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.126664189 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087405763 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107945674 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119659001 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137744431 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084226826 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144916066 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.085810312 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120611884 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.079359904 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.126346466 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.081406413 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.113552684 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081461408 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101877572 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.071472643 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.076128373 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.143858217 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.114767382 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10871392 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102516261 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.140605912 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.138633659 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.082852041 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109946185 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117599676 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10327201 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118371616 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.110815558 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.091108903 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09712281 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.111134621 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.086721422 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.083822962 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.117269017 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096756974 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129374775 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085878597 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.077305489 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144027318 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10762336 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097745549 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079802537 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110739746 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.123143344 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.094665091 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089608487 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117286283 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106518868 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144097284 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.091867074 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.0988433 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.288227907 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083135515 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.094682131 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.071683641 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.087212325 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.078164398 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.129910135 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078189059 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118643452 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.070528955 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.132223269 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.089150993 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.094914517 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103792323 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113474123 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129333234 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096800256 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.143569485 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092109785 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120139077 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109781837 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096878956 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.090030951 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105772738 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.102594564 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.12438205 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.098013977 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126310173 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147628934 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107112308 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.144778787 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09380551 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123828629 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10867751 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.126640397 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114355944 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150634234 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141670203 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114232884 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113499184 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.077042451 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09633729 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10733518 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.1136325 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.178554048 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129021362 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.074360465 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108531837 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.096368667 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.110568241 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107529025 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084318861 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149384967 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104006328 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.08967564 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114503658 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.250781709 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.106538776 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078712282 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097437539 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.102528757 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096090532 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100311237 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116879102 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12963872 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115622704 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.145274611 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.100919061 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.094164962 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.120638553 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112667114 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113250036 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087587177 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088031878 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140069818 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.120662346 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.130592717 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.102087281 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111901859 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.113772129 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102581216 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127733273 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110661204 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.130064887 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082302606 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.07809932 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.069937426 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.074150233 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.125802209 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110907523 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11403666 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100052461 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.074517536 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.105194697 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107826953 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074048452 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091186588 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096708503 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096527522 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.093868137 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109261932 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.116358362 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.093628498 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105862736 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101465772 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.149632387 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.102114282 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090846633 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146766908 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.153470531 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090374454 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095464622 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.07321254 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080765749 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11519463 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151518224 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.313795909 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.079937684 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088931743 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.087487021 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088866907 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.073289733 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.088712943 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.091348551 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106333197 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101054945 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.114435139 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106478252 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077581378 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.105113885 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101115026 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093823062 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.106465704 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120345411 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.126849988 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.143935689 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112553381 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109329006 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078286723 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.08275225 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07759697 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081666567 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.104446138 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.081014383 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078369413 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.146329139 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.094462906 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107325856 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111812046 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091012057 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077699803 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137100018 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.071468492 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138051001 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.073321116 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084017363 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.08462248 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081123095 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096140867 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142163174 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112169845 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115434069 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10896938 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106629858 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143942797 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.159375655 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082305917 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.146003822 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077442326 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077589689 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078028228 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116155198 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091965396 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116860076 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143758939 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093372231 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105332896 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078996613 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.3075457 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.098400861 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106327505 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089127475 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.081197012 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14554443 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081399286 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.082261837 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09210296 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112869691 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.074257718 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.106275344 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086217332 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081105363 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146174027 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.632082837 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092200583 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.07771679 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097879389 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.144513383 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130126326 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097462358 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110912773 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.120459124 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.101974237 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.09746196 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109944582 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.183875969 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076151496 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09745203 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.106234054 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100491347 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104979943 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.10051075 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.090114012 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.094221333 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.089104369 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081375725 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110444768 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091592021 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098582949 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108539792 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084920164 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.089442171 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132468565 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.106200166 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.084155452 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09062536 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.107263849 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090323057 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102749525 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.071002514 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115507235 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092705456 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120503061 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.096613643 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110062959 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.129783887 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092386517 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141283984 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.10949048 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.124048759 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.251419524 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.081294176 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128237581 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.090365529 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080138686 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147157334 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.097299936 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.095335116 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106883962 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.098315007 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115630512 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119656238 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113674888 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099745822 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081172902 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102701562 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.105019103 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087405984 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080914456 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.076706515 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.078428458 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110089476 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087985574 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.084996283 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116952215 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091143543 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105922928 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.103289111 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.125423317 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086015632 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10334195 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112176974 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094435451 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111841682 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102538108 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.130822022 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.178275363 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128032211 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.131117098 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136743291 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.07948736 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.078362496 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.070820363 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117514213 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.081294566 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.090833663 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082851141 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136717864 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.083805743 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11437798 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.232421672 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.082016263 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096134192 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099021848 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.071476747 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.085079318 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11011888 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.088930117 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082210371 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122247217 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084817481 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.130031684 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111447011 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.262151388 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096643053 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08348117 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115733274 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.106955563 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.13075941 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.096971513 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.077537716 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116185503 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.105163264 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140203321 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.074696336 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0822748 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.131115791 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106008144 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135219991 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081648755 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15218809 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.145865567 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.102694887 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136982451 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073024145 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085196308 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090904907 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.12839624 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08773336 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114141066 seconds)
  done (took 69.391706767 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.151920055 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.145765491 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.083425217 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.105780698 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.189579459 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.199813793 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.127876314 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.115458237 seconds)
  done (took 3.099203568 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.071273003 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.084894329 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.082868245 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.208397118 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.110256699 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.068899945 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.075219404 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.08376043 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.069602217 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.068504677 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.103635852 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.069542832 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.069480056 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.375756296 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.068286969 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.073637074 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.069479988 seconds)
  done (took 3.720504506 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.339741369 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.466514656 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.24071089 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.701027825 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.138827459 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.486640067 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.07829412 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.084156458 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.572334772 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.370954149 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.135398979 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.0899727 seconds)
  done (took 18.682119381 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.078564564 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.080439274 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.080178429 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.076687903 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.076314008 seconds)
  done (took 2.35997779 seconds)
done (took 121.753701301 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.086964639 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.174801625 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.069439819 seconds)
  done (took 2.252717955 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.085334237 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.082823465 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.082621519 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.080099413 seconds)
  done (took 2.310505931 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.077671966 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.078527897 seconds)
  done (took 2.125731755 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.225426156 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.178516524 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.092459963 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.084501226 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.081281165 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.081801407 seconds)
  done (took 2.225148409 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.073883336 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.073047662 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.073907096 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.07391985 seconds)
  done (took 2.260975986 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.070261544 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067947465 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.070011952 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.072539609 seconds)
  done (took 2.249425591 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.087734683 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.089312102 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.118867091 seconds)
  done (took 2.260991819 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.084944918 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.084731288 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.080158938 seconds)
  done (took 2.222998393 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.111142371 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.098755512 seconds)
  done (took 2.178144002 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.082216261 seconds)
  done (took 2.054415098 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.091987604 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.099860291 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.142936648 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.109466306 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.14372227 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.129552386 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.079702151 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.080135116 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.075651623 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.074758958 seconds)
  done (took 2.997162189 seconds)
done (took 27.69228347 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.081091701 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.370029371 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.362209704 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.088895137 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.67351074 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.359036013 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.002318517 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.093006571 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.103756928 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070101105 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087105496 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.650832331 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.99494966 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.327693116 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.979809755 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.326639184 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.653428103 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070510031 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069912369 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070280544 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.986943569 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069788247 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.071178368 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070944746 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.65130423 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.375613387 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.07120018 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.326798103 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069487124 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.074079072 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.36332565 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070933584 seconds)
  done (took 16.576872945 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.071808689 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.124899028 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074068844 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.086026803 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.072281432 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071397101 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.072921096 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.07102994 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.114807191 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.07039633 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08764463 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069998988 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.074153042 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071586211 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.09012049 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070394588 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.072360533 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.073968465 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070420191 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071298326 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088753407 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069952085 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070766506 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070745369 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070673736 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083618742 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071350922 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070021034 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070520766 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.074424607 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074777895 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071689712 seconds)
  done (took 4.459163968 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.1231977 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.128348482 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.075478285 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.111531081 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.120513103 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071913689 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.15303545 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.093609388 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.117521757 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.071044404 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087814385 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.070190913 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.106197267 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071701038 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.090675545 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070637836 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.072921545 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071356353 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070481993 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071359078 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.089120762 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070189967 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.071125313 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071057531 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070905981 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.085687824 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071326429 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070451667 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070373146 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.074560614 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.075724996 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071740469 seconds)
  done (took 4.732175751 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.072363867 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.073673149 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.079993254 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.082867627 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.068641967 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.071030722 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.072192061 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.068885595 seconds)
  done (took 2.580208965 seconds)
done (took 30.344009661 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.082110526 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.070359225 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.073581323 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.090023635 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.076385705 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.07241167 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.067012179 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.076706946 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.07386582 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.073659372 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.075644771 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.06904543 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.072232646 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.066952466 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.073973161 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.068135154 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.074910799 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.072139237 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.072721703 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.074335503 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.070732789 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.073775627 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.076952002 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.072975253 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.072996569 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.072837006 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.077502714 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.074258484 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.068326767 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.071316871 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.070281618 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.083380956 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.074253351 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.074673734 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.068442094 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.068453832 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.072473992 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.070405551 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.074596143 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.077310777 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.070743524 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.077117873 seconds)
  done (took 5.036011823 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.091689237 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.096226204 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.088620703 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.08440314 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.109048807 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.08443429 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.092709679 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.081405359 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.079894671 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.09195162 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.075960436 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.081527251 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.082896901 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.078094865 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.080306462 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.076907611 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.081736646 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.076030984 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.080652925 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.080326724 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.093015689 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.073555962 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.0817828 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.081853599 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.075488981 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.082008099 seconds)
  done (took 4.181766701 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.075805867 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.090960785 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.094861423 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.143578323 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.111559448 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.084876732 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.08453271 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.095936951 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.103065138 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.070296947 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.074772286 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.096682933 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.0991552 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.077387838 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.108913841 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.088560199 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.083036449 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.072085128 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.077344845 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.10537157 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.092649442 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.089179139 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.10286413 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.090600709 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.069199206 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.07938981 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.07750408 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.086235643 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.077844922 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.082104843 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.074738454 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.073752516 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.070884336 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.082934925 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.077262688 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.068015353 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.091991676 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.082754725 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.084481943 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.108503708 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.08009767 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.071751971 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.098331917 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.136011436 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.069785277 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.072773307 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.074345671 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.082376272 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.071902667 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.100269128 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.086944914 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.069443065 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.088788926 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.071884626 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.071165206 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.08686578 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.071498451 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.072031661 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.081652126 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.075977546 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.091151582 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.075245689 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.091741636 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.069837882 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.080936949 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.071394832 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.071474779 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.068501019 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.104131928 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.077233516 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.121619588 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.071093271 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.067867565 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.081638433 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.08094778 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.076782652 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.06956386 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.089844688 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.08188084 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.073791051 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.081029047 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.072340012 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.073058363 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.105352381 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.068877534 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.067634869 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.067967075 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.071962944 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.072894126 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.070438275 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.083238894 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.069172438 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.073065499 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.085133781 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.069511085 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.070382442 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.072453207 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.071044042 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.069134816 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.080645491 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.073649707 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.071579226 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.082293123 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.070871301 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.073031018 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.084536755 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.079412036 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.069540061 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.07103862 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.072330787 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.071721105 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.074304247 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.073034075 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071876567 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.076846121 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.077458743 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.075846903 seconds)
  done (took 11.515871381 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.166859071 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.156185438 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.071062085 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.150718188 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.078561498 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.07457294 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.152617962 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.090665302 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.070776996 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.071555554 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.070205627 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.098800601 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.094466871 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.106113504 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.074634886 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.071354003 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.095927063 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.103869646 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.155036249 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.149394429 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.094168089 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.078167176 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.073072406 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.07189741 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.07198027 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.079178863 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.086458832 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.078559611 seconds)
  done (took 4.778155308 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.079129199 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.085716992 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.074160426 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.094867277 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.088549892 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.070489572 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.072208739 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.071724522 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.087417873 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.07735724 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.070767847 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.075398489 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.073907705 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.07131066 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.071615556 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.077151769 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.077030209 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.069528535 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.07414432 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.075230063 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.08110667 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.097059228 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.074556097 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.070291309 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.073100752 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.070613848 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.077131274 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.080362345 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.070165178 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.100814109 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.067730704 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.075012017 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.084772007 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.071832827 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.070228654 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.071516092 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.070424854 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.070667271 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.070750888 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.068609011 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.06851891 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.075504818 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.068880516 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.076378557 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.084213171 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.07793051 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.072260087 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.076381367 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.073042714 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.067521795 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.074000328 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.073513139 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.0733544 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.078649363 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.074293257 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.072673762 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.071591754 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.099878125 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.076360877 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.069520219 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.069451809 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.069207572 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.072003483 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.078274821 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.086870463 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.072036611 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.068794401 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.070503987 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.075592372 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.085024618 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.069976516 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.076227857 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.067710622 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.070843965 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.073076021 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.07329702 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.071718186 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.06885504 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.070182448 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.070535606 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.070168827 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.070195517 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.069714223 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.073112654 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.068831585 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.068806769 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.071149392 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.07173055 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.077241427 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.069269569 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.073046921 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.071900023 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.069185688 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.072944426 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.076065647 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.073333633 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.090154284 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.079632798 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.070959496 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.068712492 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.084922065 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.07250146 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.069722165 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.076314237 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.07512312 seconds)
  done (took 9.891212717 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.094436967 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.071815833 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.090010666 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.097021685 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.080549201 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.075455164 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.084982747 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.071426035 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.086978726 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.069448925 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.079305813 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.068750648 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.083768281 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.079781427 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.072227635 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.080883805 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.07294588 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.090782538 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.085841487 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.069529938 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.079789444 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.082927294 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.083549545 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.08885229 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.088046306 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.089463894 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.083023522 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.072849019 seconds)
  done (took 4.33001437 seconds)
done (took 41.717455847 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.065800251 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.239692499 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.066825623 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.332976684 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.123807687 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.29269868 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.183518758 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.061400426 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.199101498 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.088489056 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.392260885 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.4206449 seconds)
done (took 70.525721128 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.151649147 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.212370575 seconds)
    (2/2) benchmarking "String"...
    done (took 2.285860496 seconds)
  done (took 6.522291902 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.657892574 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.064394174 seconds)
    (3/3) benchmarking "different"...
    done (took 2.112307794 seconds)
  done (took 8.821351392 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.169169488 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.688407401 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.313812104 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.0637778 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.06493871 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.460450401 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.861007222 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.537231917 seconds)
  done (took 33.979663102 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.222032704 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.267906828 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.787888692 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.825407299 seconds)
  done (took 17.13750775 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.666721421 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.325824376 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.325378696 seconds)
    (4/4) benchmarking "different"...
    done (took 2.316785747 seconds)
  done (took 11.682862847 seconds)
done (took 90.547129619 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.065766122 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.168108961 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.100800493 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.215748495 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.196071587 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.092189595 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.075723707 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.084651519 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.065171955 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.067183425 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.501880604 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.063732447 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.065662664 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.09713091 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.063619304 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.087514219 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.274433053 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.072412774 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.112141625 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.75576265 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.579421582 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.06560555 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.070910194 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.121057086 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.234349753 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.091269247 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.380836584 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.076856145 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.690205685 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.086025108 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.288900055 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.069819499 seconds)
  done (took 213.970503891 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.067786146 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.150792609 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.222329924 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.089597783 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.646421445 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.258562268 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.225121921 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.681047117 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.07268597 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.070101038 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.358649992 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.072407448 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.3796788 seconds)
    (14/36) benchmarking "dot"...
    done (took 3.059929308 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.067385652 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.071431346 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.252976443 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.366442486 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.069103731 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.264069635 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.090702455 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.173093314 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.127389837 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.32239624 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.102154341 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.140538852 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.072714174 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.095741107 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.263659598 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.233306534 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.087753626 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.109559732 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.272948778 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.943167723 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.084656389 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.076781767 seconds)
  done (took 181.63925074 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.249045335 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.081926732 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.137171865 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.21297262 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.831687808 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.808041033 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.071122058 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.070654883 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.071532051 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.078918817 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.074904396 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.143156135 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.900555746 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.08607422 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.074049443 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.077222455 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.76794796 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.073624933 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.071648329 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.071140779 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.135622088 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.447186758 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.213201181 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.075470046 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.086853144 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.215471655 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.085945061 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.074287318 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.210439891 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.076543762 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.153090179 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.213525189 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.087315464 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.158302924 seconds)
    (34/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.072883235 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.083077905 seconds)
    (36/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.075033283 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.575606641 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.073767113 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.076262535 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.078408958 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.138813071 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.075709735 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.160468726 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.166301789 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.076951864 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.088737831 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.270242161 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.755462995 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.077640747 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.076481398 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.076496556 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.076574605 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.073927055 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.857870587 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.081115864 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.100682288 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.691724226 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.078703173 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.079845828 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.08200499 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.077277772 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.078276443 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.084097259 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.113688185 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.903276724 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.099361623 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.466883752 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.897464615 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.075086048 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.40959571 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.135871492 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.078224198 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.158123972 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.075408614 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.077956348 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.075490067 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.079044857 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.173015295 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.165235245 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.077465464 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.215478817 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.081673674 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.07949998 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.607874115 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.729992583 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.079611929 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.092252542 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.13503415 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.079420129 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.077913458 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.08702959 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.173945928 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.079430226 seconds)
    (94/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.076982412 seconds)
    (95/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.075722753 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.17249295 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.078011047 seconds)
    (98/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.640056576 seconds)
    (99/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.296948196 seconds)
    (100/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.151425141 seconds)
    (101/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.321544321 seconds)
    (102/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.312408781 seconds)
    (103/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.081316913 seconds)
    (104/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.078002429 seconds)
    (105/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.079157589 seconds)
    (106/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.078553832 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.095059269 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.081777199 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.079846477 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.0905704 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.078317632 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.080077756 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.080022869 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.080697967 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.079001693 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.082960734 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.094996501 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.077434986 seconds)
  done (took 446.341405167 seconds)
done (took 846.238861848 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.767832596 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.942661545 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.726557948 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.764948054 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.72585869 seconds)
  done (took 15.932671783 seconds)
done (took 17.940339163 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.113611177 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.096216688 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.084116821 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.147249163 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.10203908 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.093041148 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.12595747 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.127874075 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.113109965 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.09204738 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.140599097 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.099020009 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.114605124 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.1166374 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.173153852 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.121400338 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.097331401 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.090383826 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.148845312 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.097443878 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.098731031 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.095434303 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.094730442 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.141824415 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.179077369 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.105446506 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.092984116 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.148285833 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.106818493 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.140587257 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.152508337 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.116649776 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.125678993 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.170298638 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.149878317 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.178522365 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.101919984 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.165377144 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.101860816 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.180052687 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.151255681 seconds)
  done (took 89.100074257 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.093162039 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.227491775 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.306447673 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.12086573 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.092236294 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.302354246 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.150582367 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.214139701 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.227506346 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.311835069 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.305899483 seconds)
  done (took 26.364498202 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.091735624 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.230009917 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.307212275 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.126978896 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.094538108 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.305832104 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.152676849 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.220099396 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.23232223 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.31595852 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.318647099 seconds)
  done (took 26.412250494 seconds)
done (took 143.885961817 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.457452039 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.113902137 seconds)
  done (took 6.578079811 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.087670011 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.105082979 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.236611439 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.090060032 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.090641097 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.093961613 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.094430863 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.089202866 seconds)
  done (took 18.895921824 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.085444388 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.088058358 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.087666872 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.08532864 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.085263467 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.087519029 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.090126618 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.088971619 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.087580459 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.088838132 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.087756321 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.089998472 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.088016871 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.087673993 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.089960394 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.088984072 seconds)
  done (took 35.41769417 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.089523785 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.089705826 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.089627604 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.09047908 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.089422965 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.090167567 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.094473269 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.087461859 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.090375975 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.091363946 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.091168246 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.089909812 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.090820728 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.089353172 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.089548524 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.089250713 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.089834716 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.089725371 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.091237177 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.089146411 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.089556806 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.09148309 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.094415859 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.090311573 seconds)
  done (took 52.178983284 seconds)
done (took 115.08847328 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.34078239 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.998440423 seconds)
  done (took 9.350796133 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.096035147 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.091186974 seconds)
  done (took 6.274333043 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.090796394 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.091306561 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.090663657 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.091089106 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.09295566 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.090401968 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.092727908 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.090730539 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.089648355 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.091466331 seconds)
  done (took 22.925028235 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.091424355 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.090506065 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.093393891 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.090887897 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.091174008 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.0925603 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.091772642 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.091874434 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.089753412 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.091115352 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.091318481 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.093344886 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.093441164 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.091551098 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.090851858 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.093277693 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.093118995 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.091448826 seconds)
  done (took 39.665687883 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.091647817 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.090134242 seconds)
  done (took 6.195987259 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.093299023 seconds)
    (2/7) benchmarking "second"...
    done (took 2.090451469 seconds)
    (3/7) benchmarking "month"...
    done (took 2.093107424 seconds)
    (4/7) benchmarking "year"...
    done (took 2.092851817 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.091032973 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.093558546 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.094231107 seconds)
  done (took 16.662324197 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.092574421 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.245638571 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.302559064 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.709812805 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.093717337 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.095495876 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.954038992 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.096984363 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.095661485 seconds)
  done (took 22.700530689 seconds)
done (took 125.787722853 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.948481244 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.093543934 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.374789433 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.160153394 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.1640869 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.388604031 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.092168364 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.637427907 seconds)
done (took 44.875718727 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.200457929 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.092224889 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.119945057 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.121750323 seconds)
  done (took 23.348822949 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.09304068 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.426503191 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.112159781 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.096073361 seconds)
  done (took 23.756799737 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.46938675 seconds)
    (2/2) benchmarking "read"...
    done (took 2.437808987 seconds)
  done (took 6.927991025 seconds)
done (took 63.253153692 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.094001255 seconds)
    (2/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.093384458 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.093975112 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 2.09367382 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.093697398 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 2.093941356 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.095694508 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.096293348 seconds)
    (9/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.094548026 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.094483421 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 2.094059904 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 2.094251452 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.094508359 seconds)
    (14/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.09320088 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.095469628 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.09367348 seconds)
    (17/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.093398566 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.093144183 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.094908256 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.09597776 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.095945016 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.094863887 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.095109868 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.094569205 seconds)
  done (took 52.282125097 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.096337004 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.095604754 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.0945241 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.096553093 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.097598536 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.094053635 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.095446997 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.098319206 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.096180444 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.096393032 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.096780696 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.096226297 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.096118824 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.095402189 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.096972703 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.096936509 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.098781421 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.097214355 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.09679123 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.097769969 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.097047576 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.096868438 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.096728903 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.098089281 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.097442609 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.096467554 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.097756422 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.097738342 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.097866332 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.098024497 seconds)
  done (took 64.92237858 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.096938299 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.097209533 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.098540421 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.097732122 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.097352802 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.099528398 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.099122193 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.097237654 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.097408205 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.098439008 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.097772675 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.098152221 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.099832839 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.098543293 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.10018482 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.098846685 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.097708553 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.099659677 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.098029572 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.099166955 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.096912569 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.098678364 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.0988281 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.098564347 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.099570607 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.098353295 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.098718931 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.101250162 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.100989912 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.098970199 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.101138399 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.099059307 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.099257713 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.100953619 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.099176506 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.09944671 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.100739621 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.100067283 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.100470931 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.100134257 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.100351498 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.099861744 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.101108607 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.099378367 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.097861331 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.099110462 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.098024418 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.097598026 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.099209436 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.099202666 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.09885266 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.099635002 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.100029309 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.099792069 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.098590543 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.09925565 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.101852682 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.098173361 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.098375901 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.100470447 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.09971695 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.095624031 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.099492314 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.099367352 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.098707109 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.099535945 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.100379538 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.099499242 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.100802119 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.103316943 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.098478245 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.102307225 seconds)
  done (took 153.164116075 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.099975017 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.100821663 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.100667526 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.102112072 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.099316072 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.101214274 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.100701419 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.10108359 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.100658179 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.10141647 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.09993173 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.100416529 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.098807674 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.101299463 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.102309785 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.101256929 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.100406681 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.100955998 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.101770698 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.101372225 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.102739443 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.10289131 seconds)
  done (took 48.244626189 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.10128338 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.10147924 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.101331589 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.104474676 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.102117928 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.101025805 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.101844053 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.102080202 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.1009454 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.101146769 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.101480588 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.104233284 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.103157965 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.103651571 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.103268001 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.101817127 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.101662437 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.10251294 seconds)
  done (took 39.861821652 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.101515122 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.102845448 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.103182523 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.10287773 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.103430555 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.103777405 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.103061865 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.103214042 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.102248729 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.104351359 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.103996229 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.105830948 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.105056569 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.104049359 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.103050725 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.104874131 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.103677499 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.103957885 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.103675057 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.1026031 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.104821317 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.104161494 seconds)
  done (took 48.30466293 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.104754828 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.105850515 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.106608164 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.104591325 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.106153573 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.106247642 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.107342156 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.104162832 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.104718163 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.105891111 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.105119186 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.106433893 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.106230326 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.106279275 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.108017332 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.106652267 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.106647361 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.104889033 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.105365914 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.105458165 seconds)
  done (took 44.142275558 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.10772656 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.106650329 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.107862833 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.105443869 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.107477515 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.106850633 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.108350488 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.108346405 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.107439775 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.107140792 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.104629956 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.108542347 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.105412851 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.106410249 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.107309225 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.106407392 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.102766278 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.106654913 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.106327567 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.107448867 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.108477034 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.106938369 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.107704469 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.107893952 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.107183948 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.107104185 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.10823286 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.107417399 seconds)
  done (took 61.025663968 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.106156894 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.110136474 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.105541908 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.108441871 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.108988601 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.109129341 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.108428794 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.108418187 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.105935589 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.108281523 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.106969508 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.108590458 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.110638537 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.107555399 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.108431232 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.110068294 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.109258559 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.110702994 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.108384508 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.108974732 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.1082206 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.109616797 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.110172459 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.106499574 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.108624486 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.107796661 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.1117055 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.111345831 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.109670564 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.109239361 seconds)
  done (took 65.291380667 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.128842817 seconds)
    (2/2) benchmarking "in"...
    done (took 2.12843946 seconds)
  done (took 6.286120892 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.109619332 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.109041854 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.108191852 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.10959308 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.109209507 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.110946673 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.109878176 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.11015205 seconds)
  done (took 18.906773153 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.109466043 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.116143431 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.112139695 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.108667328 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.113561555 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.118981928 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.113542403 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.112440128 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.111011922 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.113981318 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.115439953 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.11451487 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.12040794 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.116042443 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.109527156 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.112565832 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.114161835 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.115115795 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.113845967 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.109934783 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.113291659 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.112301412 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.111375233 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.111403321 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.112953974 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.112978074 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.125200102 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.111524015 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.110453142 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.113210161 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.119496287 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.113934189 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.114797488 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.112614092 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.111700255 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.113151087 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.120545208 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.112955913 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.112250839 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.114047606 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.116808213 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.114983401 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.117663084 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.123119172 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.112133068 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.112314253 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.111758454 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.111484051 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.113211159 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.117252389 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.123029734 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.115301375 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.11405172 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.113731619 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.113658909 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.112937479 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.114521029 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.115526062 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.121252839 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.11853037 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.117338028 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.133862949 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.122010647 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.113983603 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.113328018 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.12220898 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.141607123 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.116166495 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.115460028 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.114741453 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.121792675 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.115456077 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.115226847 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.113991481 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.124531193 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.124853934 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.116172515 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.114121169 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.114950606 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.115672983 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.115304454 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.116841096 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.114475337 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.112932296 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.124256099 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.1453445 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.116846415 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.114400863 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.119004205 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.117907269 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.117883172 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.117060339 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.115941023 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.115893434 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.115556445 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.119414778 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.114825575 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.114676292 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.112871291 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.121478742 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.118601277 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.114632629 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.119388537 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.121633314 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.117177358 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.114636114 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.116690898 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.11308707 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.122725194 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.114305454 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.11699128 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.116987644 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.113706449 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.12021358 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.113616332 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.118672301 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.125518431 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.122720721 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.118751769 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.122391169 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.118861516 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.118125973 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.125830291 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.144440327 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.116696484 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.119480207 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.1249772 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.132723536 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.124124329 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.116544501 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.117117661 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.119215866 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.117353934 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.118841944 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.119584814 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.117075672 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.115896146 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.117981053 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.11747792 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.116967441 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.120536522 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.118110657 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.121642636 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.117194009 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.123703046 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.118019831 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.118507879 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.12241799 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.121156142 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.116100802 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.116478309 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.119171461 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.118074472 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.117161831 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.117330145 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.118675569 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.116271452 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.118930864 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.117785331 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.11968342 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.118873344 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.121209135 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.126337682 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.119196089 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.122064764 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.118138289 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.118222842 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.121555694 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.119143823 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.11947328 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.122986524 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.12020226 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.122184019 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.121843796 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.121543765 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.11889584 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.118981397 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.121567149 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.126861472 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.13374076 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.122694688 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.13157536 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.123168436 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.128311969 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.118426554 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.125134378 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.124485834 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.123997732 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.120083816 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.11954589 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.122153032 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.124137932 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.141507544 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.133444502 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.122287445 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.123420883 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.129319962 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.123175812 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.128273296 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.1203812 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.123593335 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.124296691 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.121503238 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.122922794 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.120988157 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.125334458 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.121906109 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.121481551 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.125922188 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.124040594 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.120564968 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.123202403 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.122470664 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.129055858 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.123099103 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.120508069 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.121236846 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.123034038 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.13105337 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.127429819 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.123398886 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.124518733 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.127176835 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.123750451 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.123741386 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.124126516 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.129812221 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.124736091 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.124298184 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.13150575 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.126309644 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.126498365 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.122837685 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.123155369 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.127132661 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.125745625 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.129595423 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.133736796 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.124523537 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.126607306 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.130292353 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.123876635 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.125954551 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.124501074 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.126353135 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.124604385 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.126921881 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.126268 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.124893867 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.131219186 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.12475236 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.126125678 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.125070735 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.129892813 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.125403301 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.127268324 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.127239366 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.129478085 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.133653715 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.131650933 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.127474126 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.130568722 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.129178825 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.127228889 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.131035873 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.127144845 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.137999887 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.138221298 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.12762223 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.12850104 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.12746312 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.129691148 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.129126342 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.126851246 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.131670057 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.129365985 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.126702628 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.128661868 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.126102152 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.126964606 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.130043466 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.127152474 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.129985172 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.12744135 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.129845123 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.130730783 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.127048611 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.1264098 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.125807471 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.127094546 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.131388281 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.124300517 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.127785949 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.129121698 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.136256564 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.126673565 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.127966577 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.133617599 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.129594475 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.129803858 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.132220106 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.126348066 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.129063372 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.130585935 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.128384997 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.127576925 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.128550464 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.132305306 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.140847017 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.133028642 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.138118576 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.130214405 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.141205458 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.128466324 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.130639228 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.128504684 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.133809396 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.139078973 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.129487978 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.130185118 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.136550764 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.129760785 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.131685958 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.135575554 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.130927183 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.1315615 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.127272618 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.12800489 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.136884877 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.130562742 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.132374555 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.131308194 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.128621886 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.133019469 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.136191153 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.130485844 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.134037814 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.131543301 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.130138974 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.130455992 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.132626773 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.132349706 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.130087192 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.131093257 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.130708546 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.138898054 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.12670255 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.134096402 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.137766548 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.132502183 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.137907164 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.128854247 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.131426981 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.132376002 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.129338246 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.133447716 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.133114703 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.131406909 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.131943905 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.12929338 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.133132208 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.140511025 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.13609371 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.133574695 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.132631536 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.130509737 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.131612261 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.144529338 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.161047488 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.13223375 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.135222032 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.137298396 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.135488086 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.133138019 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.139115277 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.137165117 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.142556345 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.134221003 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.134397081 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.137024393 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.145778827 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.130983099 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.132190959 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.133709268 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.133483399 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.136285408 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.132113819 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.13513652 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.134688852 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.138115861 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.14838975 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.136108552 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.136341899 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.133603033 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.13248437 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.135226702 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.132972707 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.136776083 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.133555502 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.135148648 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.133003688 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.139075681 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.142078156 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.132526596 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.141470595 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.144809648 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.139438642 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.136430766 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.138540063 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.135504658 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.138170022 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.136806993 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.137546855 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.140621116 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.1347953 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.136873899 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.137445386 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.146791102 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.137514462 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.137195357 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.134001693 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.140468254 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.134790238 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.135903447 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.140191322 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.143933407 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.138981684 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.1512795 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.148687059 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.134241453 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.138732856 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.149792495 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.147828202 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.140108328 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.137178701 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.136209391 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.137080389 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.138278356 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.140086835 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.139198257 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.140238428 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.144703632 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.140438642 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.140438844 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.135303556 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.134049484 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.137614389 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.141793735 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.141775386 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.14089998 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.140987297 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.1392953 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.13762273 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.141249691 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.142753351 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.137726417 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.137801187 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.141219838 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.141908783 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.144477769 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.139420014 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.141755683 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.142016314 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.141071369 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.137336674 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.138732936 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.140511818 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.139444215 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.143912491 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.151687857 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.141578591 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.142205512 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.139480236 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.147387895 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.144324194 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.141512411 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.142066628 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.13953711 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.147954981 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.143693471 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.140628309 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.14112791 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.140040765 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.145697573 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.142212104 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.141809265 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.139782495 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.140523498 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.142275976 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.144121742 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.151304054 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.146041071 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.145703543 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.146921946 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.145632475 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.14406772 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.14480519 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.139958716 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.141508129 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.139892783 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.144226959 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.14214197 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.143189974 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.143466808 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.142854393 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.14362535 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.144976455 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.140672032 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.141696015 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.147405211 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.153160325 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.150560118 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.139173073 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.144536266 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.144173533 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.146592484 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.157300553 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.140738886 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.141506028 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.143180184 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.144317887 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.145953341 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.153197279 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.153471501 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.146019165 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.145827512 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.148000903 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.161762137 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.143736346 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.154760796 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.176605871 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.144715279 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.143355049 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.144062243 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.145531295 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.143801376 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.14681833 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.144875626 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.1507409 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.144293821 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.144693894 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.152437646 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.144655294 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.144074983 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.145134787 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.144053801 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.14868656 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.14558909 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.152850476 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.143868834 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.147748273 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.144839236 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.146220292 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.144023214 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.146882062 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.14239665 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.148237009 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.142193127 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.148031344 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.152722158 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.145327299 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.148475322 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.159293207 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.159274602 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.14474923 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.145256771 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.146584195 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.150870357 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.149479215 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.144706606 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.15112943 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.151366931 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.148348047 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.155813542 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.146167555 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.144906752 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.148989057 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.145065837 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.148385085 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.155379241 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.159117319 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.145672446 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.147659158 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.155538084 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.146899072 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.153267242 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.15344725 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.149324645 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.150057069 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.150109905 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.145919914 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.147969632 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.147132627 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.156269656 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.157282884 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.148852229 seconds)
  done (took 1272.142622003 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.143418632 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.14769126 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.148304074 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.149119795 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.14692039 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.147771246 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.145778381 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.147688818 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.148437522 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.149604865 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.147147279 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.149591086 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.147247976 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.150334086 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.151562676 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.152574658 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.150118868 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.149968384 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.150734445 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.150680065 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.15054271 seconds)
  done (took 47.195037356 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.151372753 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.14485836 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.146475363 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.149771807 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.148577653 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.149323406 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.15147659 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.150167118 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.149611833 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.150051531 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.150564031 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.148429036 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.15136122 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.148386739 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.150186503 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.150909984 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.148885112 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.148690573 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.147098704 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.15069302 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.153677639 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.149715403 seconds)
  done (took 49.3582413 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.151983186 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.150648691 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.151607824 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.150759647 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.15134201 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.151903652 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.152273019 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.153616887 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.154221949 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.152170876 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.159870804 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.159597628 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.149527444 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.154837594 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.14957782 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.152547937 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.296170848 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.154797259 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.152873548 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.150545798 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.153472087 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.160886974 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.153960881 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.152376289 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.154788421 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.151171933 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.152601988 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.151109166 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.152656826 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.155835985 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.15919928 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.152985983 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.152616242 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.155898681 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.15347038 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.155209975 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.159158073 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.157390943 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.15407476 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.152873083 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.162911505 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.179251038 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.15212198 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.151904277 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.160797431 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.15052738 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.152713543 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.155641964 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.163596959 seconds)
  done (took 107.794729309 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.151167968 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.154441072 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.152118168 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.152719286 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.151875345 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.153428216 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.650742977 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.155801091 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.156750563 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.152715727 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.15266665 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.152920226 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.156021141 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.154738047 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.15578586 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.152376687 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.156124293 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.152389966 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.152775466 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.154081124 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.152855699 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.154568334 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.149709756 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.153201839 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.153213076 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.15338837 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.150016042 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.154338368 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.151199683 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.150838348 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.156911222 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.152172717 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.151607658 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.151638769 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.151620479 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.154513622 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.152708034 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.150497148 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.152405101 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.150297488 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.150765149 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.149579665 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.15206722 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.151130715 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.151027757 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.15164246 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.150834483 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.156870144 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.152098207 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.151525616 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.153457711 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.152588164 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.155688458 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.152959001 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.151357617 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.149695134 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.152315189 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.153849041 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.152774133 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.154291962 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.151898116 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.151733816 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.15383076 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.150560695 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.151759097 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.151960908 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.152796158 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.152929774 seconds)
  done (took 148.959174513 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.155194922 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.151954681 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.152046973 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.151721691 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.152134494 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.153466718 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.153375323 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.156308456 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.151063544 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.160252346 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.154874037 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.15433797 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.153935005 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.154358635 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.155551597 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.154846004 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.157678241 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.158214749 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.155253498 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.153696356 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.151754678 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.155623696 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.15584488 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.154796769 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.154438275 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.155435432 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.155728056 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.152638285 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.154348991 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.159068639 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.156138288 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.158482305 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.155134023 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.156671523 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.156391297 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.157951345 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.157823162 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.15752627 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.158050871 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.158276184 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.158270804 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.156199776 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.158656177 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.155335792 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.155208219 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.157604007 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.157718398 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.157702444 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.155694951 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.159200137 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.158743234 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.157129289 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.159365863 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.157066235 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.159859311 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.158867053 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.159756614 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.156013216 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.159542952 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.156076839 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.156391176 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.160169174 seconds)
  done (took 135.759384471 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.15626147 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.158745373 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.159077913 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.157156479 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.159920719 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.159623662 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.158086999 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.159411227 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.158103813 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.15614082 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.157083529 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.157002807 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.160140242 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.161137674 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.159590528 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.158650626 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.160345841 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.160023404 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.160906546 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.162536703 seconds)
  done (took 45.256943912 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.159230189 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.157825451 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.159189886 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.160471539 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.158292959 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.160444279 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.157339106 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.159894596 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.158117116 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.160386216 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.159349816 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.157979799 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.162048155 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.160321213 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.157964327 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.158704703 seconds)
  done (took 36.629055548 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.160333493 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.157639847 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.16257098 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.162243088 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.159869274 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.159281874 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.161058717 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.163201256 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.160539284 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.159350798 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.164419303 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.160471989 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.162404947 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.164975295 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.162428147 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.162737665 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.163514305 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.160935559 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.161990458 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.166717402 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.160339635 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.164894076 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.159423061 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.158898549 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.161279139 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.162301985 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.15974199 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.163187772 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.160695477 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.16158266 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.162679081 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.163075346 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.161294684 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.164457475 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.165610743 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.166480435 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.162315817 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.160927646 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.161148152 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.161451781 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.164719167 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.165104485 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.161857492 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.16300791 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.165044939 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.166209458 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.162665836 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.1649646 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.162337586 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.164379084 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.165709208 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.164169338 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.165140687 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.165314252 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.165853221 seconds)
  done (took 121.027505199 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.164655079 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.163848094 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.167109133 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.162900568 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.167577342 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.164227801 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.166225122 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.16459232 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.16676714 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.16488786 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.164425707 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.165210801 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.16610183 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.165570534 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.166489242 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.168144953 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.165077597 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.1663238 seconds)
  done (took 41.062435905 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.165708958 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.16548548 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.167092359 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.166167323 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.168284898 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.168756283 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.167655983 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.164762981 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.16973185 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.168358712 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.165020168 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.169074283 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.168973554 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.166717133 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.17101099 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.167836148 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.166429666 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.167335571 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.169623362 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.168581691 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.16862594 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.169120761 seconds)
  done (took 49.776366971 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.165682261 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.167621862 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.185738686 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.195375015 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.190517839 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.213465034 seconds)
  done (took 15.206479036 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.16683875 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.168656019 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.169588555 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.165245469 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.170645327 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.170432019 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.166419163 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.166796161 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.167968262 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.166027963 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.166836236 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.16511011 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.168153838 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.168265646 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.166594284 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.169600671 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.167762595 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.168033866 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.166087678 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.171351482 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.168216234 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.167302623 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.168881941 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.167866958 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.168689255 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.170371812 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.168373502 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.166599187 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.167347914 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.168384076 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.171930691 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.171398049 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.16942158 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.168619942 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.169169746 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.166574096 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.16972307 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.172119347 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.169823577 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.167235196 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.16983496 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.171039658 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.172173985 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.172503468 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.168950106 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.17236559 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.168246954 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.169747077 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.170442583 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.170838452 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.172078928 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.170277455 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.169235414 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.172305618 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.171958514 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.171110288 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.171759495 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.16938681 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.173306962 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.17239975 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.17094934 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.17244423 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.171159969 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.169313352 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.171554994 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.170019077 seconds)
  done (took 145.269395829 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.170918769 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.172251614 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.168852369 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.171844154 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.172375353 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.165920569 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.170479749 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.17091846 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.172414523 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.16913337 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.17035127 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.169070828 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.172377198 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.170023163 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.169373214 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.171068531 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.172097966 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.170531036 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.172165276 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.172706213 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.171767972 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.173503475 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.175356287 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.171695311 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.172540739 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.170839297 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.17259118 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.171518229 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.171440362 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.172926922 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.171271646 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.168900519 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.169748702 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.170960578 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.174066752 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.172761319 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.173078342 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.172377959 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.172639518 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.172013892 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.174127321 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.17190221 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.172664555 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.172399552 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.174735592 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.172299958 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.171572181 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.172141561 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.17576277 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.17298407 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.174986835 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.168657245 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.176310154 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.173173817 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.172847728 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.173433267 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.174456425 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.175322763 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.171202622 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.17256661 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.174693505 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.173018112 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.171793467 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.170905502 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.173940692 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.175580266 seconds)
  done (took 145.457719879 seconds)
done (took 2965.352017305 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.209987512 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.194934327 seconds)
  done (took 16.499774144 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.339512005 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.238309568 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.363493639 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.291635316 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.175530461 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.202337325 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.177533967 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.177220809 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.27059687 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.178639079 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.199582996 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.178738427 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.179550632 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.17657909 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.175885615 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.177825788 seconds)
  done (took 57.606819408 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.180341826 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.17977306 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.179836031 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.177578711 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.189117764 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.254666855 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.205449281 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.182416142 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.193162902 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.210683494 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.195820629 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.185182805 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.184888457 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.182957469 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.263776619 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.226218246 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.236586811 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.253509229 seconds)
  done (took 41.775482998 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.261042033 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.202851397 seconds)
  done (took 11.570802457 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.208219098 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.193290386 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.181805281 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.198671681 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.194616321 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.201471687 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.210548132 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.204934456 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.18762172 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.201958133 seconds)
  done (took 74.114080798 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.18386341 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.182346406 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.484940932 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.190398852 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.182232251 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.203800892 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.178814026 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.211375468 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.182289775 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.180339282 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.188341182 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.490404557 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.193738641 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.178119599 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.537785801 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.193430662 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.185578515 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.213074606 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.214450623 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.185961479 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.185891491 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.184608856 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.34156584 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.893046306 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.180788166 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.183051146 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.189496502 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.178002959 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.179598012 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.180636576 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.184539293 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.17934266 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.185339376 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.183633108 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.187880184 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.182885023 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.671674104 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.201776259 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.186365522 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.260001665 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.226367821 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.190839322 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.993723481 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.183473929 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.179710318 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.184449793 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.885767098 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.245218187 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.181249183 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.345428744 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.543093122 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.196206486 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.345924196 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.337965737 seconds)
  done (took 150.023290195 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.181660932 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.416148015 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.335199293 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.180189686 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.439918628 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.390605132 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.182170191 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.230858908 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.185901398 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.384430311 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.437935915 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.285603658 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.185430383 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.182835988 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.184886976 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.179150717 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.327220674 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.247914703 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.182378834 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.182179943 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.2068657 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.387202169 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.309563736 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.185679409 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.209429969 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.39447147 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.307625254 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.289214332 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 5.141498397 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.18415303 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.247128125 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.185935567 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.18499691 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.182276016 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.340843941 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.278194007 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.266249807 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.185987614 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.186050336 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.186898863 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.861713695 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.387221249 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.281050733 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.308678297 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.433833035 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.400140445 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.873130705 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.185217769 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.825495378 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.350556107 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.391464715 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.395721939 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.302347384 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.188112392 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.748078881 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.183021048 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.179358378 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.404257582 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.406164707 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.282620375 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.181180148 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.185740794 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.182030051 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.420655899 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.187111238 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.272320772 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.181743508 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.177712273 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.274529595 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.284742275 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.409813573 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.402404959 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.213527217 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.509381251 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.712902042 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.388735504 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.250206468 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.404113661 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.18566221 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.182256819 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.260492619 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.031180158 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.434635622 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.430751554 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.380614467 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.213840567 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.847647987 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.185986976 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.372686876 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.374901814 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.420293463 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.431019376 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.420385779 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.707965777 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.187452534 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.181863275 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.59315606 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.303023781 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.186823236 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.534050551 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.419493056 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.718819735 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.21051314 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.470367396 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.311435091 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.188124377 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.836610289 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.18806947 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.396166119 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.22723816 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.187201543 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.186827724 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.373524216 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.110689503 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.183063335 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.919439767 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.246810756 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.192735261 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.392529318 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.194088633 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.432850123 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.193433151 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.421026611 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.837526929 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.215746676 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.419513039 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.431612344 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.832030034 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.477045848 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.428118337 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.30431292 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.408519376 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.970889634 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.189858388 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.448309698 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.188336253 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.18318888 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.361487421 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.188266052 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.329250039 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.187690581 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.459558176 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.209437813 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.421764828 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.195839144 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.430008133 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.225938698 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.23760132 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.194446147 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.31764448 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.193257229 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.028190718 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.341655238 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.195048392 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.19250548 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.979934701 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.191984154 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.344667322 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.415750945 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.214504947 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.260940908 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.753608207 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.191419462 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.275318638 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.211427637 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.465872023 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.193251868 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.443184405 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.181197105 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.679678459 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.19004174 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.426185331 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.381469714 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.192485951 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.194469897 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 3.030882595 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.189523809 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.189735454 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.352007238 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.653083703 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.11627928 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.389835451 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.194944224 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.318149207 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.198018252 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.524428888 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.538006619 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.194511437 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.191676298 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.187559692 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.193116443 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.190250581 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.454668905 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.220039079 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.62473091 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.331916585 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.448989436 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.499077269 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.388351769 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.23606479 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.195428548 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.419328524 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.199793602 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.256630212 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.196875075 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.210929047 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.430967469 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.202956756 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.401722935 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.427614566 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.085592855 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.242330019 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.196878537 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.187544733 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.17409351 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.339670653 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.28546007 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.198603157 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.195759538 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.305101762 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.315003028 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.378024104 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 7.031834935 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.336299607 seconds)
  done (took 973.488232905 seconds)
done (took 1327.174022881 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.200914544 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.200551062 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.196555597 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.200612011 seconds)
  done (took 30.911678735 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.197285778 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.194536309 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.195899981 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.198601717 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.198974468 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.198814256 seconds)
  done (took 15.297255528 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.193354265 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.195905476 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.197527993 seconds)
  done (took 23.701067816 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.637988711 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.608778096 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.267319034 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.344851085 seconds)
  done (took 11.975824373 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.206986145 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.198309813 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.200049966 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.201470521 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.20129802 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.197015229 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.19409565 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.20028929 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.199900907 seconds)
  done (took 21.919806376 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.338086582 seconds)
done (took 110.265311418 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.605295227 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.291853601 seconds)
    (3/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.202229189 seconds)
    (4/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.340464322 seconds)
    (5/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.518001876 seconds)
    (6/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.280059306 seconds)
    (7/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.451575339 seconds)
    (8/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.212578921 seconds)
    (9/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.992181704 seconds)
    (10/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.952020741 seconds)
    (11/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.402464265 seconds)
    (12/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.330288954 seconds)
    (13/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.471890163 seconds)
    (14/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.488606032 seconds)
    (15/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.53053578 seconds)
    (16/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.203549257 seconds)
    (17/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.680902756 seconds)
    (18/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.104316479 seconds)
    (19/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.228089978 seconds)
    (20/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.288622398 seconds)
    (21/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.104224534 seconds)
    (22/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.598842706 seconds)
    (23/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.160266304 seconds)
    (24/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.299513266 seconds)
    (25/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 4.105269626 seconds)
    (26/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.214772977 seconds)
    (27/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.198291091 seconds)
    (28/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.270208661 seconds)
    (29/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.314634747 seconds)
    (30/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.349714482 seconds)
    (31/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.470958884 seconds)
    (32/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.300809115 seconds)
    (33/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.894616785 seconds)
    (34/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.227591113 seconds)
    (35/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.222287284 seconds)
    (36/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.208461934 seconds)
    (37/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.48701866 seconds)
    (38/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.204074598 seconds)
    (39/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.266312024 seconds)
    (40/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.295224752 seconds)
    (41/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.975826094 seconds)
    (42/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.057357834 seconds)
    (43/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.396344724 seconds)
    (44/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.334584496 seconds)
    (45/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.279995685 seconds)
    (46/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.42948587 seconds)
    (47/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.64820941 seconds)
    (48/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.261835983 seconds)
    (49/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.514967837 seconds)
    (50/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.49996734 seconds)
    (51/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.104605116 seconds)
    (52/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.544614338 seconds)
    (53/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.026857657 seconds)
    (54/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.274681161 seconds)
    (55/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.199564633 seconds)
    (56/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.354883644 seconds)
    (57/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.209946898 seconds)
    (58/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.283487077 seconds)
    (59/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.406536656 seconds)
    (60/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.886157173 seconds)
    (61/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.631987766 seconds)
    (62/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.4618283 seconds)
    (63/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.466176395 seconds)
    (64/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.351377854 seconds)
    (65/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.305644677 seconds)
    (66/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.269776283 seconds)
    (67/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.586861911 seconds)
    (68/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.53909325 seconds)
    (69/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.216442049 seconds)
    (70/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.278507045 seconds)
    (71/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.44087515 seconds)
    (72/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.336905934 seconds)
    (73/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.2064178 seconds)
    (74/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.097820684 seconds)
    (75/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.374233444 seconds)
    (76/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.214928086 seconds)
    (77/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.211424824 seconds)
    (78/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.910140959 seconds)
    (79/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.208174799 seconds)
    (80/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.334925013 seconds)
    (81/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.348448325 seconds)
    (82/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.314180456 seconds)
    (83/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.519659974 seconds)
    (84/341) benchmarking ("sort", Float32, false)...
    done (took 5.897261064 seconds)
    (85/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.220592083 seconds)
    (86/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.19696944 seconds)
    (87/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.403977072 seconds)
    (88/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.221003612 seconds)
    (89/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.200226789 seconds)
    (90/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.446023186 seconds)
    (91/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.219367071 seconds)
    (92/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.434986645 seconds)
    (93/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.202142581 seconds)
    (94/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.528715751 seconds)
    (95/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.203041521 seconds)
    (96/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.294426604 seconds)
    (97/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.607483923 seconds)
    (98/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.154970469 seconds)
    (99/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.360307631 seconds)
    (100/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.232813482 seconds)
    (101/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.595672035 seconds)
    (102/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.390251755 seconds)
    (103/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.654477471 seconds)
    (104/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.745599897 seconds)
    (105/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.20804903 seconds)
    (106/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.262396464 seconds)
    (107/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.588312114 seconds)
    (108/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.211484587 seconds)
    (109/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.436852076 seconds)
    (110/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.917410466 seconds)
    (111/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.342101395 seconds)
    (112/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.199840167 seconds)
    (113/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.302811606 seconds)
    (114/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.493350065 seconds)
    (115/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.213657721 seconds)
    (116/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.120102229 seconds)
    (117/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.356337349 seconds)
    (118/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.52270596 seconds)
    (119/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.321049899 seconds)
    (120/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.998852202 seconds)
    (121/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.403951089 seconds)
    (122/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.285321615 seconds)
    (123/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.324092655 seconds)
    (124/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.476253204 seconds)
    (125/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.543954242 seconds)
    (126/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.23252679 seconds)
    (127/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.306819423 seconds)
    (128/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.331825196 seconds)
    (129/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.517979372 seconds)
    (130/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.488780305 seconds)
    (131/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.631605606 seconds)
    (132/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.282024796 seconds)
    (133/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.369536989 seconds)
    (134/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.297300074 seconds)
    (135/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.203968567 seconds)
    (136/341) benchmarking ("sort", Int8, false)...
    done (took 5.216533987 seconds)
    (137/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.220736965 seconds)
    (138/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.188442245 seconds)
    (139/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.342035324 seconds)
    (140/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.370123695 seconds)
    (141/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.209005492 seconds)
    (142/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.311026212 seconds)
    (143/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.205135885 seconds)
    (144/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.449975036 seconds)
    (145/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.613354458 seconds)
    (146/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.177484158 seconds)
    (147/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.396656362 seconds)
    (148/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.618045827 seconds)
    (149/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.308906895 seconds)
    (150/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.38570266 seconds)
    (151/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 3.012582072 seconds)
    (152/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.234439759 seconds)
    (153/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.43366493 seconds)
    (154/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.21055731 seconds)
    (155/341) benchmarking ("sort", Bool, false)...
    done (took 2.419515878 seconds)
    (156/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.289453765 seconds)
    (157/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.512416811 seconds)
    (158/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.224184836 seconds)
    (159/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.389056195 seconds)
    (160/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.32298461 seconds)
    (161/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.212075094 seconds)
    (162/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.359506157 seconds)
    (163/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.593935997 seconds)
    (164/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.298296775 seconds)
    (165/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.209991623 seconds)
    (166/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.268348274 seconds)
    (167/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.291918756 seconds)
    (168/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.217689298 seconds)
    (169/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.494472162 seconds)
    (170/341) benchmarking ("sort", Int64, false)...
    done (took 5.862788672 seconds)
    (171/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.121023008 seconds)
    (172/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.251235148 seconds)
    (173/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.212658363 seconds)
    (174/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.282662887 seconds)
    (175/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.094572467 seconds)
    (176/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.327436151 seconds)
    (177/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.292778495 seconds)
    (178/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.327007066 seconds)
    (179/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.31844874 seconds)
    (180/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.813698133 seconds)
    (181/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.538231891 seconds)
    (182/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.356565238 seconds)
    (183/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.713443373 seconds)
    (184/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.469856638 seconds)
    (185/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.210947827 seconds)
    (186/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.661113444 seconds)
    (187/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.22560293 seconds)
    (188/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.294767738 seconds)
    (189/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.563273903 seconds)
    (190/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.114942032 seconds)
    (191/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.495591389 seconds)
    (192/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.368209638 seconds)
    (193/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.341567803 seconds)
    (194/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.629782927 seconds)
    (195/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.608052045 seconds)
    (196/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.271607063 seconds)
    (197/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.20592975 seconds)
    (198/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 9.729518538 seconds)
    (199/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.646191783 seconds)
    (200/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.496545907 seconds)
    (201/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.332802393 seconds)
    (202/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.613206753 seconds)
    (203/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.626463358 seconds)
    (204/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.301070591 seconds)
    (205/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.251546947 seconds)
    (206/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.224342501 seconds)
    (207/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.265946206 seconds)
    (208/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.211634543 seconds)
    (209/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.614000671 seconds)
    (210/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.215797833 seconds)
    (211/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 3.85234191 seconds)
    (212/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.212401123 seconds)
    (213/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.04129903 seconds)
    (214/341) benchmarking ("sort", BigInt, false)...
    done (took 7.223958102 seconds)
    (215/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.140565677 seconds)
    (216/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.435442444 seconds)
    (217/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 9.033627725 seconds)
    (218/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.560093227 seconds)
    (219/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.171684064 seconds)
    (220/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.615626419 seconds)
    (221/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.9272394 seconds)
    (222/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.532580904 seconds)
    (223/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.226527007 seconds)
    (224/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.262787741 seconds)
    (225/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.912248774 seconds)
    (226/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.709424109 seconds)
    (227/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.235165559 seconds)
    (228/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.517503839 seconds)
    (229/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.994692188 seconds)
    (230/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.358374526 seconds)
    (231/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.692858691 seconds)
    (232/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.55385906 seconds)
    (233/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.623510466 seconds)
    (234/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.231558337 seconds)
    (235/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.335081131 seconds)
    (236/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.681531384 seconds)
    (237/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.428856535 seconds)
    (238/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.455274633 seconds)
    (239/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.461274223 seconds)
    (240/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.536594726 seconds)
    (241/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.708075498 seconds)
    (242/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.47462465 seconds)
    (243/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.404058418 seconds)
    (244/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.549979879 seconds)
    (245/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.222451136 seconds)
    (246/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 4.221856564 seconds)
    (247/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.361779981 seconds)
    (248/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.538236883 seconds)
    (249/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.234844841 seconds)
    (250/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.217781861 seconds)
    (251/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.693058971 seconds)
    (252/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.323970077 seconds)
    (253/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.236732577 seconds)
    (254/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.51307958 seconds)
    (255/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.302198279 seconds)
    (256/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.867046351 seconds)
    (257/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.423901104 seconds)
    (258/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.432839529 seconds)
    (259/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 3.012562094 seconds)
    (260/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.518837852 seconds)
    (261/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.538660552 seconds)
    (262/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.653467777 seconds)
    (263/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.427128434 seconds)
    (264/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.247090072 seconds)
    (265/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.408437627 seconds)
    (266/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.307464944 seconds)
    (267/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.52765321 seconds)
    (268/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.235705141 seconds)
    (269/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.302964669 seconds)
    (270/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.291731825 seconds)
    (271/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.218057586 seconds)
    (272/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.833246049 seconds)
    (273/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.223586947 seconds)
    (274/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 3.790285243 seconds)
    (275/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.313840468 seconds)
    (276/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.254097275 seconds)
    (277/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.219049921 seconds)
    (278/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.541031466 seconds)
    (279/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 3.011221199 seconds)
    (280/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.240725905 seconds)
    (281/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.338396593 seconds)
    (282/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.440562012 seconds)
    (283/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.213463779 seconds)
    (284/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 4.149156946 seconds)
    (285/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.434104956 seconds)
    (286/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.633997712 seconds)
    (287/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.982813297 seconds)
    (288/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.418129154 seconds)
    (289/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.353232128 seconds)
    (290/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.229566242 seconds)
    (291/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.336314343 seconds)
    (292/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.421824706 seconds)
    (293/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.535506171 seconds)
    (294/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.22355409 seconds)
    (295/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.997077212 seconds)
    (296/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.225165652 seconds)
    (297/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.356008801 seconds)
    (298/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.354044483 seconds)
    (299/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.33575715 seconds)
    (300/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.295252656 seconds)
    (301/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 9.16358963 seconds)
    (302/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.609199913 seconds)
    (303/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.219341995 seconds)
    (304/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.701943909 seconds)
    (305/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.34833267 seconds)
    (306/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.2982754 seconds)
    (307/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.298897377 seconds)
    (308/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.726416367 seconds)
    (309/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.599386514 seconds)
    (310/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.477458188 seconds)
    (311/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.220764586 seconds)
    (312/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.475061481 seconds)
    (313/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.307368423 seconds)
    (314/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.329292432 seconds)
    (315/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.508413095 seconds)
    (316/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.11950836 seconds)
    (317/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.323865166 seconds)
    (318/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.368709678 seconds)
    (319/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.315398183 seconds)
    (320/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.232314932 seconds)
    (321/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.217678766 seconds)
    (322/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.305839171 seconds)
    (323/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.059251453 seconds)
    (324/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.995681941 seconds)
    (325/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.367828011 seconds)
    (326/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.21662687 seconds)
    (327/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.212848992 seconds)
    (328/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.213530299 seconds)
    (329/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.392694459 seconds)
    (330/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.570722665 seconds)
    (331/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.315062539 seconds)
    (332/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.651462874 seconds)
    (333/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.855163019 seconds)
    (334/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.326261109 seconds)
    (335/341) benchmarking ("sort", Float64, false)...
    done (took 5.941835761 seconds)
    (336/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.217430753 seconds)
    (337/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.220121695 seconds)
    (338/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.221041007 seconds)
    (339/341) benchmarking ("map", abs, BigInt, true)...
    done (took 9.382507922 seconds)
    (340/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.55787337 seconds)
    (341/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.4450596 seconds)
  done (took 1213.678995728 seconds)
done (took 1215.886149688 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.244949113 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.22029126 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.742238337 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.232964366 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.219972135 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.230479047 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.754958834 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.252726325 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.243986318 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.75798356 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.228369573 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.217966172 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.236009172 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.257363182 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.237042319 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.238561572 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.228288028 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.247869096 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.256155627 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.227889915 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.273950377 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.232619671 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.229070458 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.274296272 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.223920778 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.243719816 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.244429277 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.274401411 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.27497703 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.222797924 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.2347697 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.587877616 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.27412862 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.22824824 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.230983719 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.235184414 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.225517124 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.234514279 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.237532903 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.239268548 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.219367765 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.234312354 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.228290196 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.223447826 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.221699115 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.221511791 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.224922088 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.344918717 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.237706465 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.572983673 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.28756933 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.24143997 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.279364467 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.229863987 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.225621929 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.23118417 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.271741927 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.232209275 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.226873278 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.574747166 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.328604476 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.236200318 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.580234553 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.290047056 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.236408677 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.232630581 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.22531928 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.244170965 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.59515295 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.80086729 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.260898793 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.24855829 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.225589289 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.227639563 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.240101385 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.755826831 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.24164736 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.827006605 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.255984439 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.239785722 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.233642755 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.229199982 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.229513914 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.24214582 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.246472293 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.227004829 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.233761597 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.232549213 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.2426663 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.594959647 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.274328691 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.748600281 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.238544107 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.250061707 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.24929584 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.82791033 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.259397542 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.24701525 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.232629366 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.598750564 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.275906351 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.248331026 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.230048169 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.238379244 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.34141481 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.246243247 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.246314306 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.227157517 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.252140522 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.237089843 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.227129821 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.243231374 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.246240328 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.26295473 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.245861106 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.229325414 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.238074163 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.235710922 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.245728191 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.235841366 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.233415974 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.239812272 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.2301265 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.280116405 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.250796232 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.247422359 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.345283773 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.234942536 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.354863123 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.244390734 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.231622235 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.228313533 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.583214905 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.282606882 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.250075232 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.23330368 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.252114345 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.250331735 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.245964169 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.236656862 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.245938319 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.231204587 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.282523501 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.228273609 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.258007395 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.282718952 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.242850337 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.234866703 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.247072585 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.264885886 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.25195302 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.23538218 seconds)
done (took 350.517196871 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.276770855 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.231206441 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.30786974 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.231870707 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.298352273 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.281212327 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.230099218 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.230077181 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.229231845 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.612673769 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.230010419 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.240403991 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.231777175 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.231293346 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.280837415 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.231356841 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.230333622 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.466355235 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.229745376 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.290021526 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.232995089 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.23325279 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.231699281 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.616512283 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.229772264 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.229266752 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.293811984 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.231062443 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.472296199 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.235116729 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.232055485 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.471260877 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.296981914 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.241373869 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.241632945 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.238822118 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.297588808 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.240777139 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.279591148 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.280170991 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.309334775 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.266337462 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.235315713 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.233360295 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.237315652 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.234718097 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.23614901 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.265704456 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.232117975 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.238666635 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.467661604 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.239200313 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.245115076 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.229429223 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.232259378 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.247330351 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.235576802 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.236589304 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.2978871 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.233741689 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.280305254 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.622061632 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.616481998 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.232127368 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.232289802 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.232402536 seconds)
  done (took 207.934577046 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.298911632 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.318810032 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.300472181 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.23904083 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.285682165 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.296113871 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.238086017 seconds)
  done (took 18.126978235 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.240472001 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.234789411 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.256007705 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.256583412 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.235249799 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.373714559 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.247260192 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.24179164 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.259967861 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.235164183 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.568480206 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.259550288 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.238430412 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.232799995 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.247418276 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.26641622 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.236770431 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.233994343 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.33370071 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.315172216 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.24327011 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.24602913 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.265503345 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.249017706 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.237805329 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.237626778 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.235261427 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.243086511 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.239768226 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.238095428 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.237034642 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.24580062 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.235274774 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.236108148 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.23683577 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.239205645 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.235969103 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.237791262 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.237838305 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.235644521 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.236285648 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.235338638 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.235825318 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.234242358 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.237530438 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.261958044 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.237726063 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.234959567 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.237834783 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.235005704 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.264741463 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.239860348 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.237048425 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.242573591 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.275567511 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.246168202 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.236193684 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.238117468 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.241243128 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.238163252 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.238126491 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.318726494 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.26101417 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.236911706 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.263766839 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.275139718 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.237531726 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.236396241 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.23922678 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.261684656 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.237693665 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.259563911 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.240032932 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.333063592 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.239416741 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.386823239 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.261429892 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.241762684 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.241873533 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.240150303 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.247266325 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.241388641 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.238824071 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.246560207 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.245654308 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.238815843 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.238823148 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.241778776 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.247184683 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.241713066 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.284124034 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.240132446 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.239862437 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.336428906 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.239251889 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.338957748 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.267195422 seconds)
  done (took 240.951435667 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.244512302 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.239712979 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.251309855 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.244781701 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.243202769 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.244820665 seconds)
  done (took 15.623418594 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.244252475 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.245550085 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.239958704 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.238068553 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.241700628 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.241141485 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.239203078 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.241792921 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.246484777 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.239495034 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.242427174 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.241357892 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.240888367 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.237024816 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.240815159 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.238300523 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.239189347 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.242027555 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.239474369 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.242453391 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.485274104 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.241655978 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.24152744 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.245619229 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.246815076 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.242135401 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.251488505 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.241919862 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.239227758 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.246438207 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.244441116 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.243599788 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.247453927 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.249925146 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.24721463 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.246287917 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.250712003 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.24174484 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.244402344 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.241661204 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.242732326 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.241662871 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.243197244 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.245336817 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.242800296 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.251693325 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.249693707 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.251534907 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.241493713 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.24279964 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.242404623 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.245166125 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.243392902 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.247472546 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.24934449 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.252154421 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.251047799 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.244101026 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.244467217 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.248567854 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.247011429 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.245062361 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.246376357 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.252963487 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.249880232 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.246356043 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.250609956 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.250976224 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.247128677 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.241989503 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.242846393 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.246135099 seconds)
  done (took 165.009660738 seconds)
done (took 649.795879542 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.276035691 seconds)
  done (took 9.434010472 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.348820111 seconds)
  done (took 9.589244903 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 11.129649066 seconds)
  done (took 13.295270366 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.269441789 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.290562108 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.260991673 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.242229712 seconds)
  done (took 31.237723143 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.559357683 seconds)
  done (took 9.723298915 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.260750734 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.243975799 seconds)
  done (took 16.730600307 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.248574453 seconds)
  done (took 9.411522633 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.493940618 seconds)
  done (took 9.684220488 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.247448097 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.242403523 seconds)
  done (took 16.675420823 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.249642285 seconds)
  done (took 9.417416064 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.103815027 seconds)
  done (took 10.339144017 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.265069738 seconds)
  done (took 9.44760047 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.282435019 seconds)
  done (took 9.444551248 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.503226915 seconds)
  done (took 10.665678058 seconds)
done (took 177.254616589 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.253474515 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.243623896 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.243461768 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.244930501 seconds)
  done (took 31.148553554 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.2826246 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.279685658 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.286818083 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.281024887 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.273380844 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.271153829 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.281297167 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.280311892 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.269678082 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.277124664 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.280861079 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.275862578 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.280700174 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.292259797 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.29129031 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.280049519 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.281362049 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.280089321 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.267998913 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.291474876 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.283035559 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.282182387 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.249298051 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.246784496 seconds)
  done (took 56.830637725 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.439501623 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.315973031 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.403535996 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.302661569 seconds)
  done (took 11.628929421 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.249263298 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.311853262 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.298718263 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.293974293 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.300463941 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.350443977 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.302819521 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.383742125 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.378070119 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.373970789 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.256061329 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.272369015 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.276317877 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.298407333 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.352695311 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.249585297 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.251736454 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.367348907 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.311360582 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.493436832 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.251733217 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.307753223 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.303205341 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.302089384 seconds)
  done (took 57.703715223 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.250052113 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.257626741 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.259957911 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.251898666 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.252425262 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.250862214 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.257895563 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.255668428 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.273451535 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.255958532 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.254222184 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.251716629 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.258714241 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.25129784 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.251346363 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.263432475 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.265824516 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.251666345 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.256676534 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.256041438 seconds)
  done (took 47.29398344 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.247762017 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.094542192 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.595206373 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.501863446 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.250223076 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.254739563 seconds)
  done (took 34.112370514 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.263585632 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.273107277 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.259640611 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.277827973 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.298360632 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.262027825 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.311942738 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.417415 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.261188089 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.310643173 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.269196818 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.258204892 seconds)
  done (took 29.633445062 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.247590837 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.253421611 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.252751568 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.267315188 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.264194708 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.260906155 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.25491619 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.252199954 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.265668258 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.269850962 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.260877477 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.261441574 seconds)
  done (took 49.275879582 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.469053913 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.4768281 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.463890693 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.897708356 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.572858837 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.233415478 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.537363404 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.461190933 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.991418216 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.942671867 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.54631047 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.23509762 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.186680429 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.178921939 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.171285339 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.497933726 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.254500677 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.11419706 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.503405451 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.295643533 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.255049652 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.254311501 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.251547034 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.548032643 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.578971741 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.24994156 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.467834636 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.269045819 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.25562991 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.515097622 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.86970314 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.309991313 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.454166244 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.513987818 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.587804246 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.312870122 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.259362354 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.449123937 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.301175186 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.288067106 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.264248251 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.264662594 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.796665926 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.266547775 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.52516437 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.257676219 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.253559907 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.225049089 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.181566476 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.528727357 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.362163587 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.263616756 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.289820531 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.686870552 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.375155261 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.499533952 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.25984464 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.448730116 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.311850742 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.457324246 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.370707927 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.257872997 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.469303492 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.182862448 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.607406558 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.375299178 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.259800399 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.26149585 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.956540796 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.501780999 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.338475801 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.520807912 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.017282343 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.256902075 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.258927454 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.31018753 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.354231501 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.25668311 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.574536464 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.221373584 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.180086649 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.352059437 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.761481877 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.265827541 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.258838049 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.264848633 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.107967425 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.183318004 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.353910885 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.460467461 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.580121237 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.256947936 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.257217735 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.28123636 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.261801778 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.210581564 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.863305113 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.329410711 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.184825608 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.822112927 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.887128119 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.226458261 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.748701321 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.301742716 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.529482532 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.415567601 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.665128581 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.469074147 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.502933815 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.792594466 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.26145309 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.878055754 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.341248915 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.33868689 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.260769883 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.856200971 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.462462096 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.508131655 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.368429484 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.259533726 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.186601704 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.276079931 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.471345168 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.887950261 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.323952694 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.261137862 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.266343334 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.263098227 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.265424775 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.379594515 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.280256664 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.559365237 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.332842132 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.261719757 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.207528498 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.265882942 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.555003695 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.970197123 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.324725628 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.515146733 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.530071486 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.027252473 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.857983753 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.26534068 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.534264483 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.341063683 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.339657137 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.827532239 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.396082849 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.360331402 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.264831799 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.386045054 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.270689202 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.270936393 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.69870303 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.785003153 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.696124441 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.310077839 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.266074242 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.295877538 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.457816614 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.505627396 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.323589484 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.290843665 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.273864965 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.352194469 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.496441445 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.264860587 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.195123251 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.5063521 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.509114561 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.555511068 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.679356968 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.331537013 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.341512153 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.279573718 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.484324394 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.348887046 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.963938755 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.829180647 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.482321002 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.861033128 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.232013963 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.934116079 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.478848899 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.64310237 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.285398504 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.720313561 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.483033906 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.984728451 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.297891109 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.793269462 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.192143613 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.272005376 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.598625837 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.217454699 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.580599583 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.324325516 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.281167315 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.273483413 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.26867842 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.276189495 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.175716618 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.379164319 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.334992568 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.342321546 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.196438332 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.947494795 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.310753685 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.268431322 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.272568595 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.586544961 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.104433084 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.225375788 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.264796666 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.343750368 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.040237669 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.824717481 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.276580134 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.275379702 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.903144392 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.273269359 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.866762969 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.306380348 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.016440366 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.294859691 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.474827163 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.964912364 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.565629504 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.346275602 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.344969724 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.272596632 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.280812643 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.971457923 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.279937059 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.97180268 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.558889843 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.546456377 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.70639765 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.328011643 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.480954257 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.285408706 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.271182237 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.76160664 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.298051381 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.273007064 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.474031185 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.797123253 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.547208476 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.907247295 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.360765078 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.274194818 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.538220729 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.269758997 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.890435464 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.958264251 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.266698577 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.275251765 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.522268263 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.958552463 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.272803224 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.245576099 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.278406587 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.487439381 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.475916887 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.540566985 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.562070153 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.721986347 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.201056122 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.276497257 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.314760659 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.519880179 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.274747644 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.312234929 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.781356881 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.328753579 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.700947255 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.550408708 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.60658323 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.900525071 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.54063048 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.338417718 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.288494927 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.92329968 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.393087178 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.207380774 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.3922453 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.202358473 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.950124979 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.563067196 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.294203507 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.537804467 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.249457047 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.605672575 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.571960044 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.481205889 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.321243742 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.307350276 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.276867883 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.30832227 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.273903119 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.499675055 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.39347249 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.278593846 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.84844912 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.314945417 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.321128612 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.276234821 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.765274099 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.295200966 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.277624634 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.033742608 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.298251046 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.394040907 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.347749167 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.015157651 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.958828266 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.299619793 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.230593132 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.929452083 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.539482871 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.332413604 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.724326821 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.310700617 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.683868353 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.274894209 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.492601821 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.28218714 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.888083768 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.32608392 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.54200482 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.227488836 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.487303437 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.475582308 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.303695122 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.283567226 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.203263664 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.443049553 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.179353291 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.261283531 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.281973362 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.965473283 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.670366635 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.51095465 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.707223682 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.099343914 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.27744981 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.614850002 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.681994095 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.948392408 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.309313708 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.278465194 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.563987478 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.405813952 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.548135436 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.565533487 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.28413173 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.303060992 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.496272611 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.400628208 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.196230599 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.766378166 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.871211121 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.979835303 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.286998098 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.486120651 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.553693089 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.590145853 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.316920682 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.354165566 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.684596201 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.543670851 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.34897998 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.205645824 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.281197494 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.681773108 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.798409211 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.376440703 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.521735371 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.594068548 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.953112258 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.956083969 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.751063308 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.731358783 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.743340314 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.685432463 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.486492826 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.63854184 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.604055867 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.875657096 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.691701504 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.49156113 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.37658634 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.55225492 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.144828148 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.989243702 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.52386391 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.283418495 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.210886541 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.490330324 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.390591076 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.641665213 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.964718067 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.530256568 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.480163098 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.788165507 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.824282237 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.495827244 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.306557225 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.253735835 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.305773031 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.304316462 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.280909327 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.767433038 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.572600771 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.294324831 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.233360654 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.954118716 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.209179218 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.497440507 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.492906082 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.315149856 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.847703297 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.495488178 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.376131688 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.574418799 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.552649132 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.319720981 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.208712768 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.025929912 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.230027878 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.338348872 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.709910577 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.295268925 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.28539913 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.485863192 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.213339646 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.324990504 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.287083102 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.475577169 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.881522369 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.555627078 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.407336656 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.522141573 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.580975429 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.155110196 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.305001227 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.559041143 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.209587442 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.949587011 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.977494115 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.325879761 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.352333421 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.280900272 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.286231173 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.556183605 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.557880167 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.487541077 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.930780104 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.317999521 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.306596142 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.553492474 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.367426446 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.285381933 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.290770977 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.812774387 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.518754006 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.28461552 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.251592633 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.497683116 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.359743762 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.478178136 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.361709315 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.802092018 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.289972604 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.126942907 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.379424822 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.228257361 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.312647612 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.030579781 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.348866707 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.28364666 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.551724305 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.914965614 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.488713718 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.68731204 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.182883627 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.506352511 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.329197879 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.288474154 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.390278967 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.586725256 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.585234437 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.286471335 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.557516601 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.331485591 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.291972891 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.948549209 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.257766573 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.28447648 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.032358355 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.206437672 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 5.016870785 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.685313808 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.32105692 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.291264116 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.291350683 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.21527183 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.285968068 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.462632998 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.266330398 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.410683081 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.556093465 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.548233632 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.368752011 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.291736796 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.289848664 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.291054084 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.503638628 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.801520312 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.304334359 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.990268866 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.494280179 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.290931285 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.77613751 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.729465031 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.583191984 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.329214521 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.499188574 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.526586869 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.938858536 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.500810239 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.257888139 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.514858763 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.289222461 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.564999252 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.563225827 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.286746507 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.502121603 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.922026505 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.576527952 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.655677693 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.606289972 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.34916805 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.521685605 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.225559958 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.296204632 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.297672181 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.554796084 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.341883838 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.289693003 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.296864345 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.932395241 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.044353848 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.7578566 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.439721167 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.564507818 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.064390931 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 5.041752333 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.292973712 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.214642645 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.291700416 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.315289935 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.295559762 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.217612267 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.031449171 seconds)
    (567/608) benchmarking "2d"...
    done (took 3.012228 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.504618028 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.602798885 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.218040073 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.494337627 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.901409356 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.217155116 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.262415969 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.340093999 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.538431887 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.22361758 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.294528361 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.245208398 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.518111094 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.055049883 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.560362182 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.293894933 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.245881045 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.299425 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.29374778 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.293433202 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.38234355 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.293699489 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.410480031 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.554961129 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.620168033 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.391928948 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.939706974 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.041372629 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.230943883 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.339518781 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.913029671 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.859892511 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.526362377 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.419080714 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.973912898 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.239326744 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.300530727 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.309746483 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.536251693 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.298663035 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.297248639 seconds)
  done (took 2326.85510283 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.35375954 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.372215305 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.378172882 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.344439817 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.376952346 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.394282239 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.388976516 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.318123536 seconds)
  done (took 61.136973299 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.295725223 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.570389347 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.331713114 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.294542549 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.292947036 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.296795206 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.494024192 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.327895167 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.294140554 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.324762891 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.296586256 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.298550415 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.294977971 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.294290067 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.299406247 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.571697704 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.319102027 seconds)
  done (took 84.146941334 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.355994627 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.180226079 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.299000686 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.065798702 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.317898118 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.668657818 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.301758642 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.298031006 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.451448143 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.598458292 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.314351188 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.300995192 seconds)
  done (took 95.366004413 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.298078493 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.298860441 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.297074411 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.296372162 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.297157499 seconds)
  done (took 13.702167984 seconds)
done (took 2901.063329568 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.541137039 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.394708665 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.370371317 seconds)
  done (took 6.977022017 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.440671797 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.49247999 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.638093621 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.626778803 seconds)
  done (took 12.416562799 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.576401428 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.677497517 seconds)
  done (took 7.467814211 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.673133908 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.316843728 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.690372891 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.302007256 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.303221954 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.302097706 seconds)
  done (took 24.125966927 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.299014053 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.296872396 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.299900206 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.299845512 seconds)
  done (took 11.40803776 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.295775066 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.084172688 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.299984226 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.311282175 seconds)
  done (took 23.205415881 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.505561125 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.306947383 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 3.06399758 seconds)
  done (took 11.089425407 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.925741991 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.745357953 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.902843781 seconds)
  done (took 10.785319282 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.438866258 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.137491273 seconds)
  done (took 8.791727346 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.444048865 seconds)
  done (took 4.656416893 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.124222948 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.61033688 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.770968629 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.812876707 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.876736678 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.518597061 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.627177886 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.573216893 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.69184423 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.70470356 seconds)
  done (took 29.523631357 seconds)
done (took 167.881423429 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.742805421 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.346651402 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.508556482 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.688422699 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.543013509 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.506276502 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.716410031 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.676030417 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.365298822 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.349968567 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.693178628 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.548710168 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.665902787 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.344352965 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.671019635 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.348684112 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.545033918 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.774349524 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.379997001 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.59319746 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.722987737 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.338341962 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.531933525 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.35215558 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.547623593 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.462887185 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.940153233 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.350246671 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.529693404 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.954435833 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.462902768 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.738038427 seconds)
  done (took 184.156953488 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.19422852 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.303084069 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.305130544 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.302711666 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.67499177 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.300791714 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.299349119 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.300763156 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.548928104 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.538411497 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.301137131 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.653219753 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.301446673 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.298797375 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.303488893 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.303279646 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.650912222 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.229204807 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.300187627 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.302797897 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.30313997 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.553265145 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.302325472 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.57899004 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.629966959 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.300947358 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.30297433 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.303887075 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.302879536 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.302783837 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.304898773 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.303052135 seconds)
  done (took 222.120105264 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.301613218 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.305973888 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.304129087 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.303478652 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.302728094 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.303949903 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.303530908 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.302790726 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.993305974 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.983259236 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.302708868 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.304067988 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.309077332 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.301814576 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.312430623 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.306050548 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.301825037 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.303270055 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.3037853 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.307901657 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.309113902 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.186098118 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.303619201 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.20348465 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.308117001 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.307285351 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.304238519 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.306203452 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.305087385 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.304343119 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.305752028 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.304161134 seconds)
  done (took 235.124674899 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.545353487 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.301451551 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.307597589 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.319820438 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.306207263 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.303115605 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.316616043 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.551898075 seconds)
  done (took 23.174564174 seconds)
done (took 666.804609625 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.695788432 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 3.046715332 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.43938092 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.3304983 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.605569987 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.371767164 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.322526436 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.389403247 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.975937106 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.401198725 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.747470819 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.33137916 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 3.071397788 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.350864256 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.438719984 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.387546025 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.673710035 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.933708377 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.467254535 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.992844349 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.530187856 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.28121065 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.408595313 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 3.020559138 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.759845106 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.297849719 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.331925967 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.676607674 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.329713814 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.557961926 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.992633144 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.581357074 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.339110001 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.324425342 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.382894323 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.367630355 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.518793845 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.338571348 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.438698471 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 3.074075816 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 3.000597372 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.856742911 seconds)
  done (took 118.603836313 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.313207256 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.311215048 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.311589327 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.314044508 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.321147115 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.312595045 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.315156686 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.312745083 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.311438269 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.315122656 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.312587296 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.320825728 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.314435717 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.32125019 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.314038987 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.314160701 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.314512864 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.324585899 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.312783136 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.315632275 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.313695797 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.314114444 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.309415515 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.312469223 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.315458027 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.315683438 seconds)
  done (took 62.412727444 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.307816582 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.464876399 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.602034199 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.345055867 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.310454137 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.31298874 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.337634495 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.316897938 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.311528349 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.310514996 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.401486629 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.313786693 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.32069774 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.595213157 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.341653011 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.308230392 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.309184211 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.310325241 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.468940132 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.327808006 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.342823434 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.317643901 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.342843847 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.327398087 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.313026771 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.311791988 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.31441416 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.719514685 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.324024728 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.406152244 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.355654875 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.345973125 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.660275315 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.607287461 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.380198439 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.320899371 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.309226149 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.448295033 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.325262789 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.311271135 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.340214468 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.320931226 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.597116866 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.818560545 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.326233359 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.311362649 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.721493063 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.458880334 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.359769403 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.32568645 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.603321455 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.342173786 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.31170184 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.312570079 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.348512095 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.321505584 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.312614559 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.554255759 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.329071418 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.340360464 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.318994073 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.31370224 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.478054178 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.322560877 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.465764724 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.321817217 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.31969907 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.315607083 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.602443558 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.345082326 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.809127136 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.328463969 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.311666235 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.404625409 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.4695696 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.742402611 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.331611884 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.47815739 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.678023539 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.35243828 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.323375303 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.70460307 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.35505401 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.323328123 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.313876993 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.31418529 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.314366664 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.35624019 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.340895941 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.730522553 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.819358423 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.579540932 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.356083404 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.330432203 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.316604048 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.556166575 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.326038586 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.313515021 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.600492643 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.842486747 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.331233301 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.320501695 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.796707626 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.330540381 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.343725596 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.329383563 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.611198221 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.34325307 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.358592649 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.315140752 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.32114334 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.319032791 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.34551413 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.325326996 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.313792125 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.787839955 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.467655622 seconds)
  done (took 284.471088109 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.321183385 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.313213497 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.315537166 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.313656482 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.314455527 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.315804996 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.315007461 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.3135741 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.315063487 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.314694678 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.314626181 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.314320139 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.313849859 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.326351128 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.759896331 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.320021052 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.803282536 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.315667689 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.316638453 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.31757388 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.941716604 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.324224587 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.316669061 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.316700283 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.318057551 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.317851423 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.324927669 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.359820774 seconds)
  done (took 180.711568367 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.315512866 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.385295596 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.331985878 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.368522083 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.329677686 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.316178468 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.336941208 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.33917132 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.327918233 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.316430167 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.320039907 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.345142112 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.326761829 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.457712091 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.356502095 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.351736438 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.400318568 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.323842556 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.318115683 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.317369719 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.368764717 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.332253065 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.347198032 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.375068352 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.333303049 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.366362389 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.333470796 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.31914408 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.317090807 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.42361843 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.336752683 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.347715206 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.355034768 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.33962132 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.41666895 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.413059061 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.401068808 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.349454372 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.32460484 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.320469435 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.320292964 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.320250756 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.367487179 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.333865418 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.320582538 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.412273084 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.339073101 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.321784413 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.340130038 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.320977657 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.332054236 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.339323669 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.35546033 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.425103345 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.366763023 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.348974203 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.343993078 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.341527292 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.321629227 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.397670178 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.327858249 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.415217329 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.342302078 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.32226609 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.321147383 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.325955836 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.369651964 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.358377516 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.405593356 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.329399153 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.397063211 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.376764426 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.337038679 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.321309904 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.323678902 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.370866718 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.412656142 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.378589432 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.383973598 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.358510048 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.333866207 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.321175864 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.323235153 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.350393702 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.332478704 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.413977677 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.41531097 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.329555303 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.322422844 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.324733442 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.323195001 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.345962574 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.383735623 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.368569467 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.41244468 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.356207227 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.36182004 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.331679354 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.334042337 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.328336252 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.354333215 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.331799456 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.335446403 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.675995267 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.360151481 seconds)
  done (took 249.460857371 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.683598622 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.373224385 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.392566001 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.597353005 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.718723489 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.473022776 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.364068708 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.377587057 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.381815373 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.491047054 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.429199486 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.415646462 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.360079505 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.34409878 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.373282441 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.380707673 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.402423614 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.677675778 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.47617531 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.161126351 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.363223018 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.654042684 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.659669126 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.712546016 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.413361852 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.768313133 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 3.021146028 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.464296362 seconds)
  done (took 75.17410527 seconds)
done (took 973.056990513 seconds)
SAVING RESULT...
DONE!
